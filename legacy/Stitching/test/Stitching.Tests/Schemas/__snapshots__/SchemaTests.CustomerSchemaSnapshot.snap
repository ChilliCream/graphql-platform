schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Consultant implements Node {
  id: ID!
  name: String!
  customers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): CustomersConnection
}

type CreateCustomerPayload {
  customer: Customer!
}

type Customer implements Node {
  id: ID!
  name: String!
  street: String!
  consultant: Consultant
  say(input: SayInput!): String
  complexArg(arg: ComplexInputType): String
  someInt: Int!
  someGuid: UUID!
  kind: CustomerKind!
}

"A connection to a list of items."
type CustomersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CustomersEdge!]
  "A flattened list of the nodes."
  nodes: [Customer]
}

"An edge in a connection."
type CustomersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Customer
}

type Mutation {
  createCustomer(input: CreateCustomerInput!): CreateCustomerPayload!
  createCustomers(inputs: [CreateCustomerInput!]!): [CreateCustomerPayload!]!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  customer(id: ID!): Customer
  customers(ids: [ID!]!): [Customer]
  consultant(id: ID!): Consultant
  customerOrConsultant(id: ID!): CustomerOrConsultant
  customerByKind(kind: CustomerKind!): Customer
  allCustomers: [Customer!]!
}

union CustomerOrConsultant = Customer | Consultant

input ComplexInputType {
  value: String
  deeper: ComplexInputType
  valueArray: [String]
  deeperArray: [ComplexInputType]
}

input CreateCustomerInput {
  name: String
  street: String
  consultantId: String
}

input SayInput {
  words: [String!]
}

enum CustomerKind {
  STANDARD
  PREMIUM
}

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
