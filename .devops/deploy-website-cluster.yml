trigger:
  batch: true
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - .devops/deploy-website-cluster.yml
      - .docker/website
      - website

pr: none

pool:
  vmImage: "ubuntu-20.04"

steps:
  - task: DockerInstaller@0
    displayName: "Install Docker"
    inputs:
      dockerVersion: "17.09.0-ce"

  - task: KubectlInstaller@0
    displayName: "Install Kubectl"
    inputs:
      kubectlVersion: "latest"

  - task: NodeTool@0
    displayName: "Install Node.js"
    inputs:
      versionSpec: "14.x"
      checkLatest: true

  # Can be uncommented as of Node 16.10
  # - script: "corepack enable"
  #   displayName: "Enable CorePack"
  #   workingDirectory: $(projectDirectory)

  # Can be removed as of Node 16.10
  - script: "npm i -g corepack"
    displayName: "Install CorePack"
    workingDirectory: "website"

  - script: "yarn --frozen-lockfile --network-timeout 100000"
    displayName: "Install Packages"
    workingDirectory: "website"

  - script: "yarn build --prefix-paths"
    displayName: "Build Website"
    workingDirectory: "website"

  - task: Docker@2
    displayName: "Build WebSite Container"
    inputs:
      containerRegistry: "$(container-registry)"
      repository: "ccc-website-$(Build.SourceBranchName)"
      command: "buildAndPush"
      Dockerfile: ".docker/website/dockerfile"
      buildContext: "."

  - task: Kubernetes@1
    displayName: "Deploy WebSite Service"
    inputs:
      connectionType: "Kubernetes Service Connection"
      kubernetesServiceEndpoint: "$(aks-cluster)"
      namespace: "$(portal-namespace)"
      command: "apply"
      useConfigurationFile: true
      configurationType: "inline"
      inline: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ccc-website-$(Build.SourceBranchName)
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: ccc-website-$(Build.SourceBranchName)
          template:
            metadata:
              labels:
                app: ccc-website-$(Build.SourceBranchName)
            spec:
              containers:
                - image: $(container-registry-domain)/ccc-website-$(Build.SourceBranchName):$(Build.BuildId)
                  resources:
                    limits:
                      memory: "128Mi"
                      cpu: "500m"
                    requests:
                      memory: "32Mi"
                      cpu: "1m"
                  name: ccc-website-$(Build.SourceBranchName)
                  ports:
                    - containerPort: 80
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: ccc-website-$(Build.SourceBranchName)
        spec:
          type: ClusterIP
          ports:
          - port: 80
          selector:
            app: ccc-website-$(Build.SourceBranchName)
      secretType: "dockerRegistry"
      containerRegistryType: "Azure Container Registry"
