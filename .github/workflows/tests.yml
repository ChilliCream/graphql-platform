name: Tests

on:
  pull_request:
    branches:
      - main

jobs:
  website-tests:
    name: "Website Tests"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
        cache: 'yarn'
        cache-dependency-path: 'website/yarn.lock'

    - name: Cache Yarn Packages
      uses: actions/cache@v3
      with:
        path: |
          website/.yarn/cache
          website/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('website/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Packages
      run: yarn --immutable --network-timeout 100000
      working-directory: website

    - name: Build Website
      run: yarn build --prefix-paths
      working-directory: website

  library-tests:
    name: Run ${{ matrix.test }} on ubuntu-latest
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test:
          - TestCookieCrumble
          - TestGreenDonut
          - TestHotChocolateAnalyzers
          - TestHotChocolateApolloFederation
          - TestHotChocolateAspNetCore
          - TestHotChocolateAzureFunctions
          - TestHotChocolateCodeGeneration
          - TestHotChocolateCaching
          - TestHotChocolateCore
          - TestHotChocolateData
          - TestHotChocolateDiagnostics
          - TestHotChocolateFilters
          - TestHotChocolateFusion
          - TestHotChocolateLanguage
          - TestHotChocolateMarten
          - TestHotChocolateMongoDb
          - TestHotChocolateNeo4J
          - TestHotChocolatePersistedQueries
          - TestHotChocolateRaven
          - TestHotChocolateSkimmed
          - TestHotChocolateSpatial
          - TestHotChocolateStitching
          - TestHotChocolateUtilities
          - TestStrawberryShakeClient
          - TestStrawberryShakeCodeGeneration
          - TestStrawberryShakeTooling

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.x
            7.x
            8.x

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Run Tests
        run: ./build.cmd ${{ matrix.test }} --enableCoverage
        timeout-minutes: 15
        continue-on-error: true

      - name: Upload Individual Coverage Files as Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-${{ matrix.test }}
          path: output/test-results/${{ matrix.test }}.coverage.opencover.xml

      - name: Fail if tests failed
        run: exit 1
        if: steps.library-tests.outcome == 'failure'

  merge-coverage:
    name: Merge and Upload Coverage
    needs: library-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.x

    - name: Download all coverage artifacts
      uses: actions/download-artifact@v2

    - name: Merge Coverage Files
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator "-reports:**/*.coverage.opencover.xml" "-targetdir:./output/coverage/merged" -reporttypes:Opencover

    - name: Upload Combined Coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./output/coverage/merged/merged.opencover.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        name: graphql-platform
        flags: unittests
        fail_ci_if_error: true
