name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - main-version-*
    paths-ignore:
      - 'src/HotChocolate/AspNetCore/benchmarks/k6/performance-data.json'

concurrency:
  group: ci-new-2-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      website_changes: ${{ steps.check-website.outputs.website_changes }}
      library_changes: ${{ steps.check-library.outputs.library_changes }}
      src_changes: ${{ steps.check-src.outputs.src_changes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          show-progress: false

      - name: Check for changes in website directory
        id: check-website
        run: |
          changes=$(git diff --name-only HEAD~1 HEAD -- ./website)
          if [[ -n "$changes" ]]; then
            echo "::set-output name=website_changes::true"
          else
            echo "::set-output name=website_changes::false"
          fi

      - name: Check for changes outside website directory
        id: check-library
        run: |
          changes=$(git diff --name-only HEAD~1 HEAD -- ':!./website')
          if [[ -n "$changes" ]]; then
            echo "::set-output name=library_changes::true"
          else
            echo "::set-output name=library_changes::false"
          fi

      - name: Check for changes in src directory
        id: check-src
        run: |
          changes=$(git diff --name-only HEAD~1 HEAD -- ./src)
          if [[ -n "$changes" ]]; then
            echo "::set-output name=src_changes::true"
          else
            echo "::set-output name=src_changes::false"
          fi

  spellcheck:
    name: "Spellcheck Documentation"
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.website_changes == 'true'
    steps:
      - uses: actions/checkout@v4
        name: Check out the code
        with:
          show-progress: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install cspell
        run: npm install -g cspell

      - name: run cspell
        run: cspell --config ./cspell.json "website/src/**/*.md" --no-progress --no-cache

  linting:
    name: "Markdown linting"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Check out the code
        with:
          show-progress: false
      - uses: actions/setup-node@v4
        name: Setup node
        with:
          node-version: 22
      - run: npm install -g markdownlint-cli2
        name: Install markdownlint-cli2
      - run: markdownlint-cli2 "*.md" "website/src/**/*.md"
        name: run Markdownlint

  website-tests:
    name: "Website Tests"
    needs: check-changes
    if: needs.check-changes.outputs.website_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "yarn"
          cache-dependency-path: "website/yarn.lock"

      - name: Cache Yarn Packages
        uses: actions/cache@v4
        with:
          path: |
            website/.yarn/cache
            website/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('website/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Packages
        run: yarn --immutable --network-timeout 100000
        working-directory: website

      - name: Build Website
        run: yarn build --prefix-paths
        working-directory: website

  configure:
    name: Generate Test Matrix
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.library_changes == 'true'

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout to repository
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 10.x

      - name: Generate Test Matrix
        run: dotnet run --project ./.build -- GenerateMatrix

      - name: Export Test Matrix
        id: set-matrix
        run: echo "matrix=$(jq -c . < ./matrix.json)" >> $GITHUB_OUTPUT

  library-tests:
    name: Run ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: [configure, check-changes]
    if: needs.check-changes.outputs.library_changes == 'true'
    env:
      DOCKER_CONFIG: ${{ github.workspace }}/.docker

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.configure.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x
            10.x

      - name: Run Build
        id: run-build
        run: dotnet build ${{ matrix.path }} --framework net10.0 --verbosity q
        timeout-minutes: 5

      - name: Log in to Docker Hub
        # Run step only if branch is local (not from a fork).
        if: >
          github.event_name != 'pull_request' ||
          (github.event_name == 'pull_request' &&
           github.event.pull_request.head.repo.full_name == github.repository)
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run tests
        id: run-tests
        timeout-minutes: 15
        continue-on-error: false
        run: >
          dotnet test ${{ matrix.path }}
          --collect:"XPlat Code Coverage;Format=opencover"
          --framework net10.0
          --logger trx
          --no-build
          --
          DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByFile="**/test/**"
        env:
          CI_BUILD: true

      - name: Upload Test Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.name }}
          path: ${{ matrix.directoryPath }}/TestResults/*.trx

      - name: Upload Coverage File as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.name }}
          # The * matches a single directory that is named with a GUID.
          # Take note of https://github.com/microsoft/vstest/issues/2334.
          path: ${{ matrix.directoryPath }}/TestResults/*/coverage.opencover.xml

      - name: Upload mismatch files as Artifact
        if: steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: mismatch-files-${{ matrix.name }}
          path: ${{ matrix.directoryPath }}/**/__mismatch__/*

  upload-coverage:
    name: Upload Coverage
    needs: library-tests
    runs-on: ubuntu-latest
    steps:
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./output/download
          pattern: coverage-*

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        timeout-minutes: 10
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: graphql-platform
          files: "./output/download/coverage-*/*/coverage.opencover.xml"
          disable_search: true
          flags: unittests
          fail_ci_if_error: true

  performance-tests:
    name: "Performance Tests"
    needs: check-changes
    if: needs.check-changes.outputs.src_changes == 'true' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          show-progress: false

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x
            10.x

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Restore dependencies
        run: dotnet restore src/HotChocolate/AspNetCore/benchmarks/k6/eShop.slnx

      - name: Start AppHost and wait for readiness
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6/Catalog.AppHost
        run: |
          echo "Starting AppHost..."
          dotnet run > /tmp/apphost.log 2>&1 &
          APPHOST_PID=$!
          echo "APPHOST_PID=$APPHOST_PID" >> $GITHUB_ENV

          echo "Waiting for server to be ready..."
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5224/graphql -X POST \
              -H "Content-Type: application/json" \
              -d '{"query": "{ __typename }"}' | grep -q "200"; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: Run performance tests and collect data
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6
        run: |
          chmod +x run-and-collect.sh
          ./run-and-collect.sh performance-data-current.json

      - name: Stop AppHost
        if: always()
        run: |
          if [ -n "$APPHOST_PID" ]; then
            kill $APPHOST_PID 2>/dev/null || true
            wait $APPHOST_PID 2>/dev/null || true
          fi

      - name: Commit and push performance data to current branch
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6
        run: |
          # Copy the performance data to the tracked filename
          cp performance-data-current.json performance-data.json

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add and commit the performance data
          git add performance-data.json

          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Update performance data [skip ci]"
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "No changes to performance data"
          fi

      - name: Fetch baseline performance data from main
        run: |
          git fetch origin main:main
          if git show main:src/HotChocolate/AspNetCore/benchmarks/k6/performance-data.json > baseline-performance.json 2>/dev/null; then
            echo "Baseline data fetched successfully"
            cat baseline-performance.json
          else
            echo "No baseline data found on main branch"
            # Don't create the file - let the comparison script handle missing baseline
            rm -f baseline-performance.json
          fi

      - name: Compare performance and generate report
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6
        run: |
          chmod +x compare-performance.sh
          ./compare-performance.sh performance-data-current.json ../../../../../baseline-performance.json performance-report.md

      - name: Comment PR with performance report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportPath = 'src/HotChocolate/AspNetCore/benchmarks/k6/performance-report.md';

            let report;
            try {
              report = fs.readFileSync(reportPath, 'utf8');
            } catch (error) {
              console.error('Failed to read performance report:', error);
              return;
            }

            // Add timestamp and commit info to the report
            const timestamp = new Date().toUTCString();
            const commitSha = context.sha.substring(0, 7);
            const runNumber = context.runNumber;

            const commentBody = `${report}\n\n---\n*Run #${runNumber} • Commit ${commitSha} • ${timestamp}*`;

            // Always create a new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody,
            });

      - name: Upload performance data as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-data
          path: |
            src/HotChocolate/AspNetCore/benchmarks/k6/performance-data-current.json
            src/HotChocolate/AspNetCore/benchmarks/k6/performance-report.md
            /tmp/apphost.log
          retention-days: 30

      - name: Check for performance regression
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6
        run: |
          # Fail the build if there's a significant performance regression
          if grep -q "⚠️ \*\*Performance regression detected" performance-report.md; then
            echo "::warning::Performance regression detected! Please review the performance report."
            # Uncomment the next line to fail the build on regression
            # exit 1
          fi

  ci-status-check:
    name: "CI Status Check"
    needs: [library-tests, website-tests, performance-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check if Library Tests or Website Tests failed
        run: exit 1
        if: |
          always() &&
          (needs.library-tests.result == 'failure' ||
           needs.website-tests.result == 'failure' ||
           needs.performance-tests.result == 'failure')
