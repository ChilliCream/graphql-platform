name: CI

on:
  pull_request:
    branches:
      - main

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      website_changes: ${{ steps.check-website.outputs.website_changes }}
      library_changes: ${{ steps.check-library.outputs.library_changes }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Check for changes in website directory
      id: check-website
      run: |
        changes=$(git diff --name-only HEAD~1 HEAD -- ./website)
        if [[ -n "$changes" ]]; then
          echo "::set-output name=website_changes::true"
        else
          echo "::set-output name=website_changes::false"
        fi

    - name: Check for changes outside website directory
      id: check-library
      run: |
        changes=$(git diff --name-only HEAD~1 HEAD -- ':!./website')
        if [[ -n "$changes" ]]; then
          echo "::set-output name=library_changes::true"
        else
          echo "::set-output name=library_changes::false"
        fi

  pr-labeler:
    runs-on: ubuntu-latest
    name: Apply Labels
    steps:
      - uses: actions/labeler@v3
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"

  spellcheck:
    name: "Spellcheck Documentation"
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.website_changes == 'true'
    steps:
    - uses: actions/checkout@v2
      name: Check out the code

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
        cache: 'yarn'
        cache-dependency-path: 'website/yarn.lock'

    - name: Install cspell
      run: npm install -g cspell

    - name: run cspell
      run: cspell --config ./cSpell.json "website/src/**/*.md" --no-progress

  website-tests:
    name: "Website Tests"
    needs: check-changes
    if: needs.check-changes.outputs.website_changes == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
        cache: 'yarn'
        cache-dependency-path: 'website/yarn.lock'

    - name: Cache Yarn Packages
      uses: actions/cache@v3
      with:
        path: |
          website/.yarn/cache
          website/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('website/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Packages
      run: yarn --immutable --network-timeout 100000
      working-directory: website

    - name: Build Website
      run: yarn build --prefix-paths
      working-directory: website

  library-tests:
    name: Run ${{ matrix.test }} on ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.library_changes == 'true'
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test:
          - TestCookieCrumble
          - TestGreenDonut
          - TestHotChocolateAnalyzers
          - TestHotChocolateApolloFederation
          - TestHotChocolateAspNetCore
          - TestHotChocolateAzureFunctions
          - TestHotChocolateCodeGeneration
          - TestHotChocolateCaching
          - TestHotChocolateCore
          - TestHotChocolateData
          - TestHotChocolateDiagnostics
          - TestHotChocolateFilters
          - TestHotChocolateFusion
          - TestHotChocolateLanguage
          - TestHotChocolateMarten
          - TestHotChocolateMongoDb
          - TestHotChocolateNeo4J
          - TestHotChocolatePersistedQueries
          - TestHotChocolateRaven
          - TestHotChocolateSkimmed
          - TestHotChocolateSpatial
          - TestHotChocolateStitching
          - TestHotChocolateUtilities
          - TestStrawberryShakeClient
          - TestStrawberryShakeCodeGeneration
          - TestStrawberryShakeTooling

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.x
            7.x
            8.x

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Run Tests
        id: run-tests
        run: ./build.cmd ${{ matrix.test }} --enableCoverage
        timeout-minutes: 18
        continue-on-error: true

      - name: Upload Individual Coverage Files as Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-${{ matrix.test }}
          path: output/test-results/**/*.xml

      - name: Fail if tests failed or were cancelled
        run: exit 1
        if: |
          steps.run-tests.outcome == 'failure' ||
          steps.run-tests.outcome == 'cancelled'

  sonar:
    runs-on: ubuntu-latest
    name: Sonar Pull-Request
    needs: check-changes
    if: needs.check-changes.outputs.library_changes == 'true'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        architecture: x64

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.x
          7.x
          8.x

    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Run Sonar Analysis
      run: ./build.cmd SonarPr --SonarToken $SONARTOKEN
      env:
        HC_GITHUB_PR_NR: ${{ github.event.pull_request.number }}
        HC_GITHUB_HEAD_REF: ${{ github.event.pull_request.head.ref }}
        HC_GITHUB_BASE_REF: ${{ github.event.pull_request.base.ref }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        SONARTOKEN: ${{ secrets.SONARTOKEN }}

  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.library_changes == 'true'
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.x
          7.x
          8.x

    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore
      run: ./build.sh restore

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: csharp

    - name: Build
      run: dotnet build ./src/All.sln --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  merge-coverage:
    name: Merge and Upload Coverage
    needs: library-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.x
          7.x
          8.x

    - name: Download all coverage artifacts
      uses: actions/download-artifact@v2
      with:
        path: ./output/download

    - name: Merge Coverage Files
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator "-reports:./output/download/**/*.xml" "-targetdir:./output/coverage/merged" -reporttypes:Opencover

    - name: Upload Combined Coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./output/coverage/merged/merged.opencover.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        name: graphql-platform
        flags: unittests
        fail_ci_if_error: true

  ci-status-check:
    name: "CI Status Check"
    needs: [library-tests, website-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Check if Library Tests or Website Tests failed
      run: exit 1
      if: |
        always() &&
        (needs.library-tests.result == 'failure' ||
         needs.website-tests.result == 'failure')
