name: Benchmarks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - main-version-*
    paths-ignore:
      - "src/HotChocolate/AspNetCore/benchmarks/k6/performance-data.json"

concurrency:
  group: benchmarks-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      src_changes: ${{ steps.check-src.outputs.src_changes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          show-progress: false

      - name: Check for changes in src directory or workflow files
        id: check-src
        run: |
          src_changes=$(git diff --name-only HEAD~1 HEAD -- ./src)
          workflow_changes=$(git diff --name-only HEAD~1 HEAD -- .github/workflows/benchmarks.yml)

          if [[ -n "$src_changes" ]] || [[ -n "$workflow_changes" ]]; then
            echo "src_changes=true" >> $GITHUB_OUTPUT
          else
            echo "src_changes=false" >> $GITHUB_OUTPUT
          fi

  hotchocolate-core:
    name: "HotChocolate Core Benchmarks"
    needs: check-changes
    if: needs.check-changes.outputs.src_changes == 'true' && github.event.pull_request.draft == false
    runs-on: benchmarking
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          show-progress: false

      - name: Restore dependencies
        run: dotnet restore src/HotChocolate/AspNetCore/benchmarks/k6/eShop.slnx

      - name: Start AppHost and wait for readiness
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6/Catalog.AppHost
        run: |
          echo "Starting AppHost..."
          dotnet run > /tmp/apphost.log 2>&1 &
          APPHOST_PID=$!
          echo "APPHOST_PID=$APPHOST_PID" >> $GITHUB_ENV

          echo "Waiting for server to be ready..."
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5224/graphql -X POST \
              -H "Content-Type: application/json" \
              -d '{"query": "{ __typename }"}' | grep -q "200"; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: Run performance tests and collect data
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6
        run: |
          chmod +x run-and-collect.sh
          ./run-and-collect.sh performance-data-current.json

      - name: Stop AppHost
        if: always()
        run: |
          if [ -n "$APPHOST_PID" ]; then
            kill $APPHOST_PID 2>/dev/null || true
            wait $APPHOST_PID 2>/dev/null || true
          fi

      - name: Commit and push performance data to current branch
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6
        run: |
          # Copy the performance data to the tracked filename
          cp performance-data-current.json performance-data.json

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add and commit the performance data
          git add performance-data.json

          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Update performance data [skip ci]"
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "No changes to performance data"
          fi

      - name: Fetch baseline performance data from main
        run: |
          git fetch origin main:main
          if git show main:src/HotChocolate/AspNetCore/benchmarks/k6/performance-data.json > baseline-performance.json 2>/dev/null; then
            echo "Baseline data fetched successfully"
            cat baseline-performance.json
          else
            echo "No baseline data found on main branch"
            # Don't create the file - let the comparison script handle missing baseline
            rm -f baseline-performance.json
          fi

      - name: Compare performance and generate report
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6
        run: |
          chmod +x compare-performance.sh
          ./compare-performance.sh performance-data-current.json ../../../../../baseline-performance.json performance-report.md

      - name: Comment PR with performance report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportPath = 'src/HotChocolate/AspNetCore/benchmarks/k6/performance-report.md';

            let report;
            try {
              report = fs.readFileSync(reportPath, 'utf8');
            } catch (error) {
              console.error('Failed to read performance report:', error);
              return;
            }

            // Add timestamp and commit info to the report
            const timestamp = new Date().toUTCString();
            const commitSha = context.sha.substring(0, 7);
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const commentBody = `${report}\n\n---\n*Run [${context.runId}](${runUrl}) " Commit ${commitSha} " ${timestamp}*`;

            // Always create a new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody,
            });

      - name: Upload performance data as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-data
          path: |
            src/HotChocolate/AspNetCore/benchmarks/k6/performance-data-current.json
            src/HotChocolate/AspNetCore/benchmarks/k6/performance-report.md
            /tmp/apphost.log
          retention-days: 30

      - name: Check for performance regression
        working-directory: src/HotChocolate/AspNetCore/benchmarks/k6
        run: |
          # Fail the build if there's a significant performance regression
          if grep -q "ï¿½ \*\*Performance regression detected" performance-report.md; then
            echo "::warning::Performance regression detected! Please review the performance report."
            # Uncomment the next line to fail the build on regression
            # exit 1
          fi
