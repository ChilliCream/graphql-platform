schema {
  query: Query
}

type Query {
  foo: String
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableOperationFilterInputOfDoubleFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableOperationFilterInputOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input EnumOperationFilterInputOfDimensionFilterInput {
  eq: Dimension
  neq: Dimension
  in: [Dimension!]
  nin: [Dimension!]
}

input EnumOperationFilterInputOfOgcGeometryTypeFilterInput {
  eq: OgcGeometryType
  neq: OgcGeometryType
  in: [OgcGeometryType!]
  nin: [OgcGeometryType!]
}

input GeometryContainsOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryDistanceOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

"A representation of a planar, linear vector geometry."
input GeometryFilterInput {
  and: [GeometryFilterInput!]
  or: [GeometryFilterInput!]
  "Returns the area of this Geometry.\nAreal Geometries have a non-zero area.\nThey override this function to compute the area.\nOthers return 0.0\n\n\n**Returns:**\nThe area of the Geometry."
  area: ComparableOperationFilterInputOfDoubleFilterInput
  "Returns the boundary, or an empty geometry of appropriate dimension\nif this Geometry is empty.\nFor a discussion of this function, see the OpenGIS Simple\nFeatures Specification. As stated in SFS Section 2.1.13.1, \"the boundary\nof a Geometry is a set of Geometries of the next lower dimension.\"\n\n\n**Returns:**\nThe closure of the combinatorial boundary of this Geometry."
  boundary: GeometryFilterInput
  "Computes the centroid of this Geometry.\nThe centroid\nis equal to the centroid of the set of component Geometries of highest\ndimension (since the lower-dimension geometries contribute zero\n\"weight\" to the centroid).\n\nThe centroid of an empty geometry is POINT EMPTY.\n\n\n**Returns:**\nA Point which is the centroid of this Geometry."
  centroid: PointFilterInput
  "Returns the dimension of this geometry.\n\n\n**Returns:**\n\nThe topological dimensions of this geometry"
  dimension: EnumOperationFilterInputOfDimensionFilterInput
  "Gets a geometry representing the envelope (bounding box) of this Geometry.\n\n\n**Returns:**\n\nA Geometry representing the envelope of this Geometry"
  envelope: GeometryFilterInput
  "Returns the name of this Geometry's actual class.\n\n\n**Returns:**\nThe name of this Geometrys actual class."
  geometryType: StringOperationFilterInput
  "Computes an interior point of this Geometry.\n\n\n**Returns:**\nA Point which is in the interior of this Geometry."
  interiorPoint: PointFilterInput
  "Tests whether this Geometry is simple.\n\nThe SFS definition of simplicity\nfollows the general rule that a Geometry is simple if it has no points of\nself-tangency, self-intersection or other anomalous points.\n\nSimplicity is defined for each Geometry subclass as follows:\n\nValid polygonal geometries are simple, since their rings\nmust not self-intersect. IsSimple\ntests for this condition and reports false if it is not met.\n(This is a looser test than checking for validity).\nLinear rings have the same semantics.\nLinear geometries are simple iff they do not self-intersect at points\nother than boundary points.\nZero-dimensional geometries (points) are simple iff they have no\nrepeated points.\nEmpty Geometrys are always simple.\n\n\n\n**Returns:**\ntrue if this Geometry is simple"
  isSimple: BooleanOperationFilterInput
  "Tests whether this Geometry is topologically\nvalid, according to the OGC SFS specification.\nFor validity rules see the documentation for the specific geometry subclass.\n\n\n**Returns:**\ntrue if this Geometry is valid."
  isValid: BooleanOperationFilterInput
  "Returns the length of this Geometry.\nLinear geometries return their length.\nAreal geometries return their perimeter.\nThey override this function to compute the length.\nOthers return 0.0\n\n\n**Returns:**\nThe length of the Geometry."
  length: ComparableOperationFilterInputOfDoubleFilterInput
  "Returns the count of this Geometrys vertices. The Geometry\ns contained by composite Geometrys must be\nGeometry's; that is, they must implement NumPoints.\n\n\n**Returns:**\nThe number of vertices in this Geometry."
  numPoints: ComparableOperationFilterInputOfInt32FilterInput
  "Gets the OGC geometry type"
  ogcGeometryType: EnumOperationFilterInputOfOgcGeometryTypeFilterInput
  pointOnSurface: PointFilterInput
  "Sets the ID of the Spatial Reference System used by the Geometry."
  sRID: ComparableOperationFilterInputOfInt32FilterInput
  contains: GeometryContainsOperationTypeFilterInput
  distance: GeometryDistanceOperationTypeFilterInput
  intersects: GeometryIntersectsOperationTypeFilterInput
  overlaps: GeometryOverlapsOperationTypeFilterInput
  touches: GeometryTouchesOperationTypeFilterInput
  within: GeometryWithinOperationTypeFilterInput
}

input GeometryIntersectsOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryOverlapsOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryTouchesOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryWithinOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

"Basic implementation of MultiPolygon."
input MultiPolygonFilterInput {
  and: [MultiPolygonFilterInput!]
  or: [MultiPolygonFilterInput!]
  "Returns the area of this GeometryCollection."
  area: ComparableOperationFilterInputOfDoubleFilterInput
  boundary: GeometryFilterInput
  "Computes the centroid of this Geometry.\nThe centroid\nis equal to the centroid of the set of component Geometries of highest\ndimension (since the lower-dimension geometries contribute zero\n\"weight\" to the centroid).\n\nThe centroid of an empty geometry is POINT EMPTY.\n\n\n**Returns:**\nA Point which is the centroid of this Geometry."
  centroid: PointFilterInput
  dimension: EnumOperationFilterInputOfDimensionFilterInput
  "Gets a geometry representing the envelope (bounding box) of this Geometry.\n\n\n**Returns:**\n\nA Geometry representing the envelope of this Geometry"
  envelope: GeometryFilterInput
  "Returns the name of this object's interface.\n\n\n**Returns:**\n\"MultiPolygon\""
  geometryType: StringOperationFilterInput
  "Computes an interior point of this Geometry.\n\n\n**Returns:**\nA Point which is in the interior of this Geometry."
  interiorPoint: PointFilterInput
  "Tests whether this Geometry is simple.\n\nThe SFS definition of simplicity\nfollows the general rule that a Geometry is simple if it has no points of\nself-tangency, self-intersection or other anomalous points.\n\nSimplicity is defined for each Geometry subclass as follows:\n\nValid polygonal geometries are simple, since their rings\nmust not self-intersect. IsSimple\ntests for this condition and reports false if it is not met.\n(This is a looser test than checking for validity).\nLinear rings have the same semantics.\nLinear geometries are simple iff they do not self-intersect at points\nother than boundary points.\nZero-dimensional geometries (points) are simple iff they have no\nrepeated points.\nEmpty Geometrys are always simple.\n\n\n\n**Returns:**\ntrue if this Geometry is simple"
  isSimple: BooleanOperationFilterInput
  "Tests whether this Geometry is topologically\nvalid, according to the OGC SFS specification.\nFor validity rules see the documentation for the specific geometry subclass.\n\n\n**Returns:**\ntrue if this Geometry is valid."
  isValid: BooleanOperationFilterInput
  "Returns the length of this GeometryCollection."
  length: ComparableOperationFilterInputOfDoubleFilterInput
  numPoints: ComparableOperationFilterInputOfInt32FilterInput
  ogcGeometryType: EnumOperationFilterInputOfOgcGeometryTypeFilterInput
  pointOnSurface: PointFilterInput
  "Sets the ID of the Spatial Reference System used by the Geometry."
  sRID: ComparableOperationFilterInputOfInt32FilterInput
  contains: GeometryContainsOperationTypeFilterInput
  distance: GeometryDistanceOperationTypeFilterInput
  intersects: GeometryIntersectsOperationTypeFilterInput
  overlaps: GeometryOverlapsOperationTypeFilterInput
  touches: GeometryTouchesOperationTypeFilterInput
  within: GeometryWithinOperationTypeFilterInput
}

"Represents a single point.\n\nA Point is topologically valid if and only if:\n\nThe coordinate which defines it if any) is a valid coordinate\n(i.e. does not have an NaN X- or Y-ordinate"
input PointFilterInput {
  and: [PointFilterInput!]
  or: [PointFilterInput!]
  m: ComparableOperationFilterInputOfDoubleFilterInput
  x: ComparableOperationFilterInputOfDoubleFilterInput
  y: ComparableOperationFilterInputOfDoubleFilterInput
  z: ComparableOperationFilterInputOfDoubleFilterInput
  "Returns the area of this Geometry.\nAreal Geometries have a non-zero area.\nThey override this function to compute the area.\nOthers return 0.0\n\n\n**Returns:**\nThe area of the Geometry."
  area: ComparableOperationFilterInputOfDoubleFilterInput
  "Gets the boundary of this geometry.\nZero-dimensional geometries have no boundary by definition,\nso an empty GeometryCollection is returned."
  boundary: GeometryFilterInput
  "Computes the centroid of this Geometry.\nThe centroid\nis equal to the centroid of the set of component Geometries of highest\ndimension (since the lower-dimension geometries contribute zero\n\"weight\" to the centroid).\n\nThe centroid of an empty geometry is POINT EMPTY.\n\n\n**Returns:**\nA Point which is the centroid of this Geometry."
  centroid: PointFilterInput
  dimension: EnumOperationFilterInputOfDimensionFilterInput
  "Gets a geometry representing the envelope (bounding box) of this Geometry.\n\n\n**Returns:**\n\nA Geometry representing the envelope of this Geometry"
  envelope: GeometryFilterInput
  "Returns the name of this object's interface.\n\n\n**Returns:**\n\"Point\""
  geometryType: StringOperationFilterInput
  "Computes an interior point of this Geometry.\n\n\n**Returns:**\nA Point which is in the interior of this Geometry."
  interiorPoint: PointFilterInput
  "Tests whether this Geometry is simple.\n\nThe SFS definition of simplicity\nfollows the general rule that a Geometry is simple if it has no points of\nself-tangency, self-intersection or other anomalous points.\n\nSimplicity is defined for each Geometry subclass as follows:\n\nValid polygonal geometries are simple, since their rings\nmust not self-intersect. IsSimple\ntests for this condition and reports false if it is not met.\n(This is a looser test than checking for validity).\nLinear rings have the same semantics.\nLinear geometries are simple iff they do not self-intersect at points\nother than boundary points.\nZero-dimensional geometries (points) are simple iff they have no\nrepeated points.\nEmpty Geometrys are always simple.\n\n\n\n**Returns:**\ntrue if this Geometry is simple"
  isSimple: BooleanOperationFilterInput
  "Tests whether this Geometry is topologically\nvalid, according to the OGC SFS specification.\nFor validity rules see the documentation for the specific geometry subclass.\n\n\n**Returns:**\ntrue if this Geometry is valid."
  isValid: BooleanOperationFilterInput
  "Returns the length of this Geometry.\nLinear geometries return their length.\nAreal geometries return their perimeter.\nThey override this function to compute the length.\nOthers return 0.0\n\n\n**Returns:**\nThe length of the Geometry."
  length: ComparableOperationFilterInputOfDoubleFilterInput
  numPoints: ComparableOperationFilterInputOfInt32FilterInput
  "Gets the OGC geometry type"
  ogcGeometryType: EnumOperationFilterInputOfOgcGeometryTypeFilterInput
  pointOnSurface: PointFilterInput
  "Sets the ID of the Spatial Reference System used by the Geometry."
  sRID: ComparableOperationFilterInputOfInt32FilterInput
  contains: GeometryContainsOperationTypeFilterInput
  distance: GeometryDistanceOperationTypeFilterInput
  intersects: GeometryIntersectsOperationTypeFilterInput
  overlaps: GeometryOverlapsOperationTypeFilterInput
  touches: GeometryTouchesOperationTypeFilterInput
  within: GeometryWithinOperationTypeFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

"Provides constants representing the dimensions of a point, a curve and a surface."
enum Dimension {
  "Dimension value of a point (0)."
  POINT
  "Dimension value of a curve (1)."
  CURVE
  "Dimension value of a surface (2)."
  SURFACE
  "Dimension value for any dimension (= {False, True})."
  DONTCARE
  "Dimension value of non-empty geometries (= {Point,Curve,A})."
  TRUE
  "Dimension value of a empty point (-1)."
  FALSE
}

"Enumeration of OGC Geometry Types"
enum OgcGeometryType {
  "Point."
  POINT
  "LineString."
  LINE_STRING
  "Polygon."
  POLYGON
  "MultiPoint."
  MULTI_POINT
  "MultiLineString."
  MULTI_LINE_STRING
  "MultiPolygon."
  MULTI_POLYGON
  "GeometryCollection."
  GEOMETRY_COLLECTION
  "CircularString"
  CIRCULAR_STRING
  "CompoundCurve"
  COMPOUND_CURVE
  "CurvePolygon"
  CURVE_POLYGON
  "MultiCurve"
  MULTI_CURVE
  "MultiSurface"
  MULTI_SURFACE
  "Curve"
  CURVE
  "Surface"
  SURFACE
  "PolyhedralSurface"
  POLYHEDRAL_SURFACE
  "TIN"
  TIN
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

scalar Geometry
