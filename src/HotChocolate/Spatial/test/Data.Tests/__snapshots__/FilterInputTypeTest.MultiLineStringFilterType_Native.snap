schema {
  query: Query
}

type Query {
  foo: String
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableOperationFilterInputOfDoubleFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableOperationFilterInputOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input EnumOperationFilterInputOfDimensionFilterInput {
  eq: Dimension
  neq: Dimension
  in: [Dimension!]
  nin: [Dimension!]
}

input EnumOperationFilterInputOfOgcGeometryTypeFilterInput {
  eq: OgcGeometryType
  neq: OgcGeometryType
  in: [OgcGeometryType!]
  nin: [OgcGeometryType!]
}

input GeometryContainsOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryDistanceOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input GeometryFilterInput {
  and: [GeometryFilterInput!]
  or: [GeometryFilterInput!]
  area: ComparableOperationFilterInputOfDoubleFilterInput
  boundary: GeometryFilterInput
  centroid: PointFilterInput
  dimension: EnumOperationFilterInputOfDimensionFilterInput
  envelope: GeometryFilterInput
  geometryType: StringOperationFilterInput
  interiorPoint: PointFilterInput
  isSimple: BooleanOperationFilterInput
  isValid: BooleanOperationFilterInput
  length: ComparableOperationFilterInputOfDoubleFilterInput
  numPoints: ComparableOperationFilterInputOfInt32FilterInput
  ogcGeometryType: EnumOperationFilterInputOfOgcGeometryTypeFilterInput
  pointOnSurface: PointFilterInput
  sRID: ComparableOperationFilterInputOfInt32FilterInput
  contains: GeometryContainsOperationTypeFilterInput
  distance: GeometryDistanceOperationTypeFilterInput
  intersects: GeometryIntersectsOperationTypeFilterInput
  overlaps: GeometryOverlapsOperationTypeFilterInput
  touches: GeometryTouchesOperationTypeFilterInput
  within: GeometryWithinOperationTypeFilterInput
}

input GeometryIntersectsOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryOverlapsOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryTouchesOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryWithinOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input MultiLineStringFilterInput {
  and: [MultiLineStringFilterInput!]
  or: [MultiLineStringFilterInput!]
  area: ComparableOperationFilterInputOfDoubleFilterInput
  boundary: GeometryFilterInput
  centroid: PointFilterInput
  dimension: EnumOperationFilterInputOfDimensionFilterInput
  envelope: GeometryFilterInput
  geometryType: StringOperationFilterInput
  interiorPoint: PointFilterInput
  isSimple: BooleanOperationFilterInput
  isValid: BooleanOperationFilterInput
  length: ComparableOperationFilterInputOfDoubleFilterInput
  numPoints: ComparableOperationFilterInputOfInt32FilterInput
  ogcGeometryType: EnumOperationFilterInputOfOgcGeometryTypeFilterInput
  pointOnSurface: PointFilterInput
  sRID: ComparableOperationFilterInputOfInt32FilterInput
  contains: GeometryContainsOperationTypeFilterInput
  distance: GeometryDistanceOperationTypeFilterInput
  intersects: GeometryIntersectsOperationTypeFilterInput
  overlaps: GeometryOverlapsOperationTypeFilterInput
  touches: GeometryTouchesOperationTypeFilterInput
  within: GeometryWithinOperationTypeFilterInput
}

input PointFilterInput {
  and: [PointFilterInput!]
  or: [PointFilterInput!]
  m: ComparableOperationFilterInputOfDoubleFilterInput
  x: ComparableOperationFilterInputOfDoubleFilterInput
  y: ComparableOperationFilterInputOfDoubleFilterInput
  z: ComparableOperationFilterInputOfDoubleFilterInput
  area: ComparableOperationFilterInputOfDoubleFilterInput
  boundary: GeometryFilterInput
  centroid: PointFilterInput
  dimension: EnumOperationFilterInputOfDimensionFilterInput
  envelope: GeometryFilterInput
  geometryType: StringOperationFilterInput
  interiorPoint: PointFilterInput
  isSimple: BooleanOperationFilterInput
  isValid: BooleanOperationFilterInput
  length: ComparableOperationFilterInputOfDoubleFilterInput
  numPoints: ComparableOperationFilterInputOfInt32FilterInput
  ogcGeometryType: EnumOperationFilterInputOfOgcGeometryTypeFilterInput
  pointOnSurface: PointFilterInput
  sRID: ComparableOperationFilterInputOfInt32FilterInput
  contains: GeometryContainsOperationTypeFilterInput
  distance: GeometryDistanceOperationTypeFilterInput
  intersects: GeometryIntersectsOperationTypeFilterInput
  overlaps: GeometryOverlapsOperationTypeFilterInput
  touches: GeometryTouchesOperationTypeFilterInput
  within: GeometryWithinOperationTypeFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum Dimension {
  POINT
  CURVE
  SURFACE
  DONTCARE
  TRUE
  FALSE
}

enum OgcGeometryType {
  POINT
  LINE_STRING
  POLYGON
  MULTI_POINT
  MULTI_LINE_STRING
  MULTI_POLYGON
  GEOMETRY_COLLECTION
  CIRCULAR_STRING
  COMPOUND_CURVE
  CURVE_POLYGON
  MULTI_CURVE
  MULTI_SURFACE
  CURVE
  SURFACE
  POLYHEDRAL_SURFACE
  TIN
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

scalar Geometry
