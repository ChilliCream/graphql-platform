schema {
  query: Query
}

type Query {
  foo: String
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableOperationFilterInputOfDoubleFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableOperationFilterInputOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input EnumOperationFilterInputOfDimensionFilterInput {
  eq: Dimension
  neq: Dimension
  in: [Dimension!]
  nin: [Dimension!]
}

input EnumOperationFilterInputOfOgcGeometryTypeFilterInput {
  eq: OgcGeometryType
  neq: OgcGeometryType
  in: [OgcGeometryType!]
  nin: [OgcGeometryType!]
}

input GeometryContainsOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryDistanceOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input GeometryFilterInput {
  and: [GeometryFilterInput!]
  or: [GeometryFilterInput!]
  area: ComparableOperationFilterInputOfDoubleFilterInput
  boundary: GeometryFilterInput
  centroid: PointFilterInput
  dimension: EnumOperationFilterInputOfDimensionFilterInput
  envelope: GeometryFilterInput
  geometryType: StringOperationFilterInput
  interiorPoint: PointFilterInput
  isSimple: BooleanOperationFilterInput
  isValid: BooleanOperationFilterInput
  length: ComparableOperationFilterInputOfDoubleFilterInput
  numPoints: ComparableOperationFilterInputOfInt32FilterInput
  ogcGeometryType: EnumOperationFilterInputOfOgcGeometryTypeFilterInput
  pointOnSurface: PointFilterInput
  sRID: ComparableOperationFilterInputOfInt32FilterInput
  contains: GeometryContainsOperationTypeFilterInput
  distance: GeometryDistanceOperationTypeFilterInput
  intersects: GeometryIntersectsOperationTypeFilterInput
  overlaps: GeometryOverlapsOperationTypeFilterInput
  touches: GeometryTouchesOperationTypeFilterInput
  within: GeometryWithinOperationTypeFilterInput
}

input GeometryIntersectsOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryOverlapsOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryTouchesOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input GeometryWithinOperationTypeFilterInput {
  geometry: Geometry!
  buffer: Float
  eq: Boolean
  neq: Boolean
}

input PointFilterInput {
  and: [PointFilterInput!]
  or: [PointFilterInput!]
  m: ComparableOperationFilterInputOfDoubleFilterInput
  x: ComparableOperationFilterInputOfDoubleFilterInput
  y: ComparableOperationFilterInputOfDoubleFilterInput
  z: ComparableOperationFilterInputOfDoubleFilterInput
  area: ComparableOperationFilterInputOfDoubleFilterInput
  boundary: GeometryFilterInput
  centroid: PointFilterInput
  dimension: EnumOperationFilterInputOfDimensionFilterInput
  envelope: GeometryFilterInput
  geometryType: StringOperationFilterInput
  interiorPoint: PointFilterInput
  isSimple: BooleanOperationFilterInput
  isValid: BooleanOperationFilterInput
  length: ComparableOperationFilterInputOfDoubleFilterInput
  numPoints: ComparableOperationFilterInputOfInt32FilterInput
  ogcGeometryType: EnumOperationFilterInputOfOgcGeometryTypeFilterInput
  pointOnSurface: PointFilterInput
  sRID: ComparableOperationFilterInputOfInt32FilterInput
  contains: GeometryContainsOperationTypeFilterInput
  distance: GeometryDistanceOperationTypeFilterInput
  intersects: GeometryIntersectsOperationTypeFilterInput
  overlaps: GeometryOverlapsOperationTypeFilterInput
  touches: GeometryTouchesOperationTypeFilterInput
  within: GeometryWithinOperationTypeFilterInput
}

input PolygonFilterInput {
  and: [PolygonFilterInput!]
  or: [PolygonFilterInput!]
  area: ComparableOperationFilterInputOfDoubleFilterInput
  boundary: GeometryFilterInput
  centroid: PointFilterInput
  dimension: EnumOperationFilterInputOfDimensionFilterInput
  envelope: GeometryFilterInput
  geometryType: StringOperationFilterInput
  interiorPoint: PointFilterInput
  isSimple: BooleanOperationFilterInput
  isValid: BooleanOperationFilterInput
  length: ComparableOperationFilterInputOfDoubleFilterInput
  numPoints: ComparableOperationFilterInputOfInt32FilterInput
  ogcGeometryType: EnumOperationFilterInputOfOgcGeometryTypeFilterInput
  pointOnSurface: PointFilterInput
  sRID: ComparableOperationFilterInputOfInt32FilterInput
  contains: GeometryContainsOperationTypeFilterInput
  distance: GeometryDistanceOperationTypeFilterInput
  intersects: GeometryIntersectsOperationTypeFilterInput
  overlaps: GeometryOverlapsOperationTypeFilterInput
  touches: GeometryTouchesOperationTypeFilterInput
  within: GeometryWithinOperationTypeFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum Dimension {
  POINT
  CURVE
  SURFACE
  DONTCARE
  TRUE
  FALSE
}

enum OgcGeometryType {
  POINT
  LINE_STRING
  POLYGON
  MULTI_POINT
  MULTI_LINE_STRING
  MULTI_POLYGON
  GEOMETRY_COLLECTION
  CIRCULAR_STRING
  COMPOUND_CURVE
  CURVE_POLYGON
  MULTI_CURVE
  MULTI_SURFACE
  CURVE
  SURFACE
  POLYHEDRAL_SURFACE
  TIN
}

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http:\/\/en.wikipedia.org\/wiki\/IEEE_floating_point)."
scalar Float

scalar Geometry

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
