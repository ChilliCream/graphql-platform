schema {
  query: Query
}

type Query {
  citites(where: CityFilter): City
}

scalar GeoJSONCoordinates

enum GeoJSONType {
  Point
  MultiPoint
  LineString
  MultiLineString
  Polygon
  MultiPolygon
  GeometryCollection
  Feature
  FeatureCollection
}
"""
Object describing a single geographical point.
"""
type GeoJSONPoint implements GeoJSONInterface & GeometryInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing multiple geographical points.
"""
type GeoJSONMultiPoint implements GeoJSONInterface & GeometryInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing a single connected sequence of geographical points.
"""
type GeoJSONLineString implements GeoJSONInterface & GeometryInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing multiple connected sequences of geographical points.
"""
type GeoJSONMultiLineString implements GeoJSONInterface & GeometryInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing a single shape formed by a set of geographical points.
"""
type GeoJSONPolygon implements GeoJSONInterface & GeometryInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing multiple shapes formed by sets of geographical points.'
"""
type GeoJSONMultiPolygon implements GeoJSONInterface & GeometryInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
A set of multiple geometries, possibly of various types.
"""
type GeoJSONGeometryCollection implements GeoJSONInterface & GeometryInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  geometries: [[GeometryInterface!]]!
}

"""
An object that links a geometry to properties in order to provide context.
"""
type GeoJSONFeature implements GeoJSONInterface & GeometryInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  geometry: GeometryInterface
  #properties: JsonScalar
  id: String
}

"""
A set of multiple features.
"""
type GeoJSONFeatureCollection implements GeoJSONInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  features: [[FeatureObject!]]!
}

"""
TODO NO IDEA WHAT THIS IS
Enumeration of all GeoJSON CRS object types.
"""
enum GeoJSONCRSType {
  name
  link
}

"""
Properties for name based CRS object.
"""
type GeoJSONNamedCRSProperties {
  name: String!
}

"""
Properties for link based CRS object.
"""
type LinkedCRSPropertiesObject {
  href: String!
  type: String
}

union CRSPropertiesUnion = NamedCRSPropertiesObject | LinkedCRSPropertiesObject

type CoordinateReferenceSystemObject {
  type: CRSTypeEnum!
  properties: CRSPropertiesUnion!
}

interface GeoJSONInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
}

interface GeoJSONGeometryInterface {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing a single geographical point.
"""
input GeoJSONPoint {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing multiple geographical points.
"""
input GeoJSONMultiPointInput {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing a single connected sequence of geographical points.
"""
input GeoJSONLineStringInput {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing multiple connected sequences of geographical points.
"""
input GeoJSONMultiLineStringInput {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing a single shape formed by a set of geographical points.
"""
input GeoJSONPolygonInput {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
Object describing multiple shapes formed by sets of geographical points.'
"""
input GeoJSONMultiPolygonInput {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  coordinates: GeoJSONCoordinates
}

"""
A set of multiple geometries, possibly of various types.
"""
input GeoJSONGeometryCollectionInput {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  geometries: [[GeometryInterface!]]!
}

"""
An object that links a geometry to properties in order to provide context.
"""
input GeoJSONFeatureInput {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  geometry: GeometryInterface
  #properties: JsonScalar
  id: String
}

"""
A set of multiple features.
"""
input GeoJSONFeatureCollection {
  type: TypeEnum!
  crs: CoordinateReferenceSystemObject!
  bbox: [Float]
  features: [[FeatureObject!]]!
}

input CityFilter {
  shape: GeometryFilter
}

input IntersectionInput {
  of: GeoJsonFitlerInput
  is: GeometryFilter
}

input UnionInput {
  of: GeoJsonFitlerInput
  is: GeometryFilter
}

input DifferenceInput {
  of: GeoJsonFitlerInput
  is: GeometryFilter
}

input GeoJsonFitlerInput {
  buffer: Float
  data: GeoJSONPoint
}

input DistanceInput {
  from: GeoJsonFitlerInput!
  is: Float
  is_gt: Float
  is_gte: Float
  is_lt: Float
  is_lte: Float
  is_in: Float
  is_not: Float
  is_not_gt: Float
  is_not_gte: Float
}

input CoordinateFilter {
  toBeDefined: String
}

enum Dimension {
  POINT
  CURVE
  SURFACE
  FALSE
  TRUE
  DONTCARE
}

type City {
  shape: GeoJSONGeometryInterface
  name: String
}

input GeometryFilter {
  #area: Float
  area_gt: Float
  area_gte: Float
  area_lt: Float
  area_lte: Float
  #area_in: [Float]
  #area_not: Float
  area_not_gt: Float
  area_not_gte: Float
  area_not_lt: Float
  area_not_lte: Float
  #area_not_in: [Float]
  boundary: GeometryFilter
  envelope: GeometryFilter
  geometryType: String
  geometryType_in: [String!]
  geometryType_not: String
  geometryType_not_in: [String!]
  length: Float
  length_gt: Float
  length_gte: Float
  length_lt: Float
  length_lte: Float
  #length_in: [Float!]
  length_not: Float
  length_not_gt: Float
  length_not_gte: Float
  length_not_lt: Float
  length_not_lte: Float
  #length_not_in: [Float!]
  numGeometries: Int
  numGeometries_gt: Int
  numGeometries_gte: Int
  numGeometries_lt: Int
  numGeometries_lte: Int
  numGeometries_in: [Int!]
  numGeometries_not: Int
  numGeometries_not_gt: Int
  numGeometries_not_gte: Int
  numGeometries_not_lt: Int
  numGeometries_not_lte: Int
  numGeometries_not_in: [Int!]
  numPoints: Int
  numPoints_gt: Int
  numPoints_gte: Int
  numPoints_lt: Int
  numPoints_lte: Int
  numPoints_in: [Int!]
  numPoints_not: Int
  numPoints_not_gt: Int
  numPoints_not_gte: Int
  numPoints_not_lt: Int
  numPoints_not_lte: Int
  numPoints_not_in: [Int!]
  srid: Int
  #srid_gt: Int
  #srid_gte: Int
  #srid_lt: Int
  #srid_lte: Int
  #srid_in: [Int!]
  #srid_not: Int
  #srid_not_gt: Int
  #srid_not_gte: Int
  #srid_not_lt: Int
  #srid_not_lte: Int
  #srid_not_in: [Int!]
  contains: GeoJsonFitlerInput
  contains_not: GeoJsonFitlerInput
  within: GeoJsonFitlerInput
  within_not: GeoJsonFitlerInput
  covers: GeoJsonFitlerInput
  covers_not: GeoJsonFitlerInput
  coveredBy: GeoJsonFitlerInput
  coveredBy_not: GeoJsonFitlerInput
  crosses: GeoJsonFitlerInput
  crosses_not: GeoJsonFitlerInput
  distance: DistanceInput
  intersection: IntersectionInput
  intersects: GeoJsonFitlerInput
  intersects_not: GeoJsonFitlerInput
  overlaps: GeoJsonFitlerInput
  overlaps_not: GeoJsonFitlerInput
  touches: GeoJsonFitlerInput
  touches_not: GeoJsonFitlerInput
  intersection: UnionInput
  difference: DifferenceInput
}

input PointFilter {
  x: Float
  x_gt: Float
  x_gte: Float
  x_lt: Float
  x_lte: Float
  x_in: [Float]
  x_not: Float
  x_not_gt: Float
  x_not_gte: Float
  x_not_lt: Float
  x_not_lte: Float
  x_not_in: [Float]
  y: Float
  y_gt: Float
  y_gte: Float
  y_lt: Float
  y_lte: Float
  y_in: [Float]
  y_not: Float
  y_not_gt: Float
  y_not_gte: Float
  y_not_lt: Float
  y_not_lte: Float
  y_not_in: [Float]
  z: Float
  z_gt: Float
  z_gte: Float
  z_lt: Float
  z_lte: Float
  z_in: [Float]
  z_not: Float
  z_not_gt: Float
  z_not_gte: Float
  z_not_lt: Float
  z_not_lte: Float
  z_not_in: [Float]
  m: Float
  m_gt: Float
  m_gte: Float
  m_lt: Float
  m_lte: Float
  m_in: [Float]
  m_not: Float
  m_not_gt: Float
  m_not_gte: Float
  m_not_lt: Float
  m_not_lte: Float
  m_not_in: [Float]
  #area: Float
  area_gt: Float
  area_gte: Float
  area_lt: Float
  area_lte: Float
  #area_in: [Float]
  #area_not: Float
  area_not_gt: Float
  area_not_gte: Float
  area_not_lt: Float
  area_not_lte: Float
  #area_not_in: [Float]
  boundary: GeometryFilter
  envelope: GeometryFilter
  geometryType: String
  geometryType_in: [String!]
  geometryType_not: String
  geometryType_not_in: [String!]
  length: Float
  length_gt: Float
  length_gte: Float
  length_lt: Float
  length_lte: Float
  #length_in: [Float!]
  length_not: Float
  length_not_gt: Float
  length_not_gte: Float
  length_not_lt: Float
  length_not_lte: Float
  #length_not_in: [Float!]
  numGeometries: Int
  numGeometries_gt: Int
  numGeometries_gte: Int
  numGeometries_lt: Int
  numGeometries_lte: Int
  numGeometries_in: [Int!]
  numGeometries_not: Int
  numGeometries_not_gt: Int
  numGeometries_not_gte: Int
  numGeometries_not_lt: Int
  numGeometries_not_lte: Int
  numGeometries_not_in: [Int!]
  numPoints: Int
  numPoints_gt: Int
  numPoints_gte: Int
  numPoints_lt: Int
  numPoints_lte: Int
  numPoints_in: [Int!]
  numPoints_not: Int
  numPoints_not_gt: Int
  numPoints_not_gte: Int
  numPoints_not_lt: Int
  numPoints_not_lte: Int
  numPoints_not_in: [Int!]
  srid: Int
  #srid_gt: Int
  #srid_gte: Int
  #srid_lt: Int
  #srid_lte: Int
  #srid_in: [Int!]
  #srid_not: Int
  #srid_not_gt: Int
  #srid_not_gte: Int
  #srid_not_lt: Int
  #srid_not_lte: Int
  #srid_not_in: [Int!]
  contains: GeoJsonFitlerInput
  contains_not: GeoJsonFitlerInput
  within: GeoJsonFitlerInput
  within_not: GeoJsonFitlerInput
  covers: GeoJsonFitlerInput
  covers_not: GeoJsonFitlerInput
  coveredBy: GeoJsonFitlerInput
  coveredBy_not: GeoJsonFitlerInput
  crosses: GeoJsonFitlerInput
  crosses_not: GeoJsonFitlerInput
  distance: DistanceInput
  intersection: IntersectionInput
  intersects: GeoJsonFitlerInput
  intersects_not: GeoJsonFitlerInput
  overlaps: GeoJsonFitlerInput
  overlaps_not: GeoJsonFitlerInput
  touches: GeoJsonFitlerInput
  touches_not: GeoJsonFitlerInput
  intersection: UnionInput
  difference: DifferenceInput
}
