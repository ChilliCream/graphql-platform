<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
              xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
      PublicKeyToken=b77a5c561934e089
    </value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
      PublicKeyToken=b77a5c561934e089
    </value>
  </resheader>
  <data name="GeoJsonPositionScalar_Description" xml:space="preserve">
    <value>A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.</value>
  </data>
  <data name="InvalidInputObjectStructure_IsOfWrongGeometryType" xml:space="preserve">
    <value>`type` is of type {0} but should be {1} </value>
  </data>
  <data name="InvalidInputObjectStructure_CoordinatesOfWrongFormat" xml:space="preserve">
    <value>Failed to parse {0}. `coordinates` is of wrong format, it should be </value>
  </data>
  <data name="PositionScalar_InvalidPositionObject" xml:space="preserve">
    <value>A valid position object must be a list of two or three int or float literals representing a position. e.g. [1,1] or [2,2,0]</value>
  </data>
  <data name="GeoJson_Field_Type_Description" xml:space="preserve">
    <value>The geometry type of the GeoJson object</value>
  </data>
  <data name="GeoJson_Field_Bbox_Description" xml:space="preserve">
    <value>The minimum bounding box around the geometry object</value>
  </data>
  <data name="GeoJson_Field_Crs_Description" xml:space="preserve">
    <value>The coordinate reference system integer identifier</value>
  </data>
  <data name="GeoJson_Field_Coordinates_Description_Point" xml:space="preserve">
    <value>The "coordinates" field is a single position.</value>
  </data>
  <data name="GeoJson_Field_Coordinates_Description_LineString" xml:space="preserve">
    <value>The "coordinates" field is an array of two or more positions.</value>
  </data>
  <data name="GeoJson_Field_Coordinates_Description_MultiPoint" xml:space="preserve">
    <value>The "coordinates" field is an array of positions.</value>
  </data>
  <data name="GeoJson_Field_Coordinates_Description_MultiLineString" xml:space="preserve">
    <value>The "coordinates" field is an array of LineString coordinate arrays.</value>
  </data>
  <data name="GeoJson_Field_Coordinates_Description_Polygon" xml:space="preserve">
    <value>The "coordinates" field MUST be an array of linear ring coordinate arrays. For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings. The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface.</value>
  </data>
  <data name="GeoJson_Field_Coordinates_Description_MultiPolygon" xml:space="preserve">
    <value>The "coordinates" field is an array of Polygon coordinate arrays.</value>
  </data>
  <data name="PositionScalar_CoordinatesCannotBeNull" xml:space="preserve">
    <value>The specified value has to be a Coordinate Type</value>
  </data>
  <data name="Resolver_Type_InvalidGeometryType" xml:space="preserve">
    <value>Geometry type is not supported</value>
  </data>
  <data name="Serializer_CouldNotDeserialize" xml:space="preserve">
    <value>The specified value is not a serialized input object</value>
  </data>
  <data name="Serializer_CouldNotSerialize" xml:space="preserve">
    <value>The specified value is not a valid input object.</value>
  </data>
  <data name="Serializer_CouldNotParseLiteral" xml:space="preserve">
    <value>Could not parse the given literal.</value>
  </data>
  <data name="Serializer_CouldNotParseValue" xml:space="preserve">
    <value>Could not parse the given value.</value>
  </data>
  <data name="Serializer_Parse_CoordinatesIsInvalid" xml:space="preserve">
    <value>Could not parse object. `Coordinates` is invalid.</value>
  </data>
  <data name="Serializer_Parse_TypeIsInvalid" xml:space="preserve">
    <value>Could not parse object. `Type` is invalid.</value>
  </data>
  <data name="Serializer_Parse_CoordinatesIsMissing" xml:space="preserve">
    <value>Could not parse object. `Coordinates` is missing.</value>
  </data>
  <data name="Serializer_Parse_TypeIsMissing" xml:space="preserve">
    <value>Could not parse object. `Type` is missing.</value>
  </data>
  <data name="Geometry_Deserialize_TypeIsUnknown" xml:space="preserve">
    <value>Could not deserialize object. `Type` {0} is unknown.</value>
  </data>
  <data name="Geometry_Serialize_TypeIsUnknown" xml:space="preserve">
    <value>Could not serialize object. `Type` {0} is unknown.</value>
  </data>
  <data name="Geometry_Deserialize_TypeIsMissing" xml:space="preserve">
    <value>Could not deserialize object. `type` is missing.</value>
  </data>
  <data name="Geometry_Parse_TypeIsUnknown" xml:space="preserve">
    <value>Could not parse object. `Type` {0} is unknown.</value>
  </data>
  <data name="Geometry_Serialize_InvalidGeometryType" xml:space="preserve">
    <value>Could not serialize geometry. Type {0} is no valid geometry type</value>
  </data>
  <data name="Geometry_Parse_InvalidGeometryType" xml:space="preserve">
    <value>Could not parse geometry. Type {0} is no valid geometry type</value>
  </data>
  <data name="Geometry_Serializer_NotFound" xml:space="preserve">
    <value>No serializer was found for {0}</value>
  </data>
  <data name="Geometry_Parse_InvalidGeometryKind" xml:space="preserve">
    <value>Could not parse geometry. `Type` {0} is no valid geometry type</value>
  </data>
  <data name="Geometry_Parse_InvalidType" xml:space="preserve">
    <value>Could not parse geometry. `type` is invalid</value>
  </data>
</root>
