{"version":3,"sources":["../../../node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"names":["conf","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","ignoreCase","tokenPostfix","token","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","next","string","herestring","comment","hereregexp"],"mappings":"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","file":"static/js/19.7afcd7ad.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        blockComment: ['###', '###'],\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*#region\\\\b'),\n            end: new RegExp('^\\\\s*#endregion\\\\b')\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.coffee',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\n    ],\n    regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n    keywords: [\n        'and',\n        'or',\n        'is',\n        'isnt',\n        'not',\n        'on',\n        'yes',\n        '@',\n        'no',\n        'off',\n        'true',\n        'false',\n        'null',\n        'this',\n        'new',\n        'delete',\n        'typeof',\n        'in',\n        'instanceof',\n        'return',\n        'throw',\n        'break',\n        'continue',\n        'debugger',\n        'if',\n        'else',\n        'switch',\n        'for',\n        'while',\n        'do',\n        'try',\n        'catch',\n        'finally',\n        'class',\n        'extends',\n        'super',\n        'undefined',\n        'then',\n        'unless',\n        'until',\n        'loop',\n        'of',\n        'by',\n        'when'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/\\@[a-zA-Z_]\\w*/, 'variable.predefined'],\n            [\n                /[a-zA-Z_]\\w*/,\n                {\n                    cases: {\n                        this: 'variable.predefined',\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': ''\n                    }\n                }\n            ],\n            // whitespace\n            [/[ \\t\\r\\n]+/, ''],\n            // Comments\n            [/###/, 'comment', '@comment'],\n            [/#.*$/, 'comment'],\n            // regular expressions\n            ['///', { token: 'regexp', next: '@hereregexp' }],\n            [/^(\\s*)(@regEx)/, ['', 'regexp']],\n            [/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n            [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n            [/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n            [/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\n            // delimiters\n            [\n                /}/,\n                {\n                    cases: {\n                        '$S2==interpolatedstring': {\n                            token: 'string',\n                            next: '@pop'\n                        },\n                        '@default': '@brackets'\n                    }\n                }\n            ],\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, 'delimiter'],\n            // numbers\n            [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n            [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n            [/0[0-7]+(?!\\d)/, 'number.octal'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[,.]/, 'delimiter'],\n            // strings:\n            [/\"\"\"/, 'string', '@herestring.\"\"\"'],\n            [/'''/, 'string', \"@herestring.'''\"],\n            [\n                /\"/,\n                {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: '@string.\"' }\n                    }\n                }\n            ],\n            [\n                /'/,\n                {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: \"@string.'\" }\n                    }\n                }\n            ]\n        ],\n        string: [\n            [/[^\"'\\#\\\\]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\./, 'string.escape.invalid'],\n            [/\\./, 'string.escape.invalid'],\n            [\n                /#{/,\n                {\n                    cases: {\n                        '$S2==\"': {\n                            token: 'string',\n                            next: 'root.interpolatedstring'\n                        },\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [\n                /[\"']/,\n                {\n                    cases: {\n                        '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [/#/, 'string']\n        ],\n        herestring: [\n            [\n                /(\"\"\"|''')/,\n                {\n                    cases: {\n                        '$1==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [/[^#\\\\'\"]+/, 'string'],\n            [/['\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\./, 'string.escape.invalid'],\n            [/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\n            [/#/, 'string']\n        ],\n        comment: [\n            [/[^#]+/, 'comment'],\n            [/###/, 'comment', '@pop'],\n            [/#/, 'comment']\n        ],\n        hereregexp: [\n            [/[^\\\\\\/#]+/, 'regexp'],\n            [/\\\\./, 'regexp'],\n            [/#.*$/, 'comment'],\n            ['///[igm]*', { token: 'regexp', next: '@pop' }],\n            [/\\//, 'regexp']\n        ]\n    }\n};\n"],"sourceRoot":""}