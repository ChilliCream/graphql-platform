{"version":3,"sources":["../../../node_modules/monaco-editor/esm/vs/basic-languages/pug/pug.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","folding","offSide","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","tags","symbols","escapes","tokenizer","root","cases","next","include","tag","simpleText","attributeList","whitespace","blockText","comment","string","value"],"mappings":"uIAAA,qFAIO,IAAIA,EAAO,CACdC,SAAU,CACNC,YAAa,MAEjBC,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,aAE/CC,QAAS,CACLC,SAAS,IAGNC,EAAW,CAClBC,aAAc,GACdC,aAAc,OACdC,YAAY,EACZV,SAAU,CACN,CAAEW,MAAO,kBAAmBT,KAAM,IAAKC,MAAO,KAC9C,CAAEQ,MAAO,kBAAmBT,KAAM,IAAKC,MAAO,KAC9C,CAAEQ,MAAO,wBAAyBT,KAAM,IAAKC,MAAO,MAExDS,SAAU,CACN,SACA,QACA,OACA,UACA,UACA,OACA,OACA,UACA,MACA,KACA,KACA,UACA,QACA,SACA,SACA,MACA,QAEJC,KAAM,CACF,IACA,OACA,UACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,WACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,SACA,OACA,OACA,MACA,WACA,UACA,WACA,KACA,MACA,UACA,MACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,OACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,SACA,MACA,QACA,KACA,OACA,MACA,OACA,OACA,OACA,QACA,MACA,WACA,WACA,SACA,KACA,WACA,SACA,SACA,IACA,QACA,MACA,WACA,IACA,KACA,KACA,OACA,IACA,OACA,SACA,UACA,SACA,QACA,SACA,OACA,SACA,SACA,QACA,MACA,UACA,MACA,QACA,QACA,KACA,WACA,QACA,KACA,QA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","file":"static/js/51.32f41a56.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: '//'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] }\n    ],\n    folding: {\n        offSide: true\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.pug',\n    ignoreCase: true,\n    brackets: [\n        { token: 'delimiter.curly', open: '{', close: '}' },\n        { token: 'delimiter.array', open: '[', close: ']' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' }\n    ],\n    keywords: [\n        'append',\n        'block',\n        'case',\n        'default',\n        'doctype',\n        'each',\n        'else',\n        'extends',\n        'for',\n        'if',\n        'in',\n        'include',\n        'mixin',\n        'typeof',\n        'unless',\n        'var',\n        'when'\n    ],\n    tags: [\n        'a',\n        'abbr',\n        'acronym',\n        'address',\n        'area',\n        'article',\n        'aside',\n        'audio',\n        'b',\n        'base',\n        'basefont',\n        'bdi',\n        'bdo',\n        'blockquote',\n        'body',\n        'br',\n        'button',\n        'canvas',\n        'caption',\n        'center',\n        'cite',\n        'code',\n        'col',\n        'colgroup',\n        'command',\n        'datalist',\n        'dd',\n        'del',\n        'details',\n        'dfn',\n        'div',\n        'dl',\n        'dt',\n        'em',\n        'embed',\n        'fieldset',\n        'figcaption',\n        'figure',\n        'font',\n        'footer',\n        'form',\n        'frame',\n        'frameset',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'head',\n        'header',\n        'hgroup',\n        'hr',\n        'html',\n        'i',\n        'iframe',\n        'img',\n        'input',\n        'ins',\n        'keygen',\n        'kbd',\n        'label',\n        'li',\n        'link',\n        'map',\n        'mark',\n        'menu',\n        'meta',\n        'meter',\n        'nav',\n        'noframes',\n        'noscript',\n        'object',\n        'ol',\n        'optgroup',\n        'option',\n        'output',\n        'p',\n        'param',\n        'pre',\n        'progress',\n        'q',\n        'rp',\n        'rt',\n        'ruby',\n        's',\n        'samp',\n        'script',\n        'section',\n        'select',\n        'small',\n        'source',\n        'span',\n        'strike',\n        'strong',\n        'style',\n        'sub',\n        'summary',\n        'sup',\n        'table',\n        'tbody',\n        'td',\n        'textarea',\n        'tfoot',\n        'th',\n        'thead',\n        'time',\n        'title',\n        'tr',\n        'tracks',\n        'tt',\n        'u',\n        'ul',\n        'video',\n        'wbr'\n    ],\n    // we include these common regular expressions\n    symbols: /[\\+\\-\\*\\%\\&\\|\\!\\=\\/\\.\\,\\:]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    tokenizer: {\n        root: [\n            // Tag or a keyword at start\n            [\n                /^(\\s*)([a-zA-Z_-][\\w-]*)/,\n                {\n                    cases: {\n                        '$2@tags': {\n                            cases: {\n                                '@eos': ['', 'tag'],\n                                '@default': ['', { token: 'tag', next: '@tag.$1' }]\n                            }\n                        },\n                        '$2@keywords': ['', { token: 'keyword.$2' }],\n                        '@default': ['', '']\n                    }\n                }\n            ],\n            // id\n            [\n                /^(\\s*)(#[a-zA-Z_-][\\w-]*)/,\n                {\n                    cases: {\n                        '@eos': ['', 'tag.id'],\n                        '@default': ['', { token: 'tag.id', next: '@tag.$1' }]\n                    }\n                }\n            ],\n            // class\n            [\n                /^(\\s*)(\\.[a-zA-Z_-][\\w-]*)/,\n                {\n                    cases: {\n                        '@eos': ['', 'tag.class'],\n                        '@default': ['', { token: 'tag.class', next: '@tag.$1' }]\n                    }\n                }\n            ],\n            // plain text with pipe\n            [/^(\\s*)(\\|.*)$/, ''],\n            { include: '@whitespace' },\n            // keywords\n            [\n                /[a-zA-Z_$][\\w$]*/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': ''\n                    }\n                }\n            ],\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, 'delimiter'],\n            // numbers\n            [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/\\d+/, 'number'],\n            // strings:\n            [/\"/, 'string', '@string.\"'],\n            [/'/, 'string', \"@string.'\"]\n        ],\n        tag: [\n            [/(\\.)(\\s*$)/, [{ token: 'delimiter', next: '@blockText.$S2.' }, '']],\n            [/\\s+/, { token: '', next: '@simpleText' }],\n            // id\n            [\n                /#[a-zA-Z_-][\\w-]*/,\n                {\n                    cases: {\n                        '@eos': { token: 'tag.id', next: '@pop' },\n                        '@default': 'tag.id'\n                    }\n                }\n            ],\n            // class\n            [\n                /\\.[a-zA-Z_-][\\w-]*/,\n                {\n                    cases: {\n                        '@eos': { token: 'tag.class', next: '@pop' },\n                        '@default': 'tag.class'\n                    }\n                }\n            ],\n            // attributes\n            [/\\(/, { token: 'delimiter.parenthesis', next: '@attributeList' }]\n        ],\n        simpleText: [\n            [/[^#]+$/, { token: '', next: '@popall' }],\n            [/[^#]+/, { token: '' }],\n            // interpolation\n            [\n                /(#{)([^}]*)(})/,\n                {\n                    cases: {\n                        '@eos': [\n                            'interpolation.delimiter',\n                            'interpolation',\n                            {\n                                token: 'interpolation.delimiter',\n                                next: '@popall'\n                            }\n                        ],\n                        '@default': [\n                            'interpolation.delimiter',\n                            'interpolation',\n                            'interpolation.delimiter'\n                        ]\n                    }\n                }\n            ],\n            [/#$/, { token: '', next: '@popall' }],\n            [/#/, '']\n        ],\n        attributeList: [\n            [/\\s+/, ''],\n            [\n                /(\\w+)(\\s*=\\s*)(\"|')/,\n                ['attribute.name', 'delimiter', { token: 'attribute.value', next: '@value.$3' }]\n            ],\n            [/\\w+/, 'attribute.name'],\n            [\n                /,/,\n                {\n                    cases: {\n                        '@eos': {\n                            token: 'attribute.delimiter',\n                            next: '@popall'\n                        },\n                        '@default': 'attribute.delimiter'\n                    }\n                }\n            ],\n            [/\\)$/, { token: 'delimiter.parenthesis', next: '@popall' }],\n            [/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        whitespace: [\n            [/^(\\s*)(\\/\\/.*)$/, { token: 'comment', next: '@blockText.$1.comment' }],\n            [/[ \\t\\r\\n]+/, ''],\n            [/<!--/, { token: 'comment', next: '@comment' }]\n        ],\n        blockText: [\n            [\n                /^\\s+.*$/,\n                {\n                    cases: {\n                        '($S2\\\\s+.*$)': { token: '$S3' },\n                        '@default': { token: '@rematch', next: '@popall' }\n                    }\n                }\n            ],\n            [/./, { token: '@rematch', next: '@popall' }]\n        ],\n        comment: [\n            [/[^<\\-]+/, 'comment.content'],\n            [/-->/, { token: 'comment', next: '@pop' }],\n            [/<!--/, 'comment.content.invalid'],\n            [/[<\\-]/, 'comment.content']\n        ],\n        string: [\n            [\n                /[^\\\\\"'#]+/,\n                {\n                    cases: {\n                        '@eos': { token: 'string', next: '@popall' },\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [\n                /@escapes/,\n                {\n                    cases: {\n                        '@eos': { token: 'string.escape', next: '@popall' },\n                        '@default': 'string.escape'\n                    }\n                }\n            ],\n            [\n                /\\\\./,\n                {\n                    cases: {\n                        '@eos': {\n                            token: 'string.escape.invalid',\n                            next: '@popall'\n                        },\n                        '@default': 'string.escape.invalid'\n                    }\n                }\n            ],\n            // interpolation\n            [\n                /(#{)([^}]*)(})/,\n                ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter']\n            ],\n            [/#/, 'string'],\n            [\n                /[\"']/,\n                {\n                    cases: {\n                        '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': { token: 'string' }\n                    }\n                }\n            ]\n        ],\n        // Almost identical to above, except for escapes and the output token\n        value: [\n            [\n                /[^\\\\\"']+/,\n                {\n                    cases: {\n                        '@eos': { token: 'attribute.value', next: '@popall' },\n                        '@default': 'attribute.value'\n                    }\n                }\n            ],\n            [\n                /\\\\./,\n                {\n                    cases: {\n                        '@eos': { token: 'attribute.value', next: '@popall' },\n                        '@default': 'attribute.value'\n                    }\n                }\n            ],\n            [\n                /[\"']/,\n                {\n                    cases: {\n                        '$#==$S2': { token: 'attribute.value', next: '@pop' },\n                        '@default': { token: 'attribute.value' }\n                    }\n                }\n            ]\n        ]\n    }\n};\n"],"sourceRoot":""}