HotChocolate.AspNetCore.GraphQLRequestException.GraphQLRequestException(IError! error) -> void
HotChocolate.AspNetCore.GraphQLRequestException.GraphQLRequestException(params IError![]! errors) -> void
HotChocolate.AspNetCore.GraphQLRequestException.GraphQLRequestException(System.Collections.Generic.IEnumerable<IError!>! errors) -> void
HotChocolate.AspNetCore.HttpGetMiddleware.HttpGetMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.AspNetCore.Serialization.IHttpRequestParser! requestParser, NameString! schemaName) -> void
HotChocolate.AspNetCore.HttpGetSchemaMiddleware.HttpGetSchemaMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, NameString! schemaName) -> void
HotChocolate.AspNetCore.HttpMultipartMiddleware.HttpMultipartMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.AspNetCore.Serialization.IHttpRequestParser! requestParser, NameString! schemaName, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Http.Features.FormOptions!>! formOptions) -> void
HotChocolate.AspNetCore.HttpPostMiddleware.HttpPostMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.AspNetCore.Serialization.IHttpRequestParser! requestParser, NameString! schemaName) -> void
HotChocolate.AspNetCore.IHttpRequestInterceptor.OnCreateAsync(Microsoft.AspNetCore.Http.HttpContext! context, IRequestExecutor! requestExecutor, IQueryRequestBuilder! requestBuilder, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.AspNetCore.ISocketSessionInterceptor.OnRequestAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, IQueryRequestBuilder! requestBuilder, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.AspNetCore.MiddlewareBase.ExecuteBatchAsync(Microsoft.AspNetCore.Http.HttpContext! context, IRequestExecutor! requestExecutor, HotChocolate.AspNetCore.IHttpRequestInterceptor! requestInterceptor, System.Collections.Generic.IReadOnlyList<GraphQLRequest!>! requests) -> System.Threading.Tasks.Task<IBatchQueryResult!>!
HotChocolate.AspNetCore.MiddlewareBase.ExecuteOperationBatchAsync(Microsoft.AspNetCore.Http.HttpContext! context, IRequestExecutor! requestExecutor, HotChocolate.AspNetCore.IHttpRequestInterceptor! requestInterceptor, GraphQLRequest! request, System.Collections.Generic.IReadOnlyList<string!>! operationNames) -> System.Threading.Tasks.Task<IBatchQueryResult!>!
HotChocolate.AspNetCore.MiddlewareBase.ExecuteSingleAsync(Microsoft.AspNetCore.Http.HttpContext! context, IRequestExecutor! requestExecutor, HotChocolate.AspNetCore.IHttpRequestInterceptor! requestInterceptor, GraphQLRequest! request, OperationType![]? allowedOperations = null) -> System.Threading.Tasks.Task<IExecutionResult!>!
HotChocolate.AspNetCore.MiddlewareBase.ExecutorProxy.get -> RequestExecutorProxy!
HotChocolate.AspNetCore.MiddlewareBase.GetExecutorAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<IRequestExecutor!>
HotChocolate.AspNetCore.MiddlewareBase.MiddlewareBase(Microsoft.AspNetCore.Http.RequestDelegate! next, IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, NameString! schemaName) -> void
HotChocolate.AspNetCore.MiddlewareBase.SchemaName.get -> NameString!
HotChocolate.AspNetCore.MiddlewareBase.WriteResultAsync(Microsoft.AspNetCore.Http.HttpResponse! response, IExecutionResult! result, System.Net.HttpStatusCode? statusCode, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.AspNetCore.Serialization.IHttpRequestParser.ReadJsonRequestAsync(System.IO.Stream! stream, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<GraphQLRequest!>!>
HotChocolate.AspNetCore.Serialization.IHttpRequestParser.ReadOperationsRequest(string! operations) -> System.Collections.Generic.IReadOnlyList<GraphQLRequest!>!
HotChocolate.AspNetCore.Serialization.IHttpRequestParser.ReadParamsRequest(Microsoft.AspNetCore.Http.IQueryCollection! parameters) -> GraphQLRequest!
HotChocolate.AspNetCore.Serialization.IHttpResultSerializer.GetContentType(IExecutionResult! result) -> string!
HotChocolate.AspNetCore.Serialization.IHttpResultSerializer.GetStatusCode(IExecutionResult! result) -> System.Net.HttpStatusCode
HotChocolate.AspNetCore.Serialization.IHttpResultSerializer.SerializeAsync(IExecutionResult! result, System.IO.Stream! stream, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.AspNetCore.Subscriptions.ISubscriptionSession.Subscription.get -> ISubscription!
HotChocolate.AspNetCore.Subscriptions.Messages.DataResultMessage.DataResultMessage(string! id, IQueryResult! payload) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.DataStartMessage.DataStartMessage(string! id, GraphQLRequest! request) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.DataStartMessageHandler.DataStartMessageHandler(IRequestExecutor! requestExecutor, HotChocolate.AspNetCore.ISocketSessionInterceptor! socketSessionInterceptor, IErrorHandler! errorHandler, IDiagnosticEvents! diagnosticEvents) -> void
HotChocolate.AspNetCore.ToolOptionsFileMiddleware.ToolOptionsFileMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, NameString! schemaName, Microsoft.AspNetCore.Http.PathString matchUrl) -> void
HotChocolate.AspNetCore.WebSocketSubscriptionMiddleware.WebSocketSubscriptionMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, NameString! schemaName) -> void
override HotChocolate.AspNetCore.HttpMultipartMiddleware.GetRequestsFromBody(Microsoft.AspNetCore.Http.HttpRequest! httpRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<GraphQLRequest!>!>
static Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGraphQL(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpointRouteBuilder, Microsoft.AspNetCore.Http.PathString path, NameString! schemaName = null) -> HotChocolate.AspNetCore.Extensions.GraphQLEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGraphQL(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpointRouteBuilder, string! path = "/graphql", NameString! schemaName = null) -> HotChocolate.AspNetCore.Extensions.GraphQLEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.UseGraphQL(this Microsoft.AspNetCore.Builder.IApplicationBuilder! applicationBuilder, Microsoft.AspNetCore.Http.PathString pathMatch = default(Microsoft.AspNetCore.Http.PathString), NameString! schemaName = null) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQL(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, ISchema! schema, int maxAllowedRequestSize = 20000000) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQL(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, ISchemaBuilder! schemaBuilder, int maxAllowedRequestSize = 20000000) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQL(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<System.IServiceProvider!, ISchema!>! schemaFactory, int maxAllowedRequestSize = 20000000) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQLServer(this IRequestExecutorBuilder! builder, NameString! schemaName = null) -> IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQLServer(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, NameString! schemaName = null, int maxAllowedRequestSize = 20000000) -> IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddHttpRequestInterceptor(this IRequestExecutorBuilder! builder, HotChocolate.AspNetCore.HttpRequestInterceptorDelegate! interceptor) -> IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddHttpRequestInterceptor<T>(this IRequestExecutorBuilder! builder) -> IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddHttpRequestInterceptor<T>(this IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T!>! factory) -> IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddSocketSessionInterceptor<T>(this IRequestExecutorBuilder! builder) -> IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddSocketSessionInterceptor<T>(this IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T!>! factory) -> IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.InitializeOnStartup(this IRequestExecutorBuilder! builder) -> IRequestExecutorBuilder!
virtual HotChocolate.AspNetCore.DefaultHttpRequestInterceptor.OnCreateAsync(Microsoft.AspNetCore.Http.HttpContext! context, IRequestExecutor! requestExecutor, IQueryRequestBuilder! requestBuilder, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual HotChocolate.AspNetCore.DefaultSocketSessionInterceptor.OnRequestAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, IQueryRequestBuilder! requestBuilder, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual HotChocolate.AspNetCore.HttpPostMiddleware.GetRequestsFromBody(Microsoft.AspNetCore.Http.HttpRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<GraphQLRequest!>!>
virtual HotChocolate.AspNetCore.Serialization.DefaultHttpResultSerializer.GetContentType(IExecutionResult! result) -> string!
virtual HotChocolate.AspNetCore.Serialization.DefaultHttpResultSerializer.GetStatusCode(IExecutionResult! result) -> System.Net.HttpStatusCode
virtual HotChocolate.AspNetCore.Serialization.DefaultHttpResultSerializer.SerializeAsync(IExecutionResult! result, System.IO.Stream! stream, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask