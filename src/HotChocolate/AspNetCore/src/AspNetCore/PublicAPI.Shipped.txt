#nullable enable
abstract HotChocolate.AspNetCore.Subscriptions.Messages.MessageHandler<T>.HandleAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, T! message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.AllowedContentType
HotChocolate.AspNetCore.AllowedContentType.Form = 2 -> HotChocolate.AspNetCore.AllowedContentType
HotChocolate.AspNetCore.AllowedContentType.Json = 1 -> HotChocolate.AspNetCore.AllowedContentType
HotChocolate.AspNetCore.AllowedContentType.None = 0 -> HotChocolate.AspNetCore.AllowedContentType
HotChocolate.AspNetCore.AllowedGetOperations
HotChocolate.AspNetCore.AllowedGetOperations.Query = 0 -> HotChocolate.AspNetCore.AllowedGetOperations
HotChocolate.AspNetCore.AllowedGetOperations.QueryAndMutation = 1 -> HotChocolate.AspNetCore.AllowedGetOperations
HotChocolate.AspNetCore.DefaultCredentials
HotChocolate.AspNetCore.DefaultCredentials.Include = 0 -> HotChocolate.AspNetCore.DefaultCredentials
HotChocolate.AspNetCore.DefaultCredentials.Omit = 1 -> HotChocolate.AspNetCore.DefaultCredentials
HotChocolate.AspNetCore.DefaultCredentials.SameOrigin = 2 -> HotChocolate.AspNetCore.DefaultCredentials
HotChocolate.AspNetCore.DefaultHttpMethod
HotChocolate.AspNetCore.DefaultHttpMethod.Get = 0 -> HotChocolate.AspNetCore.DefaultHttpMethod
HotChocolate.AspNetCore.DefaultHttpMethod.Post = 1 -> HotChocolate.AspNetCore.DefaultHttpMethod
HotChocolate.AspNetCore.DefaultHttpRequestInterceptor
HotChocolate.AspNetCore.DefaultHttpRequestInterceptor.DefaultHttpRequestInterceptor() -> void
HotChocolate.AspNetCore.DefaultSocketSessionInterceptor
HotChocolate.AspNetCore.DefaultSocketSessionInterceptor.DefaultSocketSessionInterceptor() -> void
HotChocolate.AspNetCore.Extensions.GraphQLEndpointConventionBuilder
HotChocolate.AspNetCore.Extensions.GraphQLEndpointConventionBuilder.Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder!>! convention) -> void
HotChocolate.AspNetCore.GraphQLRequestException
HotChocolate.AspNetCore.GraphQLRequestException.GraphQLRequestException(HotChocolate.IError! error) -> void
HotChocolate.AspNetCore.GraphQLRequestException.GraphQLRequestException(params HotChocolate.IError![]! errors) -> void
HotChocolate.AspNetCore.GraphQLRequestException.GraphQLRequestException(string! message) -> void
HotChocolate.AspNetCore.GraphQLRequestException.GraphQLRequestException(System.Collections.Generic.IEnumerable<HotChocolate.IError!>! errors) -> void
HotChocolate.AspNetCore.GraphQLRequestException.GraphQLRequestException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
HotChocolate.AspNetCore.GraphQLServerOptions
HotChocolate.AspNetCore.GraphQLServerOptions.AllowedGetOperations.get -> HotChocolate.AspNetCore.AllowedGetOperations
HotChocolate.AspNetCore.GraphQLServerOptions.AllowedGetOperations.set -> void
HotChocolate.AspNetCore.GraphQLServerOptions.EnableGetRequests.get -> bool
HotChocolate.AspNetCore.GraphQLServerOptions.EnableGetRequests.set -> void
HotChocolate.AspNetCore.GraphQLServerOptions.EnableMultipartRequests.get -> bool
HotChocolate.AspNetCore.GraphQLServerOptions.EnableMultipartRequests.set -> void
HotChocolate.AspNetCore.GraphQLServerOptions.EnableSchemaRequests.get -> bool
HotChocolate.AspNetCore.GraphQLServerOptions.EnableSchemaRequests.set -> void
HotChocolate.AspNetCore.GraphQLServerOptions.GraphQLServerOptions() -> void
HotChocolate.AspNetCore.GraphQLServerOptions.Tool.get -> HotChocolate.AspNetCore.GraphQLToolOptions!
HotChocolate.AspNetCore.GraphQLToolOptions
HotChocolate.AspNetCore.GraphQLToolOptions.Credentials.get -> HotChocolate.AspNetCore.DefaultCredentials?
HotChocolate.AspNetCore.GraphQLToolOptions.Credentials.set -> void
HotChocolate.AspNetCore.GraphQLToolOptions.Document.get -> string?
HotChocolate.AspNetCore.GraphQLToolOptions.Document.set -> void
HotChocolate.AspNetCore.GraphQLToolOptions.Enable.get -> bool
HotChocolate.AspNetCore.GraphQLToolOptions.Enable.set -> void
HotChocolate.AspNetCore.GraphQLToolOptions.GraphQLToolOptions() -> void
HotChocolate.AspNetCore.GraphQLToolOptions.HttpHeaders.get -> Microsoft.AspNetCore.Http.IHeaderDictionary?
HotChocolate.AspNetCore.GraphQLToolOptions.HttpHeaders.set -> void
HotChocolate.AspNetCore.GraphQLToolOptions.HttpMethod.get -> HotChocolate.AspNetCore.DefaultHttpMethod?
HotChocolate.AspNetCore.GraphQLToolOptions.HttpMethod.set -> void
HotChocolate.AspNetCore.HttpGetMiddleware
HotChocolate.AspNetCore.HttpGetMiddleware.HttpGetMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, HotChocolate.Execution.IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.AspNetCore.Serialization.IHttpRequestParser! requestParser, HotChocolate.NameString schemaName) -> void
HotChocolate.AspNetCore.HttpGetMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.HttpGetSchemaMiddleware
HotChocolate.AspNetCore.HttpGetSchemaMiddleware.HttpGetSchemaMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, HotChocolate.Execution.IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.NameString schemaName) -> void
HotChocolate.AspNetCore.HttpGetSchemaMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.HttpMultipartMiddleware
HotChocolate.AspNetCore.HttpMultipartMiddleware.HttpMultipartMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, HotChocolate.Execution.IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.AspNetCore.Serialization.IHttpRequestParser! requestParser, HotChocolate.NameString schemaName, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Http.Features.FormOptions!>! formOptions) -> void
HotChocolate.AspNetCore.HttpPostMiddleware
HotChocolate.AspNetCore.HttpPostMiddleware.HandleRequestAsync(Microsoft.AspNetCore.Http.HttpContext! context, HotChocolate.AspNetCore.AllowedContentType contentType) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.HttpPostMiddleware.HttpPostMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, HotChocolate.Execution.IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.AspNetCore.Serialization.IHttpRequestParser! requestParser, HotChocolate.NameString schemaName) -> void
HotChocolate.AspNetCore.HttpPostMiddleware.RequestParser.get -> HotChocolate.AspNetCore.Serialization.IHttpRequestParser!
HotChocolate.AspNetCore.HttpRequestInterceptorDelegate
HotChocolate.AspNetCore.IHttpRequestInterceptor
HotChocolate.AspNetCore.IHttpRequestInterceptor.OnCreateAsync(Microsoft.AspNetCore.Http.HttpContext! context, HotChocolate.Execution.IRequestExecutor! requestExecutor, HotChocolate.Execution.IQueryRequestBuilder! requestBuilder, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.AspNetCore.ISocketSessionInterceptor
HotChocolate.AspNetCore.ISocketSessionInterceptor.OnCloseAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.AspNetCore.ISocketSessionInterceptor.OnConnectAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, HotChocolate.AspNetCore.Subscriptions.Messages.InitializeConnectionMessage! message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.AspNetCore.Subscriptions.ConnectionStatus!>
HotChocolate.AspNetCore.ISocketSessionInterceptor.OnRequestAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, HotChocolate.Execution.IQueryRequestBuilder! requestBuilder, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.AspNetCore.MiddlewareBase
HotChocolate.AspNetCore.MiddlewareBase.Dispose() -> void
HotChocolate.AspNetCore.MiddlewareBase.ExecuteBatchAsync(Microsoft.AspNetCore.Http.HttpContext! context, HotChocolate.Execution.IRequestExecutor! requestExecutor, HotChocolate.AspNetCore.IHttpRequestInterceptor! requestInterceptor, System.Collections.Generic.IReadOnlyList<HotChocolate.Language.GraphQLRequest!>! requests) -> System.Threading.Tasks.Task<HotChocolate.Execution.IBatchQueryResult!>!
HotChocolate.AspNetCore.MiddlewareBase.ExecuteOperationBatchAsync(Microsoft.AspNetCore.Http.HttpContext! context, HotChocolate.Execution.IRequestExecutor! requestExecutor, HotChocolate.AspNetCore.IHttpRequestInterceptor! requestInterceptor, HotChocolate.Language.GraphQLRequest! request, System.Collections.Generic.IReadOnlyList<string!>! operationNames) -> System.Threading.Tasks.Task<HotChocolate.Execution.IBatchQueryResult!>!
HotChocolate.AspNetCore.MiddlewareBase.ExecuteSingleAsync(Microsoft.AspNetCore.Http.HttpContext! context, HotChocolate.Execution.IRequestExecutor! requestExecutor, HotChocolate.AspNetCore.IHttpRequestInterceptor! requestInterceptor, HotChocolate.Language.GraphQLRequest! request, HotChocolate.Language.OperationType[]? allowedOperations = null) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
HotChocolate.AspNetCore.MiddlewareBase.ExecutorProxy.get -> HotChocolate.Execution.RequestExecutorProxy!
HotChocolate.AspNetCore.MiddlewareBase.GetExecutorAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.IRequestExecutor!>
HotChocolate.AspNetCore.MiddlewareBase.MiddlewareBase(Microsoft.AspNetCore.Http.RequestDelegate! next, HotChocolate.Execution.IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.NameString schemaName) -> void
HotChocolate.AspNetCore.MiddlewareBase.NextAsync(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.MiddlewareBase.SchemaName.get -> HotChocolate.NameString
HotChocolate.AspNetCore.MiddlewareBase.WriteResultAsync(Microsoft.AspNetCore.Http.HttpResponse! response, HotChocolate.Execution.IExecutionResult! result, System.Net.HttpStatusCode? statusCode, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.AspNetCore.Serialization.DefaultHttpResultSerializer
HotChocolate.AspNetCore.Serialization.DefaultHttpResultSerializer.DefaultHttpResultSerializer(HotChocolate.AspNetCore.Serialization.HttpResultSerialization batchSerialization = HotChocolate.AspNetCore.Serialization.HttpResultSerialization.MultiPartChunked, HotChocolate.AspNetCore.Serialization.HttpResultSerialization deferSerialization = HotChocolate.AspNetCore.Serialization.HttpResultSerialization.MultiPartChunked, bool indented = false) -> void
HotChocolate.AspNetCore.Serialization.HttpResultSerialization
HotChocolate.AspNetCore.Serialization.HttpResultSerialization.JsonArray = 0 -> HotChocolate.AspNetCore.Serialization.HttpResultSerialization
HotChocolate.AspNetCore.Serialization.HttpResultSerialization.MultiPartChunked = 1 -> HotChocolate.AspNetCore.Serialization.HttpResultSerialization
HotChocolate.AspNetCore.Serialization.IHttpRequestParser
HotChocolate.AspNetCore.Serialization.IHttpRequestParser.ReadJsonRequestAsync(System.IO.Stream! stream, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<HotChocolate.Language.GraphQLRequest!>!>
HotChocolate.AspNetCore.Serialization.IHttpRequestParser.ReadOperationsRequest(string! operations) -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.GraphQLRequest!>!
HotChocolate.AspNetCore.Serialization.IHttpRequestParser.ReadParamsRequest(Microsoft.AspNetCore.Http.IQueryCollection! parameters) -> HotChocolate.Language.GraphQLRequest!
HotChocolate.AspNetCore.Serialization.IHttpResultSerializer
HotChocolate.AspNetCore.Serialization.IHttpResultSerializer.GetContentType(HotChocolate.Execution.IExecutionResult! result) -> string!
HotChocolate.AspNetCore.Serialization.IHttpResultSerializer.GetStatusCode(HotChocolate.Execution.IExecutionResult! result) -> System.Net.HttpStatusCode
HotChocolate.AspNetCore.Serialization.IHttpResultSerializer.SerializeAsync(HotChocolate.Execution.IExecutionResult! result, System.IO.Stream! stream, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.AspNetCore.Subscriptions.ConnectionStatus
HotChocolate.AspNetCore.Subscriptions.ConnectionStatus.Accepted.get -> bool
HotChocolate.AspNetCore.Subscriptions.ConnectionStatus.Extensions.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object?>?
HotChocolate.AspNetCore.Subscriptions.ConnectionStatus.Message.get -> string!
HotChocolate.AspNetCore.Subscriptions.IMessagePipeline
HotChocolate.AspNetCore.Subscriptions.IMessagePipeline.ProcessAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, System.Buffers.ReadOnlySequence<byte> slice, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.ISocketConnection
HotChocolate.AspNetCore.Subscriptions.ISocketConnection.CloseAsync(string! message, HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus closeStatus, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.ISocketConnection.Closed.get -> bool
HotChocolate.AspNetCore.Subscriptions.ISocketConnection.HttpContext.get -> Microsoft.AspNetCore.Http.HttpContext!
HotChocolate.AspNetCore.Subscriptions.ISocketConnection.ReceiveAsync(System.IO.Pipelines.PipeWriter! writer, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.ISocketConnection.RequestAborted.get -> System.Threading.CancellationToken
HotChocolate.AspNetCore.Subscriptions.ISocketConnection.RequestServices.get -> System.IServiceProvider!
HotChocolate.AspNetCore.Subscriptions.ISocketConnection.SendAsync(byte[]! message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.ISocketConnection.Subscriptions.get -> HotChocolate.AspNetCore.Subscriptions.ISubscriptionManager!
HotChocolate.AspNetCore.Subscriptions.ISocketConnection.TryOpenAsync() -> System.Threading.Tasks.Task<bool>!
HotChocolate.AspNetCore.Subscriptions.ISocketSession
HotChocolate.AspNetCore.Subscriptions.ISocketSession.HandleAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.ISubscriptionManager
HotChocolate.AspNetCore.Subscriptions.ISubscriptionManager.Register(HotChocolate.AspNetCore.Subscriptions.ISubscriptionSession! subscriptionSession) -> void
HotChocolate.AspNetCore.Subscriptions.ISubscriptionManager.Unregister(string! subscriptionId) -> void
HotChocolate.AspNetCore.Subscriptions.ISubscriptionSession
HotChocolate.AspNetCore.Subscriptions.ISubscriptionSession.Completed -> System.EventHandler?
HotChocolate.AspNetCore.Subscriptions.ISubscriptionSession.Id.get -> string!
HotChocolate.AspNetCore.Subscriptions.ISubscriptionSession.Subscription.get -> HotChocolate.Execution.Processing.ISubscription!
HotChocolate.AspNetCore.Subscriptions.Messages.AcceptConnectionMessage
HotChocolate.AspNetCore.Subscriptions.Messages.AcceptConnectionMessage.AcceptConnectionMessage() -> void
HotChocolate.AspNetCore.Subscriptions.Messages.DataCompleteMessage
HotChocolate.AspNetCore.Subscriptions.Messages.DataCompleteMessage.DataCompleteMessage(string! id) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.DataResultMessage
HotChocolate.AspNetCore.Subscriptions.Messages.DataResultMessage.DataResultMessage(string! id, HotChocolate.Execution.IQueryResult! payload) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.DataStartMessage
HotChocolate.AspNetCore.Subscriptions.Messages.DataStartMessage.DataStartMessage(string! id, HotChocolate.Language.GraphQLRequest! request) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.DataStartMessageHandler
HotChocolate.AspNetCore.Subscriptions.Messages.DataStartMessageHandler.DataStartMessageHandler(HotChocolate.Execution.IRequestExecutor! requestExecutor, HotChocolate.AspNetCore.ISocketSessionInterceptor! socketSessionInterceptor, HotChocolate.Execution.Instrumentation.IDiagnosticEvents! diagnosticEvents) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.DataStopMessage
HotChocolate.AspNetCore.Subscriptions.Messages.DataStopMessage.DataStopMessage(string! id) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.DataStopMessageHandler
HotChocolate.AspNetCore.Subscriptions.Messages.DataStopMessageHandler.DataStopMessageHandler() -> void
HotChocolate.AspNetCore.Subscriptions.Messages.IMessageHandler
HotChocolate.AspNetCore.Subscriptions.Messages.IMessageHandler.CanHandle(HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage! message) -> bool
HotChocolate.AspNetCore.Subscriptions.Messages.IMessageHandler.HandleAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage! message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.Messages.InitializeConnectionMessage
HotChocolate.AspNetCore.Subscriptions.Messages.InitializeConnectionMessage.InitializeConnectionMessage(System.Collections.Generic.IReadOnlyDictionary<string!, object?>? payload = null) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.InitializeConnectionMessageHandler
HotChocolate.AspNetCore.Subscriptions.Messages.InitializeConnectionMessageHandler.InitializeConnectionMessageHandler(HotChocolate.AspNetCore.ISocketSessionInterceptor! socketSessionInterceptor) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.KeepConnectionAliveMessage
HotChocolate.AspNetCore.Subscriptions.Messages.KeepConnectionAliveMessage.KeepConnectionAliveMessage() -> void
HotChocolate.AspNetCore.Subscriptions.Messages.MessageHandler<T>
HotChocolate.AspNetCore.Subscriptions.Messages.MessageHandler<T>.CanHandle(HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage! message) -> bool
HotChocolate.AspNetCore.Subscriptions.Messages.MessageHandler<T>.HandleAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage! message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.Messages.MessageHandler<T>.MessageHandler() -> void
HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage
HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage.OperationMessage(string! type, string! id) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage.OperationMessage(string! type) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage.Type.get -> string!
HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage<T>
HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage<T>.OperationMessage(string! type, string! id, T payload) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage<T>.OperationMessage(string! type, T payload) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage<T>.Payload.get -> T
HotChocolate.AspNetCore.Subscriptions.Messages.RejectConnectionMessage
HotChocolate.AspNetCore.Subscriptions.Messages.RejectConnectionMessage.RejectConnectionMessage(string! message, System.Collections.Generic.IReadOnlyDictionary<string!, object?>? extensions = null) -> void
HotChocolate.AspNetCore.Subscriptions.Messages.TerminateConnectionMessage
HotChocolate.AspNetCore.Subscriptions.Messages.TerminateConnectionMessage.TerminateConnectionMessage() -> void
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.EndpointUnavailable = 2 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.InternalServerError = 9 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.InvalidMessageType = 4 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.InvalidPayloadData = 5 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.MandatoryExtension = 8 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.MessageTooBig = 7 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.None = 0 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.NormalClosure = 1 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.PolicyViolation = 6 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus.ProtocolError = 3 -> HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus
HotChocolate.AspNetCore.Subscriptions.SubscriptionManager
HotChocolate.AspNetCore.Subscriptions.SubscriptionManager.Dispose() -> void
HotChocolate.AspNetCore.Subscriptions.SubscriptionManager.GetEnumerator() -> System.Collections.Generic.IEnumerator<HotChocolate.AspNetCore.Subscriptions.ISubscriptionSession!>!
HotChocolate.AspNetCore.Subscriptions.SubscriptionManager.Register(HotChocolate.AspNetCore.Subscriptions.ISubscriptionSession! subscriptionSession) -> void
HotChocolate.AspNetCore.Subscriptions.SubscriptionManager.SubscriptionManager(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection) -> void
HotChocolate.AspNetCore.Subscriptions.SubscriptionManager.Unregister(string! subscriptionId) -> void
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.CloseAsync(string! message, HotChocolate.AspNetCore.Subscriptions.SocketCloseStatus closeStatus, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.Closed.get -> bool
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.Dispose() -> void
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.HttpContext.get -> Microsoft.AspNetCore.Http.HttpContext!
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.ReceiveAsync(System.IO.Pipelines.PipeWriter! writer, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.RequestAborted.get -> System.Threading.CancellationToken
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.RequestServices.get -> System.IServiceProvider!
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.SendAsync(byte[]! message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.Subscriptions.get -> HotChocolate.AspNetCore.Subscriptions.ISubscriptionManager!
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.TryOpenAsync() -> System.Threading.Tasks.Task<bool>!
HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.WebSockets.get -> Microsoft.AspNetCore.Http.WebSocketManager!
HotChocolate.AspNetCore.Subscriptions.WebSocketSession
HotChocolate.AspNetCore.Subscriptions.WebSocketSession.Dispose() -> void
HotChocolate.AspNetCore.Subscriptions.WebSocketSession.HandleAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.ToolDefaultFileMiddleware
HotChocolate.AspNetCore.ToolDefaultFileMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.ToolDefaultFileMiddleware.ToolDefaultFileMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.Extensions.FileProviders.IFileProvider! fileProvider, Microsoft.AspNetCore.Http.PathString matchUrl) -> void
HotChocolate.AspNetCore.ToolOptionsFileMiddleware
HotChocolate.AspNetCore.ToolOptionsFileMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.ToolOptionsFileMiddleware.ToolOptionsFileMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, HotChocolate.Execution.IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.NameString schemaName, Microsoft.AspNetCore.Http.PathString matchUrl) -> void
HotChocolate.AspNetCore.ToolStaticFileMiddleware
HotChocolate.AspNetCore.ToolStaticFileMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.ToolStaticFileMiddleware.ToolStaticFileMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.Extensions.FileProviders.IFileProvider! fileProvider, Microsoft.AspNetCore.Http.PathString matchUrl) -> void
HotChocolate.AspNetCore.WebSocketSubscriptionMiddleware
HotChocolate.AspNetCore.WebSocketSubscriptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
HotChocolate.AspNetCore.WebSocketSubscriptionMiddleware.WebSocketSubscriptionMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, HotChocolate.Execution.IRequestExecutorResolver! executorResolver, HotChocolate.AspNetCore.Serialization.IHttpResultSerializer! resultSerializer, HotChocolate.NameString schemaName) -> void
Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions
Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions
override HotChocolate.AspNetCore.HttpMultipartMiddleware.GetRequestsFromBody(Microsoft.AspNetCore.Http.HttpRequest! httpRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<HotChocolate.Language.GraphQLRequest!>!>
override HotChocolate.AspNetCore.HttpMultipartMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
override HotChocolate.AspNetCore.Subscriptions.Messages.DataCompleteMessage.Id.get -> string!
override HotChocolate.AspNetCore.Subscriptions.Messages.DataStartMessage.Id.get -> string!
override HotChocolate.AspNetCore.Subscriptions.Messages.DataStopMessage.Id.get -> string!
static HotChocolate.AspNetCore.MiddlewareBase.ParseContentType(Microsoft.AspNetCore.Http.HttpContext! context) -> HotChocolate.AspNetCore.AllowedContentType
static HotChocolate.AspNetCore.Subscriptions.ConnectionStatus.Accept() -> HotChocolate.AspNetCore.Subscriptions.ConnectionStatus!
static HotChocolate.AspNetCore.Subscriptions.ConnectionStatus.Reject() -> HotChocolate.AspNetCore.Subscriptions.ConnectionStatus!
static HotChocolate.AspNetCore.Subscriptions.ConnectionStatus.Reject(string! message, System.Collections.Generic.IReadOnlyDictionary<string!, object?>? extensions) -> HotChocolate.AspNetCore.Subscriptions.ConnectionStatus!
static HotChocolate.AspNetCore.Subscriptions.ConnectionStatus.Reject(string! message) -> HotChocolate.AspNetCore.Subscriptions.ConnectionStatus!
static HotChocolate.AspNetCore.Subscriptions.ConnectionStatus.Reject(System.Collections.Generic.IReadOnlyDictionary<string!, object?>! extensions) -> HotChocolate.AspNetCore.Subscriptions.ConnectionStatus!
static HotChocolate.AspNetCore.Subscriptions.Messages.AcceptConnectionMessage.Default.get -> HotChocolate.AspNetCore.Subscriptions.Messages.AcceptConnectionMessage!
static HotChocolate.AspNetCore.Subscriptions.Messages.KeepConnectionAliveMessage.Default.get -> HotChocolate.AspNetCore.Subscriptions.Messages.KeepConnectionAliveMessage!
static HotChocolate.AspNetCore.Subscriptions.Messages.TerminateConnectionMessage.Default.get -> HotChocolate.AspNetCore.Subscriptions.Messages.TerminateConnectionMessage!
static HotChocolate.AspNetCore.Subscriptions.WebSocketConnection.New(Microsoft.AspNetCore.Http.HttpContext! httpContext) -> HotChocolate.AspNetCore.Subscriptions.WebSocketConnection!
static HotChocolate.AspNetCore.Subscriptions.WebSocketSession.New(Microsoft.AspNetCore.Http.HttpContext! httpContext, HotChocolate.AspNetCore.Subscriptions.IMessagePipeline! messagePipeline) -> HotChocolate.AspNetCore.Subscriptions.WebSocketSession!
static Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGraphQL(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpointRouteBuilder, Microsoft.AspNetCore.Http.PathString path, HotChocolate.NameString schemaName = default(HotChocolate.NameString)) -> HotChocolate.AspNetCore.Extensions.GraphQLEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGraphQL(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpointRouteBuilder, string! path = "/graphql", HotChocolate.NameString schemaName = default(HotChocolate.NameString)) -> HotChocolate.AspNetCore.Extensions.GraphQLEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.UseGraphQL(this Microsoft.AspNetCore.Builder.IApplicationBuilder! applicationBuilder, Microsoft.AspNetCore.Http.PathString pathMatch = default(Microsoft.AspNetCore.Http.PathString), HotChocolate.NameString schemaName = default(HotChocolate.NameString)) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.WithOptions(this HotChocolate.AspNetCore.Extensions.GraphQLEndpointConventionBuilder! builder, HotChocolate.AspNetCore.GraphQLServerOptions! serverOptions) -> HotChocolate.AspNetCore.Extensions.GraphQLEndpointConventionBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQL(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.ISchema! schema, int maxAllowedRequestSize = 20000000) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQL(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.ISchemaBuilder! schemaBuilder, int maxAllowedRequestSize = 20000000) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQL(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<System.IServiceProvider!, HotChocolate.ISchema!>! schemaFactory, int maxAllowedRequestSize = 20000000) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQLServer(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString schemaName = default(HotChocolate.NameString)) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQLServer(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.NameString schemaName = default(HotChocolate.NameString), int maxAllowedRequestSize = 20000000) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddGraphQLServerCore(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, int maxAllowedRequestSize = 20000000) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddHttpRequestInterceptor(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.AspNetCore.HttpRequestInterceptorDelegate! interceptor) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddHttpRequestInterceptor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddHttpRequestInterceptor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddHttpResultSerializer(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.AspNetCore.Serialization.HttpResultSerialization batchSerialization = HotChocolate.AspNetCore.Serialization.HttpResultSerialization.MultiPartChunked, HotChocolate.AspNetCore.Serialization.HttpResultSerialization deferSerialization = HotChocolate.AspNetCore.Serialization.HttpResultSerialization.MultiPartChunked, bool indented = false) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddHttpResultSerializer<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddSocketSessionInterceptor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.AddSocketSessionInterceptor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions.InitializeOnStartup(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
virtual HotChocolate.AspNetCore.DefaultHttpRequestInterceptor.OnCreateAsync(Microsoft.AspNetCore.Http.HttpContext! context, HotChocolate.Execution.IRequestExecutor! requestExecutor, HotChocolate.Execution.IQueryRequestBuilder! requestBuilder, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual HotChocolate.AspNetCore.DefaultSocketSessionInterceptor.OnCloseAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual HotChocolate.AspNetCore.DefaultSocketSessionInterceptor.OnConnectAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, HotChocolate.AspNetCore.Subscriptions.Messages.InitializeConnectionMessage! message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.AspNetCore.Subscriptions.ConnectionStatus!>
virtual HotChocolate.AspNetCore.DefaultSocketSessionInterceptor.OnRequestAsync(HotChocolate.AspNetCore.Subscriptions.ISocketConnection! connection, HotChocolate.Execution.IQueryRequestBuilder! requestBuilder, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual HotChocolate.AspNetCore.HttpPostMiddleware.GetRequestsFromBody(Microsoft.AspNetCore.Http.HttpRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<HotChocolate.Language.GraphQLRequest!>!>
virtual HotChocolate.AspNetCore.HttpPostMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
virtual HotChocolate.AspNetCore.MiddlewareBase.Dispose(bool disposing) -> void
virtual HotChocolate.AspNetCore.Serialization.DefaultHttpResultSerializer.GetContentType(HotChocolate.Execution.IExecutionResult! result) -> string!
virtual HotChocolate.AspNetCore.Serialization.DefaultHttpResultSerializer.GetStatusCode(HotChocolate.Execution.IExecutionResult! result) -> System.Net.HttpStatusCode
virtual HotChocolate.AspNetCore.Serialization.DefaultHttpResultSerializer.SerializeAsync(HotChocolate.Execution.IExecutionResult! result, System.IO.Stream! stream, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual HotChocolate.AspNetCore.Subscriptions.Messages.MessageHandler<T>.CanHandle(T! message) -> bool
virtual HotChocolate.AspNetCore.Subscriptions.Messages.OperationMessage.Id.get -> string?
virtual HotChocolate.AspNetCore.Subscriptions.SubscriptionManager.Dispose(bool disposing) -> void
