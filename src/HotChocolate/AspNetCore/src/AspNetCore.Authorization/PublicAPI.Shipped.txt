#nullable enable
HotChocolate.AspNetCore.Authorization.ApplyPolicy
HotChocolate.AspNetCore.Authorization.ApplyPolicy.AfterResolver = 1 -> HotChocolate.AspNetCore.Authorization.ApplyPolicy
HotChocolate.AspNetCore.Authorization.ApplyPolicy.BeforeResolver = 0 -> HotChocolate.AspNetCore.Authorization.ApplyPolicy
HotChocolate.AspNetCore.Authorization.ApplyPolicyType
HotChocolate.AspNetCore.Authorization.ApplyPolicyType.ApplyPolicyType() -> void
HotChocolate.AspNetCore.Authorization.AuthorizeAttribute
HotChocolate.AspNetCore.Authorization.AuthorizeAttribute.Apply.get -> HotChocolate.AspNetCore.Authorization.ApplyPolicy
HotChocolate.AspNetCore.Authorization.AuthorizeAttribute.Apply.set -> void
HotChocolate.AspNetCore.Authorization.AuthorizeAttribute.AuthorizeAttribute() -> void
HotChocolate.AspNetCore.Authorization.AuthorizeAttribute.Policy.get -> string?
HotChocolate.AspNetCore.Authorization.AuthorizeAttribute.Policy.set -> void
HotChocolate.AspNetCore.Authorization.AuthorizeAttribute.Roles.get -> string![]?
HotChocolate.AspNetCore.Authorization.AuthorizeAttribute.Roles.set -> void
HotChocolate.AspNetCore.Authorization.AuthorizeDirective
HotChocolate.AspNetCore.Authorization.AuthorizeDirective.Apply.get -> HotChocolate.AspNetCore.Authorization.ApplyPolicy
HotChocolate.AspNetCore.Authorization.AuthorizeDirective.AuthorizeDirective(string? policy = null, System.Collections.Generic.IReadOnlyList<string!>? roles = null, HotChocolate.AspNetCore.Authorization.ApplyPolicy apply = HotChocolate.AspNetCore.Authorization.ApplyPolicy.BeforeResolver) -> void
HotChocolate.AspNetCore.Authorization.AuthorizeDirective.AuthorizeDirective(System.Collections.Generic.IReadOnlyList<string!>! roles, HotChocolate.AspNetCore.Authorization.ApplyPolicy apply = HotChocolate.AspNetCore.Authorization.ApplyPolicy.BeforeResolver) -> void
HotChocolate.AspNetCore.Authorization.AuthorizeDirective.AuthorizeDirective(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
HotChocolate.AspNetCore.Authorization.AuthorizeDirective.GetObjectData(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
HotChocolate.AspNetCore.Authorization.AuthorizeDirective.Policy.get -> string?
HotChocolate.AspNetCore.Authorization.AuthorizeDirective.Roles.get -> System.Collections.Generic.IReadOnlyList<string!>?
HotChocolate.AspNetCore.Authorization.AuthorizeDirectiveType
HotChocolate.AspNetCore.Authorization.AuthorizeDirectiveType.AuthorizeDirectiveType() -> void
HotChocolate.AuthorizeSchemaBuilderExtensions
HotChocolate.AuthorizeSchemaConfigurationExtensions
HotChocolate.Types.AuthorizeObjectFieldDescriptorExtensions
HotChocolate.Types.AuthorizeObjectTypeDescriptorExtensions
HotChocolate.Types.AuthorizeSchemaTypeDescriptorExtensions
Microsoft.Extensions.DependencyInjection.HotChocolateAuthorizeRequestExecutorBuilder
override HotChocolate.AspNetCore.Authorization.AuthorizeAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
static HotChocolate.AuthorizeSchemaBuilderExtensions.AddAuthorizeDirectiveType(this HotChocolate.ISchemaBuilder! builder) -> HotChocolate.ISchemaBuilder!
static HotChocolate.AuthorizeSchemaConfigurationExtensions.RegisterAuthorizeDirectiveType(this HotChocolate.Configuration.ISchemaConfiguration! configuration) -> void
static HotChocolate.Types.AuthorizeObjectFieldDescriptorExtensions.Authorize(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, HotChocolate.AspNetCore.Authorization.ApplyPolicy apply = HotChocolate.AspNetCore.Authorization.ApplyPolicy.BeforeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.AuthorizeObjectFieldDescriptorExtensions.Authorize(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, params string![]! roles) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.AuthorizeObjectFieldDescriptorExtensions.Authorize(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, string! policy, HotChocolate.AspNetCore.Authorization.ApplyPolicy apply = HotChocolate.AspNetCore.Authorization.ApplyPolicy.BeforeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.AuthorizeObjectTypeDescriptorExtensions.Authorize(this HotChocolate.Types.IObjectTypeDescriptor! descriptor, HotChocolate.AspNetCore.Authorization.ApplyPolicy apply = HotChocolate.AspNetCore.Authorization.ApplyPolicy.BeforeResolver) -> HotChocolate.Types.IObjectTypeDescriptor!
static HotChocolate.Types.AuthorizeObjectTypeDescriptorExtensions.Authorize(this HotChocolate.Types.IObjectTypeDescriptor! descriptor, params string![]! roles) -> HotChocolate.Types.IObjectTypeDescriptor!
static HotChocolate.Types.AuthorizeObjectTypeDescriptorExtensions.Authorize(this HotChocolate.Types.IObjectTypeDescriptor! descriptor, string! policy, HotChocolate.AspNetCore.Authorization.ApplyPolicy apply = HotChocolate.AspNetCore.Authorization.ApplyPolicy.BeforeResolver) -> HotChocolate.Types.IObjectTypeDescriptor!
static HotChocolate.Types.AuthorizeObjectTypeDescriptorExtensions.Authorize<T>(this HotChocolate.Types.IObjectTypeDescriptor<T>! descriptor, HotChocolate.AspNetCore.Authorization.ApplyPolicy apply = HotChocolate.AspNetCore.Authorization.ApplyPolicy.BeforeResolver) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
static HotChocolate.Types.AuthorizeObjectTypeDescriptorExtensions.Authorize<T>(this HotChocolate.Types.IObjectTypeDescriptor<T>! descriptor, params string![]! roles) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
static HotChocolate.Types.AuthorizeObjectTypeDescriptorExtensions.Authorize<T>(this HotChocolate.Types.IObjectTypeDescriptor<T>! descriptor, string! policy, HotChocolate.AspNetCore.Authorization.ApplyPolicy apply = HotChocolate.AspNetCore.Authorization.ApplyPolicy.BeforeResolver) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
static HotChocolate.Types.AuthorizeSchemaTypeDescriptorExtensions.Authorize(this HotChocolate.Types.ISchemaTypeDescriptor! self, params string![]! roles) -> HotChocolate.Types.ISchemaTypeDescriptor!
static HotChocolate.Types.AuthorizeSchemaTypeDescriptorExtensions.Authorize(this HotChocolate.Types.ISchemaTypeDescriptor! self, string! policy, params string![]! roles) -> HotChocolate.Types.ISchemaTypeDescriptor!
static HotChocolate.Types.AuthorizeSchemaTypeDescriptorExtensions.Authorize(this HotChocolate.Types.ISchemaTypeDescriptor! self, string! policy) -> HotChocolate.Types.ISchemaTypeDescriptor!
static HotChocolate.Types.AuthorizeSchemaTypeDescriptorExtensions.Authorize(this HotChocolate.Types.ISchemaTypeDescriptor! self) -> HotChocolate.Types.ISchemaTypeDescriptor!
static Microsoft.Extensions.DependencyInjection.HotChocolateAuthorizeRequestExecutorBuilder.AddAuthorization(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateAuthorizeRequestExecutorBuilder.AddAuthorizeDirectiveType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
