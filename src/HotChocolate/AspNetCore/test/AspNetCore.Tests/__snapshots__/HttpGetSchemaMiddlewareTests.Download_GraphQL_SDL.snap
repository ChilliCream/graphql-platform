schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Character {
  id: ID!
  name: String
  friends(first: Int after: String last: Int before: String): CharacterConnection
  appearsIn: [Episode]
  height(unit: Unit): Float
}

"A connection to a list of items."
type CharacterConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CharacterEdge!]
  "A flattened list of the nodes."
  nodes: [Character]
}

"An edge in a connection."
type CharacterEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Character
}

type Droid implements Character {
  id: ID!
  appearsIn: [Episode]
  friends(first: Int after: String last: Int before: String): CharacterConnection
  height(unit: Unit): Float
  name: String
  primaryFunction: String
}

type Human implements Character {
  id: ID!
  appearsIn: [Episode]
  friends(first: Int after: String last: Int before: String): CharacterConnection
  otherHuman: Human
  height(unit: Unit): Float
  name: String
  homePlanet: String
}

type Mutation {
  createReview(episode: Episode! review: ReviewInput!): Review!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  hero(episode: Episode! = NEW_HOPE): Character
  heroes(episodes: [Episode!]): [Character!]
  character(characterIds: [String]): [Character!]!
  search(text: String): [SearchResult]
  human(id: String): Human
  droid(id: String): Droid
  time: Long!
  evict: Boolean!
}

type Review {
  stars: Int!
  commentary: String
}

type Starship {
  id: String
  name: String
  length: Float!
}

type Subscription {
  onReview(episode: Episode!): Review!
}

union SearchResult = Starship | Human | Droid

input ReviewInput {
  stars: Int!
  commentary: String
}

enum Episode {
  NEW_HOPE
  EMPIRE
  JEDI
}

enum Unit {
  FOOT
  METERS
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

directive @export(as: String) on FIELD

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long
