schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"A character in the Star Wars universe."
interface Character {
  "The unique identifier for the character."
  id: ID!
  "The name of the character."
  name: String!
  "The names of the character's friends."
  friends("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): FriendsConnection
  "The episodes the character appears in."
  appearsIn: [Episode]
  "The height of the character."
  height(unit: Unit): Float
}

"A droid in the Star Wars universe."
type Droid implements Character {
  "The unique identifier for the character."
  id: ID!
  "The name of the character."
  name: String!
  "The episodes the character appears in."
  appearsIn: [Episode]
  friends("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): FriendsConnection
  height(unit: Unit): Float
  "The droid's primary function."
  primaryFunction: String
}

"A connection to a list of items."
type FriendsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FriendsEdge!]
  "A flattened list of the nodes."
  nodes: [Character]
}

"An edge in a connection."
type FriendsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Character
}

"A human character in the Star Wars universe."
type Human implements Character {
  "The unique identifier for the character."
  id: ID!
  "The name of the character."
  name: String!
  "The episodes the character appears in."
  appearsIn: [Episode]
  friends("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): FriendsConnection
  otherHuman: Human
  height(unit: Unit): Float
  "The planet the character is originally from."
  homePlanet: String
}

type Mutation {
  "Creates a review for a given Star Wars episode.\n\n\n**Returns:**\nThe created review."
  createReview("The episode to review." episode: Episode! "The review." review: ReviewInput!): Review!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Retrieve a hero by a particular Star Wars episode.\n\n\n**Returns:**\nThe character."
  hero("The episode to look up by." episode: Episode! = NEW_HOPE): Character
  "Retrieve a heros by a particular Star Wars episodes.\n\n\n**Returns:**\nThe character."
  heroes(episodes: [Episode!]): [Character!]
  character(characterIds: [String]): [Character!]!
  search(text: String): [SearchResult]
  "Gets a human by Id.\n\n\n**Returns:**\nThe human."
  human("The Id of the human to retrieve." id: String): Human
  "Get a particular droid by Id.\n\n\n**Returns:**\nThe droid."
  droid("The Id of the droid." id: String): Droid
  time: Long!
  evict: Boolean!
  wait(m: Int!): Boolean!
}

"A review of a particular movie."
type Review {
  "An explanation for the rating."
  commentary: String
  "The number of stars given for this review."
  stars: Int!
}

"A starship in the Star Wars universe."
type Starship {
  "The Id of the starship."
  id: ID!
  "The name of the starship."
  name: String!
  length(unit: Unit): Float!
}

type Subscription {
  onReview(episode: Episode!): Review!
  onNext: String!
  onException: String!
}

union SearchResult = Starship | Human | Droid

"A review of a particular movie."
input ReviewInput {
  "The number of stars given for this review."
  stars: Int!
  "An explanation for the rating."
  commentary: String
}

"The Star Wars episodes."
enum Episode {
  "Star Wars Episode IV: A New Hope"
  NEW_HOPE
  "Star Wars Episode V: Empire Strikes Back"
  EMPIRE
  "Star Wars Episode VI: Return of the Jedi"
  JEDI
}

"Different units of measurement."
enum Unit {
  FOOT
  METERS
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @export(as: String) on FIELD

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long