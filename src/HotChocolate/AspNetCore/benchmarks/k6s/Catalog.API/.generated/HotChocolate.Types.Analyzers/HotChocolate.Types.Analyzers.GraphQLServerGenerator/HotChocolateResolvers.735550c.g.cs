// <auto-generated/>

#nullable enable
#pragma warning disable

using System;
using System.Runtime.CompilerServices;
using HotChocolate;
using HotChocolate.Types;
using HotChocolate.Execution.Configuration;
using HotChocolate.Internal;

namespace eShop.Catalog.Types
{
    internal static class BrandNodeResolvers
    {
        private static readonly object _sync = new object();
        private static bool _bindingsInitialized;
        private readonly static global::HotChocolate.Internal.IParameterBinding[] _args_BrandNode_GetProductsAsync = new global::HotChocolate.Internal.IParameterBinding[5];

        public static void InitializeBindings(global::HotChocolate.Internal.IParameterBindingResolver bindingResolver)
        {
            if (!_bindingsInitialized)
            {
                lock (_sync)
                {
                    if (!_bindingsInitialized)
                    {
                        const global::System.Reflection.BindingFlags bindingFlags =
                            global::System.Reflection.BindingFlags.Public
                                | global::System.Reflection.BindingFlags.NonPublic
                                | global::System.Reflection.BindingFlags.Static;

                        var type = typeof(global::eShop.Catalog.Types.BrandNode);
                        global::System.Reflection.MethodInfo resolver = default!;
                        global::System.Reflection.ParameterInfo[] parameters = default!;
                        _bindingsInitialized = true;

                        resolver = type.GetMethod(
                            "GetProductsAsync",
                            bindingFlags,
                            new global::System.Type[]
                            {
                                typeof(global::eShop.Catalog.Models.Brand),
                                typeof(global::GreenDonut.Data.PagingArguments),
                                typeof(global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>),
                                typeof(global::eShop.Catalog.Services.ProductService),
                                typeof(global::System.Threading.CancellationToken)
                            })!;
                        parameters = resolver.GetParameters();
                        _args_BrandNode_GetProductsAsync[0] = bindingResolver.GetBinding(parameters[0]);
                        _args_BrandNode_GetProductsAsync[1] = bindingResolver.GetBinding(parameters[1]);
                        _args_BrandNode_GetProductsAsync[2] = bindingResolver.GetBinding(parameters[2]);
                        _args_BrandNode_GetProductsAsync[3] = bindingResolver.GetBinding(parameters[3]);
                        _args_BrandNode_GetProductsAsync[4] = bindingResolver.GetBinding(parameters[4]);
                    }
                }
            }
        }

        public static HotChocolate.Resolvers.FieldResolverDelegates BrandNode_GetProductsAsync()
        {
            if(!_bindingsInitialized)
            {
                throw new global::System.InvalidOperationException("The bindings must be initialized before the resolvers can be created.");
            }

            return new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: BrandNode_GetProductsAsync_Resolver);
        }

        private static async global::System.Threading.Tasks.ValueTask<global::System.Object?> BrandNode_GetProductsAsync_Resolver(global::HotChocolate.Resolvers.IResolverContext context)
        {
            var args0 = context.Parent<global::eShop.Catalog.Models.Brand>();
            var args1 = _args_BrandNode_GetProductsAsync[1].Execute<global::GreenDonut.Data.PagingArguments>(context);
            var args2_selection = context.Selection;
            var args2_filter = HotChocolate.Data.Filters.FilterContextResolverContextExtensions.GetFilterContext(context);
            var args2_sorting = HotChocolate.Data.Sorting.SortingContextResolverContextExtensions.GetSortingContext(context);
            var args2 = new global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>(
                HotChocolate.Execution.Processing.HotChocolateExecutionSelectionExtensions.AsSelector<global::eShop.Catalog.Models.Product>(args2_selection),
                args2_filter?.AsPredicate<global::eShop.Catalog.Models.Product>(),
                args2_sorting?.AsSortDefinition<global::eShop.Catalog.Models.Product>());
            var args3 = _args_BrandNode_GetProductsAsync[3].Execute<global::eShop.Catalog.Services.ProductService>(context);
            var args4 = context.RequestAborted;
            var result = await global::eShop.Catalog.Types.BrandNode.GetProductsAsync(args0, args1, args2, args3, args4);
            return result;
        }
    }

    internal static class BrandQueriesResolvers
    {
        private static readonly object _sync = new object();
        private static bool _bindingsInitialized;
        private readonly static global::HotChocolate.Internal.IParameterBinding[] _args_BrandQueries_GetBrandByIdAsync = new global::HotChocolate.Internal.IParameterBinding[3];
        private readonly static global::HotChocolate.Internal.IParameterBinding[] _args_BrandQueries_GetBrandsAsync = new global::HotChocolate.Internal.IParameterBinding[3];

        public static void InitializeBindings(global::HotChocolate.Internal.IParameterBindingResolver bindingResolver)
        {
            if (!_bindingsInitialized)
            {
                lock (_sync)
                {
                    if (!_bindingsInitialized)
                    {
                        const global::System.Reflection.BindingFlags bindingFlags =
                            global::System.Reflection.BindingFlags.Public
                                | global::System.Reflection.BindingFlags.NonPublic
                                | global::System.Reflection.BindingFlags.Static;

                        var type = typeof(global::eShop.Catalog.Types.BrandQueries);
                        global::System.Reflection.MethodInfo resolver = default!;
                        global::System.Reflection.ParameterInfo[] parameters = default!;
                        _bindingsInitialized = true;

                        resolver = type.GetMethod(
                            "GetBrandByIdAsync",
                            bindingFlags,
                            new global::System.Type[]
                            {
                                typeof(int),
                                typeof(global::eShop.Catalog.Services.BrandService),
                                typeof(global::System.Threading.CancellationToken)
                            })!;
                        parameters = resolver.GetParameters();
                        _args_BrandQueries_GetBrandByIdAsync[0] = bindingResolver.GetBinding(parameters[0]);
                        _args_BrandQueries_GetBrandByIdAsync[1] = bindingResolver.GetBinding(parameters[1]);
                        _args_BrandQueries_GetBrandByIdAsync[2] = bindingResolver.GetBinding(parameters[2]);

                        resolver = type.GetMethod(
                            "GetBrandsAsync",
                            bindingFlags,
                            new global::System.Type[]
                            {
                                typeof(global::GreenDonut.Data.PagingArguments),
                                typeof(global::eShop.Catalog.Services.BrandService),
                                typeof(global::System.Threading.CancellationToken)
                            })!;
                        parameters = resolver.GetParameters();
                        _args_BrandQueries_GetBrandsAsync[0] = bindingResolver.GetBinding(parameters[0]);
                        _args_BrandQueries_GetBrandsAsync[1] = bindingResolver.GetBinding(parameters[1]);
                        _args_BrandQueries_GetBrandsAsync[2] = bindingResolver.GetBinding(parameters[2]);
                    }
                }
            }
        }

        public static HotChocolate.Resolvers.FieldResolverDelegates BrandQueries_GetBrandByIdAsync()
        {
            if(!_bindingsInitialized)
            {
                throw new global::System.InvalidOperationException("The bindings must be initialized before the resolvers can be created.");
            }

            return new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: BrandQueries_GetBrandByIdAsync_Resolver);
        }

        private static async global::System.Threading.Tasks.ValueTask<global::System.Object?> BrandQueries_GetBrandByIdAsync_Resolver(global::HotChocolate.Resolvers.IResolverContext context)
        {
            var args0 = _args_BrandQueries_GetBrandByIdAsync[0].Execute<int>(context);
            var args1 = _args_BrandQueries_GetBrandByIdAsync[1].Execute<global::eShop.Catalog.Services.BrandService>(context);
            var args2 = context.RequestAborted;
            var result = await global::eShop.Catalog.Types.BrandQueries.GetBrandByIdAsync(args0, args1, args2);
            return result;
        }

        public static HotChocolate.Resolvers.FieldResolverDelegates BrandQueries_GetBrandsAsync()
        {
            if(!_bindingsInitialized)
            {
                throw new global::System.InvalidOperationException("The bindings must be initialized before the resolvers can be created.");
            }

            return new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: BrandQueries_GetBrandsAsync_Resolver);
        }

        private static async global::System.Threading.Tasks.ValueTask<global::System.Object?> BrandQueries_GetBrandsAsync_Resolver(global::HotChocolate.Resolvers.IResolverContext context)
        {
            var args0 = _args_BrandQueries_GetBrandsAsync[0].Execute<global::GreenDonut.Data.PagingArguments>(context);
            var args1 = _args_BrandQueries_GetBrandsAsync[1].Execute<global::eShop.Catalog.Services.BrandService>(context);
            var args2 = context.RequestAborted;
            var result = await global::eShop.Catalog.Types.BrandQueries.GetBrandsAsync(args0, args1, args2);
            return result;
        }
    }

    internal static class ProductNodeResolvers
    {
        private static readonly object _sync = new object();
        private static bool _bindingsInitialized;
        private readonly static global::HotChocolate.Internal.IParameterBinding[] _args_ProductNode_GetBrandAsync = new global::HotChocolate.Internal.IParameterBinding[3];

        public static void InitializeBindings(global::HotChocolate.Internal.IParameterBindingResolver bindingResolver)
        {
            if (!_bindingsInitialized)
            {
                lock (_sync)
                {
                    if (!_bindingsInitialized)
                    {
                        const global::System.Reflection.BindingFlags bindingFlags =
                            global::System.Reflection.BindingFlags.Public
                                | global::System.Reflection.BindingFlags.NonPublic
                                | global::System.Reflection.BindingFlags.Static;

                        var type = typeof(global::eShop.Catalog.Types.ProductNode);
                        global::System.Reflection.MethodInfo resolver = default!;
                        global::System.Reflection.ParameterInfo[] parameters = default!;
                        _bindingsInitialized = true;

                        resolver = type.GetMethod(
                            "GetBrandAsync",
                            bindingFlags,
                            new global::System.Type[]
                            {
                                typeof(global::eShop.Catalog.Models.Product),
                                typeof(global::eShop.Catalog.Services.BrandService),
                                typeof(global::System.Threading.CancellationToken)
                            })!;
                        parameters = resolver.GetParameters();
                        _args_ProductNode_GetBrandAsync[0] = bindingResolver.GetBinding(parameters[0]);
                        _args_ProductNode_GetBrandAsync[1] = bindingResolver.GetBinding(parameters[1]);
                        _args_ProductNode_GetBrandAsync[2] = bindingResolver.GetBinding(parameters[2]);
                    }
                }
            }
        }

        public static HotChocolate.Resolvers.FieldResolverDelegates ProductNode_GetBrandAsync()
        {
            if(!_bindingsInitialized)
            {
                throw new global::System.InvalidOperationException("The bindings must be initialized before the resolvers can be created.");
            }

            return new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: ProductNode_GetBrandAsync_Resolver);
        }

        private static async global::System.Threading.Tasks.ValueTask<global::System.Object?> ProductNode_GetBrandAsync_Resolver(global::HotChocolate.Resolvers.IResolverContext context)
        {
            var args0 = context.Parent<global::eShop.Catalog.Models.Product>();
            var args1 = _args_ProductNode_GetBrandAsync[1].Execute<global::eShop.Catalog.Services.BrandService>(context);
            var args2 = context.RequestAborted;
            var result = await global::eShop.Catalog.Types.ProductNode.GetBrandAsync(args0, args1, args2);
            return result;
        }
    }

    internal static class ProductQueriesResolvers
    {
        private static readonly object _sync = new object();
        private static bool _bindingsInitialized;
        private readonly static global::HotChocolate.Internal.IParameterBinding[] _args_ProductQueries_GetProductByIdAsync = new global::HotChocolate.Internal.IParameterBinding[4];
        private readonly static global::HotChocolate.Internal.IParameterBinding[] _args_ProductQueries_GetProductsAsync = new global::HotChocolate.Internal.IParameterBinding[4];

        public static void InitializeBindings(global::HotChocolate.Internal.IParameterBindingResolver bindingResolver)
        {
            if (!_bindingsInitialized)
            {
                lock (_sync)
                {
                    if (!_bindingsInitialized)
                    {
                        const global::System.Reflection.BindingFlags bindingFlags =
                            global::System.Reflection.BindingFlags.Public
                                | global::System.Reflection.BindingFlags.NonPublic
                                | global::System.Reflection.BindingFlags.Static;

                        var type = typeof(global::eShop.Catalog.Types.ProductQueries);
                        global::System.Reflection.MethodInfo resolver = default!;
                        global::System.Reflection.ParameterInfo[] parameters = default!;
                        _bindingsInitialized = true;

                        resolver = type.GetMethod(
                            "GetProductByIdAsync",
                            bindingFlags,
                            new global::System.Type[]
                            {
                                typeof(int),
                                typeof(global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>),
                                typeof(global::eShop.Catalog.Services.ProductService),
                                typeof(global::System.Threading.CancellationToken)
                            })!;
                        parameters = resolver.GetParameters();
                        _args_ProductQueries_GetProductByIdAsync[0] = bindingResolver.GetBinding(parameters[0]);
                        _args_ProductQueries_GetProductByIdAsync[1] = bindingResolver.GetBinding(parameters[1]);
                        _args_ProductQueries_GetProductByIdAsync[2] = bindingResolver.GetBinding(parameters[2]);
                        _args_ProductQueries_GetProductByIdAsync[3] = bindingResolver.GetBinding(parameters[3]);

                        resolver = type.GetMethod(
                            "GetProductsAsync",
                            bindingFlags,
                            new global::System.Type[]
                            {
                                typeof(global::GreenDonut.Data.PagingArguments),
                                typeof(global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>),
                                typeof(global::eShop.Catalog.Services.ProductService),
                                typeof(global::System.Threading.CancellationToken)
                            })!;
                        parameters = resolver.GetParameters();
                        _args_ProductQueries_GetProductsAsync[0] = bindingResolver.GetBinding(parameters[0]);
                        _args_ProductQueries_GetProductsAsync[1] = bindingResolver.GetBinding(parameters[1]);
                        _args_ProductQueries_GetProductsAsync[2] = bindingResolver.GetBinding(parameters[2]);
                        _args_ProductQueries_GetProductsAsync[3] = bindingResolver.GetBinding(parameters[3]);
                    }
                }
            }
        }

        public static HotChocolate.Resolvers.FieldResolverDelegates ProductQueries_GetProductByIdAsync()
        {
            if(!_bindingsInitialized)
            {
                throw new global::System.InvalidOperationException("The bindings must be initialized before the resolvers can be created.");
            }

            return new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: ProductQueries_GetProductByIdAsync_Resolver);
        }

        private static async global::System.Threading.Tasks.ValueTask<global::System.Object?> ProductQueries_GetProductByIdAsync_Resolver(global::HotChocolate.Resolvers.IResolverContext context)
        {
            var args0 = _args_ProductQueries_GetProductByIdAsync[0].Execute<int>(context);
            var args1_selection = context.Selection;
            var args1_filter = HotChocolate.Data.Filters.FilterContextResolverContextExtensions.GetFilterContext(context);
            var args1_sorting = HotChocolate.Data.Sorting.SortingContextResolverContextExtensions.GetSortingContext(context);
            var args1 = new global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>(
                HotChocolate.Execution.Processing.HotChocolateExecutionSelectionExtensions.AsSelector<global::eShop.Catalog.Models.Product>(args1_selection),
                args1_filter?.AsPredicate<global::eShop.Catalog.Models.Product>(),
                args1_sorting?.AsSortDefinition<global::eShop.Catalog.Models.Product>());
            var args2 = _args_ProductQueries_GetProductByIdAsync[2].Execute<global::eShop.Catalog.Services.ProductService>(context);
            var args3 = context.RequestAborted;
            var result = await global::eShop.Catalog.Types.ProductQueries.GetProductByIdAsync(args0, args1, args2, args3);
            return result;
        }

        public static HotChocolate.Resolvers.FieldResolverDelegates ProductQueries_GetProductsAsync()
        {
            if(!_bindingsInitialized)
            {
                throw new global::System.InvalidOperationException("The bindings must be initialized before the resolvers can be created.");
            }

            return new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: ProductQueries_GetProductsAsync_Resolver);
        }

        private static async global::System.Threading.Tasks.ValueTask<global::System.Object?> ProductQueries_GetProductsAsync_Resolver(global::HotChocolate.Resolvers.IResolverContext context)
        {
            var args0 = _args_ProductQueries_GetProductsAsync[0].Execute<global::GreenDonut.Data.PagingArguments>(context);
            var args1_selection = context.Selection;
            var args1_filter = HotChocolate.Data.Filters.FilterContextResolverContextExtensions.GetFilterContext(context);
            var args1_sorting = HotChocolate.Data.Sorting.SortingContextResolverContextExtensions.GetSortingContext(context);
            var args1 = new global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>(
                HotChocolate.Execution.Processing.HotChocolateExecutionSelectionExtensions.AsSelector<global::eShop.Catalog.Models.Product>(args1_selection),
                args1_filter?.AsPredicate<global::eShop.Catalog.Models.Product>(),
                args1_sorting?.AsSortDefinition<global::eShop.Catalog.Models.Product>());
            var args2 = _args_ProductQueries_GetProductsAsync[2].Execute<global::eShop.Catalog.Services.ProductService>(context);
            var args3 = context.RequestAborted;
            var result = await global::eShop.Catalog.Types.ProductQueries.GetProductsAsync(args0, args1, args2, args3);
            return result;
        }
    }
}

