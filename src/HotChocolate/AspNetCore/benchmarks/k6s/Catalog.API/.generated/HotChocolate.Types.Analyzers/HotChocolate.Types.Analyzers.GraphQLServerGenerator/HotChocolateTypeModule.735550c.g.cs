// <auto-generated/>

#nullable enable
#pragma warning disable

using System;
using System.Runtime.CompilerServices;
using HotChocolate;
using HotChocolate.Types;
using HotChocolate.Execution.Configuration;

namespace Microsoft.Extensions.DependencyInjection
{
    public static partial class CatalogTypesRequestExecutorBuilderExtensions
    {
        public static IRequestExecutorBuilder AddCatalogTypes(this IRequestExecutorBuilder builder)
        {
            builder.AddDataLoader<global::eShop.Catalog.Services.IBrandByIdDataLoader, global::eShop.Catalog.Services.BrandByIdDataLoader>();
            builder.AddDataLoader<global::eShop.Catalog.Services.IProductByIdDataLoader, global::eShop.Catalog.Services.ProductByIdDataLoader>();
            builder.AddDataLoader<global::eShop.Catalog.Services.IProductsByBrandIdDataLoader, global::eShop.Catalog.Services.ProductsByBrandIdDataLoader>();
            builder.ConfigureDescriptorContext(ctx => ctx.TypeConfiguration.TryAdd<global::eShop.Catalog.Models.Brand>(
                "eShop.Catalog.API::eShop.Catalog.Types.BrandNode",
                () => global::eShop.Catalog.Types.BrandNode.Initialize));
            builder.ConfigureDescriptorContext(ctx => ctx.TypeConfiguration.TryAdd(
                "eShop.Catalog.API::eShop.Catalog.Types.BrandQueries",
                global::HotChocolate.Types.OperationTypeNames.Query,
                () => global::eShop.Catalog.Types.BrandQueries.Initialize));
            builder.ConfigureDescriptorContext(ctx => ctx.TypeConfiguration.TryAdd<global::eShop.Catalog.Models.Product>(
                "eShop.Catalog.API::eShop.Catalog.Types.ProductNode",
                () => global::eShop.Catalog.Types.ProductNode.Initialize));
            builder.ConfigureDescriptorContext(ctx => ctx.TypeConfiguration.TryAdd(
                "eShop.Catalog.API::eShop.Catalog.Types.ProductQueries",
                global::HotChocolate.Types.OperationTypeNames.Query,
                () => global::eShop.Catalog.Types.ProductQueries.Initialize));
            builder.ConfigureSchema(
                b => b.TryAddRootType(
                    () => new global::HotChocolate.Types.ObjectType(
                        d => d.Name(global::HotChocolate.Types.OperationTypeNames.Query)),
                    HotChocolate.Language.OperationType.Query));
            builder.AddType<ObjectType<global::eShop.Catalog.Models.Brand>>();
            builder.AddType<ObjectType<global::eShop.Catalog.Models.Product>>();
            return builder;
        }
    }
}
