// <auto-generated/>

#nullable enable
#pragma warning disable

using System;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.DependencyInjection;
using GreenDonut;

namespace eShop.Catalog.Services
{
    public interface IBrandByIdDataLoader
        : global::GreenDonut.IDataLoader<int, global::eShop.Catalog.Models.Brand>
    {
    }

    public sealed partial class BrandByIdDataLoader
        : global::GreenDonut.DataLoaderBase<int, global::eShop.Catalog.Models.Brand>
        , IBrandByIdDataLoader
    {
        private readonly global::System.IServiceProvider _services;

        public BrandByIdDataLoader(
            global::System.IServiceProvider services,
            global::GreenDonut.IBatchScheduler batchScheduler,
            global::GreenDonut.DataLoaderOptions options)
            : base(batchScheduler, options)
        {
            _services = services ??
                throw new global::System.ArgumentNullException(nameof(services));
        }

        protected override async global::System.Threading.Tasks.ValueTask FetchAsync(
            global::System.Collections.Generic.IReadOnlyList<int> keys,
            global::System.Memory<GreenDonut.Result<global::eShop.Catalog.Models.Brand?>> results,
            global::GreenDonut.DataLoaderFetchContext<global::eShop.Catalog.Models.Brand> context,
            global::System.Threading.CancellationToken ct)
        {
            await using var scope = _services.CreateAsyncScope();
            var p1 = scope.ServiceProvider.GetRequiredService<global::eShop.Catalog.Data.CatalogContext>();
            var temp = await global::eShop.Catalog.Services.BrandDataLoader.GetBrandByIdAsync(keys, p1, ct).ConfigureAwait(false);
            CopyResults(keys, results.Span, temp);
        }

        private void CopyResults(
            global::System.Collections.Generic.IReadOnlyList<int> keys,
            global::System.Span<GreenDonut.Result<global::eShop.Catalog.Models.Brand?>> results,
            global::System.Collections.Generic.Dictionary<int, eShop.Catalog.Models.Brand> resultMap)
        {
            for (var i = 0; i < keys.Count; i++)
            {
                var key = keys[i];
                if (resultMap.TryGetValue(key, out var value))
                {
                    results[i] = global::GreenDonut.Result<global::eShop.Catalog.Models.Brand?>.Resolve(value);
                }
                else
                {
                    results[i] = global::GreenDonut.Result<global::eShop.Catalog.Models.Brand?>.Resolve(default(global::eShop.Catalog.Models.Brand));
                }
            }
        }
    }

    public interface IProductByIdDataLoader
        : global::GreenDonut.IDataLoader<int, global::eShop.Catalog.Models.Product>
    {
    }

    public sealed partial class ProductByIdDataLoader
        : global::GreenDonut.DataLoaderBase<int, global::eShop.Catalog.Models.Product>
        , IProductByIdDataLoader
    {
        private readonly global::System.IServiceProvider _services;

        public ProductByIdDataLoader(
            global::System.IServiceProvider services,
            global::GreenDonut.IBatchScheduler batchScheduler,
            global::GreenDonut.DataLoaderOptions options)
            : base(batchScheduler, options)
        {
            _services = services ??
                throw new global::System.ArgumentNullException(nameof(services));
        }

        protected override async global::System.Threading.Tasks.ValueTask FetchAsync(
            global::System.Collections.Generic.IReadOnlyList<int> keys,
            global::System.Memory<GreenDonut.Result<global::eShop.Catalog.Models.Product?>> results,
            global::GreenDonut.DataLoaderFetchContext<global::eShop.Catalog.Models.Product> context,
            global::System.Threading.CancellationToken ct)
        {
            await using var scope = _services.CreateAsyncScope();
            var p1_selector = context.GetState<global::GreenDonut.Data.ISelectorBuilder>("GreenDonut.Data.Selector")?.TryCompile<global::eShop.Catalog.Models.Product>();
            var p1_predicate = context.GetState<global::GreenDonut.Data.IPredicateBuilder>("GreenDonut.Data.Predicate")?.TryCompile<global::eShop.Catalog.Models.Product>();
            var p1_sortDefinition = context.GetState<global::GreenDonut.Data.SortDefinition<global::eShop.Catalog.Models.Product>>("GreenDonut.Data.Sorting");

            var p1 = global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>.Empty;
            if(p1_selector is not null || p1_predicate is not null || p1_sortDefinition is not null)
            {
                p1 = new global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>(p1_selector, p1_predicate, p1_sortDefinition);
            }
            var p2 = scope.ServiceProvider.GetRequiredService<global::eShop.Catalog.Data.CatalogContext>();
            var temp = await global::eShop.Catalog.Services.ProductDataLoader.GetProductByIdAsync(keys, p1, p2, ct).ConfigureAwait(false);
            CopyResults(keys, results.Span, temp);
        }

        private void CopyResults(
            global::System.Collections.Generic.IReadOnlyList<int> keys,
            global::System.Span<GreenDonut.Result<global::eShop.Catalog.Models.Product?>> results,
            global::System.Collections.Generic.Dictionary<int, eShop.Catalog.Models.Product> resultMap)
        {
            for (var i = 0; i < keys.Count; i++)
            {
                var key = keys[i];
                if (resultMap.TryGetValue(key, out var value))
                {
                    results[i] = global::GreenDonut.Result<global::eShop.Catalog.Models.Product?>.Resolve(value);
                }
                else
                {
                    results[i] = global::GreenDonut.Result<global::eShop.Catalog.Models.Product?>.Resolve(default(global::eShop.Catalog.Models.Product));
                }
            }
        }
    }

    public interface IProductsByBrandIdDataLoader
        : global::GreenDonut.IDataLoader<int, global::GreenDonut.Data.Page<global::eShop.Catalog.Models.Product>>
    {
    }

    public sealed partial class ProductsByBrandIdDataLoader
        : global::GreenDonut.DataLoaderBase<int, global::GreenDonut.Data.Page<global::eShop.Catalog.Models.Product>>
        , IProductsByBrandIdDataLoader
    {
        private readonly global::System.IServiceProvider _services;

        public ProductsByBrandIdDataLoader(
            global::System.IServiceProvider services,
            global::GreenDonut.IBatchScheduler batchScheduler,
            global::GreenDonut.DataLoaderOptions options)
            : base(batchScheduler, options)
        {
            _services = services ??
                throw new global::System.ArgumentNullException(nameof(services));
        }

        protected override async global::System.Threading.Tasks.ValueTask FetchAsync(
            global::System.Collections.Generic.IReadOnlyList<int> keys,
            global::System.Memory<GreenDonut.Result<global::GreenDonut.Data.Page<global::eShop.Catalog.Models.Product>?>> results,
            global::GreenDonut.DataLoaderFetchContext<global::GreenDonut.Data.Page<global::eShop.Catalog.Models.Product>> context,
            global::System.Threading.CancellationToken ct)
        {
            await using var scope = _services.CreateAsyncScope();
            var p1 = context.GetRequiredState<global::GreenDonut.Data.PagingArguments>("GreenDonut.Data.PagingArgs");
            var p2_selector = context.GetState<global::GreenDonut.Data.ISelectorBuilder>("GreenDonut.Data.Selector")?.TryCompile<global::eShop.Catalog.Models.Product>();
            var p2_predicate = context.GetState<global::GreenDonut.Data.IPredicateBuilder>("GreenDonut.Data.Predicate")?.TryCompile<global::eShop.Catalog.Models.Product>();
            var p2_sortDefinition = context.GetState<global::GreenDonut.Data.SortDefinition<global::eShop.Catalog.Models.Product>>("GreenDonut.Data.Sorting");

            var p2 = global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>.Empty;
            if(p2_selector is not null || p2_predicate is not null || p2_sortDefinition is not null)
            {
                p2 = new global::GreenDonut.Data.QueryContext<global::eShop.Catalog.Models.Product>(p2_selector, p2_predicate, p2_sortDefinition);
            }
            var p3 = scope.ServiceProvider.GetRequiredService<global::eShop.Catalog.Data.CatalogContext>();
            var temp = await global::eShop.Catalog.Services.ProductDataLoader.GetProductsByBrandIdAsync(keys, p1, p2, p3, ct).ConfigureAwait(false);
            CopyResults(keys, results.Span, temp);
        }

        private void CopyResults(
            global::System.Collections.Generic.IReadOnlyList<int> keys,
            global::System.Span<GreenDonut.Result<global::GreenDonut.Data.Page<global::eShop.Catalog.Models.Product>?>> results,
            global::System.Collections.Generic.Dictionary<int, GreenDonut.Data.Page<eShop.Catalog.Models.Product>> resultMap)
        {
            for (var i = 0; i < keys.Count; i++)
            {
                var key = keys[i];
                if (resultMap.TryGetValue(key, out var value))
                {
                    results[i] = global::GreenDonut.Result<global::GreenDonut.Data.Page<global::eShop.Catalog.Models.Product>?>.Resolve(value);
                }
                else
                {
                    results[i] = global::GreenDonut.Result<global::GreenDonut.Data.Page<global::eShop.Catalog.Models.Product>?>.Resolve(default(global::GreenDonut.Data.Page<global::eShop.Catalog.Models.Product>));
                }
            }
        }
    }
}

