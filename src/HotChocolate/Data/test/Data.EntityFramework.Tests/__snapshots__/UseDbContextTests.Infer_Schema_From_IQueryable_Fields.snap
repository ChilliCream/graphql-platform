schema {
  query: Query
}

type Author {
  id: Int!
  name: String!
  books: [Book!]!
}

"A connection to a list of items."
type AuthorCursorPagingConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AuthorCursorPagingEdge!]
  "A flattened list of the nodes."
  nodes: [Author!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type AuthorCursorPagingEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Author!
}

"A connection to a list of items."
type AuthorCursorPagingExecutableConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AuthorCursorPagingExecutableEdge!]
  "A flattened list of the nodes."
  nodes: [Author!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type AuthorCursorPagingExecutableEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Author!
}

"A segment of a collection."
type AuthorOffsetPagingCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Author!]
  totalCount: Int!
}

"A segment of a collection."
type AuthorOffsetPagingExecutableCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Author!]
  totalCount: Int!
}

type Book {
  id: Int!
  authorId: Int!
  title: String!
  author: Author
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  authors: [Author!]!
  author: Author!
  authorSync: Author
  authorOffsetPaging(skip: Int take: Int where: AuthorFilterInput order: [AuthorSortInput!]): AuthorOffsetPagingCollectionSegment
  authorOffsetPagingExecutable(skip: Int take: Int where: AuthorFilterInput order: [AuthorSortInput!]): AuthorOffsetPagingExecutableCollectionSegment
  authorCursorPagingExecutable("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AuthorFilterInput order: [AuthorSortInput!]): AuthorCursorPagingExecutableConnection
  authorCursorPaging("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AuthorCursorPagingConnection
  queryableExtensionsCursor("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): QueryableExtensionsCursorConnection
  queryableExtensionsOffset(skip: Int take: Int where: AuthorFilterInput order: [AuthorSortInput!]): QueryableExtensionsOffsetCollectionSegment
}

"A connection to a list of items."
type QueryableExtensionsCursorConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [QueryableExtensionsCursorEdge!]
  "A flattened list of the nodes."
  nodes: [Author!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type QueryableExtensionsCursorEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Author!
}

"A segment of a collection."
type QueryableExtensionsOffsetCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Author!]
  totalCount: Int!
}

input AuthorFilterInput {
  and: [AuthorFilterInput!]
  or: [AuthorFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  books: ListFilterInputTypeOfBookFilterInput
}

input AuthorSortInput {
  id: SortEnumType
  name: SortEnumType
}

input BookFilterInput {
  and: [BookFilterInput!]
  or: [BookFilterInput!]
  id: IntOperationFilterInput
  authorId: IntOperationFilterInput
  title: StringOperationFilterInput
  author: AuthorFilterInput
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfBookFilterInput {
  all: BookFilterInput
  none: BookFilterInput
  some: BookFilterInput
  any: Boolean
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}
