schema {
  query: Query
}

type Foo {
  bar: String!
}

type ITestOfFoo {
  prop: Foo!
}

type Query {
  root(where: ITestOfFooFilterInput): ITestOfFoo!
}

input FooFilterInput {
  and: [FooFilterInput!]
  or: [FooFilterInput!]
  bar: StringOperationFilterInput
}

input ITestOfFooFilterInput {
  and: [ITestOfFooFilterInput!]
  or: [ITestOfFooFilterInput!]
  prop: FooFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}