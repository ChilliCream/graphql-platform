schema {
  query: FirstOrDefaultQuery
  mutation: FirstOrDefaultMutationManyToOne
}

type Author {
  id: Int!
  name: String
  books: [Book!]!
  publishers: [Publisher!]!
}

type Book {
  id: Int!
  authorId: Int!
  title: String
  author: Author
  publisher: Publisher
}

type FirstOrDefaultMutationManyToOne {
  addBook(book: BookInput!): Author
}

type FirstOrDefaultQuery {
  books(book: BookInput!): Book
}

type Publisher {
  id: Int!
  name: String!
  address: String!
  zipcode: String!
  books: [Book!]!
  authors: [Author!]!
}

input AuthorInput {
  id: Int!
  name: String
  books: [BookInput!]!
  publishers: [PublisherInput!]!
}

input BookInput {
  id: Int!
  authorId: Int!
  title: String
  author: AuthorInput
  publisher: PublisherInput
}

input PublisherInput {
  id: Int!
  name: String!
  address: String!
  zipcode: String!
  books: [BookInput!]!
  authors: [AuthorInput!]!
}

"The @tag directive is used to apply arbitrary string\nmetadata to a schema location. Custom tooling can use\nthis metadata during any step of the schema delivery flow,\nincluding composition, static analysis, and documentation.\n            \n\ninterface Book {\n  id: ID! @tag(name: \"your-value\")\n  title: String!\n  author: String!\n}"
directive @tag("The name of the tag." name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION