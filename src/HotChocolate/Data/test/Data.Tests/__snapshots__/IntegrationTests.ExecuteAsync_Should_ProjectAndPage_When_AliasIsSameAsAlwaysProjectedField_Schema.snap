schema {
  query: Query
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Author {
  id: Int!
  name: String
  books: [Book!]!
  publishers: [Publisher!]!
}

type Book implements Node {
  id: ID!
  authorId: Int!
  title: String
  author: Author
  publisher: Publisher
}

"A connection to a list of items."
type BooksConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BooksEdge!]
  "A flattened list of the nodes."
  nodes: [Book!]
}

"An edge in a connection."
type BooksEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Book!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Publisher {
  id: Int!
  name: String!
  address: String!
  zipcode: String!
  books: [Book!]!
  authors: [Author!]!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BookFilterInput order: [BookSortInput!]): BooksConnection
}

input AuthorFilterInput {
  and: [AuthorFilterInput!]
  or: [AuthorFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  books: ListFilterInputTypeOfBookFilterInput
  publishers: ListFilterInputTypeOfPublisherFilterInput
}

input AuthorSortInput {
  id: SortEnumType
  name: SortEnumType
}

input BookFilterInput {
  and: [BookFilterInput!]
  or: [BookFilterInput!]
  id: ComparableInt32OperationFilterInput
  authorId: ComparableInt32OperationFilterInput
  title: StringOperationFilterInput
  author: AuthorFilterInput
  publisher: PublisherFilterInput
}

input BookSortInput {
  id: SortEnumType
  authorId: SortEnumType
  title: SortEnumType
  author: AuthorSortInput
  publisher: PublisherSortInput
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfAuthorFilterInput {
  all: AuthorFilterInput
  none: AuthorFilterInput
  some: AuthorFilterInput
  any: Boolean
}

input ListFilterInputTypeOfBookFilterInput {
  all: BookFilterInput
  none: BookFilterInput
  some: BookFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPublisherFilterInput {
  all: PublisherFilterInput
  none: PublisherFilterInput
  some: PublisherFilterInput
  any: Boolean
}

input PublisherFilterInput {
  and: [PublisherFilterInput!]
  or: [PublisherFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  address: StringOperationFilterInput
  zipcode: StringOperationFilterInput
  books: ListFilterInputTypeOfBookFilterInput
  authors: ListFilterInputTypeOfAuthorFilterInput
}

input PublisherSortInput {
  id: SortEnumType
  name: SortEnumType
  address: SortEnumType
  zipcode: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD
