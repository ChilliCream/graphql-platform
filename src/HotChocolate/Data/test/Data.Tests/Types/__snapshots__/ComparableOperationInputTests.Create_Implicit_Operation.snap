schema {
  query: Query
}

type Query {
  foo(test: FooFilter): String
}

input ComparableOperationInputOfDecimalFilter {
  eq: Decimal!
  gt: Decimal!
  gte: Decimal!
  in: Decimal!
  lt: Decimal!
  lte: Decimal!
  neq: Decimal!
  ngt: Decimal!
  ngte: Decimal!
  nin: Decimal!
  nlt: Decimal!
  nlte: Decimal!
}

input ComparableOperationInputOfDoubleFilter {
  eq: Float!
  gt: Float!
  gte: Float!
  in: Float!
  lt: Float!
  lte: Float!
  neq: Float!
  ngt: Float!
  ngte: Float!
  nin: Float!
  nlt: Float!
  nlte: Float!
}

input ComparableOperationInputOfInt16Filter {
  eq: Short!
  gt: Short!
  gte: Short!
  in: Short!
  lt: Short!
  lte: Short!
  neq: Short!
  ngt: Short!
  ngte: Short!
  nin: Short!
  nlt: Short!
  nlte: Short!
}

input ComparableOperationInputOfInt32Filter {
  eq: Int!
  gt: Int!
  gte: Int!
  in: Int!
  lt: Int!
  lte: Int!
  neq: Int!
  ngt: Int!
  ngte: Int!
  nin: Int!
  nlt: Int!
  nlte: Int!
}

input ComparableOperationInputOfInt64Filter {
  eq: Long!
  gt: Long!
  gte: Long!
  in: Long!
  lt: Long!
  lte: Long!
  neq: Long!
  ngt: Long!
  ngte: Long!
  nin: Long!
  nlt: Long!
  nlte: Long!
}

input ComparableOperationInputOfSingleFilter {
  eq: Float!
  gt: Float!
  gte: Float!
  in: Float!
  lt: Float!
  lte: Float!
  neq: Float!
  ngt: Float!
  ngte: Float!
  nin: Float!
  nlt: Float!
  nlte: Float!
}

input EnumOperationInputOfFooBarFilter {
  eq: FooBar!
  in: FooBar!
  neq: FooBar!
  nin: FooBar!
}

input FooFilter {
  and: [FooFilter!]
  barDecimal: ComparableOperationInputOfDecimalFilter
  barDecimalNullable: ComparableOperationInputOfDecimalFilter
  barDouble: ComparableOperationInputOfDoubleFilter
  barDoubleNullable: ComparableOperationInputOfDoubleFilter
  barFloat: ComparableOperationInputOfSingleFilter
  barFloatNullable: ComparableOperationInputOfSingleFilter
  barInt: ComparableOperationInputOfInt32Filter
  barIntNullable: ComparableOperationInputOfInt32Filter
  barLong: ComparableOperationInputOfInt64Filter
  barLongNullable: ComparableOperationInputOfInt64Filter
  barShort: ComparableOperationInputOfInt16Filter
  barShortNullable: ComparableOperationInputOfInt16Filter
  fooBar: EnumOperationInputOfFooBarFilter
  or: [FooFilter!]
}

enum FooBar {
  FOO
  BAR
}

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http:\/\/en.wikipedia.org\/wiki\/IEEE_floating_point)."
scalar Float

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
