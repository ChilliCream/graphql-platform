schema {
  query: QueryType
}

type Foo {
  bar: String!
}

type QueryType {
  foos(where: FooFilterInput): [Foo]
  foosBar(where: Bar_FooFilterInput): [Foo]
}

input Bar_FooFilterInput {
  and: [Bar_FooFilterInput!]
  or: [Bar_FooFilterInput!]
  bar: Bar_StringOperationFilterInput
}

input Bar_StringOperationFilterInput {
  and: [Bar_StringOperationFilterInput!]
  or: [Bar_StringOperationFilterInput!]
  EQUALS: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input FooFilterInput {
  and: [FooFilterInput!]
  or: [FooFilterInput!]
  bar: StringOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

directive @tag(name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION