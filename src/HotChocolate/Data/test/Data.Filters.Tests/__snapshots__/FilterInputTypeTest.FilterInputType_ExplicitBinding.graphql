schema {
  query: Query
}

type Bar {
  baz: String!
  qux: String!
}

type Query {
  foo(where: BarFilterInput): Bar
}

input BarFilterInput {
  and: [BarFilterInput!]
  or: [BarFilterInput!]
  qux: StringOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}