schema {
  query: Query4
}

type Bar {
  baz: Long!
  shouldNotBeVisible: Int
}

type Query4 {
  bars(where: ItWorks): [Bar!]!
}

input ComparableOperationFilterInputOfInt64FilterInput {
  eq: Long
  neq: Long
  in: [Long!]
  nin: [Long!]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input ItWorks {
  and: [ItWorks!]
  or: [ItWorks!]
  baz: ComparableOperationFilterInputOfInt64FilterInput
}

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long
