schema {
  query: Query1
}

type Foo {
  bar: String!
  baz: Int!
  qux: Int
}

type Query1 {
  foos(where: FooFilterInput): [Foo!]!
}

input ComparableOperationInputOfInt64FilterInput {
  eq: Long
  neq: Long
  in: [Long!]
  nin: [Long!]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input ComparableOperationInputOfNullableOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input FooFilterInput {
  and: [FooFilterInput!]
  or: [FooFilterInput!]
  bar: StringOperationInputFilterInput
  baz: ComparableOperationInputOfInt64FilterInput
  qux: ComparableOperationInputOfNullableOfInt32FilterInput
}

input StringOperationInputFilterInput {
  and: [StringOperationInputFilterInput!]
  or: [StringOperationInputFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
