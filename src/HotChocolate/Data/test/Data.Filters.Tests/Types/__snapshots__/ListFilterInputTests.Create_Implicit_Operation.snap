schema {
  query: Query
}

type Query {
  foo(test: FooFilterInput): String
}

input BazFilterInput {
  and: [BazFilterInput!]
  or: [BazFilterInput!]
  stringProp: StringOperationInputFilterInput
}

input BooleanOperationInputFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableOperationInputOfDecimalFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal!]
  nin: [Decimal!]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ComparableOperationInputOfDoubleFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableOperationInputOfInt16FilterInput {
  eq: Short
  neq: Short
  in: [Short!]
  nin: [Short!]
  gt: Short
  ngt: Short
  gte: Short
  ngte: Short
  lt: Short
  nlt: Short
  lte: Short
  nlte: Short
}

input ComparableOperationInputOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableOperationInputOfInt64FilterInput {
  eq: Long
  neq: Long
  in: [Long!]
  nin: [Long!]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input ComparableOperationInputOfNullableOfDecimalFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ComparableOperationInputOfNullableOfDoubleFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableOperationInputOfNullableOfInt16FilterInput {
  eq: Short
  neq: Short
  in: [Short]
  nin: [Short]
  gt: Short
  ngt: Short
  gte: Short
  ngte: Short
  lt: Short
  nlt: Short
  lte: Short
  nlte: Short
}

input ComparableOperationInputOfNullableOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableOperationInputOfNullableOfInt64FilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input ComparableOperationInputOfNullableOfSingleFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableOperationInputOfSingleFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input EnumOperationInputOfFooBarFilterInput {
  eq: FooBar
  neq: FooBar
  in: [FooBar!]
  nin: [FooBar!]
}

input FooFilterInput {
  and: [FooFilterInput!]
  or: [FooFilterInput!]
  baz: ListFilterInputOfFilterInputTypeOfBazFilterInput
  stringArray: ListFilterInputOfStringOperationInputFilterInput
  stringNullableArray: ListFilterInputOfStringOperationInputFilterInput
  booleanArray: ListFilterInputOfBooleanOperationInputFilterInput
  booleanNullableArray: ListFilterInputOfBooleanOperationInputFilterInput
  barShortArray: ListFilterInputOfComparableOperationInputOfInt16FilterInput
  barIntArray: ListFilterInputOfComparableOperationInputOfInt32FilterInput
  barLongArray: ListFilterInputOfComparableOperationInputOfInt64FilterInput
  barFloatArray: ListFilterInputOfComparableOperationInputOfSingleFilterInput
  barDoubleArray: ListFilterInputOfComparableOperationInputOfDoubleFilterInput
  barDecimalArray: ListFilterInputOfComparableOperationInputOfDecimalFilterInput
  barShortNullableArray: ListFilterInputOfComparableOperationInputOfNullableOfInt16FilterInput
  barIntNullableArray: ListFilterInputOfComparableOperationInputOfNullableOfInt32FilterInput
  barLongNullableArray: ListFilterInputOfComparableOperationInputOfNullableOfInt64FilterInput
  barFloatNullableArray: ListFilterInputOfComparableOperationInputOfNullableOfSingleFilterInput
  barDoubleNullableArray: ListFilterInputOfComparableOperationInputOfNullableOfDoubleFilterInput
  barDecimalNullableArray: ListFilterInputOfComparableOperationInputOfNullableOfDecimalFilterInput
  fooBarArray: ListFilterInputOfEnumOperationInputOfFooBarFilterInput
}

input ListFilterInputOfBooleanOperationInputFilterInput {
  all: BooleanOperationInputFilterInput
  none: BooleanOperationInputFilterInput
  some: BooleanOperationInputFilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfDecimalFilterInput {
  all: ComparableOperationInputOfDecimalFilterInput
  none: ComparableOperationInputOfDecimalFilterInput
  some: ComparableOperationInputOfDecimalFilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfDoubleFilterInput {
  all: ComparableOperationInputOfDoubleFilterInput
  none: ComparableOperationInputOfDoubleFilterInput
  some: ComparableOperationInputOfDoubleFilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfInt16FilterInput {
  all: ComparableOperationInputOfInt16FilterInput
  none: ComparableOperationInputOfInt16FilterInput
  some: ComparableOperationInputOfInt16FilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfInt32FilterInput {
  all: ComparableOperationInputOfInt32FilterInput
  none: ComparableOperationInputOfInt32FilterInput
  some: ComparableOperationInputOfInt32FilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfInt64FilterInput {
  all: ComparableOperationInputOfInt64FilterInput
  none: ComparableOperationInputOfInt64FilterInput
  some: ComparableOperationInputOfInt64FilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfNullableOfDecimalFilterInput {
  all: ComparableOperationInputOfNullableOfDecimalFilterInput
  none: ComparableOperationInputOfNullableOfDecimalFilterInput
  some: ComparableOperationInputOfNullableOfDecimalFilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfNullableOfDoubleFilterInput {
  all: ComparableOperationInputOfNullableOfDoubleFilterInput
  none: ComparableOperationInputOfNullableOfDoubleFilterInput
  some: ComparableOperationInputOfNullableOfDoubleFilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfNullableOfInt16FilterInput {
  all: ComparableOperationInputOfNullableOfInt16FilterInput
  none: ComparableOperationInputOfNullableOfInt16FilterInput
  some: ComparableOperationInputOfNullableOfInt16FilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfNullableOfInt32FilterInput {
  all: ComparableOperationInputOfNullableOfInt32FilterInput
  none: ComparableOperationInputOfNullableOfInt32FilterInput
  some: ComparableOperationInputOfNullableOfInt32FilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfNullableOfInt64FilterInput {
  all: ComparableOperationInputOfNullableOfInt64FilterInput
  none: ComparableOperationInputOfNullableOfInt64FilterInput
  some: ComparableOperationInputOfNullableOfInt64FilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfNullableOfSingleFilterInput {
  all: ComparableOperationInputOfNullableOfSingleFilterInput
  none: ComparableOperationInputOfNullableOfSingleFilterInput
  some: ComparableOperationInputOfNullableOfSingleFilterInput
  any: Boolean
}

input ListFilterInputOfComparableOperationInputOfSingleFilterInput {
  all: ComparableOperationInputOfSingleFilterInput
  none: ComparableOperationInputOfSingleFilterInput
  some: ComparableOperationInputOfSingleFilterInput
  any: Boolean
}

input ListFilterInputOfEnumOperationInputOfFooBarFilterInput {
  all: EnumOperationInputOfFooBarFilterInput
  none: EnumOperationInputOfFooBarFilterInput
  some: EnumOperationInputOfFooBarFilterInput
  any: Boolean
}

input ListFilterInputOfFilterInputTypeOfBazFilterInput {
  all: BazFilterInput
  none: BazFilterInput
  some: BazFilterInput
  any: Boolean
}

input ListFilterInputOfStringOperationInputFilterInput {
  all: StringOperationInputFilterInput
  none: StringOperationInputFilterInput
  some: StringOperationInputFilterInput
  any: Boolean
}

input StringOperationInputFilterInput {
  and: [StringOperationInputFilterInput!]
  or: [StringOperationInputFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum FooBar {
  FOO
  BAR
}

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http:\/\/en.wikipedia.org\/wiki\/IEEE_floating_point)."
scalar Float

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
