schema {
  query: Query
}

type Query {
  foo(test: FooFilterInput): String
}

input ComparableOperationFilterFilterInputOfDecimalFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal!]
  nin: [Decimal!]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ComparableOperationFilterFilterInputOfDoubleFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableOperationFilterFilterInputOfInt16FilterInput {
  eq: Short
  neq: Short
  in: [Short!]
  nin: [Short!]
  gt: Short
  ngt: Short
  gte: Short
  ngte: Short
  lt: Short
  nlt: Short
  lte: Short
  nlte: Short
}

input ComparableOperationFilterFilterInputOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableOperationFilterFilterInputOfInt64FilterInput {
  eq: Long
  neq: Long
  in: [Long!]
  nin: [Long!]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input ComparableOperationFilterFilterInputOfNullableOfDecimalFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ComparableOperationFilterFilterInputOfNullableOfDoubleFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableOperationFilterFilterInputOfNullableOfInt16FilterInput {
  eq: Short
  neq: Short
  in: [Short]
  nin: [Short]
  gt: Short
  ngt: Short
  gte: Short
  ngte: Short
  lt: Short
  nlt: Short
  lte: Short
  nlte: Short
}

input ComparableOperationFilterFilterInputOfNullableOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableOperationFilterFilterInputOfNullableOfInt64FilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input ComparableOperationFilterFilterInputOfNullableOfSingleFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableOperationFilterFilterInputOfSingleFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input EnumOperationFilterFilterInputOfFooBarFilterInput {
  eq: FooBar
  neq: FooBar
  in: [FooBar!]
  nin: [FooBar!]
}

input FooFilterInput {
  and: [FooFilterInput!]
  or: [FooFilterInput!]
  barShort: ComparableOperationFilterFilterInputOfInt16FilterInput
  barInt: ComparableOperationFilterFilterInputOfInt32FilterInput
  barLong: ComparableOperationFilterFilterInputOfInt64FilterInput
  barFloat: ComparableOperationFilterFilterInputOfSingleFilterInput
  barDouble: ComparableOperationFilterFilterInputOfDoubleFilterInput
  barDecimal: ComparableOperationFilterFilterInputOfDecimalFilterInput
  barShortNullable: ComparableOperationFilterFilterInputOfNullableOfInt16FilterInput
  barIntNullable: ComparableOperationFilterFilterInputOfNullableOfInt32FilterInput
  barLongNullable: ComparableOperationFilterFilterInputOfNullableOfInt64FilterInput
  barFloatNullable: ComparableOperationFilterFilterInputOfNullableOfSingleFilterInput
  barDoubleNullable: ComparableOperationFilterFilterInputOfNullableOfDoubleFilterInput
  barDecimalNullable: ComparableOperationFilterFilterInputOfNullableOfDecimalFilterInput
  fooBar: EnumOperationFilterFilterInputOfFooBarFilterInput
}

enum FooBar {
  FOO
  BAR
}

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http:\/\/en.wikipedia.org\/wiki\/IEEE_floating_point)."
scalar Float

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
