#nullable enable
abstract HotChocolate.Data.Filters.Expressions.QueryableBooleanOperationHandler.Operation.get -> int
abstract HotChocolate.Data.Filters.Expressions.QueryableComparableOperationHandler.Operation.get -> int
abstract HotChocolate.Data.Filters.Expressions.QueryableListOperationHandlerBase.HandleListOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, System.Type! closureType, System.Linq.Expressions.LambdaExpression! lambda) -> System.Linq.Expressions.Expression!
abstract HotChocolate.Data.Filters.Expressions.QueryableListOperationHandlerBase.Operation.get -> int
abstract HotChocolate.Data.Filters.Expressions.QueryableOperationHandlerBase.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
abstract HotChocolate.Data.Filters.Expressions.QueryableStringOperationHandler.Operation.get -> int
abstract HotChocolate.Data.Filters.FilterFieldDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Filters.IFilterFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
abstract HotChocolate.Data.Filters.FilterFieldHandler<TContext, T>.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
abstract HotChocolate.Data.Filters.FilterInputTypeDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor, System.Type! type) -> void
abstract HotChocolate.Data.Filters.FilterOperationCombinator.TryCombineOperations<TContext, T>(TContext! context, System.Collections.Generic.Queue<T>! operations, HotChocolate.Data.Filters.FilterCombinator combinator, out T combined) -> bool
abstract HotChocolate.Data.Filters.FilterOperationCombinator<TContext, T>.TryCombineOperations(TContext! context, System.Collections.Generic.Queue<T>! operations, HotChocolate.Data.Filters.FilterCombinator combinator, out T combined) -> bool
abstract HotChocolate.Data.Filters.FilterProvider<TContext>.CreateExecutor<TEntityType>(HotChocolate.NameString argumentName) -> HotChocolate.Resolvers.FieldMiddleware!
abstract HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.OnFieldEnter(TContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
abstract HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.OnFieldLeave(TContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
abstract HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.TryCombineOperations(TContext! context, System.Collections.Generic.Queue<T>! operations, HotChocolate.Data.Filters.FilterCombinator combinator, out T combined) -> bool
abstract HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
abstract HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>.TryHandleEnter(T context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
abstract HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>.TryHandleLeave(T context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
abstract HotChocolate.Data.Projections.ProjectionProvider.CreateExecutor<TEntityType>() -> HotChocolate.Resolvers.FieldMiddleware!
abstract HotChocolate.Data.Sorting.Expressions.QueryableOperationHandlerBase.HandleOperation(HotChocolate.Data.Sorting.Expressions.QueryableSortContext! context, HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector! fieldSelector, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Data.Sorting.ISortEnumValue? sortEnumValue) -> HotChocolate.Data.Sorting.Expressions.QueryableSortOperation!
abstract HotChocolate.Data.Sorting.Expressions.QueryableSortOperation.CompileOrderBy(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
abstract HotChocolate.Data.Sorting.Expressions.QueryableSortOperation.CompileThenBy(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
abstract HotChocolate.Data.Sorting.SortFieldDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Sorting.ISortFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
abstract HotChocolate.Data.Sorting.SortFieldHandler<TContext, T>.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Sorting.ISortInputTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.ISortFieldDefinition! fieldDefinition) -> bool
abstract HotChocolate.Data.Sorting.SortInputTypeDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Sorting.ISortInputTypeDescriptor! descriptor, System.Type! type) -> void
abstract HotChocolate.Data.Sorting.SortOperationHandler<TContext, T>.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.SortEnumValueDefinition! valueDefinition) -> bool
abstract HotChocolate.Data.Sorting.SortProvider<TContext>.CreateExecutor<TEntityType>(HotChocolate.NameString argumentName) -> HotChocolate.Resolvers.FieldMiddleware!
abstract HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>.OnFieldEnter(TContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
abstract HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>.OnFieldLeave(TContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
abstract HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>.OnOperationEnter(TContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Data.Sorting.ISortEnumValue? sortEnumValue, HotChocolate.Language.EnumValueNode! enumValueNode) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
const HotChocolate.Data.Filters.DefaultFilterOperations.All = 25 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.And = 10 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.Any = 27 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.Contains = 2 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.Data = 29 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.EndsWith = 8 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.Equals = 0 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.GreaterThan = 16 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.GreaterThanOrEquals = 18 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.In = 4 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.Like = 28 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.LowerThan = 20 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.LowerThanOrEquals = 22 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.None = 26 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.NotContains = 3 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.NotEndsWith = 9 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.NotEquals = 1 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.NotGreaterThan = 17 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.NotGreaterThanOrEquals = 19 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.NotIn = 5 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.NotLowerThan = 21 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.NotLowerThanOrEquals = 23 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.NotStartsWith = 7 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.Or = 11 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.Some = 24 -> int
const HotChocolate.Data.Filters.DefaultFilterOperations.StartsWith = 6 -> int
const HotChocolate.Data.Projections.FirstOrDefaultMiddleware<T>.ContextKey = "FirstOrDefaultMiddleware" -> string!
const HotChocolate.Data.Projections.ProjectionConvention.AlwaysProjectedFieldsKey = "AlwaysProjectedFieldsKey" -> string!
const HotChocolate.Data.Projections.ProjectionConvention.IsProjectedKey = "IsProjectedKey" -> string!
const HotChocolate.Data.Projections.ProjectionProvider.ProjectionContextIdentifier = "ProjectionMiddleware" -> string!
const HotChocolate.Data.Sorting.DefaultSortOperations.Ascending = 0 -> int
const HotChocolate.Data.Sorting.DefaultSortOperations.Descending = 1 -> int
const HotChocolate.Data.Sorting.Expressions.QueryableSortProvider.ContextArgumentNameKey = "SortArgumentName" -> string!
const HotChocolate.Data.Sorting.Expressions.QueryableSortProvider.ContextVisitSortArgumentKey = "VisitSortArgument" -> string!
const HotChocolate.Data.Sorting.Expressions.QueryableSortProvider.SkipSortingKey = "SkipSorting" -> string!
HotChocolate.Data.DataEnumerableExtensions
HotChocolate.Data.FilterConventionDescriptorExtensions
HotChocolate.Data.FilterConventionDescriptorQueryableExtensions
HotChocolate.Data.FilterDescriptorContextExtensions
HotChocolate.Data.Filters.AndField
HotChocolate.Data.Filters.AndField.DeclaringType.get -> HotChocolate.Data.Filters.FilterInputType!
HotChocolate.Data.Filters.BooleanOperationFilterInputType
HotChocolate.Data.Filters.BooleanOperationFilterInputType.BooleanOperationFilterInputType() -> void
HotChocolate.Data.Filters.ComparableOperationFilterInputType<T>
HotChocolate.Data.Filters.ComparableOperationFilterInputType<T>.ComparableOperationFilterInputType() -> void
HotChocolate.Data.Filters.ConfigureFilterInputType
HotChocolate.Data.Filters.ConfigureFilterInputType<T>
HotChocolate.Data.Filters.DefaultFilterOperations
HotChocolate.Data.Filters.EnumOperationFilterInputType<T>
HotChocolate.Data.Filters.EnumOperationFilterInputType<T>.EnumOperationFilterInputType() -> void
HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder
HotChocolate.Data.Filters.Expressions.QueryableBooleanEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableBooleanEqualsHandler.QueryableBooleanEqualsHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableBooleanNotEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableBooleanNotEqualsHandler.QueryableBooleanNotEqualsHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableBooleanOperationHandler
HotChocolate.Data.Filters.Expressions.QueryableBooleanOperationHandler.QueryableBooleanOperationHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableCombinator
HotChocolate.Data.Filters.Expressions.QueryableCombinator.QueryableCombinator() -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableEqualsHandler.QueryableComparableEqualsHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanHandler.QueryableComparableGreaterThanHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanOrEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanOrEqualsHandler.QueryableComparableGreaterThanOrEqualsHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableInHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableInHandler.QueryableComparableInHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanHandler.QueryableComparableLowerThanHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanOrEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanOrEqualsHandler.QueryableComparableLowerThanOrEqualsHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableNotEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableNotEqualsHandler.QueryableComparableNotEqualsHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanHandler.QueryableComparableNotGreaterThanHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanOrEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanOrEqualsHandler.QueryableComparableNotGreaterThanOrEqualsHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableNotInHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableNotInHandler.QueryableComparableNotInHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanHandler.QueryableComparableNotLowerThanHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanOrEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanOrEqualsHandler.QueryableComparableNotLowerThanOrEqualsHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableOperationHandler
HotChocolate.Data.Filters.Expressions.QueryableComparableOperationHandler.ParseValue(HotChocolate.Language.IValueNode! node, object? parsedValue, HotChocolate.Types.IType! type, HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context) -> object?
HotChocolate.Data.Filters.Expressions.QueryableComparableOperationHandler.QueryableComparableOperationHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableComparableOperationHandler.TypeConverter.get -> HotChocolate.Utilities.ITypeConverter!
HotChocolate.Data.Filters.Expressions.QueryableDataOperationHandler
HotChocolate.Data.Filters.Expressions.QueryableDataOperationHandler.QueryableDataOperationHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableDefaultFieldHandler
HotChocolate.Data.Filters.Expressions.QueryableDefaultFieldHandler.QueryableDefaultFieldHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableEnumEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableEnumEqualsHandler.QueryableEnumEqualsHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableEnumInHandler
HotChocolate.Data.Filters.Expressions.QueryableEnumInHandler.QueryableEnumInHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableEnumNotEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableEnumNotEqualsHandler.QueryableEnumNotEqualsHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableEnumNotInHandler
HotChocolate.Data.Filters.Expressions.QueryableEnumNotInHandler.QueryableEnumNotInHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableFilterContext
HotChocolate.Data.Filters.Expressions.QueryableFilterContext.InMemory.get -> bool
HotChocolate.Data.Filters.Expressions.QueryableFilterContext.QueryableFilterContext(HotChocolate.Data.Filters.IFilterInputType! initialType, bool inMemory) -> void
HotChocolate.Data.Filters.Expressions.QueryableFilterContext.RuntimeTypes.get -> System.Collections.Generic.Stack<HotChocolate.Internal.IExtendedType!>!
HotChocolate.Data.Filters.Expressions.QueryableFilterProvider
HotChocolate.Data.Filters.Expressions.QueryableFilterProvider.QueryableFilterProvider() -> void
HotChocolate.Data.Filters.Expressions.QueryableFilterProvider.QueryableFilterProvider(System.Action<HotChocolate.Data.Filters.IFilterProviderDescriptor<HotChocolate.Data.Filters.Expressions.QueryableFilterContext!>!>! configure) -> void
HotChocolate.Data.Filters.Expressions.QueryableFilterProviderExtension
HotChocolate.Data.Filters.Expressions.QueryableFilterProviderExtension.QueryableFilterProviderExtension() -> void
HotChocolate.Data.Filters.Expressions.QueryableFilterProviderExtension.QueryableFilterProviderExtension(System.Action<HotChocolate.Data.Filters.IFilterProviderDescriptor<HotChocolate.Data.Filters.Expressions.QueryableFilterContext!>!>! configure) -> void
HotChocolate.Data.Filters.Expressions.QueryableFilterVisitorContextExtensions
HotChocolate.Data.Filters.Expressions.QueryableListAllOperationHandler
HotChocolate.Data.Filters.Expressions.QueryableListAllOperationHandler.QueryableListAllOperationHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableListAnyOperationHandler
HotChocolate.Data.Filters.Expressions.QueryableListAnyOperationHandler.QueryableListAnyOperationHandler(HotChocolate.Utilities.ITypeConverter! typeConverter) -> void
HotChocolate.Data.Filters.Expressions.QueryableListAnyOperationHandler.TypeConverter.get -> HotChocolate.Utilities.ITypeConverter!
HotChocolate.Data.Filters.Expressions.QueryableListNoneOperationHandler
HotChocolate.Data.Filters.Expressions.QueryableListNoneOperationHandler.QueryableListNoneOperationHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableListOperationHandlerBase
HotChocolate.Data.Filters.Expressions.QueryableListOperationHandlerBase.QueryableListOperationHandlerBase() -> void
HotChocolate.Data.Filters.Expressions.QueryableListSomeOperationHandler
HotChocolate.Data.Filters.Expressions.QueryableListSomeOperationHandler.QueryableListSomeOperationHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableOperationHandlerBase
HotChocolate.Data.Filters.Expressions.QueryableOperationHandlerBase.CanBeNull.get -> bool
HotChocolate.Data.Filters.Expressions.QueryableOperationHandlerBase.CanBeNull.set -> void
HotChocolate.Data.Filters.Expressions.QueryableOperationHandlerBase.QueryableOperationHandlerBase() -> void
HotChocolate.Data.Filters.Expressions.QueryableScope
HotChocolate.Data.Filters.Expressions.QueryableScope.InMemory.get -> bool
HotChocolate.Data.Filters.Expressions.QueryableScope.Parameter.get -> System.Linq.Expressions.ParameterExpression!
HotChocolate.Data.Filters.Expressions.QueryableScope.QueryableScope(HotChocolate.Internal.IExtendedType! type, string! parameterName, bool inMemory) -> void
HotChocolate.Data.Filters.Expressions.QueryableStringContainsHandler
HotChocolate.Data.Filters.Expressions.QueryableStringContainsHandler.QueryableStringContainsHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringEndsWithHandler
HotChocolate.Data.Filters.Expressions.QueryableStringEndsWithHandler.QueryableStringEndsWithHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableStringEqualsHandler.QueryableStringEqualsHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringInHandler
HotChocolate.Data.Filters.Expressions.QueryableStringInHandler.QueryableStringInHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringNotContainsHandler
HotChocolate.Data.Filters.Expressions.QueryableStringNotContainsHandler.QueryableStringNotContainsHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringNotEndsWithHandler
HotChocolate.Data.Filters.Expressions.QueryableStringNotEndsWithHandler.QueryableStringNotEndsWithHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringNotEqualsHandler
HotChocolate.Data.Filters.Expressions.QueryableStringNotEqualsHandler.QueryableStringNotEqualsHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringNotInHandler
HotChocolate.Data.Filters.Expressions.QueryableStringNotInHandler.QueryableStringNotInHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringNotStartsWithHandler
HotChocolate.Data.Filters.Expressions.QueryableStringNotStartsWithHandler.QueryableStringNotStartsWithHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringOperationHandler
HotChocolate.Data.Filters.Expressions.QueryableStringOperationHandler.QueryableStringOperationHandler() -> void
HotChocolate.Data.Filters.Expressions.QueryableStringStartsWithHandler
HotChocolate.Data.Filters.Expressions.QueryableStringStartsWithHandler.QueryableStringStartsWithHandler() -> void
HotChocolate.Data.Filters.Expressions.VisitFilterArgument
HotChocolate.Data.Filters.FilterCombinator
HotChocolate.Data.Filters.FilterCombinator.And = 0 -> HotChocolate.Data.Filters.FilterCombinator
HotChocolate.Data.Filters.FilterCombinator.Or = 1 -> HotChocolate.Data.Filters.FilterCombinator
HotChocolate.Data.Filters.FilterConvention
HotChocolate.Data.Filters.FilterConvention.ApplyConfigurations(HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor) -> void
HotChocolate.Data.Filters.FilterConvention.CreateExecutor<TEntityType>() -> HotChocolate.Resolvers.FieldMiddleware!
HotChocolate.Data.Filters.FilterConvention.FilterConvention() -> void
HotChocolate.Data.Filters.FilterConvention.FilterConvention(System.Action<HotChocolate.Data.Filters.IFilterConventionDescriptor!>! configure) -> void
HotChocolate.Data.Filters.FilterConvention.GetArgumentName() -> HotChocolate.NameString
HotChocolate.Data.Filters.FilterConvention.GetOperationDescription(int operationId) -> string?
HotChocolate.Data.Filters.FilterConvention.GetOperationName(int operation) -> HotChocolate.NameString
HotChocolate.Data.Filters.FilterConvention.TryGetHandler(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition, out HotChocolate.Data.Filters.IFilterFieldHandler? handler) -> bool
HotChocolate.Data.Filters.FilterConventionDefinition
HotChocolate.Data.Filters.FilterConventionDefinition.ArgumentName.get -> string!
HotChocolate.Data.Filters.FilterConventionDefinition.ArgumentName.set -> void
HotChocolate.Data.Filters.FilterConventionDefinition.Bindings.get -> System.Collections.Generic.IDictionary<System.Type!, System.Type!>!
HotChocolate.Data.Filters.FilterConventionDefinition.Configurations.get -> System.Collections.Generic.IDictionary<HotChocolate.Types.Descriptors.ITypeReference!, System.Collections.Generic.List<HotChocolate.Data.Filters.ConfigureFilterInputType!>!>!
HotChocolate.Data.Filters.FilterConventionDefinition.FilterConventionDefinition() -> void
HotChocolate.Data.Filters.FilterConventionDefinition.Operations.get -> System.Collections.Generic.List<HotChocolate.Data.Filters.FilterOperationConventionDefinition!>!
HotChocolate.Data.Filters.FilterConventionDefinition.Provider.get -> System.Type?
HotChocolate.Data.Filters.FilterConventionDefinition.Provider.set -> void
HotChocolate.Data.Filters.FilterConventionDefinition.ProviderExtensions.get -> System.Collections.Generic.List<HotChocolate.Data.Filters.IFilterProviderExtension!>!
HotChocolate.Data.Filters.FilterConventionDefinition.ProviderExtensionsTypes.get -> System.Collections.Generic.List<System.Type!>!
HotChocolate.Data.Filters.FilterConventionDefinition.ProviderInstance.get -> HotChocolate.Data.Filters.IFilterProvider?
HotChocolate.Data.Filters.FilterConventionDefinition.ProviderInstance.set -> void
HotChocolate.Data.Filters.FilterConventionDefinition.Scope.get -> string?
HotChocolate.Data.Filters.FilterConventionDefinition.Scope.set -> void
HotChocolate.Data.Filters.FilterConventionDescriptor
HotChocolate.Data.Filters.FilterConventionDescriptor.AddProviderExtension<TExtension>() -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.AddProviderExtension<TExtension>(TExtension! provider) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.ArgumentName(HotChocolate.NameString argumentName) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.BindRuntimeType(System.Type! runtimeType, System.Type! filterType) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.BindRuntimeType<TRuntimeType, TFilterType>() -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.Configure(HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Data.Filters.ConfigureFilterInputType! configure) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.Configure<TFilterType, TRuntimeType>(HotChocolate.Data.Filters.ConfigureFilterInputType<TRuntimeType>! configure) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.Configure<TFilterType>(HotChocolate.Data.Filters.ConfigureFilterInputType! configure) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.Context.get -> HotChocolate.Types.Descriptors.IDescriptorContext!
HotChocolate.Data.Filters.FilterConventionDescriptor.CreateDefinition() -> HotChocolate.Data.Filters.FilterConventionDefinition!
HotChocolate.Data.Filters.FilterConventionDescriptor.Definition.get -> HotChocolate.Data.Filters.FilterConventionDefinition!
HotChocolate.Data.Filters.FilterConventionDescriptor.FilterConventionDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Filters.FilterConventionDescriptor.Operation(int operationId) -> HotChocolate.Data.Filters.IFilterOperationConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.Provider(System.Type! provider) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.Provider<TProvider>() -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionDescriptor.Provider<TProvider>(TProvider! provider) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.FilterConventionExtension
HotChocolate.Data.Filters.FilterConventionExtension.FilterConventionExtension() -> void
HotChocolate.Data.Filters.FilterConventionExtension.FilterConventionExtension(System.Action<HotChocolate.Data.Filters.IFilterConventionDescriptor!>! configure) -> void
HotChocolate.Data.Filters.FilterConventionExtension.Initialize(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
HotChocolate.Data.Filters.FilterField
HotChocolate.Data.Filters.FilterField.DeclaringType.get -> HotChocolate.Data.Filters.FilterInputType!
HotChocolate.Data.Filters.FilterField.Handler.get -> HotChocolate.Data.Filters.IFilterFieldHandler!
HotChocolate.Data.Filters.FilterField.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Data.Filters.FilterField.RuntimeType.get -> HotChocolate.Internal.IExtendedType?
HotChocolate.Data.Filters.FilterFieldDefinition
HotChocolate.Data.Filters.FilterFieldDefinition.FilterFieldDefinition() -> void
HotChocolate.Data.Filters.FilterFieldDefinition.Handler.get -> HotChocolate.Data.Filters.IFilterFieldHandler?
HotChocolate.Data.Filters.FilterFieldDefinition.Handler.set -> void
HotChocolate.Data.Filters.FilterFieldDefinition.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Data.Filters.FilterFieldDefinition.Member.set -> void
HotChocolate.Data.Filters.FilterFieldDefinition.Scope.get -> string?
HotChocolate.Data.Filters.FilterFieldDefinition.Scope.set -> void
HotChocolate.Data.Filters.FilterFieldDescriptor
HotChocolate.Data.Filters.FilterFieldDescriptor.DefaultValue(HotChocolate.Language.IValueNode! value) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.DefaultValue(object! value) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.Definition.get -> HotChocolate.Data.Filters.FilterFieldDefinition!
HotChocolate.Data.Filters.FilterFieldDescriptor.Definition.set -> void
HotChocolate.Data.Filters.FilterFieldDescriptor.Description(string! value) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.Directive<TDirective>() -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.FilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, HotChocolate.NameString fieldName) -> void
HotChocolate.Data.Filters.FilterFieldDescriptor.FilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, System.Reflection.MemberInfo! member) -> void
HotChocolate.Data.Filters.FilterFieldDescriptor.FilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Filters.FilterFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode! inputValueDefinition) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.Type(HotChocolate.Language.ITypeNode! typeNode) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.Type(System.Type! type) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.Type<TInputType>() -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptor.Type<TInputType>(TInputType! inputType) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterFieldDescriptorAttribute
HotChocolate.Data.Filters.FilterFieldDescriptorAttribute.FilterFieldDescriptorAttribute() -> void
HotChocolate.Data.Filters.FilterFieldHandler<TContext, T>
HotChocolate.Data.Filters.FilterFieldHandler<TContext, T>.FilterFieldHandler() -> void
HotChocolate.Data.Filters.FilterInputType
HotChocolate.Data.Filters.FilterInputType.EntityType.get -> HotChocolate.Internal.IExtendedType!
HotChocolate.Data.Filters.FilterInputType.FilterInputType() -> void
HotChocolate.Data.Filters.FilterInputType.FilterInputType(System.Action<HotChocolate.Data.Filters.IFilterInputTypeDescriptor!>! configure) -> void
HotChocolate.Data.Filters.FilterInputType<T>
HotChocolate.Data.Filters.FilterInputType<T>.FilterInputType() -> void
HotChocolate.Data.Filters.FilterInputType<T>.FilterInputType(System.Action<HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!>! configure) -> void
HotChocolate.Data.Filters.FilterInputTypeDefinition
HotChocolate.Data.Filters.FilterInputTypeDefinition.EntityType.get -> System.Type?
HotChocolate.Data.Filters.FilterInputTypeDefinition.EntityType.set -> void
HotChocolate.Data.Filters.FilterInputTypeDefinition.FilterInputTypeDefinition() -> void
HotChocolate.Data.Filters.FilterInputTypeDefinition.Scope.get -> string?
HotChocolate.Data.Filters.FilterInputTypeDefinition.Scope.set -> void
HotChocolate.Data.Filters.FilterInputTypeDefinition.UseAnd.get -> bool
HotChocolate.Data.Filters.FilterInputTypeDefinition.UseAnd.set -> void
HotChocolate.Data.Filters.FilterInputTypeDefinition.UseOr.get -> bool
HotChocolate.Data.Filters.FilterInputTypeDefinition.UseOr.set -> void
HotChocolate.Data.Filters.FilterInputTypeDescriptor
HotChocolate.Data.Filters.FilterInputTypeDescriptor.AllowAnd(bool allow = true) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.AllowOr(bool allow = true) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.BindFields(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.BindFieldsExplicitly() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.BindFieldsImplicitly() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Convention.get -> HotChocolate.Data.Filters.IFilterConvention!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Description(string? value) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Directive<TDirective>() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Directive<TDirective>(TDirective! directive) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Fields.get -> HotChocolate.Types.Descriptors.Definitions.BindableList<HotChocolate.Data.Filters.FilterFieldDescriptor!>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.FilterInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Filters.FilterInputTypeDefinition! definition, string? scope) -> void
HotChocolate.Data.Filters.FilterInputTypeDescriptor.FilterInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Filters.FilterInputTypeDescriptor.FilterInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType, string? scope) -> void
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Ignore(HotChocolate.NameString name) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Ignore(int operationId) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Operation(int operationId) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor.Operations.get -> HotChocolate.Types.Descriptors.Definitions.BindableList<HotChocolate.Data.Filters.FilterOperationFieldDescriptor!>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.AllowAnd(bool allow = true) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.AllowOr(bool allow = true) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.Description(string? value) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.Directive<TDirective>(TDirective! directive) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.Field<TField>(System.Linq.Expressions.Expression<System.Func<T, TField>!>! property) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.FilterInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Filters.FilterInputTypeDefinition! definition, string? scope) -> void
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.FilterInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.FilterInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType, string? scope) -> void
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.Ignore(HotChocolate.NameString name) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.Ignore(int operationId) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.Ignore(System.Linq.Expressions.Expression<System.Func<T, object?>!>! property) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.FilterInputTypeDescriptorAttribute
HotChocolate.Data.Filters.FilterInputTypeDescriptorAttribute.FilterInputTypeDescriptorAttribute() -> void
HotChocolate.Data.Filters.FilterOperation
HotChocolate.Data.Filters.FilterOperation.Description.get -> string?
HotChocolate.Data.Filters.FilterOperation.FilterOperation(int id, HotChocolate.NameString name, string? description) -> void
HotChocolate.Data.Filters.FilterOperation.Id.get -> int
HotChocolate.Data.Filters.FilterOperation.Name.get -> HotChocolate.NameString
HotChocolate.Data.Filters.FilterOperationCombinator
HotChocolate.Data.Filters.FilterOperationCombinator.FilterOperationCombinator() -> void
HotChocolate.Data.Filters.FilterOperationCombinator<TContext, T>
HotChocolate.Data.Filters.FilterOperationCombinator<TContext, T>.FilterOperationCombinator() -> void
HotChocolate.Data.Filters.FilterOperationConventionDefinition
HotChocolate.Data.Filters.FilterOperationConventionDefinition.Description.get -> string?
HotChocolate.Data.Filters.FilterOperationConventionDefinition.Description.set -> void
HotChocolate.Data.Filters.FilterOperationConventionDefinition.FilterOperationConventionDefinition() -> void
HotChocolate.Data.Filters.FilterOperationConventionDefinition.Id.get -> int
HotChocolate.Data.Filters.FilterOperationConventionDefinition.Id.set -> void
HotChocolate.Data.Filters.FilterOperationConventionDefinition.Name.get -> HotChocolate.NameString
HotChocolate.Data.Filters.FilterOperationConventionDefinition.Name.set -> void
HotChocolate.Data.Filters.FilterOperationConventionDescriptor
HotChocolate.Data.Filters.FilterOperationConventionDescriptor.CreateDefinition() -> HotChocolate.Data.Filters.FilterOperationConventionDefinition!
HotChocolate.Data.Filters.FilterOperationConventionDescriptor.Definition.get -> HotChocolate.Data.Filters.FilterOperationConventionDefinition!
HotChocolate.Data.Filters.FilterOperationConventionDescriptor.Description(string! description) -> HotChocolate.Data.Filters.IFilterOperationConventionDescriptor!
HotChocolate.Data.Filters.FilterOperationConventionDescriptor.FilterOperationConventionDescriptor(int operationId) -> void
HotChocolate.Data.Filters.FilterOperationConventionDescriptor.Name(string! name) -> HotChocolate.Data.Filters.IFilterOperationConventionDescriptor!
HotChocolate.Data.Filters.FilterOperationField
HotChocolate.Data.Filters.FilterOperationField.Id.get -> int
HotChocolate.Data.Filters.FilterOperationFieldDefinition
HotChocolate.Data.Filters.FilterOperationFieldDefinition.FilterOperationFieldDefinition() -> void
HotChocolate.Data.Filters.FilterOperationFieldDefinition.Id.get -> int
HotChocolate.Data.Filters.FilterOperationFieldDefinition.Id.set -> void
HotChocolate.Data.Filters.FilterOperationFieldDescriptor
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.CreateFieldDefinition() -> HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.DefaultValue(HotChocolate.Language.IValueNode! value) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.DefaultValue(object! value) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Definition.get -> HotChocolate.Data.Filters.FilterOperationFieldDefinition!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Description(string! value) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Directive<TDirective>() -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.FilterOperationFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, int operationId, string? scope) -> void
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Operation(int operation) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode! inputValueDefinition) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Type(HotChocolate.Language.ITypeNode! typeNode) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Type(System.Type! type) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Type<TInputType>() -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationFieldDescriptor.Type<TInputType>(TInputType! inputType) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.FilterOperationHandler<TContext, T>
HotChocolate.Data.Filters.FilterOperationHandler<TContext, T>.FilterOperationHandler() -> void
HotChocolate.Data.Filters.FilterProvider<TContext>
HotChocolate.Data.Filters.FilterProvider<TContext>.FieldHandlers.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Data.Filters.IFilterFieldHandler!>!
HotChocolate.Data.Filters.FilterProvider<TContext>.FilterProvider() -> void
HotChocolate.Data.Filters.FilterProvider<TContext>.FilterProvider(System.Action<HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>!>! configure) -> void
HotChocolate.Data.Filters.FilterProviderDefinition
HotChocolate.Data.Filters.FilterProviderDefinition.FilterProviderDefinition() -> void
HotChocolate.Data.Filters.FilterProviderDefinition.Handlers.get -> System.Collections.Generic.IList<(System.Type! Handler, HotChocolate.Data.Filters.IFilterFieldHandler? HandlerInstance)>!
HotChocolate.Data.Filters.FilterProviderDescriptor<TContext>
HotChocolate.Data.Filters.FilterProviderDescriptor<TContext>.AddFieldHandler<TFieldHandler>() -> HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>!
HotChocolate.Data.Filters.FilterProviderDescriptor<TContext>.AddFieldHandler<TFieldHandler>(TFieldHandler fieldHandler) -> HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>!
HotChocolate.Data.Filters.FilterProviderDescriptor<TContext>.CreateDefinition() -> HotChocolate.Data.Filters.FilterProviderDefinition!
HotChocolate.Data.Filters.FilterProviderDescriptor<TContext>.Definition.get -> HotChocolate.Data.Filters.FilterProviderDefinition!
HotChocolate.Data.Filters.FilterProviderDescriptor<TContext>.FilterProviderDescriptor() -> void
HotChocolate.Data.Filters.FilterProviderExtensions<TContext>
HotChocolate.Data.Filters.FilterProviderExtensions<TContext>.FilterProviderExtensions() -> void
HotChocolate.Data.Filters.FilterProviderExtensions<TContext>.FilterProviderExtensions(System.Action<HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>!>! configure) -> void
HotChocolate.Data.Filters.FilterScope<T>
HotChocolate.Data.Filters.FilterScope<T>.FilterScope() -> void
HotChocolate.Data.Filters.FilterScope<T>.Instance.get -> System.Collections.Generic.Stack<T>!
HotChocolate.Data.Filters.FilterScope<T>.Level.get -> System.Collections.Generic.Stack<System.Collections.Generic.Queue<T>!>!
HotChocolate.Data.Filters.FilterTypeInterceptor
HotChocolate.Data.Filters.FilterTypeInterceptor.FilterTypeInterceptor() -> void
HotChocolate.Data.Filters.FilterTypeNameExtensions
HotChocolate.Data.Filters.FilterVisitor<TContext, T>
HotChocolate.Data.Filters.FilterVisitor<TContext, T>.FilterVisitor(HotChocolate.Data.Filters.FilterOperationCombinator<TContext!, T>! combinator) -> void
HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>
HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.FilterVisitorBase() -> void
HotChocolate.Data.Filters.FilterVisitorBase<TContext>
HotChocolate.Data.Filters.FilterVisitorBase<TContext>.FilterVisitorBase() -> void
HotChocolate.Data.Filters.FilterVisitorContext<T>
HotChocolate.Data.Filters.FilterVisitorContext<T>.Errors.get -> System.Collections.Generic.IList<HotChocolate.IError!>!
HotChocolate.Data.Filters.FilterVisitorContext<T>.FilterVisitorContext(HotChocolate.Data.Filters.IFilterInputType! initialType, HotChocolate.Data.Filters.FilterScope<T>? filterScope = null) -> void
HotChocolate.Data.Filters.FilterVisitorContext<T>.Operations.get -> System.Collections.Generic.Stack<HotChocolate.Types.IInputField!>!
HotChocolate.Data.Filters.FilterVisitorContext<T>.Scopes.get -> System.Collections.Generic.Stack<HotChocolate.Data.Filters.FilterScope<T>!>!
HotChocolate.Data.Filters.FilterVisitorContext<T>.Types.get -> System.Collections.Generic.Stack<HotChocolate.Types.IType!>!
HotChocolate.Data.Filters.FilterVisitorContextExtensions
HotChocolate.Data.Filters.IAndField
HotChocolate.Data.Filters.IAndField.DeclaringType.get -> HotChocolate.Data.Filters.IFilterInputType!
HotChocolate.Data.Filters.IComparableOperationFilterInputType
HotChocolate.Data.Filters.IEnumOperationFilterInputType
HotChocolate.Data.Filters.IFilterConvention
HotChocolate.Data.Filters.IFilterConvention.ApplyConfigurations(HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor) -> void
HotChocolate.Data.Filters.IFilterConvention.ConfigureField(HotChocolate.Types.IObjectFieldDescriptor! fieldDescriptor) -> void
HotChocolate.Data.Filters.IFilterConvention.CreateExecutor<TEntityType>() -> HotChocolate.Resolvers.FieldMiddleware!
HotChocolate.Data.Filters.IFilterConvention.GetArgumentName() -> HotChocolate.NameString
HotChocolate.Data.Filters.IFilterConvention.GetFieldDescription(System.Reflection.MemberInfo! member) -> string?
HotChocolate.Data.Filters.IFilterConvention.GetFieldName(System.Reflection.MemberInfo! member) -> HotChocolate.NameString
HotChocolate.Data.Filters.IFilterConvention.GetFieldType(System.Reflection.MemberInfo! member) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Data.Filters.IFilterConvention.GetOperationDescription(int operationId) -> string?
HotChocolate.Data.Filters.IFilterConvention.GetOperationName(int operationId) -> HotChocolate.NameString
HotChocolate.Data.Filters.IFilterConvention.GetTypeDescription(System.Type! runtimeType) -> string?
HotChocolate.Data.Filters.IFilterConvention.GetTypeName(System.Type! runtimeType) -> HotChocolate.NameString
HotChocolate.Data.Filters.IFilterConvention.TryGetHandler(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition, out HotChocolate.Data.Filters.IFilterFieldHandler? handler) -> bool
HotChocolate.Data.Filters.IFilterConventionDescriptor
HotChocolate.Data.Filters.IFilterConventionDescriptor.AddProviderExtension<TExtension>() -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.AddProviderExtension<TExtension>(TExtension! provider) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.ArgumentName(HotChocolate.NameString argumentName) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.BindRuntimeType(System.Type! runtimeType, System.Type! filterType) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.BindRuntimeType<TRuntimeType, TFilterType>() -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.Configure<TFilterType, TRuntimeType>(HotChocolate.Data.Filters.ConfigureFilterInputType<TRuntimeType>! configure) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.Configure<TFilterType>(HotChocolate.Data.Filters.ConfigureFilterInputType! configure) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.Operation(int operationId) -> HotChocolate.Data.Filters.IFilterOperationConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.Provider(System.Type! provider) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.Provider<TProvider>() -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterConventionDescriptor.Provider<TProvider>(TProvider! provider) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
HotChocolate.Data.Filters.IFilterField
HotChocolate.Data.Filters.IFilterField.DeclaringType.get -> HotChocolate.Data.Filters.IFilterInputType!
HotChocolate.Data.Filters.IFilterField.Handler.get -> HotChocolate.Data.Filters.IFilterFieldHandler!
HotChocolate.Data.Filters.IFilterField.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Data.Filters.IFilterField.RuntimeType.get -> HotChocolate.Internal.IExtendedType?
HotChocolate.Data.Filters.IFilterFieldDefinition
HotChocolate.Data.Filters.IFilterFieldDefinition.Handler.get -> HotChocolate.Data.Filters.IFilterFieldHandler?
HotChocolate.Data.Filters.IFilterFieldDefinition.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Data.Filters.IFilterFieldDefinition.Scope.get -> string?
HotChocolate.Data.Filters.IFilterFieldDescriptor
HotChocolate.Data.Filters.IFilterFieldDescriptor.DefaultValue(HotChocolate.Language.IValueNode! value) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.DefaultValue(object! value) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Description(string! value) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Directive<T>() -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode! inputValueDefinitionNode) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Type(HotChocolate.Language.ITypeNode! typeNode) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Type(System.Type! type) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Type<TInputType>() -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldDescriptor.Type<TInputType>(TInputType! inputType) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterFieldHandler
HotChocolate.Data.Filters.IFilterFieldHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
HotChocolate.Data.Filters.IFilterFieldHandler<TContext, T>
HotChocolate.Data.Filters.IFilterFieldHandler<TContext>
HotChocolate.Data.Filters.IFilterFieldHandler<TContext>.TryHandleEnter(TContext context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
HotChocolate.Data.Filters.IFilterFieldHandler<TContext>.TryHandleLeave(TContext context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
HotChocolate.Data.Filters.IFilterInputType
HotChocolate.Data.Filters.IFilterInputType.EntityType.get -> HotChocolate.Internal.IExtendedType!
HotChocolate.Data.Filters.IFilterInputTypeDefinition
HotChocolate.Data.Filters.IFilterInputTypeDefinition.EntityType.get -> System.Type?
HotChocolate.Data.Filters.IFilterInputTypeDefinition.Scope.get -> string?
HotChocolate.Data.Filters.IFilterInputTypeDefinition.UseAnd.get -> bool
HotChocolate.Data.Filters.IFilterInputTypeDefinition.UseOr.get -> bool
HotChocolate.Data.Filters.IFilterInputTypeDescriptor
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.AllowAnd(bool allow = true) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.AllowOr(bool allow = true) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.Description(string? value) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.Directive<TDirective>() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.Directive<TDirective>(TDirective! directive) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.Ignore(HotChocolate.NameString name) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.Ignore(int operationId) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor.Operation(int operationId) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.AllowAnd(bool allow = true) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.AllowOr(bool allow = true) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.Description(string? value) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.Directive<TDirective>(TDirective! directive) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.Field<TField>(System.Linq.Expressions.Expression<System.Func<T, TField>!>! property) -> HotChocolate.Data.Filters.IFilterFieldDescriptor!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.Ignore(HotChocolate.NameString name) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.Ignore(int operationId) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.Ignore(System.Linq.Expressions.Expression<System.Func<T, object?>!>! property) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeNameDependencyDescriptor<T>
HotChocolate.Data.Filters.IFilterInputTypeNameDependencyDescriptor<T>.DependsOn(System.Type! schemaType) -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterInputTypeNameDependencyDescriptor<T>.DependsOn<TDependency>() -> HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Data.Filters.IFilterOperationConventionDescriptor
HotChocolate.Data.Filters.IFilterOperationConventionDescriptor.Description(string! description) -> HotChocolate.Data.Filters.IFilterOperationConventionDescriptor!
HotChocolate.Data.Filters.IFilterOperationConventionDescriptor.Name(string! name) -> HotChocolate.Data.Filters.IFilterOperationConventionDescriptor!
HotChocolate.Data.Filters.IFilterOperationField
HotChocolate.Data.Filters.IFilterOperationField.Id.get -> int
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.DefaultValue(HotChocolate.Language.IValueNode! value) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.DefaultValue(object! value) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Description(string! value) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Directive<T>() -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Operation(int operation) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode! inputValueDefinitionNode) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Type(HotChocolate.Language.ITypeNode! typeNode) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Type(System.Type! type) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Type<TInputType>() -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterOperationFieldDescriptor.Type<TInputType>(TInputType! inputType) -> HotChocolate.Data.Filters.IFilterOperationFieldDescriptor!
HotChocolate.Data.Filters.IFilterProvider
HotChocolate.Data.Filters.IFilterProvider.ConfigureField(HotChocolate.NameString argumentName, HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> void
HotChocolate.Data.Filters.IFilterProvider.CreateExecutor<TEntityType>(HotChocolate.NameString argumentName) -> HotChocolate.Resolvers.FieldMiddleware!
HotChocolate.Data.Filters.IFilterProvider.FieldHandlers.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Data.Filters.IFilterFieldHandler!>!
HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>
HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>.AddFieldHandler<TFieldHandler>() -> HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>!
HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>.AddFieldHandler<TFieldHandler>(TFieldHandler fieldHandler) -> HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>!
HotChocolate.Data.Filters.IFilterProviderExtension
HotChocolate.Data.Filters.IFilterVisitorContext
HotChocolate.Data.Filters.IFilterVisitorContext.Errors.get -> System.Collections.Generic.IList<HotChocolate.IError!>!
HotChocolate.Data.Filters.IFilterVisitorContext.Operations.get -> System.Collections.Generic.Stack<HotChocolate.Types.IInputField!>!
HotChocolate.Data.Filters.IFilterVisitorContext.Types.get -> System.Collections.Generic.Stack<HotChocolate.Types.IType!>!
HotChocolate.Data.Filters.IFilterVisitorContext<T>
HotChocolate.Data.Filters.IFilterVisitorContext<T>.CreateScope() -> HotChocolate.Data.Filters.FilterScope<T>!
HotChocolate.Data.Filters.IFilterVisitorContext<T>.Scopes.get -> System.Collections.Generic.Stack<HotChocolate.Data.Filters.FilterScope<T>!>!
HotChocolate.Data.Filters.IListFilterInputType
HotChocolate.Data.Filters.IOrField
HotChocolate.Data.Filters.IOrField.DeclaringType.get -> HotChocolate.Data.Filters.IFilterInputType!
HotChocolate.Data.Filters.ListFilterInputType<T>
HotChocolate.Data.Filters.ListFilterInputType<T>.ListFilterInputType() -> void
HotChocolate.Data.Filters.OrField
HotChocolate.Data.Filters.OrField.DeclaringType.get -> HotChocolate.Data.Filters.FilterInputType!
HotChocolate.Data.Filters.StringOperationFilterInputType
HotChocolate.Data.Filters.StringOperationFilterInputType.StringOperationFilterInputType() -> void
HotChocolate.Data.IsProjectedAttribute
HotChocolate.Data.IsProjectedAttribute.IsProjectedAttribute() -> void
HotChocolate.Data.IsProjectedAttribute.IsProjectedAttribute(bool isProjected) -> void
HotChocolate.Data.ProjectionConventionDescriptorExtensions
HotChocolate.Data.ProjectionDescriptorContextExtensions
HotChocolate.Data.ProjectionProviderDescriptorExtensions
HotChocolate.Data.Projections.BreakSelectionVisitorAction
HotChocolate.Data.Projections.BreakSelectionVisitorAction.BreakSelectionVisitorAction() -> void
HotChocolate.Data.Projections.BreakSelectionVisitorAction.Kind.get -> HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.ContinueSelectionVisitorAction
HotChocolate.Data.Projections.ContinueSelectionVisitorAction.ContinueSelectionVisitorAction() -> void
HotChocolate.Data.Projections.ContinueSelectionVisitorAction.Kind.get -> HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>.ProjectionFieldHandler() -> void
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>.OnAfterEnter(T context, HotChocolate.Execution.Processing.ISelection! selection, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> T
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>.OnAfterLeave(T context, HotChocolate.Execution.Processing.ISelection! selection, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> T
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>.OnBeforeEnter(T context, HotChocolate.Execution.Processing.ISelection! selection) -> T
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>.OnBeforeLeave(T context, HotChocolate.Execution.Processing.ISelection! selection) -> T
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>.ProjectionFieldWrapper(HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>! handler, HotChocolate.Data.Projections.IProjectionFieldInterceptor<T>! interceptor) -> void
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>.TryHandleEnter(T context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>.TryHandleLeave(T context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper<T>.Wrap(HotChocolate.Data.Projections.IProjectionFieldInterceptor! interceptor) -> HotChocolate.Data.Projections.IProjectionFieldHandler!
HotChocolate.Data.Projections.Expressions.Handlers.ProjectionVisitorContextExtensions
HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionFieldHandler
HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionFieldHandler.QueryableProjectionFieldHandler() -> void
HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionHandlerBase
HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionHandlerBase.QueryableProjectionHandlerBase() -> void
HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionListHandler
HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionListHandler.QueryableProjectionListHandler() -> void
HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionScalarHandler
HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionScalarHandler.QueryableProjectionScalarHandler() -> void
HotChocolate.Data.Projections.Expressions.QueryableProjectionContext
HotChocolate.Data.Projections.Expressions.QueryableProjectionContext.QueryableProjectionContext(HotChocolate.Resolvers.IResolverContext! context, HotChocolate.Types.IOutputType! initialType, System.Type! runtimeType) -> void
HotChocolate.Data.Projections.Expressions.QueryableProjectionContextExtensions
HotChocolate.Data.Projections.Expressions.QueryableProjectionProvider
HotChocolate.Data.Projections.Expressions.QueryableProjectionProvider.QueryableProjectionProvider() -> void
HotChocolate.Data.Projections.Expressions.QueryableProjectionProvider.QueryableProjectionProvider(System.Action<HotChocolate.Data.Projections.IProjectionProviderDescriptor!>! configure) -> void
HotChocolate.Data.Projections.Expressions.QueryableProjectionScope
HotChocolate.Data.Projections.Expressions.QueryableProjectionScope.Level.get -> System.Collections.Generic.Stack<System.Collections.Generic.Queue<System.Linq.Expressions.MemberAssignment!>!>!
HotChocolate.Data.Projections.Expressions.QueryableProjectionScope.Parameter.get -> System.Linq.Expressions.ParameterExpression!
HotChocolate.Data.Projections.Expressions.QueryableProjectionScope.QueryableProjectionScope(System.Type! type, string! parameterName) -> void
HotChocolate.Data.Projections.Expressions.QueryableProjectionScope.RuntimeType.get -> System.Type!
HotChocolate.Data.Projections.Expressions.QueryableProjectionScopeExtensions
HotChocolate.Data.Projections.Expressions.QueryableProjectionVisitor
HotChocolate.Data.Projections.Expressions.QueryableProjectionVisitor.QueryableProjectionVisitor() -> void
HotChocolate.Data.Projections.Expressions.TypeExtensions
HotChocolate.Data.Projections.FirstOrDefaultMiddleware<T>
HotChocolate.Data.Projections.FirstOrDefaultMiddleware<T>.FirstOrDefaultMiddleware(HotChocolate.Resolvers.FieldDelegate! next) -> void
HotChocolate.Data.Projections.FirstOrDefaultMiddleware<T>.InvokeAsync(HotChocolate.Resolvers.IMiddlewareContext! context) -> System.Threading.Tasks.Task!
HotChocolate.Data.Projections.Handlers.IsProjectedProjectionOptimizer
HotChocolate.Data.Projections.Handlers.IsProjectedProjectionOptimizer.CanHandle(HotChocolate.Execution.Processing.ISelection! field) -> bool
HotChocolate.Data.Projections.Handlers.IsProjectedProjectionOptimizer.IsProjectedProjectionOptimizer() -> void
HotChocolate.Data.Projections.Handlers.IsProjectedProjectionOptimizer.RewriteSelection(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Execution.Processing.Selection! selection) -> HotChocolate.Execution.Processing.Selection!
HotChocolate.Data.Projections.Handlers.QueryableFilterInterceptor
HotChocolate.Data.Projections.Handlers.QueryableFilterInterceptor.AfterProjection(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection) -> void
HotChocolate.Data.Projections.Handlers.QueryableFilterInterceptor.BeforeProjection(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection) -> void
HotChocolate.Data.Projections.Handlers.QueryableFilterInterceptor.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
HotChocolate.Data.Projections.Handlers.QueryableFilterInterceptor.QueryableFilterInterceptor() -> void
HotChocolate.Data.Projections.Handlers.QueryableFilterProjectionOptimizer
HotChocolate.Data.Projections.Handlers.QueryableFilterProjectionOptimizer.CanHandle(HotChocolate.Execution.Processing.ISelection! field) -> bool
HotChocolate.Data.Projections.Handlers.QueryableFilterProjectionOptimizer.QueryableFilterProjectionOptimizer() -> void
HotChocolate.Data.Projections.Handlers.QueryableFilterProjectionOptimizer.RewriteSelection(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Execution.Processing.Selection! selection) -> HotChocolate.Execution.Processing.Selection!
HotChocolate.Data.Projections.Handlers.QueryableFirstOrDefaultInterceptor
HotChocolate.Data.Projections.Handlers.QueryableFirstOrDefaultInterceptor.QueryableFirstOrDefaultInterceptor() -> void
HotChocolate.Data.Projections.Handlers.QueryablePagingProjectionOptimizer
HotChocolate.Data.Projections.Handlers.QueryablePagingProjectionOptimizer.CanHandle(HotChocolate.Execution.Processing.ISelection! field) -> bool
HotChocolate.Data.Projections.Handlers.QueryablePagingProjectionOptimizer.QueryablePagingProjectionOptimizer() -> void
HotChocolate.Data.Projections.Handlers.QueryablePagingProjectionOptimizer.RewriteSelection(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Execution.Processing.Selection! selection) -> HotChocolate.Execution.Processing.Selection!
HotChocolate.Data.Projections.Handlers.QueryableSingleOrDefaultInterceptor
HotChocolate.Data.Projections.Handlers.QueryableSingleOrDefaultInterceptor.QueryableSingleOrDefaultInterceptor() -> void
HotChocolate.Data.Projections.Handlers.QueryableSortInterceptor
HotChocolate.Data.Projections.Handlers.QueryableSortInterceptor.AfterProjection(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection) -> void
HotChocolate.Data.Projections.Handlers.QueryableSortInterceptor.BeforeProjection(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection) -> void
HotChocolate.Data.Projections.Handlers.QueryableSortInterceptor.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
HotChocolate.Data.Projections.Handlers.QueryableSortInterceptor.QueryableSortInterceptor() -> void
HotChocolate.Data.Projections.Handlers.QueryableSortProjectionOptimizer
HotChocolate.Data.Projections.Handlers.QueryableSortProjectionOptimizer.CanHandle(HotChocolate.Execution.Processing.ISelection! field) -> bool
HotChocolate.Data.Projections.Handlers.QueryableSortProjectionOptimizer.QueryableSortProjectionOptimizer() -> void
HotChocolate.Data.Projections.Handlers.QueryableSortProjectionOptimizer.RewriteSelection(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Execution.Processing.Selection! selection) -> HotChocolate.Execution.Processing.Selection!
HotChocolate.Data.Projections.Handlers.QueryableTakeHandlerInterceptor
HotChocolate.Data.Projections.Handlers.QueryableTakeHandlerInterceptor.AfterProjection(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection) -> void
HotChocolate.Data.Projections.Handlers.QueryableTakeHandlerInterceptor.BeforeProjection(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection) -> void
HotChocolate.Data.Projections.Handlers.QueryableTakeHandlerInterceptor.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
HotChocolate.Data.Projections.Handlers.QueryableTakeHandlerInterceptor.QueryableTakeHandlerInterceptor(string! contextDataKey, int take) -> void
HotChocolate.Data.Projections.IProjectionConvention
HotChocolate.Data.Projections.IProjectionConvention.CreateExecutor<TEntityType>() -> HotChocolate.Resolvers.FieldMiddleware!
HotChocolate.Data.Projections.IProjectionConvention.CreateOptimizer() -> HotChocolate.Execution.Processing.ISelectionOptimizer!
HotChocolate.Data.Projections.IProjectionConventionDescriptor
HotChocolate.Data.Projections.IProjectionConventionDescriptor.AddProviderExtension<TExtension>() -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.IProjectionConventionDescriptor.AddProviderExtension<TExtension>(TExtension! provider) -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.IProjectionConventionDescriptor.Provider(System.Type! provider) -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.IProjectionConventionDescriptor.Provider<TProvider>() -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.IProjectionConventionDescriptor.Provider<TProvider>(TProvider! provider) -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.IProjectionFieldHandler
HotChocolate.Data.Projections.IProjectionFieldHandler.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
HotChocolate.Data.Projections.IProjectionFieldHandler.Wrap(HotChocolate.Data.Projections.IProjectionFieldInterceptor! interceptor) -> HotChocolate.Data.Projections.IProjectionFieldHandler!
HotChocolate.Data.Projections.IProjectionFieldHandler<TContext>
HotChocolate.Data.Projections.IProjectionFieldHandler<TContext>.OnAfterEnter(TContext context, HotChocolate.Execution.Processing.ISelection! selection, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> TContext
HotChocolate.Data.Projections.IProjectionFieldHandler<TContext>.OnAfterLeave(TContext context, HotChocolate.Execution.Processing.ISelection! selection, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> TContext
HotChocolate.Data.Projections.IProjectionFieldHandler<TContext>.OnBeforeEnter(TContext context, HotChocolate.Execution.Processing.ISelection! selection) -> TContext
HotChocolate.Data.Projections.IProjectionFieldHandler<TContext>.OnBeforeLeave(TContext context, HotChocolate.Execution.Processing.ISelection! selection) -> TContext
HotChocolate.Data.Projections.IProjectionFieldHandler<TContext>.TryHandleEnter(TContext context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
HotChocolate.Data.Projections.IProjectionFieldHandler<TContext>.TryHandleLeave(TContext context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
HotChocolate.Data.Projections.IProjectionFieldInterceptor
HotChocolate.Data.Projections.IProjectionFieldInterceptor.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
HotChocolate.Data.Projections.IProjectionFieldInterceptor<TContext>
HotChocolate.Data.Projections.IProjectionFieldInterceptor<TContext>.AfterProjection(TContext context, HotChocolate.Execution.Processing.ISelection! selection) -> void
HotChocolate.Data.Projections.IProjectionFieldInterceptor<TContext>.BeforeProjection(TContext context, HotChocolate.Execution.Processing.ISelection! selection) -> void
HotChocolate.Data.Projections.IProjectionOptimizer
HotChocolate.Data.Projections.IProjectionOptimizer.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
HotChocolate.Data.Projections.IProjectionOptimizer.RewriteSelection(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Execution.Processing.Selection! selection) -> HotChocolate.Execution.Processing.Selection!
HotChocolate.Data.Projections.IProjectionProvider
HotChocolate.Data.Projections.IProjectionProvider.CreateExecutor<TEntityType>() -> HotChocolate.Resolvers.FieldMiddleware!
HotChocolate.Data.Projections.IProjectionProvider.RewriteSelection(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Execution.Processing.Selection! selection) -> HotChocolate.Execution.Processing.Selection!
HotChocolate.Data.Projections.IProjectionProviderDescriptor
HotChocolate.Data.Projections.IProjectionProviderDescriptor.RegisterFieldHandler<THandler>() -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.IProjectionProviderDescriptor.RegisterFieldHandler<THandler>(THandler handler) -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.IProjectionProviderDescriptor.RegisterFieldInterceptor<THandler>() -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.IProjectionProviderDescriptor.RegisterFieldInterceptor<THandler>(THandler handler) -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.IProjectionProviderDescriptor.RegisterOptimizer<THandler>() -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.IProjectionProviderDescriptor.RegisterOptimizer<THandler>(THandler handler) -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.IProjectionProviderExtension
HotChocolate.Data.Projections.IProjectionSelection
HotChocolate.Data.Projections.IProjectionSelection.Handler.get -> HotChocolate.Data.Projections.IProjectionFieldHandler!
HotChocolate.Data.Projections.IProjectionVisitorContext
HotChocolate.Data.Projections.IProjectionVisitorContext.Errors.get -> System.Collections.Generic.IList<HotChocolate.IError!>!
HotChocolate.Data.Projections.IProjectionVisitorContext<T>
HotChocolate.Data.Projections.IProjectionVisitorContext<T>.Scopes.get -> System.Collections.Generic.Stack<HotChocolate.Data.Projections.ProjectionScope<T>!>!
HotChocolate.Data.Projections.ISelectionVisitorAction
HotChocolate.Data.Projections.ISelectionVisitorAction.Kind.get -> HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.ISelectionVisitorContext
HotChocolate.Data.Projections.ISelectionVisitorContext.Context.get -> HotChocolate.Resolvers.IResolverContext!
HotChocolate.Data.Projections.ISelectionVisitorContext.Selection.get -> System.Collections.Generic.Stack<HotChocolate.Execution.Processing.ISelection!>!
HotChocolate.Data.Projections.ISelectionVisitorContext.SelectionSetNodes.get -> System.Collections.Generic.Stack<HotChocolate.Language.SelectionSetNode?>!
HotChocolate.Data.Projections.ProjectionConvention
HotChocolate.Data.Projections.ProjectionConvention.CreateExecutor<TEntityType>() -> HotChocolate.Resolvers.FieldMiddleware!
HotChocolate.Data.Projections.ProjectionConvention.CreateOptimizer() -> HotChocolate.Execution.Processing.ISelectionOptimizer!
HotChocolate.Data.Projections.ProjectionConvention.ProjectionConvention() -> void
HotChocolate.Data.Projections.ProjectionConvention.ProjectionConvention(System.Action<HotChocolate.Data.Projections.IProjectionConventionDescriptor!>! configure) -> void
HotChocolate.Data.Projections.ProjectionConventionDefinition
HotChocolate.Data.Projections.ProjectionConventionDefinition.ProjectionConventionDefinition() -> void
HotChocolate.Data.Projections.ProjectionConventionDefinition.Provider.get -> System.Type?
HotChocolate.Data.Projections.ProjectionConventionDefinition.Provider.set -> void
HotChocolate.Data.Projections.ProjectionConventionDefinition.ProviderExtensions.get -> System.Collections.Generic.List<HotChocolate.Data.Projections.IProjectionProviderExtension!>!
HotChocolate.Data.Projections.ProjectionConventionDefinition.ProviderExtensionsTypes.get -> System.Collections.Generic.List<System.Type!>!
HotChocolate.Data.Projections.ProjectionConventionDefinition.ProviderInstance.get -> HotChocolate.Data.Projections.IProjectionProvider?
HotChocolate.Data.Projections.ProjectionConventionDefinition.ProviderInstance.set -> void
HotChocolate.Data.Projections.ProjectionConventionDefinition.Scope.get -> string?
HotChocolate.Data.Projections.ProjectionConventionDefinition.Scope.set -> void
HotChocolate.Data.Projections.ProjectionConventionDescriptor
HotChocolate.Data.Projections.ProjectionConventionDescriptor.AddProviderExtension<TExtension>() -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.ProjectionConventionDescriptor.AddProviderExtension<TExtension>(TExtension! provider) -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.ProjectionConventionDescriptor.Context.get -> HotChocolate.Types.Descriptors.IDescriptorContext!
HotChocolate.Data.Projections.ProjectionConventionDescriptor.CreateDefinition() -> HotChocolate.Data.Projections.ProjectionConventionDefinition!
HotChocolate.Data.Projections.ProjectionConventionDescriptor.Definition.get -> HotChocolate.Data.Projections.ProjectionConventionDefinition!
HotChocolate.Data.Projections.ProjectionConventionDescriptor.ProjectionConventionDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Projections.ProjectionConventionDescriptor.Provider(System.Type! provider) -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.ProjectionConventionDescriptor.Provider<TProvider>() -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.ProjectionConventionDescriptor.Provider<TProvider>(TProvider! provider) -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
HotChocolate.Data.Projections.ProjectionConventionExtension
HotChocolate.Data.Projections.ProjectionConventionExtension.Initialize(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
HotChocolate.Data.Projections.ProjectionConventionExtension.ProjectionConventionExtension() -> void
HotChocolate.Data.Projections.ProjectionConventionExtension.ProjectionConventionExtension(System.Action<HotChocolate.Data.Projections.IProjectionConventionDescriptor!>! configure) -> void
HotChocolate.Data.Projections.ProjectionOptimizer
HotChocolate.Data.Projections.ProjectionOptimizer.AllowFragmentDeferral(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Language.FragmentSpreadNode! fragmentSpread, HotChocolate.Language.FragmentDefinitionNode! fragmentDefinition) -> bool
HotChocolate.Data.Projections.ProjectionOptimizer.AllowFragmentDeferral(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Language.InlineFragmentNode! fragment) -> bool
HotChocolate.Data.Projections.ProjectionOptimizer.OptimizeSelectionSet(HotChocolate.Execution.Processing.SelectionOptimizerContext context) -> void
HotChocolate.Data.Projections.ProjectionOptimizer.ProjectionOptimizer(HotChocolate.Data.Projections.IProjectionProvider! provider) -> void
HotChocolate.Data.Projections.ProjectionProvider
HotChocolate.Data.Projections.ProjectionProvider.Initialize(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
HotChocolate.Data.Projections.ProjectionProvider.ProjectionProvider() -> void
HotChocolate.Data.Projections.ProjectionProvider.ProjectionProvider(System.Action<HotChocolate.Data.Projections.IProjectionProviderDescriptor!>! configure) -> void
HotChocolate.Data.Projections.ProjectionProvider.RewriteSelection(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Execution.Processing.Selection! selection) -> HotChocolate.Execution.Processing.Selection!
HotChocolate.Data.Projections.ProjectionProviderDefinition
HotChocolate.Data.Projections.ProjectionProviderDefinition.Handlers.get -> System.Collections.Generic.IList<(System.Type!, HotChocolate.Data.Projections.IProjectionFieldHandler?)>!
HotChocolate.Data.Projections.ProjectionProviderDefinition.Interceptors.get -> System.Collections.Generic.IList<(System.Type!, HotChocolate.Data.Projections.IProjectionFieldInterceptor?)>!
HotChocolate.Data.Projections.ProjectionProviderDefinition.Optimizers.get -> System.Collections.Generic.IList<(System.Type!, HotChocolate.Data.Projections.IProjectionOptimizer?)>!
HotChocolate.Data.Projections.ProjectionProviderDefinition.ProjectionProviderDefinition() -> void
HotChocolate.Data.Projections.ProjectionProviderDefinition.Scope.get -> string?
HotChocolate.Data.Projections.ProjectionProviderDefinition.Scope.set -> void
HotChocolate.Data.Projections.ProjectionProviderDescriptor
HotChocolate.Data.Projections.ProjectionProviderDescriptor.Context.get -> HotChocolate.Types.Descriptors.IDescriptorContext!
HotChocolate.Data.Projections.ProjectionProviderDescriptor.CreateDefinition() -> HotChocolate.Data.Projections.ProjectionProviderDefinition!
HotChocolate.Data.Projections.ProjectionProviderDescriptor.Definition.get -> HotChocolate.Data.Projections.ProjectionProviderDefinition!
HotChocolate.Data.Projections.ProjectionProviderDescriptor.ProjectionProviderDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Projections.ProjectionProviderDescriptor.RegisterFieldHandler<THandler>() -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.ProjectionProviderDescriptor.RegisterFieldHandler<THandler>(THandler handler) -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.ProjectionProviderDescriptor.RegisterFieldInterceptor<THandler>() -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.ProjectionProviderDescriptor.RegisterFieldInterceptor<THandler>(THandler handler) -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.ProjectionProviderDescriptor.RegisterOptimizer<THandler>() -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.ProjectionProviderDescriptor.RegisterOptimizer<THandler>(THandler handler) -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
HotChocolate.Data.Projections.ProjectionProviderExtension
HotChocolate.Data.Projections.ProjectionProviderExtension.ProjectionProviderExtension() -> void
HotChocolate.Data.Projections.ProjectionProviderExtension.ProjectionProviderExtension(System.Action<HotChocolate.Data.Projections.IProjectionProviderDescriptor!>! configure) -> void
HotChocolate.Data.Projections.ProjectionScope<T>
HotChocolate.Data.Projections.ProjectionScope<T>.Instance.get -> System.Collections.Generic.Stack<T>!
HotChocolate.Data.Projections.ProjectionScope<T>.ProjectionScope() -> void
HotChocolate.Data.Projections.ProjectionSelection
HotChocolate.Data.Projections.ProjectionSelection.Handler.get -> HotChocolate.Data.Projections.IProjectionFieldHandler!
HotChocolate.Data.Projections.ProjectionSelection.ProjectionSelection(HotChocolate.Data.Projections.IProjectionFieldHandler! handler, HotChocolate.Execution.Processing.Selection! selection) -> void
HotChocolate.Data.Projections.ProjectionTypeInterceptor
HotChocolate.Data.Projections.ProjectionTypeInterceptor.ProjectionTypeInterceptor() -> void
HotChocolate.Data.Projections.ProjectionVisitor<TContext>
HotChocolate.Data.Projections.ProjectionVisitor<TContext>.ProjectionVisitor() -> void
HotChocolate.Data.Projections.ProjectionVisitorContext<T>
HotChocolate.Data.Projections.ProjectionVisitorContext<T>.Errors.get -> System.Collections.Generic.IList<HotChocolate.IError!>!
HotChocolate.Data.Projections.ProjectionVisitorContext<T>.ProjectionVisitorContext(HotChocolate.Resolvers.IResolverContext! context, HotChocolate.Types.IOutputType! initialType, HotChocolate.Data.Projections.ProjectionScope<T>! projectionScope) -> void
HotChocolate.Data.Projections.ProjectionVisitorContext<T>.Scopes.get -> System.Collections.Generic.Stack<HotChocolate.Data.Projections.ProjectionScope<T>!>!
HotChocolate.Data.Projections.ProjectionVisitorContext<T>.Types.get -> System.Collections.Generic.Stack<HotChocolate.Types.IType!>!
HotChocolate.Data.Projections.SelectionVisitor
HotChocolate.Data.Projections.SelectionVisitor.SelectionVisitor() -> void
HotChocolate.Data.Projections.SelectionVisitor<TContext>
HotChocolate.Data.Projections.SelectionVisitor<TContext>.SelectionVisitor() -> void
HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.SelectionVisitorActionKind.Break = 2 -> HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.SelectionVisitorActionKind.Continue = 0 -> HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.SelectionVisitorActionKind.Skip = 1 -> HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.SelectionVisitorActionKind.SkipAndLeave = 3 -> HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.SelectionVisitorContext
HotChocolate.Data.Projections.SelectionVisitorContext.Context.get -> HotChocolate.Resolvers.IResolverContext!
HotChocolate.Data.Projections.SelectionVisitorContext.Selection.get -> System.Collections.Generic.Stack<HotChocolate.Execution.Processing.ISelection!>!
HotChocolate.Data.Projections.SelectionVisitorContext.SelectionSetNodes.get -> System.Collections.Generic.Stack<HotChocolate.Language.SelectionSetNode?>!
HotChocolate.Data.Projections.SelectionVisitorContext.SelectionVisitorContext(HotChocolate.Resolvers.IResolverContext! context) -> void
HotChocolate.Data.Projections.SingleOrDefaultMiddleware<T>
HotChocolate.Data.Projections.SingleOrDefaultMiddleware<T>.InvokeAsync(HotChocolate.Resolvers.IMiddlewareContext! context) -> System.Threading.Tasks.Task!
HotChocolate.Data.Projections.SingleOrDefaultMiddleware<T>.SingleOrDefaultMiddleware(HotChocolate.Resolvers.FieldDelegate! next) -> void
HotChocolate.Data.Projections.SkipAndLeaveSelectionVisitorAction
HotChocolate.Data.Projections.SkipAndLeaveSelectionVisitorAction.Kind.get -> HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.SkipAndLeaveSelectionVisitorAction.SkipAndLeaveSelectionVisitorAction() -> void
HotChocolate.Data.Projections.SkipSelectionVisitorAction
HotChocolate.Data.Projections.SkipSelectionVisitorAction.Kind.get -> HotChocolate.Data.Projections.SelectionVisitorActionKind
HotChocolate.Data.Projections.SkipSelectionVisitorAction.SkipSelectionVisitorAction() -> void
HotChocolate.Data.QueryableExecutable<T>
HotChocolate.Data.QueryableExecutable<T>.InMemory.get -> bool
HotChocolate.Data.QueryableExecutable<T>.QueryableExecutable(System.Linq.IQueryable<T>! queryable) -> void
HotChocolate.Data.QueryableExecutable<T>.Source.get -> System.Linq.IQueryable<T>!
HotChocolate.Data.SortConventionDescriptorExtensions
HotChocolate.Data.SortConventionDescriptorQueryableExtensions
HotChocolate.Data.SortDescriptorContextExtensions
HotChocolate.Data.Sorting.ConfigureSortEnumType
HotChocolate.Data.Sorting.ConfigureSortInputType
HotChocolate.Data.Sorting.ConfigureSortInputType<T>
HotChocolate.Data.Sorting.DefaultSortEnumType
HotChocolate.Data.Sorting.DefaultSortEnumType.DefaultSortEnumType() -> void
HotChocolate.Data.Sorting.DefaultSortOperations
HotChocolate.Data.Sorting.Expressions.ExpressionExtensions
HotChocolate.Data.Sorting.Expressions.QueryableAscendingSortOperationHandler
HotChocolate.Data.Sorting.Expressions.QueryableAscendingSortOperationHandler.QueryableAscendingSortOperationHandler() -> void
HotChocolate.Data.Sorting.Expressions.QueryableDefaultSortFieldHandler
HotChocolate.Data.Sorting.Expressions.QueryableDefaultSortFieldHandler.QueryableDefaultSortFieldHandler() -> void
HotChocolate.Data.Sorting.Expressions.QueryableDescendingSortOperationHandler
HotChocolate.Data.Sorting.Expressions.QueryableDescendingSortOperationHandler.QueryableDescendingSortOperationHandler() -> void
HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector
HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector.QueryableFieldSelector(System.Linq.Expressions.Expression! selector, System.Linq.Expressions.ParameterExpression! parameterExpression) -> void
HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector.QueryableFieldSelector(System.Linq.Expressions.ParameterExpression! parameterExpression) -> void
HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector.WithSelector(System.Linq.Expressions.Expression! selector) -> HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector!
HotChocolate.Data.Sorting.Expressions.QueryableOperationHandlerBase
HotChocolate.Data.Sorting.Expressions.QueryableOperationHandlerBase.QueryableOperationHandlerBase(int operation) -> void
HotChocolate.Data.Sorting.Expressions.QueryableSortContext
HotChocolate.Data.Sorting.Expressions.QueryableSortContext.InMemory.get -> bool
HotChocolate.Data.Sorting.Expressions.QueryableSortContext.QueryableSortContext(HotChocolate.Data.Sorting.ISortInputType! initialType, bool inMemory) -> void
HotChocolate.Data.Sorting.Expressions.QueryableSortContext.RuntimeTypes.get -> System.Collections.Generic.Stack<HotChocolate.Internal.IExtendedType!>!
HotChocolate.Data.Sorting.Expressions.QueryableSortOperation
HotChocolate.Data.Sorting.Expressions.QueryableSortOperation.ParameterExpression.get -> System.Linq.Expressions.ParameterExpression!
HotChocolate.Data.Sorting.Expressions.QueryableSortOperation.QueryableSortOperation(HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector! fieldSelector) -> void
HotChocolate.Data.Sorting.Expressions.QueryableSortOperation.QueryableSortOperation(System.Linq.Expressions.Expression! selector, System.Linq.Expressions.ParameterExpression! parameterExpression) -> void
HotChocolate.Data.Sorting.Expressions.QueryableSortOperation.Selector.get -> System.Linq.Expressions.Expression!
HotChocolate.Data.Sorting.Expressions.QueryableSortProvider
HotChocolate.Data.Sorting.Expressions.QueryableSortProvider.QueryableSortProvider() -> void
HotChocolate.Data.Sorting.Expressions.QueryableSortProvider.QueryableSortProvider(System.Action<HotChocolate.Data.Sorting.ISortProviderDescriptor<HotChocolate.Data.Sorting.Expressions.QueryableSortContext!>!>! configure) -> void
HotChocolate.Data.Sorting.Expressions.QueryableSortProviderExtension
HotChocolate.Data.Sorting.Expressions.QueryableSortProviderExtension.QueryableSortProviderExtension() -> void
HotChocolate.Data.Sorting.Expressions.QueryableSortProviderExtension.QueryableSortProviderExtension(System.Action<HotChocolate.Data.Sorting.ISortProviderDescriptor<HotChocolate.Data.Sorting.Expressions.QueryableSortContext!>!>! configure) -> void
HotChocolate.Data.Sorting.Expressions.QueryableSortVisitorContextExtensions
HotChocolate.Data.Sorting.Expressions.SortExpressionBuilder
HotChocolate.Data.Sorting.Expressions.VisitSortArgument
HotChocolate.Data.Sorting.IgnoreSortFieldDescriptor
HotChocolate.Data.Sorting.IgnoreSortFieldDescriptor.IgnoreSortFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, System.Reflection.MemberInfo! member) -> void
HotChocolate.Data.Sorting.ISortConvention
HotChocolate.Data.Sorting.ISortConvention.ApplyConfigurations(HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Data.Sorting.ISortEnumTypeDescriptor! descriptor) -> void
HotChocolate.Data.Sorting.ISortConvention.ApplyConfigurations(HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Data.Sorting.ISortInputTypeDescriptor! descriptor) -> void
HotChocolate.Data.Sorting.ISortConvention.ConfigureField(HotChocolate.Types.IObjectFieldDescriptor! fieldDescriptor) -> void
HotChocolate.Data.Sorting.ISortConvention.CreateExecutor<TEntityType>() -> HotChocolate.Resolvers.FieldMiddleware!
HotChocolate.Data.Sorting.ISortConvention.GetArgumentName() -> HotChocolate.NameString
HotChocolate.Data.Sorting.ISortConvention.GetFieldDescription(System.Reflection.MemberInfo! member) -> string?
HotChocolate.Data.Sorting.ISortConvention.GetFieldName(System.Reflection.MemberInfo! member) -> HotChocolate.NameString
HotChocolate.Data.Sorting.ISortConvention.GetFieldType(System.Reflection.MemberInfo! member) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Data.Sorting.ISortConvention.GetOperationDescription(int operationId) -> string?
HotChocolate.Data.Sorting.ISortConvention.GetOperationName(int operationId) -> HotChocolate.NameString
HotChocolate.Data.Sorting.ISortConvention.GetTypeDescription(System.Type! runtimeType) -> string?
HotChocolate.Data.Sorting.ISortConvention.GetTypeName(System.Type! runtimeType) -> HotChocolate.NameString
HotChocolate.Data.Sorting.ISortConvention.TryGetFieldHandler(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Sorting.ISortInputTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.ISortFieldDefinition! fieldDefinition, out HotChocolate.Data.Sorting.ISortFieldHandler? handler) -> bool
HotChocolate.Data.Sorting.ISortConvention.TryGetOperationHandler(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.SortEnumValueDefinition! fieldDefinition, out HotChocolate.Data.Sorting.ISortOperationHandler? handler) -> bool
HotChocolate.Data.Sorting.ISortConventionDescriptor
HotChocolate.Data.Sorting.ISortConventionDescriptor.AddProviderExtension<TExtension>() -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.AddProviderExtension<TExtension>(TExtension! provider) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.ArgumentName(HotChocolate.NameString argumentName) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.BindRuntimeType(System.Type! runtimeType, System.Type! sortType) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.BindRuntimeType<TRuntimeType, TSortType>() -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.Configure<TSortType, TRuntimeType>(HotChocolate.Data.Sorting.ConfigureSortInputType<TRuntimeType>! configure) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.Configure<TSortType>(HotChocolate.Data.Sorting.ConfigureSortInputType! configure) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.ConfigureEnum<TSortEnumType>(HotChocolate.Data.Sorting.ConfigureSortEnumType! configure) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.DefaultBinding<TSortType>() -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.Operation(int operationId) -> HotChocolate.Data.Sorting.ISortOperationConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.Provider(System.Type! provider) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.Provider<TProvider>() -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortConventionDescriptor.Provider<TProvider>(TProvider! provider) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.ISortEnumTypeDescriptor
HotChocolate.Data.Sorting.ISortEnumTypeDescriptor.Description(string! value) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.ISortEnumTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.ISortEnumTypeDescriptor.Directive<T>() -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.ISortEnumTypeDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.ISortEnumTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.ISortEnumTypeDescriptor.Operation(int operation) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.ISortEnumTypeDescriptor.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode! enumTypeDefinition) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.ISortEnumValue
HotChocolate.Data.Sorting.ISortEnumValue.Handler.get -> HotChocolate.Data.Sorting.ISortOperationHandler!
HotChocolate.Data.Sorting.ISortEnumValue.Operation.get -> int
HotChocolate.Data.Sorting.ISortEnumValueDescriptor
HotChocolate.Data.Sorting.ISortEnumValueDescriptor.Deprecated() -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.ISortEnumValueDescriptor.Deprecated(string! reason) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.ISortEnumValueDescriptor.Description(string! value) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.ISortEnumValueDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.ISortEnumValueDescriptor.Directive<T>() -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.ISortEnumValueDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.ISortEnumValueDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.ISortEnumValueDescriptor.SyntaxNode(HotChocolate.Language.EnumValueDefinitionNode! enumValueDefinition) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.ISortField
HotChocolate.Data.Sorting.ISortField.DeclaringType.get -> HotChocolate.Data.Sorting.SortInputType!
HotChocolate.Data.Sorting.ISortField.Handler.get -> HotChocolate.Data.Sorting.ISortFieldHandler!
HotChocolate.Data.Sorting.ISortField.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Data.Sorting.ISortField.RuntimeType.get -> HotChocolate.Internal.IExtendedType?
HotChocolate.Data.Sorting.ISortFieldDefinition
HotChocolate.Data.Sorting.ISortFieldDefinition.Handler.get -> HotChocolate.Data.Sorting.ISortFieldHandler?
HotChocolate.Data.Sorting.ISortFieldDefinition.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Data.Sorting.ISortFieldDescriptor
HotChocolate.Data.Sorting.ISortFieldDescriptor.DefaultValue(HotChocolate.Language.IValueNode! value) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.DefaultValue(object! value) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Description(string! value) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Directive<T>() -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode! inputValueDefinitionNode) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Type(HotChocolate.Language.ITypeNode! typeNode) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Type(System.Type! type) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Type<TInputType>() -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldDescriptor.Type<TInputType>(TInputType! inputType) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortFieldHandler
HotChocolate.Data.Sorting.ISortFieldHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Sorting.ISortInputTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.ISortFieldDefinition! fieldDefinition) -> bool
HotChocolate.Data.Sorting.ISortFieldHandler<TContext, T>
HotChocolate.Data.Sorting.ISortFieldHandler<TContext>
HotChocolate.Data.Sorting.ISortFieldHandler<TContext>.TryHandleEnter(TContext context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
HotChocolate.Data.Sorting.ISortFieldHandler<TContext>.TryHandleLeave(TContext context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
HotChocolate.Data.Sorting.ISortInputType
HotChocolate.Data.Sorting.ISortInputType.EntityType.get -> HotChocolate.Internal.IExtendedType!
HotChocolate.Data.Sorting.ISortInputTypeDefinition
HotChocolate.Data.Sorting.ISortInputTypeDefinition.EntityType.get -> System.Type?
HotChocolate.Data.Sorting.ISortInputTypeDescriptor
HotChocolate.Data.Sorting.ISortInputTypeDescriptor.Description(string? value) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor.Directive<TDirective>() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor.Directive<TDirective>(TDirective! directive) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor.Ignore(HotChocolate.NameString name) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.Description(string? value) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.Directive<TDirective>(TDirective! directive) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.Field<TField>(System.Linq.Expressions.Expression<System.Func<T, TField>!>! property) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.Ignore(HotChocolate.NameString name) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.Ignore(System.Linq.Expressions.Expression<System.Func<T, object?>!>! property) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeNameDependencyDescriptor<T>
HotChocolate.Data.Sorting.ISortInputTypeNameDependencyDescriptor<T>.DependsOn(System.Type! schemaType) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortInputTypeNameDependencyDescriptor<T>.DependsOn<TDependency>() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.ISortOperationConventionDescriptor
HotChocolate.Data.Sorting.ISortOperationConventionDescriptor.Description(string! description) -> HotChocolate.Data.Sorting.ISortOperationConventionDescriptor!
HotChocolate.Data.Sorting.ISortOperationConventionDescriptor.Name(string! name) -> HotChocolate.Data.Sorting.ISortOperationConventionDescriptor!
HotChocolate.Data.Sorting.ISortOperationHandler
HotChocolate.Data.Sorting.ISortOperationHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.SortEnumValueDefinition! valueDefinition) -> bool
HotChocolate.Data.Sorting.ISortOperationHandler<TContext, T>
HotChocolate.Data.Sorting.ISortOperationHandler<TContext>
HotChocolate.Data.Sorting.ISortOperationHandler<TContext>.TryHandleEnter(TContext context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Data.Sorting.ISortEnumValue? enumValue, HotChocolate.Language.EnumValueNode! valueNode, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
HotChocolate.Data.Sorting.ISortProvider
HotChocolate.Data.Sorting.ISortProvider.ConfigureField(HotChocolate.NameString argumentName, HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> void
HotChocolate.Data.Sorting.ISortProvider.CreateExecutor<TEntityType>(HotChocolate.NameString argumentName) -> HotChocolate.Resolvers.FieldMiddleware!
HotChocolate.Data.Sorting.ISortProvider.FieldHandlers.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Data.Sorting.ISortFieldHandler!>!
HotChocolate.Data.Sorting.ISortProvider.OperationHandlers.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Data.Sorting.ISortOperationHandler!>!
HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>
HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>.AddFieldHandler<TFieldHandler>() -> HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!
HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>.AddFieldHandler<TFieldHandler>(TFieldHandler fieldHandler) -> HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!
HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>.AddOperationHandler<TOperationHandler>() -> HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!
HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>.AddOperationHandler<TOperationHandler>(TOperationHandler operationHandler) -> HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!
HotChocolate.Data.Sorting.ISortProviderExtension
HotChocolate.Data.Sorting.ISortVisitorContext
HotChocolate.Data.Sorting.ISortVisitorContext.Errors.get -> System.Collections.Generic.IList<HotChocolate.IError!>!
HotChocolate.Data.Sorting.ISortVisitorContext.Fields.get -> System.Collections.Generic.Stack<HotChocolate.Types.IInputField!>!
HotChocolate.Data.Sorting.ISortVisitorContext.Types.get -> System.Collections.Generic.Stack<HotChocolate.Types.IType!>!
HotChocolate.Data.Sorting.ISortVisitorContext<T>
HotChocolate.Data.Sorting.ISortVisitorContext<T>.Instance.get -> System.Collections.Generic.Stack<T>!
HotChocolate.Data.Sorting.ISortVisitorContext<T>.Operations.get -> System.Collections.Generic.Queue<T>!
HotChocolate.Data.Sorting.SortConvention
HotChocolate.Data.Sorting.SortConvention.ApplyConfigurations(HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Data.Sorting.ISortEnumTypeDescriptor! descriptor) -> void
HotChocolate.Data.Sorting.SortConvention.ApplyConfigurations(HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Data.Sorting.ISortInputTypeDescriptor! descriptor) -> void
HotChocolate.Data.Sorting.SortConvention.CreateExecutor<TEntityType>() -> HotChocolate.Resolvers.FieldMiddleware!
HotChocolate.Data.Sorting.SortConvention.GetArgumentName() -> HotChocolate.NameString
HotChocolate.Data.Sorting.SortConvention.GetOperationDescription(int operationId) -> string?
HotChocolate.Data.Sorting.SortConvention.GetOperationName(int operation) -> HotChocolate.NameString
HotChocolate.Data.Sorting.SortConvention.SortConvention() -> void
HotChocolate.Data.Sorting.SortConvention.SortConvention(System.Action<HotChocolate.Data.Sorting.ISortConventionDescriptor!>! configure) -> void
HotChocolate.Data.Sorting.SortConvention.TryGetFieldHandler(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Sorting.ISortInputTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.ISortFieldDefinition! fieldDefinition, out HotChocolate.Data.Sorting.ISortFieldHandler? handler) -> bool
HotChocolate.Data.Sorting.SortConvention.TryGetOperationHandler(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.SortEnumValueDefinition! fieldDefinition, out HotChocolate.Data.Sorting.ISortOperationHandler? handler) -> bool
HotChocolate.Data.Sorting.SortConventionDefinition
HotChocolate.Data.Sorting.SortConventionDefinition.ArgumentName.get -> string!
HotChocolate.Data.Sorting.SortConventionDefinition.ArgumentName.set -> void
HotChocolate.Data.Sorting.SortConventionDefinition.Bindings.get -> System.Collections.Generic.IDictionary<System.Type!, System.Type!>!
HotChocolate.Data.Sorting.SortConventionDefinition.Configurations.get -> System.Collections.Generic.IDictionary<HotChocolate.Types.Descriptors.ITypeReference!, System.Collections.Generic.List<HotChocolate.Data.Sorting.ConfigureSortInputType!>!>!
HotChocolate.Data.Sorting.SortConventionDefinition.DefaultBinding.get -> System.Type?
HotChocolate.Data.Sorting.SortConventionDefinition.DefaultBinding.set -> void
HotChocolate.Data.Sorting.SortConventionDefinition.EnumConfigurations.get -> System.Collections.Generic.IDictionary<HotChocolate.Types.Descriptors.ITypeReference!, System.Collections.Generic.List<HotChocolate.Data.Sorting.ConfigureSortEnumType!>!>!
HotChocolate.Data.Sorting.SortConventionDefinition.Operations.get -> System.Collections.Generic.IList<HotChocolate.Data.Sorting.SortOperationConventionDefinition!>!
HotChocolate.Data.Sorting.SortConventionDefinition.Provider.get -> System.Type?
HotChocolate.Data.Sorting.SortConventionDefinition.Provider.set -> void
HotChocolate.Data.Sorting.SortConventionDefinition.ProviderExtensions.get -> System.Collections.Generic.IList<HotChocolate.Data.Sorting.ISortProviderExtension!>!
HotChocolate.Data.Sorting.SortConventionDefinition.ProviderExtensionsTypes.get -> System.Collections.Generic.IList<System.Type!>!
HotChocolate.Data.Sorting.SortConventionDefinition.ProviderInstance.get -> HotChocolate.Data.Sorting.ISortProvider?
HotChocolate.Data.Sorting.SortConventionDefinition.ProviderInstance.set -> void
HotChocolate.Data.Sorting.SortConventionDefinition.Scope.get -> string?
HotChocolate.Data.Sorting.SortConventionDefinition.Scope.set -> void
HotChocolate.Data.Sorting.SortConventionDefinition.SortConventionDefinition() -> void
HotChocolate.Data.Sorting.SortConventionDescriptor
HotChocolate.Data.Sorting.SortConventionDescriptor.AddProviderExtension<TExtension>() -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.AddProviderExtension<TExtension>(TExtension! provider) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.ArgumentName(HotChocolate.NameString argumentName) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.BindRuntimeType(System.Type! runtimeType, System.Type! sortType) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.BindRuntimeType<TRuntimeType, TSortType>() -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.Configure(HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Data.Sorting.ConfigureSortInputType! configure) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.Configure<TSortType, TRuntimeType>(HotChocolate.Data.Sorting.ConfigureSortInputType<TRuntimeType>! configure) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.Configure<TSortType>(HotChocolate.Data.Sorting.ConfigureSortInputType! configure) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.ConfigureEnum<TSortEnumType>(HotChocolate.Data.Sorting.ConfigureSortEnumType! configure) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.Context.get -> HotChocolate.Types.Descriptors.IDescriptorContext!
HotChocolate.Data.Sorting.SortConventionDescriptor.CreateDefinition() -> HotChocolate.Data.Sorting.SortConventionDefinition!
HotChocolate.Data.Sorting.SortConventionDescriptor.DefaultBinding<TSortType>() -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.Definition.get -> HotChocolate.Data.Sorting.SortConventionDefinition!
HotChocolate.Data.Sorting.SortConventionDescriptor.Operation(int operationId) -> HotChocolate.Data.Sorting.ISortOperationConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.Provider(System.Type! provider) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.Provider<TProvider>() -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.Provider<TProvider>(TProvider! provider) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
HotChocolate.Data.Sorting.SortConventionDescriptor.SortConventionDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Sorting.SortConventionExtension
HotChocolate.Data.Sorting.SortConventionExtension.Initialize(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
HotChocolate.Data.Sorting.SortConventionExtension.SortConventionExtension() -> void
HotChocolate.Data.Sorting.SortConventionExtension.SortConventionExtension(System.Action<HotChocolate.Data.Sorting.ISortConventionDescriptor!>! configure) -> void
HotChocolate.Data.Sorting.SortEnumType
HotChocolate.Data.Sorting.SortEnumType.ParseSortLiteral(HotChocolate.Language.IValueNode! valueSyntax) -> HotChocolate.Data.Sorting.ISortEnumValue?
HotChocolate.Data.Sorting.SortEnumType.SortEnumType() -> void
HotChocolate.Data.Sorting.SortEnumType.SortEnumType(System.Action<HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!>! configure) -> void
HotChocolate.Data.Sorting.SortEnumTypeDefinition
HotChocolate.Data.Sorting.SortEnumTypeDefinition.EntityType.get -> System.Type!
HotChocolate.Data.Sorting.SortEnumTypeDefinition.EntityType.set -> void
HotChocolate.Data.Sorting.SortEnumTypeDefinition.Scope.get -> string?
HotChocolate.Data.Sorting.SortEnumTypeDefinition.Scope.set -> void
HotChocolate.Data.Sorting.SortEnumTypeDefinition.SortEnumTypeDefinition() -> void
HotChocolate.Data.Sorting.SortEnumTypeDescriptor
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.Description(string! value) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.Directive<T>() -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.Operation(int operation) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.SortEnumTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Sorting.SortEnumTypeDefinition! definition) -> void
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.SortEnumTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! clrType, string? scope) -> void
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode! enumTypeDefinition) -> HotChocolate.Data.Sorting.ISortEnumTypeDescriptor!
HotChocolate.Data.Sorting.SortEnumTypeDescriptor.Values.get -> System.Collections.Generic.ICollection<HotChocolate.Data.Sorting.SortEnumValueDescriptor!>!
HotChocolate.Data.Sorting.SortEnumValue
HotChocolate.Data.Sorting.SortEnumValue.ContextData.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object?>!
HotChocolate.Data.Sorting.SortEnumValue.DeprecationReason.get -> string?
HotChocolate.Data.Sorting.SortEnumValue.Description.get -> string?
HotChocolate.Data.Sorting.SortEnumValue.Directives.get -> HotChocolate.Types.IDirectiveCollection!
HotChocolate.Data.Sorting.SortEnumValue.Handler.get -> HotChocolate.Data.Sorting.ISortOperationHandler!
HotChocolate.Data.Sorting.SortEnumValue.IsDeprecated.get -> bool
HotChocolate.Data.Sorting.SortEnumValue.Name.get -> HotChocolate.NameString
HotChocolate.Data.Sorting.SortEnumValue.Operation.get -> int
HotChocolate.Data.Sorting.SortEnumValue.SortEnumValue(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Data.Sorting.SortEnumValueDefinition! enumValueDefinition) -> void
HotChocolate.Data.Sorting.SortEnumValue.SyntaxNode.get -> HotChocolate.Language.EnumValueDefinitionNode?
HotChocolate.Data.Sorting.SortEnumValue.Value.get -> object!
HotChocolate.Data.Sorting.SortEnumValueDefinition
HotChocolate.Data.Sorting.SortEnumValueDefinition.Handler.get -> HotChocolate.Data.Sorting.ISortOperationHandler!
HotChocolate.Data.Sorting.SortEnumValueDefinition.Handler.set -> void
HotChocolate.Data.Sorting.SortEnumValueDefinition.Operation.get -> int
HotChocolate.Data.Sorting.SortEnumValueDefinition.Operation.set -> void
HotChocolate.Data.Sorting.SortEnumValueDefinition.SortEnumValueDefinition() -> void
HotChocolate.Data.Sorting.SortEnumValueDefinition.Value.get -> object!
HotChocolate.Data.Sorting.SortEnumValueDefinition.Value.set -> void
HotChocolate.Data.Sorting.SortEnumValueDescriptor
HotChocolate.Data.Sorting.SortEnumValueDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition!
HotChocolate.Data.Sorting.SortEnumValueDescriptor.Definition.set -> void
HotChocolate.Data.Sorting.SortEnumValueDescriptor.Deprecated() -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.SortEnumValueDescriptor.Deprecated(string! reason) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.SortEnumValueDescriptor.Description(string! value) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.SortEnumValueDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.SortEnumValueDescriptor.Directive<T>() -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.SortEnumValueDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.SortEnumValueDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.SortEnumValueDescriptor.SortEnumValueDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Sorting.SortEnumValueDefinition! definition) -> void
HotChocolate.Data.Sorting.SortEnumValueDescriptor.SortEnumValueDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, int value) -> void
HotChocolate.Data.Sorting.SortEnumValueDescriptor.SyntaxNode(HotChocolate.Language.EnumValueDefinitionNode! enumValueDefinition) -> HotChocolate.Data.Sorting.ISortEnumValueDescriptor!
HotChocolate.Data.Sorting.SortField
HotChocolate.Data.Sorting.SortField.DeclaringType.get -> HotChocolate.Data.Sorting.SortInputType!
HotChocolate.Data.Sorting.SortField.Handler.get -> HotChocolate.Data.Sorting.ISortFieldHandler!
HotChocolate.Data.Sorting.SortField.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Data.Sorting.SortField.RuntimeType.get -> HotChocolate.Internal.IExtendedType?
HotChocolate.Data.Sorting.SortFieldDefinition
HotChocolate.Data.Sorting.SortFieldDefinition.Handler.get -> HotChocolate.Data.Sorting.ISortFieldHandler?
HotChocolate.Data.Sorting.SortFieldDefinition.Handler.set -> void
HotChocolate.Data.Sorting.SortFieldDefinition.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Data.Sorting.SortFieldDefinition.Member.set -> void
HotChocolate.Data.Sorting.SortFieldDefinition.Scope.get -> string?
HotChocolate.Data.Sorting.SortFieldDefinition.Scope.set -> void
HotChocolate.Data.Sorting.SortFieldDefinition.SortFieldDefinition() -> void
HotChocolate.Data.Sorting.SortFieldDescriptor
HotChocolate.Data.Sorting.SortFieldDescriptor.DefaultValue(HotChocolate.Language.IValueNode! value) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.DefaultValue(object! value) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Definition.get -> HotChocolate.Data.Sorting.SortFieldDefinition!
HotChocolate.Data.Sorting.SortFieldDescriptor.Definition.set -> void
HotChocolate.Data.Sorting.SortFieldDescriptor.Description(string! value) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Directive<TDirective>() -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.SortFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, HotChocolate.NameString fieldName) -> void
HotChocolate.Data.Sorting.SortFieldDescriptor.SortFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, System.Reflection.MemberInfo! member) -> void
HotChocolate.Data.Sorting.SortFieldDescriptor.SortFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Sorting.SortFieldDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode! inputValueDefinition) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Type(HotChocolate.Language.ITypeNode! typeNode) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Type(System.Type! type) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Type<TInputType>() -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptor.Type<TInputType>(TInputType! inputType) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortFieldDescriptorAttribute
HotChocolate.Data.Sorting.SortFieldDescriptorAttribute.SortFieldDescriptorAttribute() -> void
HotChocolate.Data.Sorting.SortFieldHandler<TContext, T>
HotChocolate.Data.Sorting.SortFieldHandler<TContext, T>.SortFieldHandler() -> void
HotChocolate.Data.Sorting.SortInputType
HotChocolate.Data.Sorting.SortInputType.EntityType.get -> HotChocolate.Internal.IExtendedType!
HotChocolate.Data.Sorting.SortInputType.SortInputType() -> void
HotChocolate.Data.Sorting.SortInputType.SortInputType(System.Action<HotChocolate.Data.Sorting.ISortInputTypeDescriptor!>! configure) -> void
HotChocolate.Data.Sorting.SortInputType<T>
HotChocolate.Data.Sorting.SortInputType<T>.SortInputType() -> void
HotChocolate.Data.Sorting.SortInputType<T>.SortInputType(System.Action<HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!>! configure) -> void
HotChocolate.Data.Sorting.SortInputTypeDefinition
HotChocolate.Data.Sorting.SortInputTypeDefinition.EntityType.get -> System.Type?
HotChocolate.Data.Sorting.SortInputTypeDefinition.EntityType.set -> void
HotChocolate.Data.Sorting.SortInputTypeDefinition.Scope.get -> string?
HotChocolate.Data.Sorting.SortInputTypeDefinition.Scope.set -> void
HotChocolate.Data.Sorting.SortInputTypeDefinition.SortInputTypeDefinition() -> void
HotChocolate.Data.Sorting.SortInputTypeDescriptor
HotChocolate.Data.Sorting.SortInputTypeDescriptor.BindFields(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.BindFieldsExplicitly() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.BindFieldsImplicitly() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.Convention.get -> HotChocolate.Data.Sorting.ISortConvention!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.Description(string? value) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.Directive<TDirective>() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.Directive<TDirective>(TDirective! directive) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.Fields.get -> HotChocolate.Types.Descriptors.Definitions.BindableList<HotChocolate.Data.Sorting.SortFieldDescriptor!>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.Ignore(HotChocolate.NameString name) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor.SortInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Sorting.SortInputTypeDefinition! definition, string? scope) -> void
HotChocolate.Data.Sorting.SortInputTypeDescriptor.SortInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Sorting.SortInputTypeDescriptor.SortInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType, string? scope) -> void
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.Description(string? value) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.Directive<TDirective>(TDirective! directive) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.Field<TField>(System.Linq.Expressions.Expression<System.Func<T, TField>!>! property) -> HotChocolate.Data.Sorting.ISortFieldDescriptor!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.Ignore(HotChocolate.NameString name) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.Ignore(System.Linq.Expressions.Expression<System.Func<T, object?>!>! property) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.SortInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Sorting.SortInputTypeDefinition! definition, string? scope) -> void
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.SortInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> void
HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.SortInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType, string? scope) -> void
HotChocolate.Data.Sorting.SortInputTypeDescriptorAttribute
HotChocolate.Data.Sorting.SortInputTypeDescriptorAttribute.SortInputTypeDescriptorAttribute() -> void
HotChocolate.Data.Sorting.SortOperation
HotChocolate.Data.Sorting.SortOperation.Description.get -> string?
HotChocolate.Data.Sorting.SortOperation.Id.get -> int
HotChocolate.Data.Sorting.SortOperation.Name.get -> HotChocolate.NameString
HotChocolate.Data.Sorting.SortOperation.SortOperation(int id, HotChocolate.NameString name, string? description) -> void
HotChocolate.Data.Sorting.SortOperationConventionDefinition
HotChocolate.Data.Sorting.SortOperationConventionDefinition.Description.get -> string?
HotChocolate.Data.Sorting.SortOperationConventionDefinition.Description.set -> void
HotChocolate.Data.Sorting.SortOperationConventionDefinition.Id.get -> int
HotChocolate.Data.Sorting.SortOperationConventionDefinition.Id.set -> void
HotChocolate.Data.Sorting.SortOperationConventionDefinition.Name.get -> HotChocolate.NameString
HotChocolate.Data.Sorting.SortOperationConventionDefinition.Name.set -> void
HotChocolate.Data.Sorting.SortOperationConventionDefinition.SortOperationConventionDefinition() -> void
HotChocolate.Data.Sorting.SortOperationConventionDescriptor
HotChocolate.Data.Sorting.SortOperationConventionDescriptor.CreateDefinition() -> HotChocolate.Data.Sorting.SortOperationConventionDefinition!
HotChocolate.Data.Sorting.SortOperationConventionDescriptor.Definition.get -> HotChocolate.Data.Sorting.SortOperationConventionDefinition!
HotChocolate.Data.Sorting.SortOperationConventionDescriptor.Description(string! description) -> HotChocolate.Data.Sorting.ISortOperationConventionDescriptor!
HotChocolate.Data.Sorting.SortOperationConventionDescriptor.Name(string! name) -> HotChocolate.Data.Sorting.ISortOperationConventionDescriptor!
HotChocolate.Data.Sorting.SortOperationConventionDescriptor.SortOperationConventionDescriptor(int operationId) -> void
HotChocolate.Data.Sorting.SortOperationHandler<TContext, T>
HotChocolate.Data.Sorting.SortOperationHandler<TContext, T>.SortOperationHandler() -> void
HotChocolate.Data.Sorting.SortProvider<TContext>
HotChocolate.Data.Sorting.SortProvider<TContext>.FieldHandlers.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Data.Sorting.ISortFieldHandler!>!
HotChocolate.Data.Sorting.SortProvider<TContext>.Initialize(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
HotChocolate.Data.Sorting.SortProvider<TContext>.OperationHandlers.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Data.Sorting.ISortOperationHandler!>!
HotChocolate.Data.Sorting.SortProvider<TContext>.SortProvider() -> void
HotChocolate.Data.Sorting.SortProvider<TContext>.SortProvider(System.Action<HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!>! configure) -> void
HotChocolate.Data.Sorting.SortProviderDefinition
HotChocolate.Data.Sorting.SortProviderDefinition.Handlers.get -> System.Collections.Generic.IList<(System.Type! Handler, HotChocolate.Data.Sorting.ISortFieldHandler? HandlerInstance)>!
HotChocolate.Data.Sorting.SortProviderDefinition.OperationHandlers.get -> System.Collections.Generic.IList<(System.Type! Handler, HotChocolate.Data.Sorting.ISortOperationHandler? HandlerInstance)>!
HotChocolate.Data.Sorting.SortProviderDefinition.SortProviderDefinition() -> void
HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>
HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>.AddFieldHandler<TFieldHandler>() -> HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!
HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>.AddFieldHandler<TFieldHandler>(TFieldHandler fieldHandler) -> HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!
HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>.AddOperationHandler<TOperationHandler>() -> HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!
HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>.AddOperationHandler<TOperationHandler>(TOperationHandler operationHandler) -> HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!
HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>.CreateDefinition() -> HotChocolate.Data.Sorting.SortProviderDefinition!
HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>.Definition.get -> HotChocolate.Data.Sorting.SortProviderDefinition!
HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>.SortProviderDescriptor() -> void
HotChocolate.Data.Sorting.SortProviderExtensions<TContext>
HotChocolate.Data.Sorting.SortProviderExtensions<TContext>.SortProviderExtensions() -> void
HotChocolate.Data.Sorting.SortProviderExtensions<TContext>.SortProviderExtensions(System.Action<HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>!>! configure) -> void
HotChocolate.Data.Sorting.SortTypeInterceptor
HotChocolate.Data.Sorting.SortTypeInterceptor.SortTypeInterceptor() -> void
HotChocolate.Data.Sorting.SortTypeNameExtensions
HotChocolate.Data.Sorting.SortVisitor<TContext, T>
HotChocolate.Data.Sorting.SortVisitor<TContext, T>.SortVisitor() -> void
HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>
HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>.SortVisitorBase() -> void
HotChocolate.Data.Sorting.SortVisitorBase<TContext>
HotChocolate.Data.Sorting.SortVisitorBase<TContext>.SortVisitorBase() -> void
HotChocolate.Data.Sorting.SortVisitorContext<T>
HotChocolate.Data.Sorting.SortVisitorContext<T>.Errors.get -> System.Collections.Generic.IList<HotChocolate.IError!>!
HotChocolate.Data.Sorting.SortVisitorContext<T>.Fields.get -> System.Collections.Generic.Stack<HotChocolate.Types.IInputField!>!
HotChocolate.Data.Sorting.SortVisitorContext<T>.Instance.get -> System.Collections.Generic.Stack<T>!
HotChocolate.Data.Sorting.SortVisitorContext<T>.Operations.get -> System.Collections.Generic.Queue<T>!
HotChocolate.Data.Sorting.SortVisitorContext<T>.SortVisitorContext(HotChocolate.Data.Sorting.ISortInputType! initialType) -> void
HotChocolate.Data.Sorting.SortVisitorContext<T>.Types.get -> System.Collections.Generic.Stack<HotChocolate.Types.IType!>!
HotChocolate.Data.Sorting.SortVisitorContextExtensions
HotChocolate.Data.UseFilteringAttribute
HotChocolate.Data.UseFilteringAttribute.Scope.get -> string?
HotChocolate.Data.UseFilteringAttribute.Scope.set -> void
HotChocolate.Data.UseFilteringAttribute.Type.get -> System.Type?
HotChocolate.Data.UseFilteringAttribute.Type.set -> void
HotChocolate.Data.UseFilteringAttribute.UseFilteringAttribute(System.Type? filterType = null) -> void
HotChocolate.Data.UseFirstOrDefaultAttribute
HotChocolate.Data.UseFirstOrDefaultAttribute.UseFirstOrDefaultAttribute() -> void
HotChocolate.Data.UseProjectionAttribute
HotChocolate.Data.UseProjectionAttribute.Scope.get -> string?
HotChocolate.Data.UseProjectionAttribute.Scope.set -> void
HotChocolate.Data.UseProjectionAttribute.UseProjectionAttribute() -> void
HotChocolate.Data.UseSingleOrDefaultAttribute
HotChocolate.Data.UseSingleOrDefaultAttribute.UseSingleOrDefaultAttribute() -> void
HotChocolate.Data.UseSortingAttribute
HotChocolate.Data.UseSortingAttribute.Scope.get -> string?
HotChocolate.Data.UseSortingAttribute.Scope.set -> void
HotChocolate.Data.UseSortingAttribute.Type.get -> System.Type?
HotChocolate.Data.UseSortingAttribute.Type.set -> void
HotChocolate.Data.UseSortingAttribute.UseSortingAttribute(System.Type? sortingType = null) -> void
HotChocolate.FilterSchemaBuilderExtensions
HotChocolate.ProjectionsSchemaBuilderExtensions
HotChocolate.SortingSchemaBuilderExtensions
HotChocolate.Types.FilterFieldDescriptorExtensions
HotChocolate.Types.FilterObjectFieldDescriptorExtensions
HotChocolate.Types.ProjectionObjectFieldDescriptorExtensions
HotChocolate.Types.SingleOrDefaultObjectFieldDescriptorExtensions
HotChocolate.Types.SortObjectFieldDescriptorExtensions
Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions
override HotChocolate.Data.Filters.BooleanOperationFilterInputType.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor) -> void
override HotChocolate.Data.Filters.ComparableOperationFilterInputType<T>.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor) -> void
override HotChocolate.Data.Filters.EnumOperationFilterInputType<T>.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor) -> void
override HotChocolate.Data.Filters.Expressions.QueryableBooleanEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableBooleanEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableBooleanNotEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableBooleanNotEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableBooleanOperationHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableCombinator.TryCombineOperations(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, System.Collections.Generic.Queue<System.Linq.Expressions.Expression!>! operations, HotChocolate.Data.Filters.FilterCombinator combinator, out System.Linq.Expressions.Expression! combined) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableComparableEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanOrEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanOrEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableInHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableInHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanOrEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanOrEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanOrEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanOrEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotInHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotInHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanOrEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object? parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanOrEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableComparableOperationHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableDataOperationHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableDefaultFieldHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableDefaultFieldHandler.TryHandleEnter(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableDefaultFieldHandler.TryHandleLeave(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableEnumEqualsHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableEnumInHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableEnumNotEqualsHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableEnumNotInHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableFilterContext.CreateScope() -> HotChocolate.Data.Filters.FilterScope<System.Linq.Expressions.Expression!>!
override HotChocolate.Data.Filters.Expressions.QueryableFilterProvider.ConfigureField(HotChocolate.NameString argumentName, HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> void
override HotChocolate.Data.Filters.Expressions.QueryableFilterProvider.CreateExecutor<TEntityType>(HotChocolate.NameString argumentName) -> HotChocolate.Resolvers.FieldMiddleware!
override HotChocolate.Data.Filters.Expressions.QueryableListAllOperationHandler.HandleListOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, System.Type! closureType, System.Linq.Expressions.LambdaExpression! lambda) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableListAllOperationHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableListAnyOperationHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableListAnyOperationHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableListNoneOperationHandler.HandleListOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, System.Type! closureType, System.Linq.Expressions.LambdaExpression! lambda) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableListNoneOperationHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableListOperationHandlerBase.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableListOperationHandlerBase.TryHandleEnter(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableListOperationHandlerBase.TryHandleLeave(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableListSomeOperationHandler.HandleListOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, System.Type! closureType, System.Linq.Expressions.LambdaExpression! lambda) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableListSomeOperationHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableOperationHandlerBase.TryHandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.ObjectFieldNode! node, out System.Linq.Expressions.Expression! result) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableStringContainsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringContainsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableStringEndsWithHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringEndsWithHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableStringEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableStringInHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringInHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableStringNotContainsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringNotContainsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableStringNotEndsWithHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringNotEndsWithHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableStringNotEqualsHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringNotEqualsHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableStringNotInHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringNotInHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableStringNotStartsWithHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringNotStartsWithHandler.Operation.get -> int
override HotChocolate.Data.Filters.Expressions.QueryableStringOperationHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Filters.IFilterInputTypeDefinition! typeDefinition, HotChocolate.Data.Filters.IFilterFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Filters.Expressions.QueryableStringStartsWithHandler.HandleOperation(HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.IValueNode! value, object! parsedValue) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Filters.Expressions.QueryableStringStartsWithHandler.Operation.get -> int
override HotChocolate.Data.Filters.FilterConvention.Complete(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
override HotChocolate.Data.Filters.FilterConvention.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Filters.FilterConventionDefinition!
override HotChocolate.Data.Filters.FilterConventionExtension.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Filters.FilterConventionDefinition!
override HotChocolate.Data.Filters.FilterConventionExtension.Merge(HotChocolate.Types.Descriptors.IConventionContext! context, HotChocolate.Types.Descriptors.Convention! convention) -> void
override HotChocolate.Data.Filters.FilterFieldDescriptor.OnCreateDefinition(HotChocolate.Data.Filters.FilterFieldDefinition! definition) -> void
override HotChocolate.Data.Filters.FilterInputType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition!
override HotChocolate.Data.Filters.FilterInputType.OnCompleteFields(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition, System.Collections.Generic.ICollection<HotChocolate.Types.InputField!>! fields) -> void
override HotChocolate.Data.Filters.FilterInputType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Data.Filters.FilterInputType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Data.Filters.FilterInputType<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition!
override HotChocolate.Data.Filters.FilterInputTypeDescriptor.Definition.get -> HotChocolate.Data.Filters.FilterInputTypeDefinition!
override HotChocolate.Data.Filters.FilterInputTypeDescriptor.Definition.set -> void
override HotChocolate.Data.Filters.FilterInputTypeDescriptor.OnCreateDefinition(HotChocolate.Data.Filters.FilterInputTypeDefinition! definition) -> void
override HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Data.Filters.FilterFieldDefinition!>! fields, System.Collections.Generic.ISet<System.Reflection.MemberInfo!>! handledProperties) -> void
override HotChocolate.Data.Filters.FilterOperationCombinator<TContext, T>.TryCombineOperations<TVisitorContext, TOperation>(TVisitorContext! context, System.Collections.Generic.Queue<TOperation>! operations, HotChocolate.Data.Filters.FilterCombinator combinator, out TOperation combined) -> bool
override HotChocolate.Data.Filters.FilterOperationFieldDescriptor.OnCreateDefinition(HotChocolate.Data.Filters.FilterOperationFieldDefinition! definition) -> void
override HotChocolate.Data.Filters.FilterOperationHandler<TContext, T>.TryHandleEnter(TContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
override HotChocolate.Data.Filters.FilterProvider<TContext>.Complete(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
override HotChocolate.Data.Filters.FilterProvider<TContext>.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Filters.FilterProviderDefinition!
override HotChocolate.Data.Filters.FilterProviderExtensions<TContext>.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Filters.FilterProviderDefinition!
override HotChocolate.Data.Filters.FilterProviderExtensions<TContext>.Merge(HotChocolate.Types.Descriptors.IConventionContext! context, HotChocolate.Types.Descriptors.Convention! convention) -> void
override HotChocolate.Data.Filters.FilterTypeInterceptor.CanHandle(HotChocolate.Configuration.ITypeSystemObjectContext! context) -> bool
override HotChocolate.Data.Filters.FilterTypeInterceptor.OnBeforeCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
override HotChocolate.Data.Filters.FilterTypeInterceptor.OnBeforeCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
override HotChocolate.Data.Filters.FilterTypeInterceptor.OnBeforeRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
override HotChocolate.Data.Filters.FilterVisitor<TContext, T>.OnFieldEnter(TContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.FilterVisitor<TContext, T>.OnFieldLeave(TContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.FilterVisitor<TContext, T>.TryCombineOperations(TContext! context, System.Collections.Generic.Queue<T>! operations, HotChocolate.Data.Filters.FilterCombinator combinator, out T combined) -> bool
override HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.Enter(HotChocolate.Language.ListValueNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.Enter(HotChocolate.Language.ObjectFieldNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.Enter(HotChocolate.Language.ObjectValueNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.Leave(HotChocolate.Language.ListValueNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.Leave(HotChocolate.Language.ObjectFieldNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.FilterVisitorBase<TContext, T>.Leave(HotChocolate.Language.ObjectValueNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.FilterVisitorBase<TContext>.Enter(HotChocolate.Language.ObjectFieldNode! node, TContext context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.FilterVisitorBase<TContext>.Leave(HotChocolate.Language.ObjectFieldNode! node, TContext context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Filters.ListFilterInputType<T>.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor) -> void
override HotChocolate.Data.Filters.StringOperationFilterInputType.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor) -> void
override HotChocolate.Data.IsProjectedAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionFieldHandler.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionFieldHandler.TryHandleEnter(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionFieldHandler.TryHandleLeave(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionHandlerBase.TryHandleEnter(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionHandlerBase.TryHandleLeave(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionListHandler.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionListHandler.OnBeforeEnter(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection) -> HotChocolate.Data.Projections.Expressions.QueryableProjectionContext!
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionListHandler.TryHandleEnter(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionListHandler.TryHandleLeave(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionScalarHandler.CanHandle(HotChocolate.Execution.Processing.ISelection! selection) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionScalarHandler.TryHandleEnter(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
override HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionScalarHandler.TryHandleLeave(HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, HotChocolate.Execution.Processing.ISelection! selection, out HotChocolate.Data.Projections.ISelectionVisitorAction? action) -> bool
override HotChocolate.Data.Projections.Expressions.QueryableProjectionProvider.CreateExecutor<TEntityType>() -> HotChocolate.Resolvers.FieldMiddleware!
override HotChocolate.Data.Projections.ProjectionConvention.Complete(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
override HotChocolate.Data.Projections.ProjectionConvention.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Projections.ProjectionConventionDefinition!
override HotChocolate.Data.Projections.ProjectionConventionExtension.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Projections.ProjectionConventionDefinition!
override HotChocolate.Data.Projections.ProjectionConventionExtension.Merge(HotChocolate.Types.Descriptors.IConventionContext! context, HotChocolate.Types.Descriptors.Convention! convention) -> void
override HotChocolate.Data.Projections.ProjectionProvider.Complete(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
override HotChocolate.Data.Projections.ProjectionProvider.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Projections.ProjectionProviderDefinition!
override HotChocolate.Data.Projections.ProjectionProviderExtension.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Projections.ProjectionProviderDefinition!
override HotChocolate.Data.Projections.ProjectionProviderExtension.Merge(HotChocolate.Types.Descriptors.IConventionContext! context, HotChocolate.Types.Descriptors.Convention! convention) -> void
override HotChocolate.Data.Projections.ProjectionTypeInterceptor.CanHandle(HotChocolate.Configuration.ITypeSystemObjectContext! context) -> bool
override HotChocolate.Data.Projections.ProjectionTypeInterceptor.OnAfterCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object!>! contextData) -> void
override HotChocolate.Data.Projections.ProjectionVisitor<TContext>.Enter(HotChocolate.Execution.Processing.ISelection! selection, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
override HotChocolate.Data.Projections.ProjectionVisitor<TContext>.Leave(HotChocolate.Execution.Processing.ISelection! selection, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
override HotChocolate.Data.Projections.ProjectionVisitor<TContext>.OnAfterEnter(HotChocolate.Execution.Processing.ISelection! selection, TContext localContext, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> TContext
override HotChocolate.Data.Projections.ProjectionVisitor<TContext>.OnAfterLeave(HotChocolate.Execution.Processing.ISelection! selection, TContext localContext, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> TContext
override HotChocolate.Data.Projections.ProjectionVisitor<TContext>.OnBeforeEnter(HotChocolate.Execution.Processing.ISelection! selection, TContext context) -> TContext
override HotChocolate.Data.Projections.ProjectionVisitor<TContext>.OnBeforeLeave(HotChocolate.Execution.Processing.ISelection! selection, TContext localContext) -> TContext
override HotChocolate.Data.Projections.ProjectionVisitor<TContext>.Visit(HotChocolate.Execution.Processing.ISelection! selection, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
override HotChocolate.Data.Projections.ProjectionVisitor<TContext>.Visit(HotChocolate.Types.IOutputField! field, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
override HotChocolate.Data.Sorting.DefaultSortEnumType.Configure(HotChocolate.Data.Sorting.ISortEnumTypeDescriptor! descriptor) -> void
override HotChocolate.Data.Sorting.Expressions.QueryableAscendingSortOperationHandler.HandleOperation(HotChocolate.Data.Sorting.Expressions.QueryableSortContext! context, HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector! fieldSelector, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Data.Sorting.ISortEnumValue? sortEnumValue) -> HotChocolate.Data.Sorting.Expressions.QueryableSortOperation!
override HotChocolate.Data.Sorting.Expressions.QueryableDefaultSortFieldHandler.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Data.Sorting.ISortInputTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.ISortFieldDefinition! fieldDefinition) -> bool
override HotChocolate.Data.Sorting.Expressions.QueryableDefaultSortFieldHandler.TryHandleEnter(HotChocolate.Data.Sorting.Expressions.QueryableSortContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
override HotChocolate.Data.Sorting.Expressions.QueryableDefaultSortFieldHandler.TryHandleLeave(HotChocolate.Data.Sorting.Expressions.QueryableSortContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
override HotChocolate.Data.Sorting.Expressions.QueryableDescendingSortOperationHandler.HandleOperation(HotChocolate.Data.Sorting.Expressions.QueryableSortContext! context, HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector! fieldSelector, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Data.Sorting.ISortEnumValue? sortEnumValue) -> HotChocolate.Data.Sorting.Expressions.QueryableSortOperation!
override HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector.CompileOrderBy(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector.CompileThenBy(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
override HotChocolate.Data.Sorting.Expressions.QueryableOperationHandlerBase.CanHandle(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition! typeDefinition, HotChocolate.Data.Sorting.SortEnumValueDefinition! valueDefinition) -> bool
override HotChocolate.Data.Sorting.Expressions.QueryableOperationHandlerBase.TryHandleEnter(HotChocolate.Data.Sorting.Expressions.QueryableSortContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Data.Sorting.ISortEnumValue? sortEnumValue, HotChocolate.Language.EnumValueNode! valueNode, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
override HotChocolate.Data.Sorting.Expressions.QueryableSortProvider.ConfigureField(HotChocolate.NameString argumentName, HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> void
override HotChocolate.Data.Sorting.Expressions.QueryableSortProvider.CreateExecutor<TEntityType>(HotChocolate.NameString argumentName) -> HotChocolate.Resolvers.FieldMiddleware!
override HotChocolate.Data.Sorting.SortConvention.Complete(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
override HotChocolate.Data.Sorting.SortConvention.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Sorting.SortConventionDefinition!
override HotChocolate.Data.Sorting.SortConventionExtension.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Sorting.SortConventionDefinition!
override HotChocolate.Data.Sorting.SortConventionExtension.Merge(HotChocolate.Types.Descriptors.IConventionContext! context, HotChocolate.Types.Descriptors.Convention! convention) -> void
override HotChocolate.Data.Sorting.SortEnumType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition!
override HotChocolate.Data.Sorting.SortEnumType.TryCreateEnumValue(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition! definition, out HotChocolate.Types.IEnumValue? enumValue) -> bool
override HotChocolate.Data.Sorting.SortEnumTypeDescriptor.Definition.get -> HotChocolate.Data.Sorting.SortEnumTypeDefinition!
override HotChocolate.Data.Sorting.SortEnumTypeDescriptor.Definition.set -> void
override HotChocolate.Data.Sorting.SortEnumTypeDescriptor.OnCreateDefinition(HotChocolate.Data.Sorting.SortEnumTypeDefinition! definition) -> void
override HotChocolate.Data.Sorting.SortFieldDescriptor.OnCreateDefinition(HotChocolate.Data.Sorting.SortFieldDefinition! definition) -> void
override HotChocolate.Data.Sorting.SortInputType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition!
override HotChocolate.Data.Sorting.SortInputType.OnCompleteFields(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition, System.Collections.Generic.ICollection<HotChocolate.Types.InputField!>! fields) -> void
override HotChocolate.Data.Sorting.SortInputType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Data.Sorting.SortInputType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Data.Sorting.SortInputType<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition!
override HotChocolate.Data.Sorting.SortInputTypeDescriptor.Definition.get -> HotChocolate.Data.Sorting.SortInputTypeDefinition!
override HotChocolate.Data.Sorting.SortInputTypeDescriptor.Definition.set -> void
override HotChocolate.Data.Sorting.SortInputTypeDescriptor.OnCreateDefinition(HotChocolate.Data.Sorting.SortInputTypeDefinition! definition) -> void
override HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Data.Sorting.SortFieldDefinition!>! fields, System.Collections.Generic.ISet<System.Reflection.MemberInfo!>! handledProperties) -> void
override HotChocolate.Data.Sorting.SortProvider<TContext>.Complete(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
override HotChocolate.Data.Sorting.SortProvider<TContext>.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Sorting.SortProviderDefinition!
override HotChocolate.Data.Sorting.SortProviderExtensions<TContext>.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> HotChocolate.Data.Sorting.SortProviderDefinition!
override HotChocolate.Data.Sorting.SortProviderExtensions<TContext>.Merge(HotChocolate.Types.Descriptors.IConventionContext! context, HotChocolate.Types.Descriptors.Convention! convention) -> void
override HotChocolate.Data.Sorting.SortTypeInterceptor.CanHandle(HotChocolate.Configuration.ITypeSystemObjectContext! context) -> bool
override HotChocolate.Data.Sorting.SortTypeInterceptor.OnBeforeCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object!>! contextData) -> void
override HotChocolate.Data.Sorting.SortTypeInterceptor.OnBeforeCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object!>! contextData) -> void
override HotChocolate.Data.Sorting.SortTypeInterceptor.OnBeforeRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object!>! contextData) -> void
override HotChocolate.Data.Sorting.SortVisitor<TContext, T>.OnFieldEnter(TContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Sorting.SortVisitor<TContext, T>.OnFieldLeave(TContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Sorting.SortVisitor<TContext, T>.OnOperationEnter(TContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Data.Sorting.ISortEnumValue? sortValue, HotChocolate.Language.EnumValueNode! valueNode) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>.Enter(HotChocolate.Language.IValueNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>.Enter(HotChocolate.Language.ListValueNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>.Enter(HotChocolate.Language.ObjectFieldNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>.Leave(HotChocolate.Language.ListValueNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Sorting.SortVisitorBase<TContext, T>.Leave(HotChocolate.Language.ObjectFieldNode! node, TContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Sorting.SortVisitorBase<TContext>.Enter(HotChocolate.Language.ObjectFieldNode! node, TContext context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.Sorting.SortVisitorBase<TContext>.Leave(HotChocolate.Language.ObjectFieldNode! node, TContext context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Data.UseFilteringAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Data.UseFirstOrDefaultAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Data.UseProjectionAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Data.UseSingleOrDefaultAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Data.UseSortingAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override sealed HotChocolate.Data.Filters.FilterFieldDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Data.Filters.FilterInputType.Configure(HotChocolate.Types.IInputObjectTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Data.Filters.FilterInputType<T>.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Data.Filters.FilterInputTypeDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Data.Sorting.SortEnumType.Configure(HotChocolate.Types.IEnumTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Data.Sorting.SortFieldDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Data.Sorting.SortInputType.Configure(HotChocolate.Types.IInputObjectTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Data.Sorting.SortInputType<T>.Configure(HotChocolate.Data.Sorting.ISortInputTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Data.Sorting.SortInputTypeDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
static HotChocolate.Data.DataEnumerableExtensions.AsExecutable<T>(this System.Collections.Generic.IEnumerable<T>! source) -> HotChocolate.Data.QueryableExecutable<T>!
static HotChocolate.Data.DataEnumerableExtensions.AsExecutable<T>(this System.Linq.IQueryable<T>! source) -> HotChocolate.Data.QueryableExecutable<T>!
static HotChocolate.Data.FilterConventionDescriptorExtensions.AddDefaultOperations(this HotChocolate.Data.Filters.IFilterConventionDescriptor! descriptor) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
static HotChocolate.Data.FilterConventionDescriptorExtensions.AddDefaults(this HotChocolate.Data.Filters.IFilterConventionDescriptor! descriptor) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
static HotChocolate.Data.FilterConventionDescriptorExtensions.BindDefaultTypes(this HotChocolate.Data.Filters.IFilterConventionDescriptor! descriptor) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
static HotChocolate.Data.FilterConventionDescriptorQueryableExtensions.AddDefaultFieldHandlers(this HotChocolate.Data.Filters.IFilterProviderDescriptor<HotChocolate.Data.Filters.Expressions.QueryableFilterContext!>! descriptor) -> HotChocolate.Data.Filters.IFilterProviderDescriptor<HotChocolate.Data.Filters.Expressions.QueryableFilterContext!>!
static HotChocolate.Data.FilterConventionDescriptorQueryableExtensions.UseQueryableProvider(this HotChocolate.Data.Filters.IFilterConventionDescriptor! descriptor) -> HotChocolate.Data.Filters.IFilterConventionDescriptor!
static HotChocolate.Data.FilterDescriptorContextExtensions.GetFilterConvention(this HotChocolate.Configuration.ITypeSystemObjectContext! context, string? scope = null) -> HotChocolate.Data.Filters.IFilterConvention!
static HotChocolate.Data.FilterDescriptorContextExtensions.GetFilterConvention(this HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope = null) -> HotChocolate.Data.Filters.IFilterConvention!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.All(System.Type! type, System.Linq.Expressions.Expression! property, System.Linq.Expressions.LambdaExpression! lambda) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.Any(System.Type! type, System.Linq.Expressions.Expression! property, System.Linq.Expressions.Expression! body, params System.Linq.Expressions.ParameterExpression![]! parameterExpression) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.Any(System.Type! type, System.Linq.Expressions.Expression! property, System.Linq.Expressions.LambdaExpression! lambda) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.Any(System.Type! type, System.Linq.Expressions.Expression! property) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.Contains(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.EndsWith(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.Equals(System.Linq.Expressions.Expression! property, object? value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.GreaterThan(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.GreaterThanOrEqual(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.In(System.Linq.Expressions.Expression! property, System.Type! genericType, object! parsedValue) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.LowerThan(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.LowerThanOrEqual(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.Not(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.NotContains(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.NotEquals(System.Linq.Expressions.Expression! property, object? value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.NotNull(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.NotNullAndAlso(System.Linq.Expressions.Expression! property, System.Linq.Expressions.Expression! condition) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder.StartsWith(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Filters.Expressions.QueryableFilterVisitorContextExtensions.GetClosure(this HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context) -> HotChocolate.Data.Filters.Expressions.QueryableScope!
static HotChocolate.Data.Filters.Expressions.QueryableFilterVisitorContextExtensions.TryCreateLambda(this HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, out System.Linq.Expressions.LambdaExpression? expression) -> bool
static HotChocolate.Data.Filters.Expressions.QueryableFilterVisitorContextExtensions.TryCreateLambda<T>(this HotChocolate.Data.Filters.Expressions.QueryableFilterContext! context, out System.Linq.Expressions.Expression<T>? expression) -> bool
static HotChocolate.Data.Filters.FilterConventionDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> HotChocolate.Data.Filters.FilterConventionDescriptor!
static HotChocolate.Data.Filters.FilterFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString fieldName, string? scope) -> HotChocolate.Data.Filters.FilterFieldDescriptor!
static HotChocolate.Data.Filters.FilterFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, System.Reflection.MemberInfo! member) -> HotChocolate.Data.Filters.FilterFieldDescriptor!
static HotChocolate.Data.Filters.FilterInputTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Filters.FilterInputTypeDefinition! definition, string? scope = null) -> HotChocolate.Data.Filters.FilterInputTypeDescriptor!
static HotChocolate.Data.Filters.FilterInputTypeDescriptor.From<T>(HotChocolate.Data.Filters.FilterInputTypeDescriptor! descriptor, string? scope = null) -> HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>!
static HotChocolate.Data.Filters.FilterInputTypeDescriptor.From<T>(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Filters.FilterInputTypeDefinition! definition, string? scope = null) -> HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>!
static HotChocolate.Data.Filters.FilterInputTypeDescriptor.FromSchemaType(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! schemaType, string? scope = null) -> HotChocolate.Data.Filters.FilterInputTypeDescriptor!
static HotChocolate.Data.Filters.FilterInputTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType, string? scope = null) -> HotChocolate.Data.Filters.FilterInputTypeDescriptor!
static HotChocolate.Data.Filters.FilterInputTypeDescriptor.New<T>(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType, string? scope = null) -> HotChocolate.Data.Filters.FilterInputTypeDescriptor<T>!
static HotChocolate.Data.Filters.FilterOperationConventionDescriptor.New(int operationId) -> HotChocolate.Data.Filters.FilterOperationConventionDescriptor!
static HotChocolate.Data.Filters.FilterOperationFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, int operation, string? scope = null) -> HotChocolate.Data.Filters.FilterOperationFieldDescriptor!
static HotChocolate.Data.Filters.FilterProviderDescriptor<TContext>.New() -> HotChocolate.Data.Filters.FilterProviderDescriptor<TContext>!
static HotChocolate.Data.Filters.FilterTypeNameExtensions.Name<T>(this HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>! descriptor, System.Func<HotChocolate.Types.INamedType!, HotChocolate.NameString>! createName) -> HotChocolate.Data.Filters.IFilterInputTypeNameDependencyDescriptor<T>!
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.AddScope<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context) -> HotChocolate.Data.Filters.FilterScope<T>!
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.GetInstance<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context) -> T
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.GetLevel<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context) -> System.Collections.Generic.Queue<T>!
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.GetScope<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context) -> HotChocolate.Data.Filters.FilterScope<T>!
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.PopInstance<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context) -> T
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.PopLevel<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context) -> System.Collections.Generic.Queue<T>!
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.PopScope<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context) -> HotChocolate.Data.Filters.FilterScope<T>!
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.PushInstance<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context, T nextExpression) -> void
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.PushLevel<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context, System.Collections.Generic.Queue<T>! nextLevel) -> void
static HotChocolate.Data.Filters.FilterVisitorContextExtensions.ReportError<T>(this HotChocolate.Data.Filters.IFilterVisitorContext<T>! context, HotChocolate.IError! error) -> void
static HotChocolate.Data.ProjectionConventionDescriptorExtensions.AddDefaults(this HotChocolate.Data.Projections.IProjectionConventionDescriptor! descriptor) -> HotChocolate.Data.Projections.IProjectionConventionDescriptor!
static HotChocolate.Data.ProjectionDescriptorContextExtensions.GetProjectionConvention(this HotChocolate.Configuration.ITypeSystemObjectContext! context, string? scope = null) -> HotChocolate.Data.Projections.IProjectionConvention!
static HotChocolate.Data.ProjectionDescriptorContextExtensions.GetProjectionConvention(this HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope = null) -> HotChocolate.Data.Projections.IProjectionConvention!
static HotChocolate.Data.ProjectionProviderDescriptorExtensions.AddDefaults(this HotChocolate.Data.Projections.IProjectionProviderDescriptor! descriptor) -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
static HotChocolate.Data.ProjectionProviderDescriptorExtensions.RegisterQueryableHandler(this HotChocolate.Data.Projections.IProjectionProviderDescriptor! descriptor) -> HotChocolate.Data.Projections.IProjectionProviderDescriptor!
static HotChocolate.Data.Projections.Expressions.Handlers.ProjectionVisitorContextExtensions.GetInstance<T>(this HotChocolate.Data.Projections.IProjectionVisitorContext<T>! context) -> T
static HotChocolate.Data.Projections.Expressions.Handlers.ProjectionVisitorContextExtensions.GetScope<T>(this HotChocolate.Data.Projections.IProjectionVisitorContext<T>! context) -> HotChocolate.Data.Projections.ProjectionScope<T>!
static HotChocolate.Data.Projections.Expressions.Handlers.ProjectionVisitorContextExtensions.PopInstance<T>(this HotChocolate.Data.Projections.IProjectionVisitorContext<T>! context) -> T
static HotChocolate.Data.Projections.Expressions.Handlers.ProjectionVisitorContextExtensions.PopScope<T>(this HotChocolate.Data.Projections.IProjectionVisitorContext<T>! context) -> HotChocolate.Data.Projections.ProjectionScope<T>!
static HotChocolate.Data.Projections.Expressions.Handlers.ProjectionVisitorContextExtensions.PushInstance<T>(this HotChocolate.Data.Projections.IProjectionVisitorContext<T>! context, T nextExpression) -> void
static HotChocolate.Data.Projections.Expressions.Handlers.ProjectionVisitorContextExtensions.ReportError<T>(this HotChocolate.Data.Projections.IProjectionVisitorContext<T>! context, HotChocolate.IError! error) -> void
static HotChocolate.Data.Projections.Expressions.QueryableProjectionContextExtensions.AddScope(this HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context, System.Type! runtimeType) -> HotChocolate.Data.Projections.Expressions.QueryableProjectionScope!
static HotChocolate.Data.Projections.Expressions.QueryableProjectionContextExtensions.Project<T>(this HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! context) -> System.Linq.Expressions.Expression<System.Func<T, T>!>!
static HotChocolate.Data.Projections.Expressions.QueryableProjectionContextExtensions.TryGetQueryableScope(this HotChocolate.Data.Projections.Expressions.QueryableProjectionContext! ctx, out HotChocolate.Data.Projections.Expressions.QueryableProjectionScope? scope) -> bool
static HotChocolate.Data.Projections.Expressions.QueryableProjectionScopeExtensions.CreateMemberInit(this HotChocolate.Data.Projections.Expressions.QueryableProjectionScope! scope) -> System.Linq.Expressions.MemberInitExpression!
static HotChocolate.Data.Projections.Expressions.QueryableProjectionScopeExtensions.CreateMemberInitLambda(this HotChocolate.Data.Projections.Expressions.QueryableProjectionScope! scope) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Projections.Expressions.QueryableProjectionScopeExtensions.CreateSelection(this HotChocolate.Data.Projections.Expressions.QueryableProjectionScope! scope, System.Linq.Expressions.Expression! source, System.Type! sourceType) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Projections.Expressions.QueryableProjectionScopeExtensions.Project<T>(this HotChocolate.Data.Projections.Expressions.QueryableProjectionScope! scope) -> System.Linq.Expressions.Expression<System.Func<T, T>!>!
static HotChocolate.Data.Projections.Expressions.TypeExtensions.UnwrapRuntimeType(this HotChocolate.Types.IType! type) -> System.Type!
static HotChocolate.Data.Projections.ProjectionConventionDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> HotChocolate.Data.Projections.ProjectionConventionDescriptor!
static HotChocolate.Data.Projections.ProjectionProviderDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> HotChocolate.Data.Projections.ProjectionProviderDescriptor!
static HotChocolate.Data.Projections.ProjectionSelection.From(HotChocolate.Execution.Processing.Selection! selection, HotChocolate.Data.Projections.IProjectionFieldHandler! handler) -> HotChocolate.Data.Projections.ProjectionSelection!
static HotChocolate.Data.Projections.SelectionVisitor.Break.get -> HotChocolate.Data.Projections.ISelectionVisitorAction!
static HotChocolate.Data.Projections.SelectionVisitor.Continue.get -> HotChocolate.Data.Projections.ISelectionVisitorAction!
static HotChocolate.Data.Projections.SelectionVisitor.Skip.get -> HotChocolate.Data.Projections.ISelectionVisitorAction!
static HotChocolate.Data.Projections.SelectionVisitor.SkipAndLeave.get -> HotChocolate.Data.Projections.ISelectionVisitorAction!
static HotChocolate.Data.SortConventionDescriptorExtensions.AddDefaultOperations(this HotChocolate.Data.Sorting.ISortConventionDescriptor! descriptor) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
static HotChocolate.Data.SortConventionDescriptorExtensions.AddDefaults(this HotChocolate.Data.Sorting.ISortConventionDescriptor! descriptor) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
static HotChocolate.Data.SortConventionDescriptorExtensions.BindDefaultTypes(this HotChocolate.Data.Sorting.ISortConventionDescriptor! descriptor) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
static HotChocolate.Data.SortConventionDescriptorQueryableExtensions.AddDefaultFieldHandlers(this HotChocolate.Data.Sorting.ISortProviderDescriptor<HotChocolate.Data.Sorting.Expressions.QueryableSortContext!>! descriptor) -> HotChocolate.Data.Sorting.ISortProviderDescriptor<HotChocolate.Data.Sorting.Expressions.QueryableSortContext!>!
static HotChocolate.Data.SortConventionDescriptorQueryableExtensions.UseQueryableProvider(this HotChocolate.Data.Sorting.ISortConventionDescriptor! descriptor) -> HotChocolate.Data.Sorting.ISortConventionDescriptor!
static HotChocolate.Data.SortDescriptorContextExtensions.GetSortConvention(this HotChocolate.Configuration.ITypeSystemObjectContext! context, string? scope = null) -> HotChocolate.Data.Sorting.ISortConvention!
static HotChocolate.Data.SortDescriptorContextExtensions.GetSortConvention(this HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope = null) -> HotChocolate.Data.Sorting.ISortConvention!
static HotChocolate.Data.Sorting.Expressions.ExpressionExtensions.GetEnumerableKind(this System.Linq.Expressions.Expression! source) -> System.Type!
static HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector.New(System.Type! initialType) -> HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector!
static HotChocolate.Data.Sorting.Expressions.QueryableSortVisitorContextExtensions.Compile(this HotChocolate.Data.Sorting.Expressions.QueryableSortContext! context, System.Linq.Expressions.Expression! source) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Sorting.Expressions.QueryableSortVisitorContextExtensions.Sort<TSource>(this HotChocolate.Data.Sorting.Expressions.QueryableSortContext! context, System.Linq.IQueryable<TSource>! source) -> System.Linq.IQueryable<TSource>!
static HotChocolate.Data.Sorting.Expressions.SortExpressionBuilder.IfNullThenDefault(System.Linq.Expressions.Expression! left, System.Linq.Expressions.Expression! right, System.Linq.Expressions.DefaultExpression! defaultExpression) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Sorting.Expressions.SortExpressionBuilder.IsNull(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
static HotChocolate.Data.Sorting.IgnoreSortFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, System.Reflection.MemberInfo! member) -> HotChocolate.Data.Sorting.IgnoreSortFieldDescriptor!
static HotChocolate.Data.Sorting.SortConventionDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope) -> HotChocolate.Data.Sorting.SortConventionDescriptor!
static HotChocolate.Data.Sorting.SortEnumTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Sorting.SortEnumTypeDefinition! definition) -> HotChocolate.Data.Sorting.SortEnumTypeDescriptor!
static HotChocolate.Data.Sorting.SortEnumTypeDescriptor.FromSchemaType(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! schemaType, string? scope) -> HotChocolate.Data.Sorting.SortEnumTypeDescriptor!
static HotChocolate.Data.Sorting.SortEnumTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! type, string? scope) -> HotChocolate.Data.Sorting.SortEnumTypeDescriptor!
static HotChocolate.Data.Sorting.SortEnumValueDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, int value) -> HotChocolate.Data.Sorting.SortEnumValueDescriptor!
static HotChocolate.Data.Sorting.SortFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString fieldName, string? scope) -> HotChocolate.Data.Sorting.SortFieldDescriptor!
static HotChocolate.Data.Sorting.SortFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, System.Reflection.MemberInfo! member) -> HotChocolate.Data.Sorting.SortFieldDescriptor!
static HotChocolate.Data.Sorting.SortInputTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Sorting.SortInputTypeDefinition! definition, string? scope = null) -> HotChocolate.Data.Sorting.SortInputTypeDescriptor!
static HotChocolate.Data.Sorting.SortInputTypeDescriptor.From<T>(HotChocolate.Data.Sorting.SortInputTypeDescriptor! descriptor, string? scope = null) -> HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>!
static HotChocolate.Data.Sorting.SortInputTypeDescriptor.From<T>(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Data.Sorting.SortInputTypeDefinition! definition, string? scope = null) -> HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>!
static HotChocolate.Data.Sorting.SortInputTypeDescriptor.FromSchemaType(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! schemaType, string? scope = null) -> HotChocolate.Data.Sorting.SortInputTypeDescriptor!
static HotChocolate.Data.Sorting.SortInputTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType, string? scope = null) -> HotChocolate.Data.Sorting.SortInputTypeDescriptor!
static HotChocolate.Data.Sorting.SortInputTypeDescriptor.New<T>(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType, string? scope = null) -> HotChocolate.Data.Sorting.SortInputTypeDescriptor<T>!
static HotChocolate.Data.Sorting.SortOperationConventionDescriptor.New(int operationId) -> HotChocolate.Data.Sorting.SortOperationConventionDescriptor!
static HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>.New() -> HotChocolate.Data.Sorting.SortProviderDescriptor<TContext>!
static HotChocolate.Data.Sorting.SortTypeNameExtensions.Name<T>(this HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>! descriptor, System.Func<HotChocolate.Types.INamedType!, HotChocolate.NameString>! createName) -> HotChocolate.Data.Sorting.ISortInputTypeNameDependencyDescriptor<T>!
static HotChocolate.Data.Sorting.SortVisitorContextExtensions.GetInstance<T>(this HotChocolate.Data.Sorting.ISortVisitorContext<T>! context) -> T
static HotChocolate.Data.Sorting.SortVisitorContextExtensions.PopInstance<T>(this HotChocolate.Data.Sorting.ISortVisitorContext<T>! context) -> T
static HotChocolate.Data.Sorting.SortVisitorContextExtensions.PushInstance<T>(this HotChocolate.Data.Sorting.ISortVisitorContext<T>! context, T nextExpression) -> void
static HotChocolate.Data.Sorting.SortVisitorContextExtensions.ReportError<T>(this HotChocolate.Data.Sorting.ISortVisitorContext<T>! context, HotChocolate.IError! error) -> void
static HotChocolate.FilterSchemaBuilderExtensions.AddFiltering(this HotChocolate.ISchemaBuilder! builder, string? name = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.FilterSchemaBuilderExtensions.AddFiltering(this HotChocolate.ISchemaBuilder! builder, System.Action<HotChocolate.Data.Filters.IFilterConventionDescriptor!>! configure, string? name = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.FilterSchemaBuilderExtensions.AddFiltering<TConvention>(this HotChocolate.ISchemaBuilder! builder, string? name = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.ProjectionsSchemaBuilderExtensions.AddProjections(this HotChocolate.ISchemaBuilder! builder, System.Action<HotChocolate.Data.Projections.IProjectionConventionDescriptor!>! configure, string? name = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.ProjectionsSchemaBuilderExtensions.AddProjections(this HotChocolate.ISchemaBuilder! builder) -> HotChocolate.ISchemaBuilder!
static HotChocolate.ProjectionsSchemaBuilderExtensions.AddProjections<TConvention>(this HotChocolate.ISchemaBuilder! builder, string? name = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SortingSchemaBuilderExtensions.AddSorting(this HotChocolate.ISchemaBuilder! builder, string? name = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SortingSchemaBuilderExtensions.AddSorting(this HotChocolate.ISchemaBuilder! builder, System.Action<HotChocolate.Data.Sorting.ISortConventionDescriptor!>! configure, string? name = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SortingSchemaBuilderExtensions.AddSorting<TConvention>(this HotChocolate.ISchemaBuilder! builder, string? name = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.Types.FilterFieldDescriptorExtensions.MakeNullable(this HotChocolate.Data.Filters.IFilterFieldDescriptor! descriptor) -> void
static HotChocolate.Types.FilterFieldDescriptorExtensions.MakeNullable(this HotChocolate.Data.Filters.IFilterOperationFieldDescriptor! descriptor) -> void
static HotChocolate.Types.FilterObjectFieldDescriptorExtensions.UseFiltering(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.FilterObjectFieldDescriptorExtensions.UseFiltering(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type! type, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.FilterObjectFieldDescriptorExtensions.UseFiltering<T>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.FilterObjectFieldDescriptorExtensions.UseFiltering<T>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Action<HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>!>! configure, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ProjectionObjectFieldDescriptorExtensions.IsProjected(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, bool isProjected = true) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ProjectionObjectFieldDescriptorExtensions.UseProjection(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ProjectionObjectFieldDescriptorExtensions.UseProjection(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type? type, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ProjectionObjectFieldDescriptorExtensions.UseProjection<T>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.SingleOrDefaultObjectFieldDescriptorExtensions.UseFirstOrDefault(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.SingleOrDefaultObjectFieldDescriptorExtensions.UseSingleOrDefault(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.SortObjectFieldDescriptorExtensions.UseSorting(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.SortObjectFieldDescriptorExtensions.UseSorting(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type! type, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.SortObjectFieldDescriptorExtensions.UseSorting<T>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, string? scope = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions.AddFiltering(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? name = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions.AddFiltering(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Data.Filters.IFilterConventionDescriptor!>! configure, string? name = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions.AddFiltering<TConvention>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? name = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions.AddProjections(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? name = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions.AddProjections(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Data.Projections.IProjectionConventionDescriptor!>! configure, string? name = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions.AddProjections<TConvention>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? name = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions.AddSorting(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? name = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions.AddSorting(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Data.Sorting.ISortConventionDescriptor!>! configure, string? name = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions.AddSorting<TConvention>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? name = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static readonly HotChocolate.Data.Filters.Expressions.QueryableFilterProvider.ContextArgumentNameKey -> string!
static readonly HotChocolate.Data.Filters.Expressions.QueryableFilterProvider.ContextValueNodeKey -> string!
static readonly HotChocolate.Data.Filters.Expressions.QueryableFilterProvider.ContextVisitFilterArgumentKey -> string!
static readonly HotChocolate.Data.Filters.Expressions.QueryableFilterProvider.SkipFilteringKey -> string!
static readonly HotChocolate.Data.Filters.FilterConventionDefinition.DefaultArgumentName -> string!
static readonly HotChocolate.Data.Sorting.SortConventionDefinition.DefaultArgumentName -> string!
virtual HotChocolate.Data.Filters.Expressions.QueryableDataOperationHandler.Operation.get -> int
virtual HotChocolate.Data.Filters.Expressions.QueryableFilterProvider.Visitor.get -> HotChocolate.Data.Filters.FilterVisitor<HotChocolate.Data.Filters.Expressions.QueryableFilterContext!, System.Linq.Expressions.Expression!>!
virtual HotChocolate.Data.Filters.FilterConvention.Configure(HotChocolate.Data.Filters.IFilterConventionDescriptor! descriptor) -> void
virtual HotChocolate.Data.Filters.FilterConvention.ConfigureField(HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> void
virtual HotChocolate.Data.Filters.FilterConvention.GetFieldDescription(System.Reflection.MemberInfo! member) -> string?
virtual HotChocolate.Data.Filters.FilterConvention.GetFieldName(System.Reflection.MemberInfo! member) -> HotChocolate.NameString
virtual HotChocolate.Data.Filters.FilterConvention.GetFieldType(System.Reflection.MemberInfo! member) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
virtual HotChocolate.Data.Filters.FilterConvention.GetTypeDescription(System.Type! runtimeType) -> string?
virtual HotChocolate.Data.Filters.FilterConvention.GetTypeName(System.Type! runtimeType) -> HotChocolate.NameString
virtual HotChocolate.Data.Filters.FilterConventionExtension.Configure(HotChocolate.Data.Filters.IFilterConventionDescriptor! descriptor) -> void
virtual HotChocolate.Data.Filters.FilterFieldHandler<TContext, T>.TryHandleEnter(TContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
virtual HotChocolate.Data.Filters.FilterFieldHandler<TContext, T>.TryHandleLeave(TContext! context, HotChocolate.Data.Filters.IFilterField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
virtual HotChocolate.Data.Filters.FilterInputType.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor! descriptor) -> void
virtual HotChocolate.Data.Filters.FilterInputType<T>.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor<T>! descriptor) -> void
virtual HotChocolate.Data.Filters.FilterInputTypeDescriptor.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Data.Filters.FilterFieldDefinition!>! fields, System.Collections.Generic.ISet<System.Reflection.MemberInfo!>! handledProperties) -> void
virtual HotChocolate.Data.Filters.FilterOperationHandler<TContext, T>.TryHandleOperation(TContext! context, HotChocolate.Data.Filters.IFilterOperationField! field, HotChocolate.Language.ObjectFieldNode! node, out T result) -> bool
virtual HotChocolate.Data.Filters.FilterProvider<TContext>.Configure(HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>! descriptor) -> void
virtual HotChocolate.Data.Filters.FilterProvider<TContext>.ConfigureField(HotChocolate.NameString argumentName, HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> void
virtual HotChocolate.Data.Filters.FilterProviderExtensions<TContext>.Configure(HotChocolate.Data.Filters.IFilterProviderDescriptor<TContext>! descriptor) -> void
virtual HotChocolate.Data.Filters.FilterVisitorContext<T>.CreateScope() -> HotChocolate.Data.Filters.FilterScope<T>!
virtual HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>.OnAfterEnter(T context, HotChocolate.Execution.Processing.ISelection! selection, HotChocolate.Data.Projections.ISelectionVisitorAction! action) -> T
virtual HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>.OnAfterLeave(T context, HotChocolate.Execution.Processing.ISelection! selection, HotChocolate.Data.Projections.ISelectionVisitorAction! action) -> T
virtual HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>.OnBeforeEnter(T context, HotChocolate.Execution.Processing.ISelection! selection) -> T
virtual HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>.OnBeforeLeave(T context, HotChocolate.Execution.Processing.ISelection! selection) -> T
virtual HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler<T>.Wrap(HotChocolate.Data.Projections.IProjectionFieldInterceptor! interceptor) -> HotChocolate.Data.Projections.IProjectionFieldHandler!
virtual HotChocolate.Data.Projections.ProjectionConvention.Configure(HotChocolate.Data.Projections.IProjectionConventionDescriptor! descriptor) -> void
virtual HotChocolate.Data.Projections.ProjectionConventionExtension.Configure(HotChocolate.Data.Projections.IProjectionConventionDescriptor! descriptor) -> void
virtual HotChocolate.Data.Projections.ProjectionProvider.Configure(HotChocolate.Data.Projections.IProjectionProviderDescriptor! descriptor) -> void
virtual HotChocolate.Data.Projections.ProjectionProviderExtension.Configure(HotChocolate.Data.Projections.IProjectionProviderDescriptor! descriptor) -> void
virtual HotChocolate.Data.Projections.ProjectionVisitor<TContext>.Visit(TContext context) -> void
virtual HotChocolate.Data.Projections.SelectionVisitor.DefaultAction.get -> HotChocolate.Data.Projections.ISelectionVisitorAction!
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.Enter(HotChocolate.Execution.Processing.ISelection! selection, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.Enter(HotChocolate.Types.IOutputField! field, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.Leave(HotChocolate.Execution.Processing.ISelection! selection, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.Leave(HotChocolate.Types.IOutputField! field, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.OnAfterEnter(HotChocolate.Execution.Processing.ISelection! selection, TContext localContext, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> TContext
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.OnAfterEnter(HotChocolate.Types.IOutputField! field, TContext localContext, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> TContext
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.OnAfterLeave(HotChocolate.Execution.Processing.ISelection! selection, TContext localContext, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> TContext
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.OnAfterLeave(HotChocolate.Types.IOutputField! field, TContext localContext, HotChocolate.Data.Projections.ISelectionVisitorAction! result) -> TContext
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.OnBeforeEnter(HotChocolate.Execution.Processing.ISelection! selection, TContext context) -> TContext
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.OnBeforeEnter(HotChocolate.Types.IOutputField! field, TContext context) -> TContext
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.OnBeforeLeave(HotChocolate.Execution.Processing.ISelection! selection, TContext localContext) -> TContext
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.OnBeforeLeave(HotChocolate.Types.IOutputField! field, TContext localContext) -> TContext
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.Visit(HotChocolate.Execution.Processing.ISelection! selection, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.Visit(HotChocolate.Types.IOutputField! field, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.VisitChildren(HotChocolate.Execution.Processing.ISelection! selection, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
virtual HotChocolate.Data.Projections.SelectionVisitor<TContext>.VisitChildren(HotChocolate.Types.IOutputField! field, TContext context) -> HotChocolate.Data.Projections.ISelectionVisitorAction!
virtual HotChocolate.Data.QueryableExecutable<T>.FirstOrDefaultAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<object?>
virtual HotChocolate.Data.QueryableExecutable<T>.Print() -> string!
virtual HotChocolate.Data.QueryableExecutable<T>.SingleOrDefaultAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<object?>
virtual HotChocolate.Data.QueryableExecutable<T>.ToListAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.IList!>
virtual HotChocolate.Data.QueryableExecutable<T>.WithSource(System.Linq.IQueryable<T>! source) -> HotChocolate.Data.QueryableExecutable<T>!
virtual HotChocolate.Data.Sorting.Expressions.QueryableSortProvider.Visitor.get -> HotChocolate.Data.Sorting.SortVisitor<HotChocolate.Data.Sorting.Expressions.QueryableSortContext!, HotChocolate.Data.Sorting.Expressions.QueryableSortOperation!>!
virtual HotChocolate.Data.Sorting.SortConvention.Configure(HotChocolate.Data.Sorting.ISortConventionDescriptor! descriptor) -> void
virtual HotChocolate.Data.Sorting.SortConvention.ConfigureField(HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> void
virtual HotChocolate.Data.Sorting.SortConvention.GetFieldDescription(System.Reflection.MemberInfo! member) -> string?
virtual HotChocolate.Data.Sorting.SortConvention.GetFieldName(System.Reflection.MemberInfo! member) -> HotChocolate.NameString
virtual HotChocolate.Data.Sorting.SortConvention.GetFieldType(System.Reflection.MemberInfo! member) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
virtual HotChocolate.Data.Sorting.SortConvention.GetTypeDescription(System.Type! runtimeType) -> string?
virtual HotChocolate.Data.Sorting.SortConvention.GetTypeName(System.Type! runtimeType) -> HotChocolate.NameString
virtual HotChocolate.Data.Sorting.SortConventionExtension.Configure(HotChocolate.Data.Sorting.ISortConventionDescriptor! descriptor) -> void
virtual HotChocolate.Data.Sorting.SortEnumType.Configure(HotChocolate.Data.Sorting.ISortEnumTypeDescriptor! descriptor) -> void
virtual HotChocolate.Data.Sorting.SortFieldHandler<TContext, T>.TryHandleEnter(TContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
virtual HotChocolate.Data.Sorting.SortFieldHandler<TContext, T>.TryHandleLeave(TContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Language.ObjectFieldNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
virtual HotChocolate.Data.Sorting.SortInputType.Configure(HotChocolate.Data.Sorting.ISortInputTypeDescriptor! descriptor) -> void
virtual HotChocolate.Data.Sorting.SortInputType<T>.Configure(HotChocolate.Data.Sorting.ISortInputTypeDescriptor<T>! descriptor) -> void
virtual HotChocolate.Data.Sorting.SortInputTypeDescriptor.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Data.Sorting.SortFieldDefinition!>! fields, System.Collections.Generic.ISet<System.Reflection.MemberInfo!>! handledProperties) -> void
virtual HotChocolate.Data.Sorting.SortOperationHandler<TContext, T>.TryHandleEnter(TContext! context, HotChocolate.Data.Sorting.ISortField! field, HotChocolate.Data.Sorting.ISortEnumValue? sortValue, HotChocolate.Language.EnumValueNode! node, out HotChocolate.Language.Visitors.ISyntaxVisitorAction? action) -> bool
virtual HotChocolate.Data.Sorting.SortProvider<TContext>.Configure(HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>! descriptor) -> void
virtual HotChocolate.Data.Sorting.SortProvider<TContext>.ConfigureField(HotChocolate.NameString argumentName, HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> void
virtual HotChocolate.Data.Sorting.SortProviderExtensions<TContext>.Configure(HotChocolate.Data.Sorting.ISortProviderDescriptor<TContext>! descriptor) -> void
