schema {
  query: QueryType
  mutation: MutationType
}

"""
This is a description
of the `Foo` type.
"""
type Foo implements Bar & Baz {
  one_abc: Type
  """
  This is a description of the `two` field.
  """
  two_abc("""
  This is a description of the `argument` argument.
  """ argument: InputType!): Type
  three_abc(argument: InputType other: String): Int
  four_abc(argument: String = "string"): String
  five_abc(argument: [String] = [ "string", "string" ]): String
  six_abc(argument: InputType = { key: "value" }): Type
  seven_abc(argument: Int): Type
}

type AnnotatedObject @onObject(arg: "value") {
  annotatedField(arg: Type = "default" @onArg): Type @onField
}

type UndefinedType {

}

extend type Foo {
  seven(argument: [String]): Type
}

extend type Foo @onType {

}

interface Bar {
  one: Type
  four(argument: String = "string"): String
}

interface AnnotatedInterface @onInterface {
  annotatedField(arg: Type @onArg): Type @onField
}

interface UndefinedInterface {

}

extend interface Bar {
  two(argument: InputType!): Type
}

extend interface Bar @onInterface {

}

union Feed = Story | Article | Advert

union AnnotatedUnion @onUnion = A | B

union AnnotatedUnionTwo @onUnion = A | B

union UndefinedUnion = 

extend union Feed = Photo | Video

extend union Feed @onUnion = 

scalar CustomScalar

scalar AnnotatedScalar @onScalar

extend scalar CustomScalar @onScalar

enum Site {
  DESKTOP
  MOBILE
}

enum AnnotatedEnum @onEnum {
  ANNOTATED_VALUE @onEnumValue
  OTHER_VALUE
}

enum UndefinedEnum {

}

extend enum Site {
  VR
}

extend enum Site @onEnum {

}

input InputType {
  key: String!
  answer: Int = 42
}

input AnnotatedInput @onInputObject {
  annotatedField: Type @onField
}

input UndefinedInput {

}

extend input InputType {
  other: Float = 1.23e4
}

extend input InputType @onInputObject {

}

directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @skip2(if: Boolean!) repeatable on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @include2(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

extend schema @onSchema {

}

extend schema @onSchema {
  subscription: SubscriptionType
}
