schema {
  query: Query
}

type ListItem {
  id: String
  foo: String
}

type Query {
  root(where: TypeWithListFilterInput): [TypeWithList]
  rootExecutable(where: TypeWithListFilterInput): [TypeWithList]
}

type TypeWithList {
  id: String
  list: [ListItem!]
}

input ListFilterInputTypeOfListItemFilterInput {
  none: ListItemFilterInput
  some: ListItemFilterInput
  any: Boolean
}

input ListItemFilterInput {
  and: [ListItemFilterInput!]
  or: [ListItemFilterInput!]
  id: StringOperationFilterInput
  foo: StringOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input TypeWithListFilterInput {
  and: [TypeWithListFilterInput!]
  or: [TypeWithListFilterInput!]
  id: StringOperationFilterInput
  list: ListFilterInputTypeOfListItemFilterInput
}