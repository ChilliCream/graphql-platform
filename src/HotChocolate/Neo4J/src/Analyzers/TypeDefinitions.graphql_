type Movie @operation(operations: NONE) {
  title: String
  year: Int @filterable
  imdbRating: Float
  genres: [Genre]
    @relationship(type: "IN_GENRE", direction: OUT)
    @paging(kind: NONE, maxPageSize: 10)
    @filtering
}

type Person @typeName(name: "Foo" pluralName: "People") {
  name: String
  movies: [Movie]
    @relationship(type: "IN_GENRE", direction: OUT)
}

type Genre {
  name: String
  movies: [Foo]
}

union Foo
  @relationship(type: "IN_Movie", direction: IN)
  @relationship(type: "IN_Person", direction: IN)
  = Movie | Person



#settings would be annotated to the schema and translate directly into schema options
schema @paging(kind: CURSOR, defaultPageSize: 30) @filtering @operation(operations: READ) @filterable(operations: NONE) {
  query: Query
}

extend scalar Int @filterable(operations: EQ)

#repeatable
directive @relationship(type: String!, direction: _RelationshipDirection)  on FIELD_DEFINITION

directive @typeName(name: String, pluralName: String) on OBJECT

# directive @paging(kind: _PagingKind, defaultPageSize: Int, maxPageSize: Int, includeTotalCount: Int) on FIELD_DEFINITION | SCHEMA

# directive @filterable(operations: [_FilterOperation!]) on FIELD_DEFINITION | SCHEMA | SCALAR

# directive @filtering on FIELD_DEFINITION | SCHEMA

# directive @sorting on FIELD_DEFINITION | SCHEMA

# directive @operation(operations: [_OperationKind]) on OBJECT | SCHEMA

