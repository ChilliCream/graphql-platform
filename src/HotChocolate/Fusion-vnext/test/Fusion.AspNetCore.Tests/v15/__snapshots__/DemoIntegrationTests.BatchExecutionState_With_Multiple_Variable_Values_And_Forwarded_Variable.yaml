name: BatchExecutionState_With_Multiple_Variable_Values_And_Forwarded_Variable
request:
  document: >-
    query(
      $arg1: String
      $arg2: String
    ) {
      userBySlug(slug: "me") {
        feedbacks {
          edges {
            node {
              feedback {
                buyer {
                  relativeUrl(arg: $arg1)
                  displayName(arg: $arg2)
                }
              }
            }
          }
        }
      }
    }
  variables: >-
    {
      "arg1": "abc",
      "arg2": "def"
    }
response: >-
  {
    "data": {
      "userBySlug": {
        "feedbacks": {
          "edges": [
            {
              "node": {
                "feedback": {
                  "buyer": {
                    "relativeUrl": "User: VXNlcjoxMw==",
                    "displayName": "User: VXNlcjoxMw=="
                  }
                }
              }
            },
            {
              "node": {
                "feedback": {
                  "buyer": {
                    "relativeUrl": "User: VXNlcjoxMg==",
                    "displayName": "User: VXNlcjoxMg=="
                  }
                }
              }
            },
            {
              "node": {
                "feedback": {
                  "buyer": {
                    "relativeUrl": "User: VXNlcjoxMQ==",
                    "displayName": "User: VXNlcjoxMQ=="
                  }
                }
              }
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface Node {
        id: ID!
      }
      
      type Query {
        node(id: ID!): Node @lookup
        nodes(ids: [ID!]!): [Node]!
      }
      
      type User implements Node {
        id: ID!
        displayName(arg: String): String!
      }
    interactions:
      - request: {"query":"query Op_b1ca18eb_4(\n  $arg2: String\n  $__fusion_3_id: ID!\n) {\n  node(id: $__fusion_3_id) {\n    __typename\n    ... on User {\n      displayName(arg: $arg2)\n    }\n  }\n}","variables":[{"arg2":"def","__fusion_3_id":"VXNlcjoxMw=="},{"arg2":"def","__fusion_3_id":"VXNlcjoxMg=="},{"arg2":"def","__fusion_3_id":"VXNlcjoxMQ=="}]}
        response: {"variableIndex":0,"data":{"node":{"__typename":"User","displayName":"User: VXNlcjoxMw=="}}}
{"variableIndex":1,"data":{"node":{"__typename":"User","displayName":"User: VXNlcjoxMg=="}}}
{"variableIndex":2,"data":{"node":{"__typename":"User","displayName":"User: VXNlcjoxMQ=="}}}

  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      interface Node {
        id: ID!
      }
      
      type Query {
        node(id: ID!): Node @lookup
        nodes(ids: [ID!]!): [Node]!
        userBySlug(slug: String!): User
      }
      
      type User implements Node {
        relativeUrl(arg: String): String!
        id: ID!
      }
    interactions:
      - request: {"query":"query Op_b1ca18eb_1 {\n  userBySlug(slug: \u0022me\u0022) {\n    id\n  }\n}"}
        response: {"data":{"userBySlug":{"id":"VXNlcjox"}}}
      - request: {"query":"query Op_b1ca18eb_3(\n  $arg1: String\n  $__fusion_2_id: ID!\n) {\n  node(id: $__fusion_2_id) {\n    __typename\n    ... on User {\n      relativeUrl(arg: $arg1)\n    }\n  }\n}","variables":[{"arg1":"abc","__fusion_2_id":"VXNlcjoxMw=="},{"arg1":"abc","__fusion_2_id":"VXNlcjoxMg=="},{"arg1":"abc","__fusion_2_id":"VXNlcjoxMQ=="}]}
        response: {"variableIndex":0,"data":{"node":{"__typename":"User","relativeUrl":"User: VXNlcjoxMw=="}}}
{"variableIndex":1,"data":{"node":{"__typename":"User","relativeUrl":"User: VXNlcjoxMg=="}}}
{"variableIndex":2,"data":{"node":{"__typename":"User","relativeUrl":"User: VXNlcjoxMQ=="}}}

  - name: C
    schema: >-
      schema {
        query: Query
      }
      
      interface Node {
        id: ID!
      }
      
      type FeedbacksConnection {
        edges: [FeedbacksEdge!]
      }
      
      type FeedbacksEdge {
        node: ResaleFeedback!
      }
      
      type Query {
        node(id: ID!): Node @lookup
        nodes(ids: [ID!]!): [Node]!
      }
      
      type ResaleFeedback implements Node {
        feedback: ResaleSurveyFeedback
        id: ID!
      }
      
      type ResaleSurveyFeedback {
        buyer: User
      }
      
      type User implements Node {
        id: ID!
        feedbacks: FeedbacksConnection
      }
    interactions:
      - request: {"query":"query Op_b1ca18eb_2(\n  $__fusion_1_id: ID!\n) {\n  node(id: $__fusion_1_id) {\n    __typename\n    ... on User {\n      feedbacks {\n        edges {\n          node {\n            feedback {\n              buyer {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}","variables":{"__fusion_1_id":"VXNlcjox"}}
        response: {"data":{"node":{"__typename":"User","feedbacks":{"edges":[{"node":{"feedback":{"buyer":{"id":"VXNlcjoxMw=="}}}},{"node":{"feedback":{"buyer":{"id":"VXNlcjoxMg=="}}}},{"node":{"feedback":{"buyer":{"id":"VXNlcjoxMQ=="}}}}]}}}}
