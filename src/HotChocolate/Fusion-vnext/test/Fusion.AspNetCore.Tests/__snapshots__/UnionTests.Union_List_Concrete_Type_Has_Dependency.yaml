name: Union_List_Concrete_Type_Has_Dependency
request:
  document: >-
    query testQuery {
      posts {
        ... on Photo {
          subgraph2
        }
        ... on Discussion {
          subgraph1
        }
      }
    }
response: >-
  {
    "data": {
      "posts": [
        {
          "subgraph2": "Photo: UGhvdG86MQ=="
        },
        {
          "subgraph1": "Discussion: RGlzY3Vzc2lvbjoy"
        },
        {
          "subgraph2": "Photo: UGhvdG86Mw=="
        }
      ]
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "32d20b4c5d678c9f56370dc53ef4ee3eaa5623fbdf705d4acaffdd02422182f9",
          "operation": {
            "name": "testQuery",
            "kind": "Query",
            "document": "query testQuery {\n  posts {\n    __typename @fusion__requirement\n    ... on Photo {\n      subgraph2\n      id @fusion__requirement\n    }\n    ... on Discussion {\n      subgraph1\n    }\n  }\n}",
            "id": "7e81ce9e643ab646415b814b9eb5ddbe",
            "hash": "7e81ce9e643ab646415b814b9eb5ddbe",
            "shortHash": "7e81ce9e"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_7e81ce9e_1",
                "kind": "Query",
                "document": "query testQuery_7e81ce9e_1 {\n  posts {\n    __typename\n    ... on Photo {\n      id\n    }\n    ... on Discussion {\n      subgraph1\n    }\n  }\n}",
                "hash": "0a7e3f476896585351fe1f2db0c85f7410b87be94e4deaba0c90fd63010bcf83",
                "shortHash": "0a7e3f47"
              },
              "responseNames": [
                "posts"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_7e81ce9e_2",
                "kind": "Query",
                "document": "query testQuery_7e81ce9e_2(\n  $__fusion_1_id: ID!\n) {\n  photoById(id: $__fusion_1_id) {\n    subgraph2\n  }\n}",
                "hash": "811773e2ecfd5ae2a0fa28c70f9f923b5ccb8fde0db6787bd7f6a6b9dbbbc3b0",
                "shortHash": "811773e2"
              },
              "responseNames": [
                "subgraph2"
              ],
              "source": "$.photoById",
              "target": "$.posts\u003CPhoto\u003E",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "ID!",
                  "path": "$.posts\u003CPhoto\u003E",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      type Discussion {
        id: ID!
        subgraph1: String
      }
      
      type Photo @key(fields: "id") {
        id: ID!
      }
      
      type Query {
        posts: [Post]
      }
      
      union Post = Photo | Discussion
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_7e81ce9e_1 {\n  posts {\n    __typename\n    ... on Photo {\n      id\n    }\n    ... on Discussion {\n      subgraph1\n    }\n  }\n}"}
        response: {"data":{"posts":[{"__typename":"Photo","id":"UGhvdG86MQ=="},{"__typename":"Discussion","subgraph1":"Discussion: RGlzY3Vzc2lvbjoy"},{"__typename":"Photo","id":"UGhvdG86Mw=="}]}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Photo @key(fields: "id") {
        id: ID!
        subgraph2: String!
      }
      
      type Query {
        photoById(id: ID!): Photo @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_7e81ce9e_2(\n  $__fusion_1_id: ID!\n) {\n  photoById(id: $__fusion_1_id) {\n    subgraph2\n  }\n}","variables":[{"__fusion_1_id":"UGhvdG86MQ=="},{"__fusion_1_id":"UGhvdG86Mw=="}]}
        response: {"variableIndex":0,"data":{"photoById":{"subgraph2":"Photo: UGhvdG86MQ=="}}}
{"variableIndex":1,"data":{"photoById":{"subgraph2":"Photo: UGhvdG86Mw=="}}}

