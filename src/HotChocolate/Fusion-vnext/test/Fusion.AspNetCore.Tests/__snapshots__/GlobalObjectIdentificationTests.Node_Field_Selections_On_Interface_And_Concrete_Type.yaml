name: Node_Field_Selections_On_Interface_And_Concrete_Type
request:
  document: >-
    query testQuery($id: ID!) {
      node(id: $id) {
        ... on Votable {
          viewerCanVote
        }
        ... on Discussion {
          viewerRating
        }
      }
    }
  variables: >-
    {
      "id": "RGlzY3Vzc2lvbjox"
    }
response: >-
  {
    "data": {
      "node": {
        "viewerCanVote": true,
        "viewerRating": 123.456
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "6ea90be2ddb90af3e3220b6cc17fdf9a38d42377304384f858a971a6c0deb4f0",
          "operation": {
            "name": "testQuery",
            "kind": "Query",
            "document": "query testQuery(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename @fusion__requirement\n    ... on Votable {\n      viewerCanVote\n    }\n    ... on Discussion {\n      viewerRating\n    }\n  }\n}",
            "id": "ef8b97ffeae15600f2a8bc0a3bd91c31",
            "hash": "ef8b97ffeae15600f2a8bc0a3bd91c31",
            "shortHash": "ef8b97ff"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Node",
              "idValue": "$id",
              "responseName": "node",
              "branches": {
                "Comment": 4,
                "Discussion": 3
              },
              "fallback": 2
            },
            {
              "id": 2,
              "type": "Operation",
              "operation": {
                "name": "testQuery_ef8b97ff_2",
                "kind": "Query",
                "document": "query testQuery_ef8b97ff_2(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n  }\n}",
                "hash": "1041e82d2d0330f8e2178dbde9a29d410475e26348e5e0808e03568b197a620e",
                "shortHash": "1041e82d"
              },
              "responseNames": [
                "node"
              ],
              "dependencies": [
                1
              ]
            },
            {
              "id": 3,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_ef8b97ff_3",
                "kind": "Query",
                "document": "query testQuery_ef8b97ff_3(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ... on Discussion {\n      __typename\n      viewerCanVote\n      viewerRating\n    }\n  }\n}",
                "hash": "69517e5d7039411039fbe3b83dbef1d4e817af385a95b26e39ef8cff96568ad5",
                "shortHash": "69517e5d"
              },
              "responseNames": [
                "node"
              ],
              "dependencies": [
                1
              ]
            },
            {
              "id": 4,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_ef8b97ff_4",
                "kind": "Query",
                "document": "query testQuery_ef8b97ff_4(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ... on Comment {\n      __typename\n      viewerCanVote\n    }\n  }\n}",
                "hash": "7e808f7ead2333875d2450bd1216fa3dd528f5cc8d7ff302192a5b778662017e",
                "shortHash": "7e808f7e"
              },
              "responseNames": [
                "node"
              ],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface Node {
        id: ID!
      }
      
      interface Votable {
        viewerCanVote: Boolean!
      }
      
      type Comment implements Node & Votable @key(fields: "id") {
        id: ID!
        viewerCanVote: Boolean!
      }
      
      type Discussion implements Node & Votable @key(fields: "id") {
        id: ID!
        viewerCanVote: Boolean!
        viewerRating: Float!
      }
      
      type Query {
        node(id: ID!): Node @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_ef8b97ff_3(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ... on Discussion {\n      __typename\n      viewerCanVote\n      viewerRating\n    }\n  }\n}","variables":{"id":"RGlzY3Vzc2lvbjox"}}
        response: {"data":{"node":{"__typename":"Discussion","viewerCanVote":true,"viewerRating":123.456}}}
