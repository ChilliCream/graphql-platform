title: Fetch_Book_From_SourceSchema1_With_Settings
request:
  document: |
    {
      bookById(id: 1) {
        id
        title
      }
    }
response:
  body: |
    {
      "data": {
        "bookById": {
          "id": 1,
          "title": "C# in Depth"
        }
      }
    }
sourceSchemas:
  - name: a
    schema: |
      schema {
        query: Query
      }
      
      type Author {
        id: Int!
      }
      
      type Book {
        id: Int!
        title: String!
        author: Author!
      }
      
      "A connection to a list of items."
      type BooksConnection {
        "Information to aid in pagination."
        pageInfo: PageInfo!
        "A list of edges."
        edges: [BooksEdge!]
        "A flattened list of the nodes."
        nodes: [Book!]
      }
      
      "An edge in a connection."
      type BooksEdge {
        "A cursor for use in pagination."
        cursor: String!
        "The item at the end of the edge."
        node: Book!
      }
      
      "Information about pagination in a connection."
      type PageInfo {
        "Indicates whether more edges exist following the set defined by the clients arguments."
        hasNextPage: Boolean!
        "Indicates whether more edges exist prior the set defined by the clients arguments."
        hasPreviousPage: Boolean!
        "When paginating backwards, the cursor to continue."
        startCursor: String
        "When paginating forwards, the cursor to continue."
        endCursor: String
      }
      
      type Query {
        bookById(id: Int!): Book! @lookup
        books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): BooksConnection
        formatTitle(title: String!): String!
      }
  - name: b
    schema: |
      schema {
        query: Query
      }
      
      type Author {
        books: [Book!]!
        id: Int!
        name: String!
      }
      
      "A connection to a list of items."
      type AuthorsConnection {
        "Information to aid in pagination."
        pageInfo: PageInfo!
        "A list of edges."
        edges: [AuthorsEdge!]
        "A flattened list of the nodes."
        nodes: [Author!]
      }
      
      "An edge in a connection."
      type AuthorsEdge {
        "A cursor for use in pagination."
        cursor: String!
        "The item at the end of the edge."
        node: Author!
      }
      
      type Book {
        idAndTitle(title: String! @require(field: "title")): String!
        id: Int!
        author: Author!
      }
      
      "Information about pagination in a connection."
      type PageInfo {
        "Indicates whether more edges exist following the set defined by the clients arguments."
        hasNextPage: Boolean!
        "Indicates whether more edges exist prior the set defined by the clients arguments."
        hasPreviousPage: Boolean!
        "When paginating backwards, the cursor to continue."
        startCursor: String
        "When paginating forwards, the cursor to continue."
        endCursor: String
      }
      
      type Query {
        bookById(id: Int!): Book! @internal @lookup
        authorById(id: Int!): Author! @internal @lookup
        authors("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AuthorsConnection
      }
operationPlan:
  operation:
    - document: |
        {
          bookById(id: 1) {
            id
            title
          }
        }
      hash: da31ef9bfb0a7c42de9b1578b454d0af
      searchSpace: 1
  nodes:
    - id: 1
      type: Operation
      schema: a
      operation: |
        query Op_da31ef9b_1 {
          bookById(id: 1) {
            id
            title
          }
        }
