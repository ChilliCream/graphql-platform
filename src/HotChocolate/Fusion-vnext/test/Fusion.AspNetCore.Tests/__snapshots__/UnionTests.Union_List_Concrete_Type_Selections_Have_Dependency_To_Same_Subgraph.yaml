name: Union_List_Concrete_Type_Selections_Have_Dependency_To_Same_Subgraph
request:
  document: >-
    query testQuery {
      posts {
        ... on Photo {
          product {
            subgraph2
          }
        }
        ... on Discussion {
          author {
            subgraph2
          }
        }
      }
    }
response: >-
  {
    "data": {
      "posts": [
        {
          "product": {
            "subgraph2": "Product: UHJvZHVjdDo2"
          }
        },
        {
          "author": {
            "subgraph2": "Author: QXV0aG9yOjU="
          }
        },
        {
          "product": {
            "subgraph2": "Product: UHJvZHVjdDo0"
          }
        }
      ]
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "8b1d957467d5c6afc062199f3269d847458d68062a9bdd15cec92c60427b5823",
          "operation": {
            "name": "testQuery",
            "kind": "Query",
            "document": "query testQuery {\n  posts {\n    __typename @fusion__requirement\n    ... on Photo {\n      product {\n        subgraph2\n        id @fusion__requirement\n      }\n    }\n    ... on Discussion {\n      author {\n        subgraph2\n        id @fusion__requirement\n      }\n    }\n  }\n}",
            "id": "5f4670e8910662aebec5f35dcb7ea523",
            "hash": "5f4670e8910662aebec5f35dcb7ea523",
            "shortHash": "5f4670e8"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_5f4670e8_1",
                "kind": "Query",
                "document": "query testQuery_5f4670e8_1 {\n  posts {\n    __typename\n    ... on Photo {\n      product {\n        id\n      }\n    }\n    ... on Discussion {\n      author {\n        id\n      }\n    }\n  }\n}",
                "hash": "cafed0574f970ee4a69b51b88c6d0ad35b42f7b53f53e084aa519458282cf9f3",
                "shortHash": "cafed057"
              },
              "responseNames": [
                "posts"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_5f4670e8_2",
                "kind": "Query",
                "document": "query testQuery_5f4670e8_2(\n  $__fusion_1_id: ID!\n) {\n  authorById(id: $__fusion_1_id) {\n    subgraph2\n  }\n}",
                "hash": "4fae66469e578fe456e8e3382c31f7156eaa2935cb37ee2da13fe43aafd49855",
                "shortHash": "4fae6646"
              },
              "responseNames": [
                "subgraph2"
              ],
              "source": "$.authorById",
              "target": "$.posts\u003CDiscussion\u003E.author",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "ID!",
                  "path": "$.posts\u003CDiscussion\u003E.author",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            },
            {
              "id": 3,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_5f4670e8_3",
                "kind": "Query",
                "document": "query testQuery_5f4670e8_3(\n  $__fusion_2_id: ID!\n) {\n  productById(id: $__fusion_2_id) {\n    subgraph2\n  }\n}",
                "hash": "7a5ff940d2ca1f2835278b6facbea6cd31b3df55c4ca42037a76f3974c78b0bd",
                "shortHash": "7a5ff940"
              },
              "responseNames": [
                "subgraph2"
              ],
              "source": "$.productById",
              "target": "$.posts\u003CPhoto\u003E.product",
              "requirements": [
                {
                  "name": "__fusion_2_id",
                  "type": "ID!",
                  "path": "$.posts\u003CPhoto\u003E.product",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
      }
      
      type Discussion {
        id: ID!
        author: Author
      }
      
      type Photo {
        id: ID!
        product: Product
      }
      
      type Product @key(fields: "id") {
        id: ID!
      }
      
      type Query {
        posts: [Post]
      }
      
      union Post = Photo | Discussion
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_5f4670e8_1 {\n  posts {\n    __typename\n    ... on Photo {\n      product {\n        id\n      }\n    }\n    ... on Discussion {\n      author {\n        id\n      }\n    }\n  }\n}"}
        response: {"data":{"posts":[{"__typename":"Photo","product":{"id":"UHJvZHVjdDo2"}},{"__typename":"Discussion","author":{"id":"QXV0aG9yOjU="}},{"__typename":"Photo","product":{"id":"UHJvZHVjdDo0"}}]}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
        subgraph2: String!
      }
      
      type Product @key(fields: "id") {
        id: ID!
        subgraph2: String!
      }
      
      type Query {
        productById(id: ID!): Product @lookup
        authorById(id: ID!): Author @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_5f4670e8_2(\n  $__fusion_1_id: ID!\n) {\n  authorById(id: $__fusion_1_id) {\n    subgraph2\n  }\n}","variables":{"__fusion_1_id":"QXV0aG9yOjU="}}
        response: {"data":{"authorById":{"subgraph2":"Author: QXV0aG9yOjU="}}}
      - request: {"query":"query testQuery_5f4670e8_3(\n  $__fusion_2_id: ID!\n) {\n  productById(id: $__fusion_2_id) {\n    subgraph2\n  }\n}","variables":[{"__fusion_2_id":"UHJvZHVjdDo2"},{"__fusion_2_id":"UHJvZHVjdDo0"}]}
        response: {"variableIndex":0,"data":{"productById":{"subgraph2":"Product: UHJvZHVjdDo2"}}}
{"variableIndex":1,"data":{"productById":{"subgraph2":"Product: UHJvZHVjdDo0"}}}

