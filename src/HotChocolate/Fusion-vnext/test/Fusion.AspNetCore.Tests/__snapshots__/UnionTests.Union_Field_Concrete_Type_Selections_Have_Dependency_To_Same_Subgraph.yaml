name: Union_Field_Concrete_Type_Selections_Have_Dependency_To_Same_Subgraph
request:
  document: >-
    query testQuery {
      post {
        ... on Photo {
          product {
            subgraph2
          }
        }
        ... on Discussion {
          author {
            subgraph2
          }
        }
      }
    }
response: >-
  {
    "data": {
      "post": {
        "product": {
          "subgraph2": "Product: UHJvZHVjdDoy"
        }
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "da21ccefff9db0ae8bb0a44e4dc6fd136dccb40252b64887e1d38ec498fdac70",
          "operation": {
            "name": "testQuery",
            "kind": "Query",
            "document": "query testQuery {\n  post {\n    __typename @fusion__requirement\n    ... on Photo {\n      product {\n        subgraph2\n        id @fusion__requirement\n      }\n    }\n    ... on Discussion {\n      author {\n        subgraph2\n        id @fusion__requirement\n      }\n    }\n  }\n}",
            "id": "8891193d6a2efd1415247828bc89c072",
            "hash": "8891193d6a2efd1415247828bc89c072",
            "shortHash": "8891193d"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_8891193d_1",
                "kind": "Query",
                "document": "query testQuery_8891193d_1 {\n  post {\n    __typename\n    ... on Photo {\n      product {\n        id\n      }\n    }\n    ... on Discussion {\n      author {\n        id\n      }\n    }\n  }\n}",
                "hash": "55630758f27ff3ec10d39dc3d6bc2322f060608da24b6bc640f89b5518dd9893",
                "shortHash": "55630758"
              },
              "responseNames": [
                "post"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_8891193d_2",
                "kind": "Query",
                "document": "query testQuery_8891193d_2(\n  $__fusion_1_id: ID!\n) {\n  authorById(id: $__fusion_1_id) {\n    subgraph2\n  }\n}",
                "hash": "37feb708c4f3a0e7ad6a45d20e1b1b9a70d49c618927485af044ffee8d1647bb",
                "shortHash": "37feb708"
              },
              "responseNames": [
                "subgraph2"
              ],
              "source": "$.authorById",
              "target": "$.post\u003CDiscussion\u003E.author",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "ID!",
                  "path": "$.post\u003CDiscussion\u003E.author",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            },
            {
              "id": 3,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_8891193d_3",
                "kind": "Query",
                "document": "query testQuery_8891193d_3(\n  $__fusion_2_id: ID!\n) {\n  productById(id: $__fusion_2_id) {\n    subgraph2\n  }\n}",
                "hash": "b2602496bc0b9c10e44904266a63b8b5907f0a957a5b124cc4e2f01b222ea4eb",
                "shortHash": "b2602496"
              },
              "responseNames": [
                "subgraph2"
              ],
              "source": "$.productById",
              "target": "$.post\u003CPhoto\u003E.product",
              "requirements": [
                {
                  "name": "__fusion_2_id",
                  "type": "ID!",
                  "path": "$.post\u003CPhoto\u003E.product",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
      }
      
      type Discussion {
        id: ID!
        author: Author
      }
      
      type Photo {
        id: ID!
        product: Product
      }
      
      type Product @key(fields: "id") {
        id: ID!
      }
      
      type Query {
        post: Post
      }
      
      union Post = Photo | Discussion
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_8891193d_1 {\n  post {\n    __typename\n    ... on Photo {\n      product {\n        id\n      }\n    }\n    ... on Discussion {\n      author {\n        id\n      }\n    }\n  }\n}"}
        response: 
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
        subgraph2: String!
      }
      
      type Product @key(fields: "id") {
        id: ID!
        subgraph2: String!
      }
      
      type Query {
        productById(id: ID!): Product @lookup
        authorById(id: ID!): Author @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_8891193d_3(\n  $__fusion_2_id: ID!\n) {\n  productById(id: $__fusion_2_id) {\n    subgraph2\n  }\n}","variables":{"__fusion_2_id":"UHJvZHVjdDoy"}}
        response: 
