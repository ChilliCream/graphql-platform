name: Shared_Parent_Field_Below_Type_With_Lookup_With_Extra_Fields_On_Shared_Level
request:
  document: >-
    {
        productById(id: 1) {
            schema1
            shared {
                schema2
                schema1
            }
            schema2
        }
    }
response: >-
  {
    "data": {
      "productById": {
        "schema1": "schema1",
        "shared": {
          "schema2": "schema2",
          "schema1": "schema1"
        },
        "schema2": "schema2"
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "57414c2c8af1ec696a2c2c3ccb62cc6b344e30330bd8dcc33d092d82d9aea642",
          "operation": {
            "kind": "Query",
            "document": "{\n  productById(id: 1) {\n    schema1\n    shared {\n      schema2\n      schema1\n    }\n    schema2\n    id @fusion__requirement\n  }\n}",
            "id": "49906eeaddb0e14de3cf10cc5494b47a",
            "hash": "49906eeaddb0e14de3cf10cc5494b47a",
            "shortHash": "49906eea"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "Op_49906eea_1",
                "kind": "Query",
                "document": "query Op_49906eea_1 {\n  productById(id: 1) {\n    schema1\n    shared {\n      schema1\n    }\n    id\n  }\n}",
                "hash": "1538252b6fed08f821912a21e5a2035f58d5fe00643e759520561eff441b67fc",
                "shortHash": "1538252b"
              },
              "responseNames": [
                "productById"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "Op_49906eea_2",
                "kind": "Query",
                "document": "query Op_49906eea_2(\n  $__fusion_1_id: Int!\n) {\n  product(id: $__fusion_1_id) {\n    schema2\n  }\n}",
                "hash": "6d6e1c18d66a952128c18e61c916cf27e40980d2d3310fbcc5ca329407621306",
                "shortHash": "6d6e1c18"
              },
              "responseNames": [
                "schema2"
              ],
              "source": "$.product",
              "target": "$.productById",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "Int!",
                  "path": "$.productById",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            },
            {
              "id": 3,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "Op_49906eea_3",
                "kind": "Query",
                "document": "query Op_49906eea_3(\n  $__fusion_2_id: Int!\n) {\n  product(id: $__fusion_2_id) {\n    shared {\n      schema2\n    }\n  }\n}",
                "hash": "dd87ef71b827728af8d1878e050f673c56812159f7eacd3c8e4141a7274affe0",
                "shortHash": "dd87ef71"
              },
              "responseNames": [
                "shared"
              ],
              "source": "$.product",
              "target": "$.productById",
              "requirements": [
                {
                  "name": "__fusion_2_id",
                  "type": "Int!",
                  "path": "$.productById",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema1: String!
        shared: SharedProduct
      }
      
      type Query {
        productById(id: Int!): Product @lookup
        viewer: Viewer!
        schema1: String!
        interface: IInterface!
        unsharedInterface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema1: String!
      }
      
      type SharedProduct {
        schema1: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema1: String!
      }
      
      type Viewer {
        schema1: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema1: String!
      }
      
      union IUnion = Product | Review
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_49906eea_1 {\n  productById(id: 1) {\n    schema1\n    shared {\n      schema1\n    }\n    id\n  }\n}"}
        response: 
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema2: String!
        shared: SharedProduct
      }
      
      type Query {
        product(id: Int!): Product @lookup
        viewer: Viewer!
        schema2: String!
        interface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema2: String!
      }
      
      type SharedProduct {
        schema2: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema2: String!
      }
      
      type Viewer {
        schema2: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema2: String!
      }
      
      union IUnion = Product | Review
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_49906eea_2(\n  $__fusion_1_id: Int!\n) {\n  product(id: $__fusion_1_id) {\n    schema2\n  }\n}","variables":{"__fusion_1_id":1}}
        response: 
      - request: {"query":"query Op_49906eea_3(\n  $__fusion_2_id: Int!\n) {\n  product(id: $__fusion_2_id) {\n    shared {\n      schema2\n    }\n  }\n}","variables":{"__fusion_2_id":1}}
        response: 
