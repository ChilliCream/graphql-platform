name: Only_Id_And_Typename_Selected
request:
  document: >-
    {
      # Discussion:1
      node(id: "RGlzY3Vzc2lvbjox") {
        id
        __typename
      }
    }
response: >-
  {
    "data": {
      "node": {
        "id": "RGlzY3Vzc2lvbjox",
        "__typename": "Discussion"
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "4036cb917f90fdd217d35c54949907c1573164266becdce8dd88ccce79280e0d",
          "operation": {
            "kind": "Query",
            "document": "{\n  node(id: \u0022RGlzY3Vzc2lvbjox\u0022) {\n    id\n    __typename\n  }\n}",
            "id": "e41649ee31cd981b466ba95313d9c143",
            "hash": "e41649ee31cd981b466ba95313d9c143",
            "shortHash": "e41649ee"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Node",
              "idValue": "\u0022RGlzY3Vzc2lvbjox\u0022",
              "responseName": "node",
              "branches": {},
              "fallback": 2
            },
            {
              "id": 2,
              "type": "Operation",
              "operation": {
                "name": "Op_e41649ee_2",
                "kind": "Query",
                "document": "query Op_e41649ee_2 {\n  node(id: \u0022RGlzY3Vzc2lvbjox\u0022) {\n    id\n    __typename\n  }\n}",
                "hash": "70dc685ba0a2528ae15d3222f064c7aad04e3f0e90b0ce49b0f091f93d96f3b2",
                "shortHash": "70dc685b"
              },
              "responseNames": [
                "node"
              ],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface Node {
        id: ID!
      }
      
      type Discussion implements Node @key(fields: "id") {
        id: ID!
        title: String!
      }
      
      type Query {
        node(id: ID!): Node @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query Op_e41649ee_2 {\n  node(id: \u0022RGlzY3Vzc2lvbjox\u0022) {\n    id\n    __typename\n  }\n}"}
        response: {"data":{"node":{"id":"RGlzY3Vzc2lvbjox","__typename":"Discussion"}}}
