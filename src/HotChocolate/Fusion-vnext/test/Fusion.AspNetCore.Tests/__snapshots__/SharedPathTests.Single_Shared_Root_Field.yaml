name: Single_Shared_Root_Field
request:
  document: >-
    {
        viewer {
            schema1
            schema2
        }
    }
response: >-
  {
    "data": {
      "viewer": {
        "schema1": "schema1",
        "schema2": "schema2"
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "9ef2bc83c1a67011b22e7146ad2395992bbbef70cbcee2703e354984ed013f77",
          "operation": {
            "kind": "Query",
            "document": "{\n  viewer {\n    schema1\n    schema2\n  }\n}",
            "id": "c6e3b3570561284c71c82b7c60272002",
            "hash": "c6e3b3570561284c71c82b7c60272002",
            "shortHash": "c6e3b357"
          },
          "searchSpace": 2,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "Op_c6e3b357_1",
                "kind": "Query",
                "document": "query Op_c6e3b357_1 {\n  viewer {\n    schema1\n  }\n}",
                "hash": "4fe24421246107786f1fd6b1d0f32da1fc4ef2818835fe5778bd80a88144b8d7",
                "shortHash": "4fe24421"
              },
              "responseNames": [
                "viewer"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "Op_c6e3b357_2",
                "kind": "Query",
                "document": "query Op_c6e3b357_2 {\n  viewer {\n    schema2\n  }\n}",
                "hash": "162dd2b721a17aebc8291d1aeb1f90d0d9cfc8026f4b6b57fb47d6263471aa54",
                "shortHash": "162dd2b7"
              },
              "responseNames": [
                "viewer"
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema1: String!
        shared: SharedProduct
      }
      
      type Query {
        productById(id: Int!): Product @lookup
        viewer: Viewer!
        schema1: String!
        interface: IInterface!
        unsharedInterface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema1: String!
      }
      
      type SharedProduct {
        schema1: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema1: String!
      }
      
      type Viewer {
        schema1: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema1: String!
      }
      
      union IUnion = Product | Review
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_c6e3b357_1 {\n  viewer {\n    schema1\n  }\n}"}
        response: {"data":{"viewer":{"schema1":"schema1"}}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema2: String!
        shared: SharedProduct
      }
      
      type Query {
        product(id: Int!): Product @lookup
        viewer: Viewer!
        schema2: String!
        interface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema2: String!
      }
      
      type SharedProduct {
        schema2: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema2: String!
      }
      
      type Viewer {
        schema2: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema2: String!
      }
      
      union IUnion = Product | Review
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_c6e3b357_2 {\n  viewer {\n    schema2\n  }\n}"}
        response: {"data":{"viewer":{"schema2":"schema2"}}}
