name: Single_Shared_Union_Root_Field_With_Type_Refinement
request:
  document: >-
    {
        union {
            ... on Review {
                schema1
                schema2
            }
        }
    }
response: >-
  {
    "data": {
      "union": {
        "schema1": "schema1",
        "schema2": "schema2"
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "c9eb614141d756f8723f0fd6eab495cf5fb449bec036b237651d9db4e8e5f4e0",
          "operation": {
            "kind": "Query",
            "document": "{\n  union {\n    __typename @fusion__requirement\n    ... on Review {\n      schema1\n      schema2\n    }\n  }\n}",
            "id": "55b9106f0dc9ff30e58f924088ee5f0d",
            "hash": "55b9106f0dc9ff30e58f924088ee5f0d",
            "shortHash": "55b9106f"
          },
          "searchSpace": 2,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "Op_55b9106f_1",
                "kind": "Query",
                "document": "query Op_55b9106f_1 {\n  union {\n    __typename\n    ... on Review {\n      schema1\n    }\n  }\n}",
                "hash": "7804ab0c455d49011dcd01e4661332dab103f63ef73f38e2b268556e8a6a9e09",
                "shortHash": "7804ab0c"
              },
              "responseNames": [
                "union"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "Op_55b9106f_2",
                "kind": "Query",
                "document": "query Op_55b9106f_2 {\n  union {\n    __typename\n    ... on Review {\n      schema2\n    }\n  }\n}",
                "hash": "b216e3f14071f3ecb9ef7cf5e0c3a515ac8485a725ec4bcd2eadd97e2b1499e5",
                "shortHash": "b216e3f1"
              },
              "responseNames": [
                "union"
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema1: String!
        shared: SharedProduct
      }
      
      type Query {
        productById(id: Int!): Product @lookup
        viewer: Viewer!
        schema1: String!
        interface: IInterface!
        unsharedInterface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema1: String!
      }
      
      type SharedProduct {
        schema1: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema1: String!
      }
      
      type Viewer {
        schema1: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema1: String!
      }
      
      union IUnion = Product | Review
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_55b9106f_1 {\n  union {\n    __typename\n    ... on Review {\n      schema1\n    }\n  }\n}"}
        response: {"data":{"union":{"__typename":"Review","schema1":"schema1"}}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema2: String!
        shared: SharedProduct
      }
      
      type Query {
        product(id: Int!): Product @lookup
        viewer: Viewer!
        schema2: String!
        interface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema2: String!
      }
      
      type SharedProduct {
        schema2: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema2: String!
      }
      
      type Viewer {
        schema2: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema2: String!
      }
      
      union IUnion = Product | Review
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_55b9106f_2 {\n  union {\n    __typename\n    ... on Review {\n      schema2\n    }\n  }\n}"}
        response: {"data":{"union":{"__typename":"Review","schema2":"schema2"}}}
