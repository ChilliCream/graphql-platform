name: Require_Object_In_A_List
request:
  document: >-
    {
        books {
          nodes {
            title
            estimatedDelivery
          }
        }
    }
response: >-
  {
    "data": {
      "books": {
        "nodes": [
          {
            "title": "The Great Gatsby",
            "estimatedDelivery": 300
          },
          {
            "title": "1984",
            "estimatedDelivery": 450
          },
          {
            "title": "The Catcher in the Rye",
            "estimatedDelivery": 600
          }
        ]
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "f6ea9e73e9c89845de9bb7421f0cd501804d9d2fb894a1a7f57fe01d32a8d8a7",
          "operation": {
            "kind": "Query",
            "document": "{\n  books {\n    nodes {\n      title\n      title @fusion__requirement\n      estimatedDelivery\n      id @fusion__requirement\n      dimension @fusion__requirement {\n        width\n        height\n      }\n    }\n  }\n}",
            "id": "1f7d64490a0ae4c811ddec3de271b2bd",
            "hash": "1f7d64490a0ae4c811ddec3de271b2bd",
            "shortHash": "1f7d6449"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "a",
              "operation": {
                "name": "Op_1f7d6449_1",
                "kind": "Query",
                "document": "query Op_1f7d6449_1 {\n  books {\n    nodes {\n      title\n      id\n    }\n  }\n}",
                "hash": "ab15d47524b29a83f2da76742bbc274f998b016cc75680d7b3e8f05f432b72f9",
                "shortHash": "ab15d475"
              },
              "responseNames": [
                "books"
              ]
            },
            {
              "id": 3,
              "type": "Operation",
              "schema": "c",
              "operation": {
                "name": "Op_1f7d6449_3",
                "kind": "Query",
                "document": "query Op_1f7d6449_3(\n  $__fusion_2_dimension: BookDimensionInput!\n  $__fusion_3_id: Int!\n) {\n  book(id: $__fusion_3_id) {\n    estimatedDelivery(dimension: $__fusion_2_dimension)\n  }\n}",
                "hash": "8b4000c9a1feadd21a4feecbef14d26b8c546e560524acb24c3bb4f2a0888982",
                "shortHash": "8b4000c9"
              },
              "responseNames": [
                "estimatedDelivery"
              ],
              "source": "$.book",
              "target": "$.books.nodes",
              "requirements": [
                {
                  "name": "__fusion_2_dimension",
                  "type": "BookDimensionInput!",
                  "path": "$.books.nodes",
                  "selectionMap": "{\n  title\n  width: dimension.width\n  height: dimension.height\n}"
                },
                {
                  "name": "__fusion_3_id",
                  "type": "Int!",
                  "path": "$.books.nodes",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1,
                4
              ]
            },
            {
              "id": 4,
              "type": "Operation",
              "schema": "b",
              "operation": {
                "name": "Op_1f7d6449_4",
                "kind": "Query",
                "document": "query Op_1f7d6449_4(\n  $__fusion_4_id: Int!\n) {\n  book(id: $__fusion_4_id) {\n    dimension {\n      width\n      height\n    }\n  }\n}",
                "hash": "607fde782c47674ca211321087dcf9d902fc97afe215c4a89f8fc1cd1050b0e3",
                "shortHash": "607fde78"
              },
              "responseNames": [
                "dimension"
              ],
              "source": "$.book",
              "target": "$.books.nodes",
              "requirements": [
                {
                  "name": "__fusion_4_id",
                  "type": "Int!",
                  "path": "$.books.nodes",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: a
    schema: >-
      schema {
        query: Query
      }
      
      type Author {
        id: Int!
      }
      
      type Book {
        id: Int!
        title: String!
        author: Author!
      }
      
      "A connection to a list of items."
      type BooksConnection {
        "Information to aid in pagination."
        pageInfo: PageInfo!
        "A list of edges."
        edges: [BooksEdge!]
        "A flattened list of the nodes."
        nodes: [Book!]
      }
      
      "An edge in a connection."
      type BooksEdge {
        "A cursor for use in pagination."
        cursor: String!
        "The item at the end of the edge."
        node: Book!
      }
      
      "Information about pagination in a connection."
      type PageInfo {
        "Indicates whether more edges exist following the set defined by the clients arguments."
        hasNextPage: Boolean!
        "Indicates whether more edges exist prior the set defined by the clients arguments."
        hasPreviousPage: Boolean!
        "When paginating backwards, the cursor to continue."
        startCursor: String
        "When paginating forwards, the cursor to continue."
        endCursor: String
      }
      
      type Query {
        books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): BooksConnection
        book(id: Int!): Book @lookup
      }
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_1f7d6449_1 {\n  books {\n    nodes {\n      title\n      id\n    }\n  }\n}"}
        response: 
  - name: b
    schema: >-
      schema {
        query: Query
      }
      
      type Book {
        id: Int!
        dimension: BookDimension!
      }
      
      type BookDimension {
        width: Int!
        height: Int!
      }
      
      type Query {
        book(id: Int!): Book @lookup
      }
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_1f7d6449_4(\n  $__fusion_4_id: Int!\n) {\n  book(id: $__fusion_4_id) {\n    dimension {\n      width\n      height\n    }\n  }\n}","variables":[{"__fusion_4_id":1},{"__fusion_4_id":2},{"__fusion_4_id":3}]}
        response: 
  - name: c
    schema: >-
      schema {
        query: Query
      }
      
      type Book {
        estimatedDelivery(dimension: BookDimensionInput! @require(field: "{\n  title\n  width: dimension.width\n  height: dimension.height\n}")): Int!
        id: Int!
      }
      
      type Query {
        book(id: Int!): Book @lookup
      }
      
      input BookDimensionInput {
        title: String!
        width: Int!
        height: Int!
      }
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      """
      The @require directive is used to express data requirements with other source schemas.
      Arguments annotated with the @require directive are removed from the composite schema
      and the value for these will be resolved by the distributed executor.
      
      
      directive @require(field: FieldSelectionMap!) on ARGUMENT_DEFINITION
      """
      directive @require("The field selection map syntax." field: FieldSelectionMap!) on ARGUMENT_DEFINITION
      
      scalar FieldSelectionMap
    interactions:
      - request: {"query":"query Op_1f7d6449_3(\n  $__fusion_2_dimension: BookDimensionInput!\n  $__fusion_3_id: Int!\n) {\n  book(id: $__fusion_3_id) {\n    estimatedDelivery(dimension: $__fusion_2_dimension)\n  }\n}","variables":[{"__fusion_2_dimension":{"title":"The Great Gatsby","width":100,"height":200},"__fusion_3_id":1},{"__fusion_2_dimension":{"title":"1984","width":150,"height":300},"__fusion_3_id":2},{"__fusion_2_dimension":{"title":"The Catcher in the Rye","width":200,"height":400},"__fusion_3_id":3}]}
        response: 
