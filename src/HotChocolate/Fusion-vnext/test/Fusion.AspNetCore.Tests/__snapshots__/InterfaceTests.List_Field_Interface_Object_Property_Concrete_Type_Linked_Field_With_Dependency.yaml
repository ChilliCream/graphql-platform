name: List_Field_Interface_Object_Property_Concrete_Type_Linked_Field_With_Dependency
request:
  document: >-
    query testQuery {
      wrappers {
        votable {
          viewerCanVote
          ... on Discussion {
            author {
              displayName
            }
          }
        }
      }
    }
response: >-
  {
    "data": {
      "wrappers": [
        {
          "votable": {
            "viewerCanVote": true,
            "author": {
              "displayName": "Author: QXV0aG9yOjc="
            }
          }
        },
        {
          "votable": {
            "viewerCanVote": true,
            "author": {
              "displayName": "Author: QXV0aG9yOjg="
            }
          }
        },
        {
          "votable": {
            "viewerCanVote": true,
            "author": {
              "displayName": "Author: QXV0aG9yOjk="
            }
          }
        }
      ]
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "e549dd1034d4d15a654b79922644492f09b4ca5b3fd11b8009ceb63a60f23ae7",
          "operation": {
            "name": "testQuery",
            "kind": "Query",
            "document": "query testQuery {\n  wrappers {\n    votable {\n      __typename @fusion__requirement\n      viewerCanVote\n      ... on Discussion {\n        author {\n          displayName\n          id @fusion__requirement\n        }\n      }\n    }\n  }\n}",
            "id": "8c4ceb7d5d586957711457c466f93384",
            "hash": "8c4ceb7d5d586957711457c466f93384",
            "shortHash": "8c4ceb7d"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_8c4ceb7d_1",
                "kind": "Query",
                "document": "query testQuery_8c4ceb7d_1 {\n  wrappers {\n    votable {\n      __typename\n      viewerCanVote\n      ... on Discussion {\n        author {\n          id\n        }\n      }\n    }\n  }\n}",
                "hash": "10936cf4e821af6479bb2954e37661e35c30ba5928ae140a12d2580d26079ab6",
                "shortHash": "10936cf4"
              },
              "responseNames": [
                "wrappers"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_8c4ceb7d_2",
                "kind": "Query",
                "document": "query testQuery_8c4ceb7d_2(\n  $__fusion_1_id: ID!\n) {\n  authorById(id: $__fusion_1_id) {\n    displayName\n  }\n}",
                "hash": "48a01116b645c38e5fbb6cc5e5eef69b814fdde6ebc70a049ccc63ee7c14245a",
                "shortHash": "48a01116"
              },
              "responseNames": [
                "displayName"
              ],
              "source": "$.authorById",
              "target": "$.wrappers.votable\u003CDiscussion\u003E.author",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "ID!",
                  "path": "$.wrappers.votable\u003CDiscussion\u003E.author",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface Votable {
        viewerCanVote: Boolean!
      }
      
      type Author @key(fields: "id") {
        id: ID!
      }
      
      type Comment implements Votable @key(fields: "id") {
        id: ID!
        viewerCanVote: Boolean!
      }
      
      type Discussion implements Votable @key(fields: "id") {
        id: ID!
        viewerCanVote: Boolean!
        author: Author
      }
      
      type Query {
        wrappers: [Wrapper]
      }
      
      type Wrapper {
        votable: Votable
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_8c4ceb7d_1 {\n  wrappers {\n    votable {\n      __typename\n      viewerCanVote\n      ... on Discussion {\n        author {\n          id\n        }\n      }\n    }\n  }\n}"}
        response: 
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
        displayName: String!
      }
      
      type Query {
        authorById(id: ID!): Author @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_8c4ceb7d_2(\n  $__fusion_1_id: ID!\n) {\n  authorById(id: $__fusion_1_id) {\n    displayName\n  }\n}","variables":[{"__fusion_1_id":"QXV0aG9yOjc="},{"__fusion_1_id":"QXV0aG9yOjg="},{"__fusion_1_id":"QXV0aG9yOjk="}]}
        response: 
