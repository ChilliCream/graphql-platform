title: List_Of_Abstract_Types
request:
  document: |
    {
      abstractTypes {
        id
        ... on Discussion {
          title
        }
        ... on Author {
          name
        }
      }
    }
response:
  body: |
    {
      "data": {
        "abstractTypes": [
          {
            "id": 1,
            "title": "Discussion 1"
          },
          {
            "id": 2,
            "name": "Author 2"
          },
          {
            "id": 3
          }
        ]
      }
    }
sourceSchemas:
  - name: A
    schema: |
      schema {
        query: Query
      }
      
      interface SharedType {
        id: Int!
      }
      
      type Author implements SharedType {
        id: Int!
        name: String!
      }
      
      type Discussion implements SharedType {
        id: Int!
        title: String!
      }
      
      "A connection to a list of items."
      type InterfaceConnectionConnection {
        "Information to aid in pagination."
        pageInfo: PageInfo!
        "A list of edges."
        edges: [InterfaceConnectionEdge!]
        "A flattened list of the nodes."
        nodes: [SharedType!]
      }
      
      "An edge in a connection."
      type InterfaceConnectionEdge {
        "A cursor for use in pagination."
        cursor: String!
        "The item at the end of the edge."
        node: SharedType!
      }
      
      "Information about pagination in a connection."
      type PageInfo {
        "Indicates whether more edges exist following the set defined by the clients arguments."
        hasNextPage: Boolean!
        "Indicates whether more edges exist prior the set defined by the clients arguments."
        hasPreviousPage: Boolean!
        "When paginating backwards, the cursor to continue."
        startCursor: String
        "When paginating forwards, the cursor to continue."
        endCursor: String
      }
      
      type Product implements SharedType {
        id: Int!
      }
      
      type Query {
        abstractType: SharedType!
        otherAbstractType: SharedType!
        abstractTypes: [SharedType!]!
        interfaceConnection("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): InterfaceConnectionConnection
        authorById(id: Int!): Author! @lookup
      }
    interactions:
      - request:
          body: |
            {"query":"query Op_39311c2e_1 {\n  abstractTypes {\n    __typename\n    id\n    ... on Discussion {\n      title\n    }\n    ... on Author {\n      name\n    }\n  }\n}"}
        response:
          results:
            - |
              {
                "data": {
                  "abstractTypes": [
                    {
                      "__typename": "Discussion",
                      "id": 1,
                      "title": "Discussion 1"
                    },
                    {
                      "__typename": "Author",
                      "id": 2,
                      "name": "Author 2"
                    },
                    {
                      "__typename": "Product",
                      "id": 3
                    }
                  ]
                }
              }
operationPlan:
  operation:
    - document: |
        {
          abstractTypes {
            __typename @fusion__requirement
            id
            ... on Discussion {
              title
            }
            ... on Author {
              name
            }
          }
        }
      hash: 39311c2ef84caa365dbb7528f3c0948e
      searchSpace: 1
  nodes:
    - id: 1
      type: Operation
      schema: A
      operation: |
        query Op_39311c2e_1 {
          abstractTypes {
            __typename
            id
            ... on Discussion {
              title
            }
            ... on Author {
              name
            }
          }
        }
