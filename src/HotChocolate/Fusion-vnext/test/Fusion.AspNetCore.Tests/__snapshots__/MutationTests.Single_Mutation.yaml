name: Single_Mutation
request:
  document: >-
    mutation {
      a: createBook(input: { title: "Book1" }) {
        book {
          id
          author
        }
      }
    }
response: >-
  {
    "data": {
      "a": {
        "book": {
          "id": 1,
          "author": "Abc"
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
        mutation: Mutation
      }
      
      type Book {
        id: Int!
        title: String!
      }
      
      type CreateBookPayload {
        book: Book!
      }
      
      type Mutation {
        createBook(input: CreateBookInput!): CreateBookPayload!
      }
      
      type Query {
        foo: String!
      }
      
      input CreateBookInput {
        title: String!
      }
    interactions:
      - request: {"query":"mutation Op_8adeedac_1 {\n  a: createBook(input: { title: \u0022Book1\u0022 }) {\n    book {\n      id\n    }\n  }\n}"}
        response: {"data":{"a":{"book":{"id":1}}}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Book {
        id: Int!
        author: String!
      }
      
      type Query {
        bookById(id: Int!): Book! @internal @lookup
      }
    interactions:
      - request: {"query":"query Op_8adeedac_2(\n  $__fusion_1_id: Int!\n) {\n  bookById(id: $__fusion_1_id) {\n    author\n  }\n}","variables":{"__fusion_1_id":1}}
        response: {"data":{"bookById":{"author":"Abc"}}}
