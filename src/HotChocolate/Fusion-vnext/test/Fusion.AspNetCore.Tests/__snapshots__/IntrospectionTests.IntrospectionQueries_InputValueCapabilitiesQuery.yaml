title: IntrospectionQueries
request:
  document: |
    query IntrospectionQuery {
      __type(name: "__InputValue") {
        fields {
          name
        }
      }
    }
response:
  body: |
    {
      "data": {
        "__type": {
          "fields": [
            {
              "name": "name"
            },
            {
              "name": "description"
            },
            {
              "name": "type"
            },
            {
              "name": "defaultValue"
            },
            {
              "name": "isDeprecated"
            },
            {
              "name": "deprecationReason"
            }
          ]
        }
      }
    }
sourceSchemas:
  - name: A
    schema: |
      schema @test(arg: "value") {
        query: Query
        mutation: Mutation
        subscription: Subscription
      }
      
      interface Node @test(arg: "value") {
        id: ID!
      }
      
      interface Votable implements Node {
        id: ID!
      }
      
      type Mutation @test(arg: "value") {
        postReview(input: PostReviewInput): Review @test(arg: "value")
      }
      
      type Post implements Votable & Node @key(fields: "id") {
        id: ID!
        postKind: PostKind @shareable
        location: String @inaccessible
      }
      
      type Query @test(arg: "value") {
        posts(filter: PostsFilter first: Int! = 5 @test(arg: "value") hidden: Boolean): [Post]
        userCreation: UserCreation
        votables: [Votable]!
        postById(postId: ID! @is(field: "id")): Post @lookup
        node(id: ID!): Node @lookup
      }
      
      type Review implements Votable & Node @test(arg: "value") {
        id: ID!
      }
      
      type Subscription @test(arg: "value") {
        onNewReview: Review
      }
      
      union UserCreation @test(arg: "value") = Post | Review
      
      input PostReviewInput @oneOf {
        scalar: String
        pros: [PostReviewPro]
      }
      
      input PostReviewPro {
        scalar: Int!
      }
      
      input PostsFilter @test(arg: "value") {
        scalar: String = "test" @test(arg: "value")
      }
      
      enum PostKind @test(arg: "value") {
        STORY @test(arg: "value")
        PHOTO
      }
      
      "The `@oneOf` directive is used within the type system definition language to indicate that an Input Object is a OneOf Input Object."
      directive @oneOf on INPUT_OBJECT
      
      directive @test(arg: String! = "default") repeatable on QUERY | MUTATION | SUBSCRIPTION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | VARIABLE_DEFINITION | SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
operationPlan:
  operation:
    - document: |
        query IntrospectionQuery {
          __type(name: "__InputValue") {
            fields {
              name
            }
          }
        }
      name: IntrospectionQuery
      hash: 1082f3a1fb7178c6aa99b27821c6eba7
      searchSpace: 1
  nodes:
    - id: 1
      type: Introspection
      selections:
        - id: 1
          responseName: __type
          fieldName: __type
