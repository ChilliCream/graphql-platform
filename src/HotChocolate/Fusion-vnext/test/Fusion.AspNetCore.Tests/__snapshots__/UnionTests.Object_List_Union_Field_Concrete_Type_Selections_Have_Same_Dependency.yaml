name: Object_List_Union_Field_Concrete_Type_Selections_Have_Same_Dependency
request:
  document: >-
    query testQuery {
      postEdges {
        node {
          ... on Photo {
            product {
              subgraph2
            }
          }
          ... on Discussion {
            product {
              subgraph2
            }
          }
        }
      }
    }
response: >-
  {
    "data": {
      "postEdges": [
        {
          "node": {
            "product": {
              "subgraph2": "Product: UHJvZHVjdDo3"
            }
          }
        },
        {
          "node": {
            "product": {
              "subgraph2": "Product: UHJvZHVjdDo4"
            }
          }
        },
        {
          "node": {
            "product": {
              "subgraph2": "Product: UHJvZHVjdDo5"
            }
          }
        }
      ]
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "90893665f853263304a54b16ae5abe888fcf9227fce92e0cc4cbb6ce9f956088",
          "operation": {
            "name": "testQuery",
            "kind": "Query",
            "document": "query testQuery {\n  postEdges {\n    node {\n      __typename @fusion__requirement\n      ... on Photo {\n        product {\n          subgraph2\n          id @fusion__requirement\n        }\n      }\n      ... on Discussion {\n        product {\n          subgraph2\n          id @fusion__requirement\n        }\n      }\n    }\n  }\n}",
            "id": "ec963286207c06ae16e0e35aba2876f9",
            "hash": "ec963286207c06ae16e0e35aba2876f9",
            "shortHash": "ec963286"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_ec963286_1",
                "kind": "Query",
                "document": "query testQuery_ec963286_1 {\n  postEdges {\n    node {\n      __typename\n      ... on Photo {\n        product {\n          id\n        }\n      }\n      ... on Discussion {\n        product {\n          id\n        }\n      }\n    }\n  }\n}",
                "hash": "1e87bf2cdfe94df64cf8ef6586c8a80f87d00a302f5df1d149bc7bc9e119763b",
                "shortHash": "1e87bf2c"
              },
              "responseNames": [
                "postEdges"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_ec963286_2",
                "kind": "Query",
                "document": "query testQuery_ec963286_2(\n  $__fusion_1_id: ID!\n) {\n  productById(id: $__fusion_1_id) {\n    subgraph2\n  }\n}",
                "hash": "70730a53ca7ae706674b363439ff56f87023c6bdff3a9653928c56baa510caa0",
                "shortHash": "70730a53"
              },
              "responseNames": [
                "subgraph2"
              ],
              "source": "$.productById",
              "target": "$.postEdges.node\u003CDiscussion\u003E.product",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "ID!",
                  "path": "$.postEdges.node\u003CDiscussion\u003E.product",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            },
            {
              "id": 3,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_ec963286_3",
                "kind": "Query",
                "document": "query testQuery_ec963286_3(\n  $__fusion_2_id: ID!\n) {\n  productById(id: $__fusion_2_id) {\n    subgraph2\n  }\n}",
                "hash": "07cd26d483a3fbd6060ed3aeb2bda297cbf367e9b0c7aabca1b90dd2ed24d7cf",
                "shortHash": "07cd26d4"
              },
              "responseNames": [
                "subgraph2"
              ],
              "source": "$.productById",
              "target": "$.postEdges.node\u003CPhoto\u003E.product",
              "requirements": [
                {
                  "name": "__fusion_2_id",
                  "type": "ID!",
                  "path": "$.postEdges.node\u003CPhoto\u003E.product",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      type Discussion {
        id: ID!
        product: Product
      }
      
      type Photo {
        id: ID!
        product: Product
      }
      
      type PostEdge {
        node: Post
      }
      
      type Product @key(fields: "id") {
        id: ID!
      }
      
      type Query {
        postEdges: [PostEdge]
      }
      
      union Post = Photo | Discussion
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_ec963286_1 {\n  postEdges {\n    node {\n      __typename\n      ... on Photo {\n        product {\n          id\n        }\n      }\n      ... on Discussion {\n        product {\n          id\n        }\n      }\n    }\n  }\n}"}
        response: 
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Product @key(fields: "id") {
        id: ID!
        subgraph2: String!
      }
      
      type Query {
        productById(id: ID!): Product @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_ec963286_3(\n  $__fusion_2_id: ID!\n) {\n  productById(id: $__fusion_2_id) {\n    subgraph2\n  }\n}","variables":[{"__fusion_2_id":"UHJvZHVjdDo3"},{"__fusion_2_id":"UHJvZHVjdDo4"},{"__fusion_2_id":"UHJvZHVjdDo5"}]}
        response: 
