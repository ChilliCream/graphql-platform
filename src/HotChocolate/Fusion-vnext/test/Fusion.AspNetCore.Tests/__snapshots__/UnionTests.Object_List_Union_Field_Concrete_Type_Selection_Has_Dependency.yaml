name: Object_List_Union_Field_Concrete_Type_Selection_Has_Dependency
request:
  document: >-
    query testQuery {
      postEdges {
        node {
          ... on Photo {
            product {
              subgraph2
            }
          }
          ... on Discussion {
            author {
              subgraph3
            }
          }
        }
      }
    }
response: >-
  {
    "data": {
      "postEdges": [
        {
          "node": {
            "product": {
              "subgraph2": "Product: UHJvZHVjdDo3"
            }
          }
        },
        {
          "node": {
            "product": {
              "subgraph2": "Product: UHJvZHVjdDo4"
            }
          }
        },
        {
          "node": {
            "product": {
              "subgraph2": "Product: UHJvZHVjdDo5"
            }
          }
        }
      ]
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
      }
      
      type Discussion {
        id: ID!
        author: Author
      }
      
      type Photo {
        id: ID!
        product: Product
      }
      
      type PostEdge {
        node: Post
      }
      
      type Product @key(fields: "id") {
        id: ID!
      }
      
      type Query {
        postEdges: [PostEdge]
      }
      
      union Post = Photo | Discussion
    interactions:
      - request: {"query":"query testQuery_1bceaa5d_1 {\n  postEdges {\n    node {\n      __typename\n      ... on Photo {\n        product {\n          id\n        }\n      }\n      ... on Discussion {\n        author {\n          id\n        }\n      }\n    }\n  }\n}"}
        response: {"data":{"postEdges":[{"node":{"__typename":"Photo","product":{"id":"UHJvZHVjdDo3"}}},{"node":{"__typename":"Photo","product":{"id":"UHJvZHVjdDo4"}}},{"node":{"__typename":"Photo","product":{"id":"UHJvZHVjdDo5"}}}]}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Product @key(fields: "id") {
        id: ID!
        subgraph2: String!
      }
      
      type Query {
        productById(id: ID!): Product @lookup
      }
    interactions:
      - request: {"query":"query testQuery_1bceaa5d_3(\n  $__fusion_2_id: ID!\n) {\n  productById(id: $__fusion_2_id) {\n    subgraph2\n  }\n}","variables":[{"__fusion_2_id":"UHJvZHVjdDo3"},{"__fusion_2_id":"UHJvZHVjdDo4"},{"__fusion_2_id":"UHJvZHVjdDo5"}]}
        response: {"variableIndex":0,"data":{"productById":{"subgraph2":"Product: UHJvZHVjdDo3"}}}
{"variableIndex":1,"data":{"productById":{"subgraph2":"Product: UHJvZHVjdDo4"}}}
{"variableIndex":2,"data":{"productById":{"subgraph2":"Product: UHJvZHVjdDo5"}}}

  - name: C
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
        subgraph3: String!
      }
      
      type Query {
        authorById(id: ID!): Author @lookup
      }
