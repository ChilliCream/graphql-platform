title: Typename_On_Query_Skip_True
request:
  document: |
    query(
      $s: Boolean! = true
    ) {
      __typename @skip(if: $s)
    }
response:
  body: |
    {
      "data": {}
    }
sourceSchemas:
  - name: A
    schema: |
      schema {
        query: Query
      }

      type Author @key(fields: "id") {
        id: Int!
      }

      type Book {
        id: Int!
        title: String!
        author: Author! @shareable
      }

      "A connection to a list of items."
      type BooksConnection @shareable {
        "Information to aid in pagination."
        pageInfo: PageInfo!
        "A list of edges."
        edges: [BooksEdge!]
        "A flattened list of the nodes."
        nodes: [Book!]
      }

      "An edge in a connection."
      type BooksEdge @shareable {
        "A cursor for use in pagination."
        cursor: String!
        "The item at the end of the edge."
        node: Book!
      }

      "Information about pagination in a connection."
      type PageInfo @shareable {
        "Indicates whether more edges exist following the set defined by the clients arguments."
        hasNextPage: Boolean!
        "Indicates whether more edges exist prior the set defined by the clients arguments."
        hasPreviousPage: Boolean!
        "When paginating backwards, the cursor to continue."
        startCursor: String
        "When paginating forwards, the cursor to continue."
        endCursor: String
      }

      type Query {
        bookById(id: Int!): Book! @lookup
        books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): BooksConnection
      }
  - name: B
    schema: |
      schema {
        query: Query
      }

      type Author {
        books: [Book!]!
        id: Int!
        name: String!
      }

      "A connection to a list of items."
      type AuthorsConnection @shareable {
        "Information to aid in pagination."
        pageInfo: PageInfo!
        "A list of edges."
        edges: [AuthorsEdge!]
        "A flattened list of the nodes."
        nodes: [Author!]
      }

      "An edge in a connection."
      type AuthorsEdge @shareable {
        "A cursor for use in pagination."
        cursor: String!
        "The item at the end of the edge."
        node: Author!
      }

      type Book @key(fields: "id") {
        id: Int!
        author: Author! @shareable
      }

      "Information about pagination in a connection."
      type PageInfo @shareable {
        "Indicates whether more edges exist following the set defined by the clients arguments."
        hasNextPage: Boolean!
        "Indicates whether more edges exist prior the set defined by the clients arguments."
        hasPreviousPage: Boolean!
        "When paginating backwards, the cursor to continue."
        startCursor: String
        "When paginating forwards, the cursor to continue."
        endCursor: String
      }

      type Query {
        authorById(id: Int!): Author! @internal @lookup
        authors("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AuthorsConnection
      }
operationPlan:
  operation:
    - document: |
        query(
          $s: Boolean! = true
        ) {
          __typename @skip(if: $s)
        }
      hash: 6fe5ef6b2885d351015c1d64f6c1eda8
      searchSpace: 1
  nodes:
    - id: 1
      type: Introspection
      selections:
        - id: 2
          responseName: __typename
          fieldName: __typename
