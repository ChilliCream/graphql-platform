name: Interface_Field_Concrete_Type_With_Dependency
request:
  document: >-
    query testQuery {
      votable {
        viewerCanVote
        ... on Discussion {
          viewerRating
        }
      }
    }
response: >-
  {
    "data": {
      "votable": {
        "viewerCanVote": true,
        "viewerRating": 123.456
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "354c47e9b47b097d39230c1a89f39b5bb4709e7fbfb5cf75723287326b6b42f1",
          "operation": {
            "name": "testQuery",
            "kind": "Query",
            "document": "query testQuery {\n  votable {\n    __typename @fusion__requirement\n    viewerCanVote\n    ... on Discussion {\n      viewerRating\n      id @fusion__requirement\n    }\n  }\n}",
            "id": "4a61c641179c756fb55bfa3dd9de6101",
            "hash": "4a61c641179c756fb55bfa3dd9de6101",
            "shortHash": "4a61c641"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_4a61c641_1",
                "kind": "Query",
                "document": "query testQuery_4a61c641_1 {\n  votable {\n    __typename\n    viewerCanVote\n    ... on Discussion {\n      id\n    }\n  }\n}",
                "hash": "0b250eb431093ae5f62d9535723674bbd6e7978cbbee8933ef050899dd41ae26",
                "shortHash": "0b250eb4"
              },
              "responseNames": [
                "votable"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_4a61c641_2",
                "kind": "Query",
                "document": "query testQuery_4a61c641_2(\n  $__fusion_1_id: ID!\n) {\n  discussionById(id: $__fusion_1_id) {\n    viewerRating\n  }\n}",
                "hash": "d632b127a7ef8ebef4a4edcb1efb479556dc95f08c42cf45178690f22b7c30ee",
                "shortHash": "d632b127"
              },
              "responseNames": [
                "viewerRating"
              ],
              "source": "$.discussionById",
              "target": "$.votable\u003CDiscussion\u003E",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "ID!",
                  "path": "$.votable\u003CDiscussion\u003E",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface Votable {
        viewerCanVote: Boolean!
      }
      
      type Comment implements Votable @key(fields: "id") {
        id: ID!
        viewerCanVote: Boolean!
      }
      
      type Discussion implements Votable @key(fields: "id") {
        id: ID!
        viewerCanVote: Boolean!
      }
      
      type Query {
        votable: Votable
        discussionById(id: ID!): Discussion @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_4a61c641_1 {\n  votable {\n    __typename\n    viewerCanVote\n    ... on Discussion {\n      id\n    }\n  }\n}"}
        response: 
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Discussion @key(fields: "id") {
        id: ID!
        viewerRating: Float!
      }
      
      type Query {
        discussionById(id: ID!): Discussion @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_4a61c641_2(\n  $__fusion_1_id: ID!\n) {\n  discussionById(id: $__fusion_1_id) {\n    viewerRating\n  }\n}","variables":{"__fusion_1_id":"RGlzY3Vzc2lvbjox"}}
        response: 
