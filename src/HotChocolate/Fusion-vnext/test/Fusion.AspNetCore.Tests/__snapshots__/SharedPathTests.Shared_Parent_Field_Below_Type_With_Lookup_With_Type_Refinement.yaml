name: Shared_Parent_Field_Below_Type_With_Lookup_With_Type_Refinement
request:
  document: >-
    {
        unsharedInterface {
            ... on Product {
                shared {
                    schema1
                    schema2
                }
            }
        }
    }
response: >-
  {
    "data": {
      "unsharedInterface": {
        "shared": {
          "schema1": "schema1",
          "schema2": "schema2"
        }
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "8d6ae9f14f1d676f0802d9fda74faa46564248ca6fe1076a59c383af91cbb1b1",
          "operation": {
            "kind": "Query",
            "document": "{\n  unsharedInterface {\n    __typename @fusion__requirement\n    ... on Product {\n      shared {\n        schema1\n        schema2\n      }\n      id @fusion__requirement\n    }\n  }\n}",
            "id": "c8e1a8bf80f58ee07e449b1d627a32e5",
            "hash": "c8e1a8bf80f58ee07e449b1d627a32e5",
            "shortHash": "c8e1a8bf"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "Op_c8e1a8bf_1",
                "kind": "Query",
                "document": "query Op_c8e1a8bf_1 {\n  unsharedInterface {\n    __typename\n    ... on Product {\n      shared {\n        schema1\n      }\n      id\n    }\n  }\n}",
                "hash": "c5dab4bee4422d40e2331ad3d7802499e74ae6a11f42c0844efc70da9bd8cc07",
                "shortHash": "c5dab4be"
              },
              "responseNames": [
                "unsharedInterface"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "Op_c8e1a8bf_2",
                "kind": "Query",
                "document": "query Op_c8e1a8bf_2(\n  $__fusion_1_id: Int!\n) {\n  product(id: $__fusion_1_id) {\n    shared {\n      schema2\n    }\n  }\n}",
                "hash": "331e5166957ba47a763aaf3536dabe7511651a5970e7d23697c848804b3d31e0",
                "shortHash": "331e5166"
              },
              "responseNames": [
                "shared"
              ],
              "source": "$.product",
              "target": "$.unsharedInterface\u003CProduct\u003E",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "Int!",
                  "path": "$.unsharedInterface\u003CProduct\u003E",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema1: String!
        shared: SharedProduct
      }
      
      type Query {
        productById(id: Int!): Product @lookup
        viewer: Viewer!
        schema1: String!
        interface: IInterface!
        unsharedInterface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema1: String!
      }
      
      type SharedProduct {
        schema1: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema1: String!
      }
      
      type Viewer {
        schema1: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema1: String!
      }
      
      union IUnion = Product | Review
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_c8e1a8bf_1 {\n  unsharedInterface {\n    __typename\n    ... on Product {\n      shared {\n        schema1\n      }\n      id\n    }\n  }\n}"}
        response: 
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema2: String!
        shared: SharedProduct
      }
      
      type Query {
        product(id: Int!): Product @lookup
        viewer: Viewer!
        schema2: String!
        interface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema2: String!
      }
      
      type SharedProduct {
        schema2: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema2: String!
      }
      
      type Viewer {
        schema2: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema2: String!
      }
      
      union IUnion = Product | Review
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_c8e1a8bf_2(\n  $__fusion_1_id: Int!\n) {\n  product(id: $__fusion_1_id) {\n    shared {\n      schema2\n    }\n  }\n}","variables":{"__fusion_1_id":2}}
        response: 
