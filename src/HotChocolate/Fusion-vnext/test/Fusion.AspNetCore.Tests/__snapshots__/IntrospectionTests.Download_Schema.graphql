schema {
  query: Query
}

type Query {
  authors("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): AuthorsConnection
  bookById(id: Int!): Book!
  books("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): BooksConnection
}

type Author {
  books: [Book!]!
  id: Int!
  name: String!
}

"A connection to a list of items."
type AuthorsConnection {
  "A list of edges."
  edges: [AuthorsEdge!]
  "A flattened list of the nodes."
  nodes: [Author!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AuthorsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Author!
}

type Book {
  author: Author!
  id: Int!
  title: String!
}

"A connection to a list of items."
type BooksConnection {
  "A list of edges."
  edges: [BooksEdge!]
  "A flattened list of the nodes."
  nodes: [Book!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type BooksEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Book!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"The fusion__Schema enum is a generated type used within an execution schema document to refer to a source schema in a type-safe manner."
enum fusion__Schema {
  A
    @fusion__schema_metadata(name: "A")
  B
    @fusion__schema_metadata(name: "B")
}

"The @fusion__inaccessible directive is used to prevent specific type system members from being accessible through the client-facing composite schema, even if they are accessible in the underlying source schemas."
directive @fusion__inaccessible on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

"The @fusion__schema_metadata directive is used to provide additional metadata for a source schema."
directive @fusion__schema_metadata("The name of the source schema." name: String!) on ENUM_VALUE
