name: Multiple_Mutation
request:
  document: >-
    mutation {
      a: createBook(input: { title: "Book1" }) {
        book {
          id
          author
        }
      }
      b: createBook(input: { title: "Book2" }) {
        book {
          id
          title
          author
        }
      }
    }
response: >-
  {
    "data": {
      "a": {
        "book": {
          "id": 1,
          "author": "Abc"
        }
      },
      "b": {
        "book": {
          "id": 2,
          "title": "Book2",
          "author": "Abc"
        }
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "c6e0dc4694bfbb5fbcc96bac7667b150b1506039f98984053bb993754cb8d65d",
          "operation": {
            "kind": "Mutation",
            "document": "mutation {\n  a: createBook(input: { title: \u0022Book1\u0022 }) {\n    book {\n      id\n      id @fusion__requirement\n      author\n    }\n  }\n  b: createBook(input: { title: \u0022Book2\u0022 }) {\n    book {\n      id\n      id @fusion__requirement\n      title\n      author\n    }\n  }\n}",
            "id": "192dc5f8a8f00336bac2094122ae7902",
            "hash": "192dc5f8a8f00336bac2094122ae7902",
            "shortHash": "192dc5f8"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "Op_192dc5f8_1",
                "kind": "Mutation",
                "document": "mutation Op_192dc5f8_1 {\n  a: createBook(input: { title: \u0022Book1\u0022 }) {\n    book {\n      id\n    }\n  }\n}",
                "hash": "25548a2f7a33295a8f2a1fcea06b2bad716e453ba4641f9a0e47d4eaa596cf31",
                "shortHash": "25548a2f"
              },
              "responseNames": [
                "a"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "Op_192dc5f8_2",
                "kind": "Query",
                "document": "query Op_192dc5f8_2(\n  $__fusion_1_id: Int!\n) {\n  bookById(id: $__fusion_1_id) {\n    author\n  }\n}",
                "hash": "78ea0ad4a49e140fec3cf1418cb5f4d32017dc582e370faa522a02b1e20f22da",
                "shortHash": "78ea0ad4"
              },
              "responseNames": [
                "author"
              ],
              "source": "$.bookById",
              "target": "$.a.book",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "Int!",
                  "path": "$.a.book",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            },
            {
              "id": 3,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "Op_192dc5f8_3",
                "kind": "Mutation",
                "document": "mutation Op_192dc5f8_3 {\n  b: createBook(input: { title: \u0022Book2\u0022 }) {\n    book {\n      id\n      title\n    }\n  }\n}",
                "hash": "30dc15e4e9aef4d4c7bceb038aeef3d4b8f149155d491a5ebf2094e0dc7c2c83",
                "shortHash": "30dc15e4"
              },
              "responseNames": [
                "b"
              ]
            },
            {
              "id": 4,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "Op_192dc5f8_4",
                "kind": "Query",
                "document": "query Op_192dc5f8_4(\n  $__fusion_2_id: Int!\n) {\n  bookById(id: $__fusion_2_id) {\n    author\n  }\n}",
                "hash": "a0421ddd786011e521afea221016c052d1f15da63f869829ba94cb07d4553d17",
                "shortHash": "a0421ddd"
              },
              "responseNames": [
                "author"
              ],
              "source": "$.bookById",
              "target": "$.b.book",
              "requirements": [
                {
                  "name": "__fusion_2_id",
                  "type": "Int!",
                  "path": "$.b.book",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                3
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
        mutation: Mutation
      }
      
      type Book {
        id: Int!
        title: String!
      }
      
      type CreateBookPayload {
        book: Book!
      }
      
      type Mutation {
        createBook(input: CreateBookInput!): CreateBookPayload!
      }
      
      type Query {
        foo: String!
      }
      
      input CreateBookInput {
        title: String!
      }
    interactions:
      - request: {"query":"mutation Op_192dc5f8_1 {\n  a: createBook(input: { title: \u0022Book1\u0022 }) {\n    book {\n      id\n    }\n  }\n}"}
        response: {"data":{"a":{"book":{"id":1}}}}
      - request: {"query":"mutation Op_192dc5f8_3 {\n  b: createBook(input: { title: \u0022Book2\u0022 }) {\n    book {\n      id\n      title\n    }\n  }\n}"}
        response: {"data":{"b":{"book":{"id":2,"title":"Book2"}}}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Book {
        id: Int!
        author: String!
      }
      
      type Query {
        bookById(id: Int!): Book! @internal @lookup
      }
      
      """
      The @internal directive is used in combination with lookup fields and allows you
      to declare internal types and fields. Internal types and fields do not appear in
      the final client-facing composite schema and do not participate in the standard
      schema-merging process. This allows a source schema to define lookup fields for
      resolving entities that should not be accessible through the client-facing
      composite schema.
      
      
      
      
      
      type User @internal {
        id: ID!
        name: String!
      }
                  
      directive @internal on OBJECT | FIELD_DEFINITION
      """
      directive @internal on OBJECT | FIELD_DEFINITION
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
    interactions:
      - request: {"query":"query Op_192dc5f8_2(\n  $__fusion_1_id: Int!\n) {\n  bookById(id: $__fusion_1_id) {\n    author\n  }\n}","variables":{"__fusion_1_id":1}}
        response: {"data":{"bookById":{"author":"Abc"}}}
      - request: {"query":"query Op_192dc5f8_4(\n  $__fusion_2_id: Int!\n) {\n  bookById(id: $__fusion_2_id) {\n    author\n  }\n}","variables":{"__fusion_2_id":2}}
        response: {"data":{"bookById":{"author":"Abc"}}}
