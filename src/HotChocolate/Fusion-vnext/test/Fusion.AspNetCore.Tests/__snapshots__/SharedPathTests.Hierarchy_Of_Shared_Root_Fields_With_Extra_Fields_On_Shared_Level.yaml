name: Hierarchy_Of_Shared_Root_Fields_With_Extra_Fields_On_Shared_Level
request:
  document: >-
    {
      viewer {
        schema1
        settings {
          schema1
          schema2
        }
        schema2
        schema3
      }
    }
response: >-
  {
    "data": {
      "viewer": {
        "schema1": "schema1",
        "settings": {
          "schema1": "schema1",
          "schema2": "schema2"
        },
        "schema2": "schema2",
        "schema3": "schema3"
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema1: String!
        shared: SharedProduct
      }
      
      type Query {
        productById(id: Int!): Product @lookup
        viewer: Viewer!
        schema1: String!
        interface: IInterface!
        unsharedInterface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema1: String!
      }
      
      type SharedProduct {
        schema1: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema1: String!
      }
      
      type Viewer {
        schema1: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema1: String!
      }
      
      union IUnion = Product | Review
    interactions:
      - request: {"query":"query Op_2deb87e6_3 {\n  viewer {\n    schema1\n  }\n}"}
        response: {"data":{"viewer":{"schema1":"schema1"}}}
      - request: {"query":"query Op_2deb87e6_4 {\n  viewer {\n    settings {\n      schema1\n    }\n  }\n}"}
        response: {"data":{"viewer":{"settings":{"schema1":"schema1"}}}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema2: String!
        shared: SharedProduct
      }
      
      type Query {
        product(id: Int!): Product @lookup
        viewer: Viewer!
        schema2: String!
        interface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema2: String!
      }
      
      type SharedProduct {
        schema2: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema2: String!
      }
      
      type Viewer {
        schema2: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema2: String!
      }
      
      union IUnion = Product | Review
    interactions:
      - request: {"query":"query Op_2deb87e6_2 {\n  viewer {\n    settings {\n      schema2\n    }\n    schema2\n  }\n}"}
        response: {"data":{"viewer":{"settings":{"schema2":"schema2"},"schema2":"schema2"}}}
  - name: C
    schema: >-
      schema {
        query: Query
      }
      
      type Query {
        viewer: Viewer!
      }
      
      type Viewer {
        schema3: String!
      }
    interactions:
      - request: {"query":"query Op_2deb87e6_1 {\n  viewer {\n    schema3\n  }\n}"}
        response: {"data":{"viewer":{"schema3":"schema3"}}}
