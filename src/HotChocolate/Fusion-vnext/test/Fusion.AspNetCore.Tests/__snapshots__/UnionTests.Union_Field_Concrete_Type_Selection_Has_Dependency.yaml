name: Union_Field_Concrete_Type_Selection_Has_Dependency
request:
  document: >-
    query testQuery {
      post {
        ... on Photo {
          product {
            subgraph2
          }
        }
        ... on Discussion {
          author {
            subgraph3
          }
        }
      }
    }
response: >-
  {
    "data": {
      "post": {
        "product": {
          "subgraph2": "Product: UHJvZHVjdDoy"
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
      }
      
      type Discussion {
        id: ID!
        author: Author
      }
      
      type Photo {
        id: ID!
        product: Product
      }
      
      type Product @key(fields: "id") {
        id: ID!
      }
      
      type Query {
        post: Post
      }
      
      union Post = Photo | Discussion
    interactions:
      - request: {"query":"query testQuery_9f626641_1 {\n  post {\n    __typename\n    ... on Photo {\n      product {\n        id\n      }\n    }\n    ... on Discussion {\n      author {\n        id\n      }\n    }\n  }\n}"}
        response: {"data":{"post":{"__typename":"Photo","product":{"id":"UHJvZHVjdDoy"}}}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Product @key(fields: "id") {
        id: ID!
        subgraph2: String!
      }
      
      type Query {
        productById(id: ID!): Product @lookup
      }
    interactions:
      - request: {"query":"query testQuery_9f626641_3(\n  $__fusion_2_id: ID!\n) {\n  productById(id: $__fusion_2_id) {\n    subgraph2\n  }\n}","variables":{"__fusion_2_id":"UHJvZHVjdDoy"}}
        response: {"data":{"productById":{"subgraph2":"Product: UHJvZHVjdDoy"}}}
  - name: C
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
        subgraph3: String!
      }
      
      type Query {
        authorById(id: ID!): Author @lookup
      }
