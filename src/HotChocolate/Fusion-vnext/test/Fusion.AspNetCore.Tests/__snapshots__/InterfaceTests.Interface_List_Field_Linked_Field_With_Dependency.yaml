name: Interface_List_Field_Linked_Field_With_Dependency
request:
  document: >-
    query testQuery {
      authorables {
        author {
          id
          displayName
        }
      }
    }
response: >-
  {
    "data": {
      "authorables": [
        {
          "author": {
            "id": "QXV0aG9yOjY=",
            "displayName": "Author: QXV0aG9yOjY="
          }
        },
        {
          "author": {
            "id": "QXV0aG9yOjU=",
            "displayName": "Author: QXV0aG9yOjU="
          }
        },
        {
          "author": {
            "id": "QXV0aG9yOjQ=",
            "displayName": "Author: QXV0aG9yOjQ="
          }
        }
      ]
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "27a97fb5b5c156c39fee73b419f6bd041df4b23e7b0f871a55f07ff107494dea",
          "operation": {
            "name": "testQuery",
            "kind": "Query",
            "document": "query testQuery {\n  authorables {\n    __typename @fusion__requirement\n    author {\n      id\n      id @fusion__requirement\n      displayName\n    }\n  }\n}",
            "id": "171db7a79a3d029b568597f040bda466",
            "hash": "171db7a79a3d029b568597f040bda466",
            "shortHash": "171db7a7"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_171db7a7_1",
                "kind": "Query",
                "document": "query testQuery_171db7a7_1 {\n  authorables {\n    __typename\n    author {\n      id\n    }\n  }\n}",
                "hash": "8a5dc56b9f88580a906eddd3581f20b3ef2bffc1fe5587bca324cbaa31c71086",
                "shortHash": "8a5dc56b"
              },
              "responseNames": [
                "authorables"
              ]
            },
            {
              "id": 2,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_171db7a7_2",
                "kind": "Query",
                "document": "query testQuery_171db7a7_2(\n  $__fusion_1_id: ID!\n) {\n  authorById(id: $__fusion_1_id) {\n    displayName\n  }\n}",
                "hash": "3247945e6d54047d49f79cb5f2144eb6d252cf1a85edc92d2771c3fd5f697916",
                "shortHash": "3247945e"
              },
              "responseNames": [
                "displayName"
              ],
              "source": "$.authorById",
              "target": "$.authorables.author",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "ID!",
                  "path": "$.authorables.author",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                1
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface Authorable {
        author: Author
      }
      
      type Author @key(fields: "id") {
        id: ID!
      }
      
      type Comment implements Authorable {
        author: Author
      }
      
      type Discussion implements Authorable {
        author: Author
      }
      
      type Query {
        authorables: [Authorable]
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_171db7a7_1 {\n  authorables {\n    __typename\n    author {\n      id\n    }\n  }\n}"}
        response: {"data":{"authorables":[{"__typename":"Discussion","author":{"id":"QXV0aG9yOjY="}},{"__typename":"Comment","author":{"id":"QXV0aG9yOjU="}},{"__typename":"Discussion","author":{"id":"QXV0aG9yOjQ="}}]}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
        displayName: String!
      }
      
      type Query {
        authorById(id: ID!): Author @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_171db7a7_2(\n  $__fusion_1_id: ID!\n) {\n  authorById(id: $__fusion_1_id) {\n    displayName\n  }\n}","variables":[{"__fusion_1_id":"QXV0aG9yOjY="},{"__fusion_1_id":"QXV0aG9yOjU="},{"__fusion_1_id":"QXV0aG9yOjQ="}]}
        response: {"variableIndex":0,"data":{"authorById":{"displayName":"Author: QXV0aG9yOjY="}}}
{"variableIndex":1,"data":{"authorById":{"displayName":"Author: QXV0aG9yOjU="}}}
{"variableIndex":2,"data":{"authorById":{"displayName":"Author: QXV0aG9yOjQ="}}}

