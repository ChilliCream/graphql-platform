name: Node_Field_Selections_On_Interface_Selection_Has_Dependency
request:
  document: >-
    query testQuery($id: ID!) {
      node(id: $id) {
        __typename
        id
        ... on ProductList {
          products {
            name
          }
        }
      }
    }
  variables: >-
    {
      "id": "SXRlbTE6MQ=="
    }
response: >-
  {
    "data": {
      "node": {
        "__typename": "Item1",
        "id": "SXRlbTE6MQ==",
        "products": [
          {
            "name": "Product: UHJvZHVjdDox"
          },
          {
            "name": "Product: UHJvZHVjdDoy"
          },
          {
            "name": "Product: UHJvZHVjdDoz"
          }
        ]
      }
    },
    "extensions": {
      "fusion": {
        "operationPlan": {
          "id": "ac65d873d9c81dd0915d00d4996a77367eb85f8ab5079ec068789d3c5471d5b9",
          "operation": {
            "name": "testQuery",
            "kind": "Query",
            "document": "query testQuery(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    id\n    ... on ProductList {\n      products {\n        name\n        id @fusion__requirement\n      }\n    }\n  }\n}",
            "id": "70eb13080ba34e01a2aca487ab0f3a22",
            "hash": "70eb13080ba34e01a2aca487ab0f3a22",
            "shortHash": "70eb1308"
          },
          "searchSpace": 1,
          "nodes": [
            {
              "id": 1,
              "type": "Node",
              "idValue": "$id",
              "responseName": "node",
              "branches": {
                "Item1": 5,
                "Item2": 3
              },
              "fallback": 2
            },
            {
              "id": 2,
              "type": "Operation",
              "operation": {
                "name": "testQuery_70eb1308_2",
                "kind": "Query",
                "document": "query testQuery_70eb1308_2(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    id\n  }\n}",
                "hash": "8f3474da7d78ea347bcdd205df379075b224956b2904e68beb1a6f10cd2e1c94",
                "shortHash": "8f3474da"
              },
              "responseNames": [
                "node"
              ],
              "dependencies": [
                1
              ]
            },
            {
              "id": 3,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_70eb1308_3",
                "kind": "Query",
                "document": "query testQuery_70eb1308_3(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ... on Item2 {\n      __typename\n      id\n      products {\n        id\n      }\n    }\n  }\n}",
                "hash": "b598484b295ecec130e897bcd5110960f5678be4e7b8a83c93a82e399b3bf134",
                "shortHash": "b598484b"
              },
              "responseNames": [
                "node"
              ],
              "dependencies": [
                1
              ]
            },
            {
              "id": 4,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_70eb1308_4",
                "kind": "Query",
                "document": "query testQuery_70eb1308_4(\n  $__fusion_1_id: ID!\n) {\n  node(id: $__fusion_1_id) {\n    __typename\n    ... on Product {\n      name\n    }\n  }\n}",
                "hash": "2f411e3c25aa2229c633e56b16aec3db0422de01209db29c7d36f3fdffbf8f8f",
                "shortHash": "2f411e3c"
              },
              "responseNames": [
                "name"
              ],
              "source": "$.node\u003CProduct\u003E",
              "target": "$.node\u003CItem2\u003E.products",
              "requirements": [
                {
                  "name": "__fusion_1_id",
                  "type": "ID!",
                  "path": "$.node\u003CItem2\u003E.products",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                3
              ]
            },
            {
              "id": 5,
              "type": "Operation",
              "schema": "A",
              "operation": {
                "name": "testQuery_70eb1308_5",
                "kind": "Query",
                "document": "query testQuery_70eb1308_5(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ... on Item1 {\n      __typename\n      id\n      products {\n        id\n      }\n    }\n  }\n}",
                "hash": "6538984c835398ffda7a36f4f2371dfab1826a3c08caa8ac4a69afffd2cf94c9",
                "shortHash": "6538984c"
              },
              "responseNames": [
                "node"
              ],
              "dependencies": [
                1
              ]
            },
            {
              "id": 6,
              "type": "Operation",
              "schema": "B",
              "operation": {
                "name": "testQuery_70eb1308_6",
                "kind": "Query",
                "document": "query testQuery_70eb1308_6(\n  $__fusion_2_id: ID!\n) {\n  node(id: $__fusion_2_id) {\n    __typename\n    ... on Product {\n      name\n    }\n  }\n}",
                "hash": "a97df5d6ab15818dcdbe174bdd622354409949c87065506d09040e6c9d118ede",
                "shortHash": "a97df5d6"
              },
              "responseNames": [
                "name"
              ],
              "source": "$.node\u003CProduct\u003E",
              "target": "$.node\u003CItem1\u003E.products",
              "requirements": [
                {
                  "name": "__fusion_2_id",
                  "type": "ID!",
                  "path": "$.node\u003CItem1\u003E.products",
                  "selectionMap": "id"
                }
              ],
              "forwardedVariables": [],
              "dependencies": [
                5
              ]
            }
          ]
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface Node {
        id: ID!
      }
      
      interface ProductList {
        products: [Product]
      }
      
      type Item1 implements Node & ProductList @key(fields: "id") {
        id: ID!
        products: [Product]
      }
      
      type Item2 implements Node & ProductList @key(fields: "id") {
        id: ID!
        products: [Product]
      }
      
      type Product implements Node @key(fields: "id") {
        id: ID!
      }
      
      type Query {
        node(id: ID!): Node @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_70eb1308_5(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ... on Item1 {\n      __typename\n      id\n      products {\n        id\n      }\n    }\n  }\n}","variables":{"id":"SXRlbTE6MQ=="}}
        response: 
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      interface Node {
        id: ID!
      }
      
      type Product implements Node @key(fields: "id") {
        id: ID!
        name: String
      }
      
      type Query {
        node(id: ID!): Node @lookup
      }
      
      """
      The @key directive is used to designate an entity's unique key,
      which identifies how to uniquely reference an instance of
      an entity across different source schemas.
      """
      directive @key("The field selection set syntax." fields: FieldSelectionSet!) on OBJECT | INTERFACE
      
      """
      The @lookup directive is used within a source schema to specify output fields
      that can be used by the distributed GraphQL executor to resolve an entity by
      a stable key.
      """
      directive @lookup on FIELD_DEFINITION
      
      scalar FieldSelectionMap
      
      scalar FieldSelectionSet
    interactions:
      - request: {"query":"query testQuery_70eb1308_6(\n  $__fusion_2_id: ID!\n) {\n  node(id: $__fusion_2_id) {\n    __typename\n    ... on Product {\n      name\n    }\n  }\n}","variables":[{"__fusion_2_id":"UHJvZHVjdDox"},{"__fusion_2_id":"UHJvZHVjdDoy"},{"__fusion_2_id":"UHJvZHVjdDoz"}]}
        response: 
