title: Abstract_Type_Direct_Source_Schema_Call
request:
  document: |
    {
      interfaceConnection(first: 2) {
        edges {
          node {
            id
          }
        }
        pageInfo {
          hasNextPage
        }
      }
    }
response:
  body: |
    {
      "data": {
        "interfaceConnection": {
          "edges": [
            {
              "node": {
                "id": 1
              }
            }
          ],
          "pageInfo": {
            "hasNextPage": false
          }
        }
      }
    }
sourceSchemas:
  - name: A
    schema: |
      schema {
        query: Query
      }
      
      interface SharedType @key(fields: "id") {
        id: Int!
      }
      
      type Author implements SharedType {
        id: Int!
        name: String!
      }
      
      type Discussion implements SharedType {
        id: Int!
        title: String!
      }
      
      "A connection to a list of items."
      type InterfaceConnectionConnection {
        "Information to aid in pagination."
        pageInfo: PageInfo!
        "A list of edges."
        edges: [InterfaceConnectionEdge!]
        "A flattened list of the nodes."
        nodes: [SharedType!]
      }
      
      "An edge in a connection."
      type InterfaceConnectionEdge {
        "A cursor for use in pagination."
        cursor: String!
        "The item at the end of the edge."
        node: SharedType!
      }
      
      "Information about pagination in a connection."
      type PageInfo {
        "Indicates whether more edges exist following the set defined by the clients arguments."
        hasNextPage: Boolean!
        "Indicates whether more edges exist prior the set defined by the clients arguments."
        hasPreviousPage: Boolean!
        "When paginating backwards, the cursor to continue."
        startCursor: String
        "When paginating forwards, the cursor to continue."
        endCursor: String
      }
      
      type Query {
        abstractType: SharedType!
        otherAbstractType: SharedType!
        abstractTypes: [SharedType!]!
        interfaceConnection("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): InterfaceConnectionConnection
        authorById(id: Int!): Author! @lookup
      }
    interactions:
      - request:
          document: |
            query Op_45eb4c09_1 {
              interfaceConnection(first: 2) {
                edges {
                  node {
                    __typename
                    id
                  }
                }
                pageInfo {
                  hasNextPage
                }
              }
            }
        response:
          results:
            - |
              {
                "data": {
                  "interfaceConnection": {
                    "edges": [
                      {
                        "node": {
                          "__typename": "Discussion",
                          "id": 1
                        }
                      }
                    ],
                    "pageInfo": {
                      "hasNextPage": false
                    }
                  }
                }
              }
operationPlan:
  operation:
    - document: |
        {
          interfaceConnection(first: 2) {
            edges {
              node {
                __typename @fusion__requirement
                id
              }
            }
            pageInfo {
              hasNextPage
            }
          }
        }
      hash: 45eb4c09cd33c661467dd26f8f97b5ad
      searchSpace: 1
  nodes:
    - id: 1
      type: Operation
      schema: A
      operation: |
        query Op_45eb4c09_1 {
          interfaceConnection(first: 2) {
            edges {
              node {
                __typename
                id
              }
            }
            pageInfo {
              hasNextPage
            }
          }
        }
