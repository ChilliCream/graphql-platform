name: Interface_Field_Linked_Field_With_Dependency
request:
  document: >-
    query testQuery {
      authorable {
        author {
          id
          displayName
        }
      }
    }
response: >-
  {
    "data": {
      "authorable": {
        "author": {
          "id": "QXV0aG9yOjI=",
          "displayName": "Author: QXV0aG9yOjI="
        }
      }
    }
  }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface Authorable {
        author: Author
      }
      
      type Author @key(fields: "id") {
        id: ID!
      }
      
      type Comment implements Authorable {
        author: Author
      }
      
      type Discussion implements Authorable {
        author: Author
      }
      
      type Query {
        authorable: Authorable
      }
    interactions:
      - request: {"query":"query testQuery_d44063d8_1 {\n  authorable {\n    __typename\n    author {\n      id\n    }\n  }\n}"}
        response: {"data":{"authorable":{"__typename":"Discussion","author":{"id":"QXV0aG9yOjI="}}}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      type Author @key(fields: "id") {
        id: ID!
        displayName: String!
      }
      
      type Query {
        authorById(id: ID!): Author @lookup
      }
    interactions:
      - request: {"query":"query testQuery_d44063d8_2(\n  $__fusion_1_id: ID!\n) {\n  authorById(id: $__fusion_1_id) {\n    displayName\n  }\n}","variables":{"__fusion_1_id":"QXV0aG9yOjI="}}
        response: {"data":{"authorById":{"displayName":"Author: QXV0aG9yOjI="}}}
