title: Shared_Parent_Field_Below_Type_With_Lookup
request:
  document: >-
    {
      productById(id: 1) {
        shared {
          schema2
          schema1
        }
      }
    }
response:
  body: >-
    {
      "data": {
        "productById": {
          "shared": {
            "schema2": "schema2",
            "schema1": "schema1"
          }
        }
      }
    }
sourceSchemas:
  - name: A
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema1: String!
        shared: SharedProduct
      }
      
      type Query {
        productById(id: Int!): Product @lookup
        viewer: Viewer!
        schema1: String!
        interface: IInterface!
        unsharedInterface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema1: String!
      }
      
      type SharedProduct {
        schema1: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema1: String!
      }
      
      type Viewer {
        schema1: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema1: String!
      }
      
      union IUnion = Product | Review
    interactions:
      - request:
          body: >-
            {"query":"query Op_b5a406bd_1 {\n  productById(id: 1) {\n    shared {\n      schema1\n    }\n    id\n  }\n}"}
        response:
          body: >-
            {"data":{"productById":{"shared":{"schema1":"schema1"},"id":1}}}
  - name: B
    schema: >-
      schema {
        query: Query
      }
      
      interface IInterface {
        id: Int!
      }
      
      type Product implements IInterface {
        id: Int!
        schema2: String!
        shared: SharedProduct
      }
      
      type Query {
        product(id: Int!): Product @lookup
        viewer: Viewer!
        schema2: String!
        interface: IInterface!
        union: IUnion!
        topReview: Review!
      }
      
      type Review implements IInterface {
        id: Int!
        schema2: String!
      }
      
      type SharedProduct {
        schema2: String!
        shared2: SharedProduct2
      }
      
      type SharedProduct2 {
        schema2: String!
      }
      
      type Viewer {
        schema2: String!
        settings: ViewerSettings!
      }
      
      type ViewerSettings {
        schema2: String!
      }
      
      union IUnion = Product | Review
    interactions:
      - request:
          body: >-
            {"query":"query Op_b5a406bd_2(\n  $__fusion_1_id: Int!\n) {\n  product(id: $__fusion_1_id) {\n    shared {\n      schema2\n    }\n  }\n}","variables":{"__fusion_1_id":1}}
        response:
          body: >-
            {"data":{"product":{"shared":{"schema2":"schema2"}}}}
operationPlan:
  operation:
    - document: >-
        {
          productById(id: 1) {
            shared {
              schema2
              schema1
            }
            id @fusion__requirement
          }
        }
      hash: b5a406bda2d9875764ec947b24529920
      searchSpace: 1
  nodes:
    - id: 1
      type: Operation
      schema: A
      operation: >-
        query Op_b5a406bd_1 {
          productById(id: 1) {
            shared {
              schema1
            }
            id
          }
        }
    - id: 2
      type: Operation
      schema: B
      operation: >-
        query Op_b5a406bd_2(
          $__fusion_1_id: Int!
        ) {
          product(id: $__fusion_1_id) {
            shared {
              schema2
            }
          }
        }
      source: $.product
      target: $.productById
      requirements:
        - name: __fusion_1_id
          selectionMap: >-
            id
      dependencies:
        - id: 1
