<?xml version="1.0" encoding="utf-8"?>

<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">

    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorHelper_PreMergeValidationFailed" xml:space="preserve">
    <value>Pre-merge validation failed. View the composition log for details.</value>
  </data>
  <data name="ErrorHelper_SourceSchemaValidationFailed" xml:space="preserve">
    <value>Source schema validation failed. View the composition log for details.</value>
  </data>
  <data name="LogEntryHelper_DisallowedInaccessibleBuiltInScalar" xml:space="preserve">
    <value>The built-in scalar type '{0}' in schema '{1}' is not accessible.</value>
  </data>
  <data name="LogEntryHelper_DisallowedInaccessibleIntrospectionType" xml:space="preserve">
    <value>The introspection type '{0}' in schema '{1}' is not accessible.</value>
  </data>
  <data name="LogEntryHelper_DisallowedInaccessibleIntrospectionField" xml:space="preserve">
    <value>The introspection field '{0}' in schema '{1}' is not accessible.</value>
  </data>
  <data name="LogEntryHelper_DisallowedInaccessibleIntrospectionArgument" xml:space="preserve">
    <value>The introspection argument '{0}' in schema '{1}' is not accessible.</value>
  </data>
  <data name="LogEntryHelper_DisallowedInaccessibleDirectiveArgument" xml:space="preserve">
    <value>The built-in directive argument '{0}' in schema '{1}' is not accessible.</value>
  </data>
  <data name="LogEntryHelper_EnumValuesMismatch" xml:space="preserve">
    <value>The enum type '{0}' in schema '{1}' must define the value '{2}'.</value>
  </data>
  <data name="LogEntryHelper_ExternalArgumentDefaultMismatch" xml:space="preserve">
    <value>The argument with schema coordinate '{0}' has inconsistent default values.</value>
  </data>
  <data name="LogEntryHelper_ExternalMissingOnBase" xml:space="preserve">
    <value>The external field '{0}' in schema '{1}' is not defined (non-external) in any other schema.</value>
  </data>
  <data name="LogEntryHelper_ExternalOnInterface" xml:space="preserve">
    <value>The interface field '{0}' in schema '{1}' must not be marked as external.</value>
  </data>
  <data name="LogEntryHelper_ExternalUnused" xml:space="preserve">
    <value>The external field '{0}' in schema '{1}' is not referenced by a @provides directive in the schema.</value>
  </data>
  <data name="LogEntryHelper_FieldArgumentTypesNotMergeable" xml:space="preserve">
    <value>The argument '{0}' has a different type shape in schema '{1}' than it does in schema '{2}'.</value>
  </data>
  <data name="LogEntryHelper_InputFieldDefaultMismatch" xml:space="preserve">
    <value>The default value '{0}' of input field '{1}' in schema '{2}' differs from the default value of '{3}' in schema '{4}'.</value>
  </data>
  <data name="LogEntryHelper_InputFieldTypesNotMergeable" xml:space="preserve">
    <value>The input field '{0}' has a different type shape in schema '{1}' than it does in schema '{2}'.</value>
  </data>
  <data name="LogEntryHelper_InputWithMissingRequiredFields" xml:space="preserve">
    <value>The input type '{0}' in schema '{1}' must define the required field '{2}'.</value>
  </data>
  <data name="LogEntryHelper_KeyDirectiveInFieldsArgument" xml:space="preserve">
    <value>A @key directive on type '{0}' in schema '{1}' references field '{2}', which must not include directive applications.</value>
  </data>
  <data name="LogEntryHelper_KeyFieldsHasArguments" xml:space="preserve">
    <value>A @key directive on type '{0}' in schema '{1}' references field '{2}', which must not have arguments.</value>
  </data>
  <data name="LogEntryHelper_KeyFieldsSelectInvalidType" xml:space="preserve">
    <value>A @key directive on type '{0}' in schema '{1}' references field '{2}', which must not be a list, interface, or union type.</value>
  </data>
  <data name="LogEntryHelper_KeyInvalidFields" xml:space="preserve">
    <value>A @key directive on type '{0}' in schema '{1}' references field '{2}', which does not exist.</value>
  </data>
  <data name="LogEntryHelper_KeyInvalidFieldsType" xml:space="preserve">
    <value>A @key directive on type '{0}' in schema '{1}' must specify a string value for the 'fields' argument.</value>
  </data>
  <data name="LogEntryHelper_KeyInvalidSyntax" xml:space="preserve">
    <value>A @key directive on type '{0}' in schema '{1}' contains invalid syntax in the 'fields' argument.</value>
  </data>
  <data name="LogEntryHelper_LookupReturnsList" xml:space="preserve">
    <value>The lookup field '{0}' in schema '{1}' must not return a list.</value>
  </data>
  <data name="LogEntryHelper_LookupReturnsNonNullableType" xml:space="preserve">
    <value>The lookup field '{0}' in schema '{1}' should return a nullable type.</value>
  </data>
  <data name="LogEntryHelper_OutputFieldTypesNotMergeable" xml:space="preserve">
    <value>The output field '{0}' has a different type shape in schema '{1}' than it does in schema '{2}'.</value>
  </data>
  <data name="LogEntryHelper_OverrideFromSelf" xml:space="preserve">
    <value>The @override directive on field '{0}' in schema '{1}' must not reference the same schema.</value>
  </data>
  <data name="LogEntryHelper_OverrideOnInterface" xml:space="preserve">
    <value>The interface field '{0}' in schema '{1}' must not be annotated with the @override directive.</value>
  </data>
  <data name="LogEntryHelper_ProvidesDirectiveInFieldsArgument" xml:space="preserve">
    <value>The @provides directive on field '{0}' in schema '{1}' references field '{2}', which must not include directive applications.</value>
  </data>
  <data name="LogEntryHelper_ProvidesFieldsHasArguments" xml:space="preserve">
    <value>The @provides directive on field '{0}' in schema '{1}' references field '{2}', which must not have arguments.</value>
  </data>
  <data name="LogEntryHelper_ProvidesFieldsMissingExternal" xml:space="preserve">
    <value>The @provides directive on field '{0}' in schema '{1}' references field '{2}', which must be marked as external.</value>
  </data>
  <data name="LogEntryHelper_ProvidesInvalidFieldsType" xml:space="preserve">
    <value>The @provides directive on field '{0}' in schema '{1}' must specify a string value for the 'fields' argument.</value>
  </data>
  <data name="LogEntryHelper_ProvidesInvalidSyntax" xml:space="preserve">
    <value>The @provides directive on field '{0}' in schema '{1}' contains invalid syntax in the 'fields' argument.</value>
  </data>
  <data name="LogEntryHelper_ProvidesOnNonCompositeField" xml:space="preserve">
    <value>The field '{0}' in schema '{1}' includes a @provides directive, but does not return a composite type.</value>
  </data>
  <data name="LogEntryHelper_QueryRootTypeInaccessible" xml:space="preserve">
    <value>The root query type in schema '{0}' must be accessible.</value>
  </data>
  <data name="LogEntryHelper_RequireDirectiveInFieldsArgument" xml:space="preserve">
    <value>The @require directive on argument '{0}' in schema '{1}' references field '{2}', which must not include directive applications.</value>
  </data>
  <data name="LogEntryHelper_RequireInvalidFieldsType" xml:space="preserve">
    <value>The @require directive on argument '{0}' in schema '{1}' must specify a string value for the 'fields' argument.</value>
  </data>
  <data name="LogEntryHelper_RequireInvalidSyntax" xml:space="preserve">
    <value>The @require directive on argument '{0}' in schema '{1}' contains invalid syntax in the 'fields' argument.</value>
  </data>
  <data name="LogEntryHelper_RootMutationUsed" xml:space="preserve">
    <value>The root mutation type in schema '{0}' must be named 'Mutation'.</value>
  </data>
  <data name="LogEntryHelper_RootQueryUsed" xml:space="preserve">
    <value>The root query type in schema '{0}' must be named 'Query'.</value>
  </data>
  <data name="LogEntryHelper_RootSubscriptionUsed" xml:space="preserve">
    <value>The root subscription type in schema '{0}' must be named 'Subscription'.</value>
  </data>
</root>
