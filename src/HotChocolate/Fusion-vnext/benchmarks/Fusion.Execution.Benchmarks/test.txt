using System;
using System.Diagnostics.Tracing;
using Fusion.Execution.Benchmarks;

// var listener = new MemoryPoolListener(); // Must instantiate before any pool operations

var bench = new GraphQLQueryBenchmark();

await bench.GlobalSetup();

Console.WriteLine("Warming up...");

for (var i = 0; i < 5; i++)
{
    Console.WriteLine($"\n=== Warmup iteration {i + 1} ===");
    await bench.Send_Large_Request_With_Fusion();
}

Console.WriteLine("\n=== Warmup complete, press Enter to run actual iterations ===");
Console.ReadLine();

for (var i = 0; i < 5; i++)
{
    Console.WriteLine($"\n=== Iteration {i + 1} ===");
    await bench.Send_Large_Request_With_Fusion();
}

Console.WriteLine("\n=== Done, press Enter to cleanup ===");
Console.ReadLine();

await bench.GlobalCleanup();

public class MemoryPoolListener : EventListener
{
    protected override void OnEventSourceCreated(EventSource eventSource)
    {
        if (eventSource.Name.StartsWith("HotChocolate-Fusion"))
        {
            EnableEvents(eventSource, EventLevel.Informational);
            Console.WriteLine($"[LISTENER] Enabled events for: {eventSource.Name}");
        }
    }

    protected override void OnEventWritten(EventWrittenEventArgs eventData)
    {
        var payload = eventData.Payload != null ? string.Join(", ", eventData.Payload) : "";
        Console.WriteLine($"[{eventData.EventSource.Name}] {eventData.EventName}: {payload}");
    }
}