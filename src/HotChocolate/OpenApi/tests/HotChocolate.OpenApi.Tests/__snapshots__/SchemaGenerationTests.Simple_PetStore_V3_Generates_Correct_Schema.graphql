schema {
  query: Query
  mutation: Mutation
}

type AddPetPayload {
  id: Long
  name: String
  tag: String
}

type DeletePetPayload {
  success: Boolean
}

type Mutation {
  addPet(input: AddPetInput): AddPetPayload
  deletePet(input: DeletePetInput): DeletePetPayload
}

type Pet {
  id: Long
  name: String
  tag: String
}

type Query {
  findPetById(id: Long): Pet
  findPets(limit: Int tags: String): [Pet]
}

input AddPetInput {
  name: String!
  tag: String
}

input DeletePetInput {
  id: Long!
}

"The @tag directive is used to apply arbitrary string\nmetadata to a schema location. Custom tooling can use\nthis metadata during any step of the schema delivery flow,\nincluding composition, static analysis, and documentation.\n            \n\ninterface Book {\n  id: ID! @tag(name: \"your-value\")\n  title: String!\n  author: String!\n}"
directive @tag("The name of the tag." name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long