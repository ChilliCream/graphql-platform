schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  hero(episode: Episode! = NEW_HOPE): Character
  heroes(episodes: [Episode!]): [Character!]
  character(characterIds: [String]): [Character!]!
  search(text: String): [SearchResult]
  human(id: String): Human
  droid(id: String): Droid
  time: Long!
  evict: Boolean!
}

type Mutation {
  createReview(episode: Episode! review: ReviewInput!): Review!
}

type Subscription {
  onReview(episode: Episode!): Review!
  onNext: String
}

type Human implements Character {
  id: ID!
  name: String!
  appearsIn: [Episode]
  friends(first: Int after: String last: Int before: String): CharacterConnection
  otherHuman: Human
  height(unit: Unit): Float
  homePlanet: String
}

type Droid implements Character {
  id: ID!
  name: String!
  appearsIn: [Episode]
  friends(first: Int after: String last: Int before: String): CharacterConnection
  height(unit: Unit): Float
  primaryFunction: String
}

enum Episode {
  NEW_HOPE
  EMPIRE
  JEDI
}

interface Character {
  id: ID!
  name: String!
  friends(first: Int after: String last: Int before: String): CharacterConnection
  appearsIn: [Episode]
  height(unit: Unit): Float
}

union SearchResult = Starship | Human | Droid

type Review {
  commentary: String
  stars: Int!
}

input ReviewInput {
  stars: Int!
  commentary: String
}

"A connection to a list of items."
type CharacterConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CharacterEdge!]
  "A flattened list of the nodes."
  nodes: [Character]
}

enum Unit {
  FOOT
  METERS
}

type Starship {
  id: ID!
  name: String!
  length(unit: Unit): Float!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type CharacterEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Character
}

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

directive @export(as: String) on FIELD
