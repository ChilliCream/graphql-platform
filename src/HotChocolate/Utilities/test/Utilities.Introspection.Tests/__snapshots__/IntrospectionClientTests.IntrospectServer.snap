schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  hero(episode: Episode! = NEW_HOPE): Character
  heroByTraits(traits: JSON!): Character
  heroes(episodes: [Episode!]!): [Character!]
  character(characterIds: [String!]!): [Character!]!
  search(text: String!): [SearchResult]
  human(id: String!): Human
  droid(id: String!): Droid
  time: Long!
  evict: Boolean!
  wait(m: Int!): Boolean!
  someDeprecatedField(deprecatedArg: String! = "foo" @deprecated(reason: "use something else")): String! @deprecated(reason: "use something else")
}

type Mutation {
  createReview(episode: Episode! review: ReviewInput!): Review!
  complete(episode: Episode!): Boolean!
}

type Subscription {
  onReview(episode: Episode!): Review!
  onNext: String!
  onException: String!
  delay(delay: Int! count: Int!): String!
}

type Human implements Character {
  id: ID!
  name: String!
  appearsIn: [Episode]
  friends("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): FriendsConnection
  otherHuman: Human
  height(unit: Unit): Float
  homePlanet: String
  traits: JSON
}

type Droid implements Character {
  id: ID!
  name: String!
  appearsIn: [Episode]
  friends("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): FriendsConnection
  height(unit: Unit): Float
  primaryFunction: String
  traits: JSON
}

enum Episode {
  NEW_HOPE
  EMPIRE
  JEDI
}

interface Character {
  id: ID!
  name: String!
  friends("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): FriendsConnection
  appearsIn: [Episode]
  traits: JSON
  height(unit: Unit): Float
}

union SearchResult = Starship | Human | Droid

type Review {
  commentary: String
  stars: Int!
}

input ReviewInput {
  stars: Int!
  commentary: String
}

"A connection to a list of items."
type FriendsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FriendsEdge!]
  "A flattened list of the nodes."
  nodes: [Character]
}

enum Unit {
  FOOT
  METERS
}

scalar JSON

type Starship {
  id: ID!
  name: String!
  length(unit: Unit): Float!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type FriendsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Character
}

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

directive @foo(bar: Int!) on SUBSCRIPTION
