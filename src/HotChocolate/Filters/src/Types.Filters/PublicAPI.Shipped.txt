#nullable enable
abstract HotChocolate.Types.Filters.Expressions.ComparableOperationHandlerBase.TryCreateExpression(HotChocolate.Types.Filters.FilterOperation! operation, System.Linq.Expressions.Expression! property, System.Func<object!>! parseValue, out System.Linq.Expressions.Expression? expression) -> bool
abstract HotChocolate.Types.Filters.Expressions.StringOperationHandlerBase.TryCreateExpression(HotChocolate.Types.Filters.FilterOperation! operation, System.Linq.Expressions.Expression! property, object! parsedValue, out System.Linq.Expressions.Expression? expression) -> bool
abstract HotChocolate.Types.Filters.FilterFieldDescriptorBase.AllowedOperations.get -> System.Collections.Generic.ISet<HotChocolate.Types.Filters.FilterOperationKind>!
abstract HotChocolate.Types.Filters.FilterFieldDescriptorBase.CreateOperationDefinition(HotChocolate.Types.Filters.FilterOperationKind operationKind) -> HotChocolate.Types.Filters.FilterOperationDefintion!
abstract HotChocolate.Types.Filters.FilterNamingConventionBase.ArgumentName.get -> HotChocolate.NameString
abstract HotChocolate.Types.Filters.FilterNamingConventionBase.CreateFieldName(HotChocolate.Types.Filters.FilterFieldDefintion! definition, HotChocolate.Types.Filters.FilterOperationKind kind) -> HotChocolate.NameString
HotChocolate.Types.FilterObjectFieldDescriptorExtensions
HotChocolate.Types.Filters.AndField
HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor
HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor.ArrayBooleanFilterOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ArrayFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> void
HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.AllowAll() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.AllowAny() -> HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.AllowNone() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.AllowSome() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.ArrayFilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.PropertyInfo! property, System.Type! type) -> void
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.BindExplicitly() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.BindImplicitly() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.GetFilterOperation(HotChocolate.Types.Filters.FilterOperationKind operationKind) -> HotChocolate.Types.Filters.FilterOperation!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.GetTypeReference() -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.AllowAll() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.AllowAll(System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<TArray>!>! descriptor) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.AllowAll<TFilter>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.AllowNone() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.AllowNone(System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<TArray>!>! descriptor) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.AllowNone<TFilter>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.AllowSome() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.AllowSome(System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<TArray>!>! descriptor) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.AllowSome<TFilter>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.ArrayFilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.PropertyInfo! property) -> void
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.BindExplicitly() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>.BindImplicitly() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor.ArrayFilterOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ArrayFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> void
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>.And() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>.ArrayFilterOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> void
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>.Description(string! value) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>.Directive<T>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.BooleanFilterFieldDescriptor
HotChocolate.Types.Filters.BooleanFilterFieldDescriptor.AllowEquals() -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.BooleanFilterFieldDescriptor.AllowNotEquals() -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.BooleanFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.BooleanFilterFieldDescriptor.BindFiltersExplicitly() -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.BooleanFilterFieldDescriptor.BindFiltersImplicitly() -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.BooleanFilterFieldDescriptor.BooleanFilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.PropertyInfo! property) -> void
HotChocolate.Types.Filters.BooleanFilterFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptor
HotChocolate.Types.Filters.BooleanFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptor.BooleanFilterOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.BooleanFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> void
HotChocolate.Types.Filters.BooleanFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptorBase
HotChocolate.Types.Filters.BooleanFilterOperationDescriptorBase.BooleanFilterOperationDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> void
HotChocolate.Types.Filters.BooleanFilterOperationDescriptorBase.Description(string! value) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptorBase.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptorBase.Directive<T>() -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptorBase.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.BooleanFilterOperationDescriptorBase.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowGreaterThan() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowGreaterThanOrEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowIn() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowLowerThan() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowLowerThanOrEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowNotEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowNotGreaterThan() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowNotGreaterThanOrEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowNotIn() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowNotLowerThan() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowNotLowerThanOrEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.BindFiltersExplicitly() -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.BindFiltersImplicitly() -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.ComparableFilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.PropertyInfo! property) -> void
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.Type(HotChocolate.Language.NamedTypeNode! typeNode) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.Type(System.Type! type) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.Type<TLeafType>() -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.Type<TLeafType>(TLeafType! leafType) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.ComparableFilterOperationDescriptor
HotChocolate.Types.Filters.ComparableFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.ComparableFilterOperationDescriptor.ComparableFilterOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ComparableFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> void
HotChocolate.Types.Filters.ComparableFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.ComparableFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.Expressions.ArrayAnyOperationHandler
HotChocolate.Types.Filters.Expressions.ArrayAnyOperationHandler.ArrayAnyOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.ArrayAnyOperationHandler.TryHandle(HotChocolate.Types.Filters.FilterOperation! operation, HotChocolate.Types.IInputType! type, HotChocolate.Language.IValueNode! value, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out System.Linq.Expressions.Expression? expression) -> bool
HotChocolate.Types.Filters.Expressions.ArrayFieldHandler
HotChocolate.Types.Filters.Expressions.ArrayFieldHandler.ArrayFieldHandler() -> void
HotChocolate.Types.Filters.Expressions.ArrayFieldHandler.Enter(HotChocolate.Types.Filters.FilterOperationField! field, HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out HotChocolate.Language.Visitors.ISyntaxVisitorAction! action) -> bool
HotChocolate.Types.Filters.Expressions.ArrayFieldHandler.Leave(HotChocolate.Types.Filters.FilterOperationField! field, HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> void
HotChocolate.Types.Filters.Expressions.BooleanEqualsOperationHandler
HotChocolate.Types.Filters.Expressions.BooleanEqualsOperationHandler.BooleanEqualsOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.BooleanEqualsOperationHandler.TryHandle(HotChocolate.Types.Filters.FilterOperation! operation, HotChocolate.Types.IInputType! type, HotChocolate.Language.IValueNode! value, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out System.Linq.Expressions.Expression? expression) -> bool
HotChocolate.Types.Filters.Expressions.ComparableEqualsOperationHandler
HotChocolate.Types.Filters.Expressions.ComparableEqualsOperationHandler.ComparableEqualsOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.ComparableGreaterThanOperationHandler
HotChocolate.Types.Filters.Expressions.ComparableGreaterThanOperationHandler.ComparableGreaterThanOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.ComparableGreaterThanOrEqualsOperationHandler
HotChocolate.Types.Filters.Expressions.ComparableGreaterThanOrEqualsOperationHandler.ComparableGreaterThanOrEqualsOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.ComparableInOperationHandler
HotChocolate.Types.Filters.Expressions.ComparableInOperationHandler.ComparableInOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.ComparableInOperationHandler.TryHandle(HotChocolate.Types.Filters.FilterOperation! operation, HotChocolate.Types.IInputType! type, HotChocolate.Language.IValueNode! value, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out System.Linq.Expressions.Expression? expression) -> bool
HotChocolate.Types.Filters.Expressions.ComparableLowerThanOperationHandler
HotChocolate.Types.Filters.Expressions.ComparableLowerThanOperationHandler.ComparableLowerThanOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.ComparableLowerThanOrEqualsOperationHandler
HotChocolate.Types.Filters.Expressions.ComparableLowerThanOrEqualsOperationHandler.ComparableLowerThanOrEqualsOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.ComparableOperationHandlerBase
HotChocolate.Types.Filters.Expressions.ComparableOperationHandlerBase.ComparableOperationHandlerBase() -> void
HotChocolate.Types.Filters.Expressions.ComparableOperationHandlerBase.TryHandle(HotChocolate.Types.Filters.FilterOperation! operation, HotChocolate.Types.IInputType! type, HotChocolate.Language.IValueNode! value, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out System.Linq.Expressions.Expression? expression) -> bool
HotChocolate.Types.Filters.Expressions.ExpressionFieldHandlers
HotChocolate.Types.Filters.Expressions.ExpressionOperationHandlers
HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder
HotChocolate.Types.Filters.Expressions.IExpressionFieldHandler
HotChocolate.Types.Filters.Expressions.IExpressionFieldHandler.Enter(HotChocolate.Types.Filters.FilterOperationField! field, HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out HotChocolate.Language.Visitors.ISyntaxVisitorAction! action) -> bool
HotChocolate.Types.Filters.Expressions.IExpressionFieldHandler.Leave(HotChocolate.Types.Filters.FilterOperationField! field, HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> void
HotChocolate.Types.Filters.Expressions.IExpressionOperationHandler
HotChocolate.Types.Filters.Expressions.IExpressionOperationHandler.TryHandle(HotChocolate.Types.Filters.FilterOperation! operation, HotChocolate.Types.IInputType! type, HotChocolate.Language.IValueNode! value, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out System.Linq.Expressions.Expression? expression) -> bool
HotChocolate.Types.Filters.Expressions.ObjectFieldHandler
HotChocolate.Types.Filters.Expressions.ObjectFieldHandler.Enter(HotChocolate.Types.Filters.FilterOperationField! field, HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out HotChocolate.Language.Visitors.ISyntaxVisitorAction! action) -> bool
HotChocolate.Types.Filters.Expressions.ObjectFieldHandler.Leave(HotChocolate.Types.Filters.FilterOperationField! field, HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> void
HotChocolate.Types.Filters.Expressions.ObjectFieldHandler.ObjectFieldHandler() -> void
HotChocolate.Types.Filters.Expressions.StringContainsOperationHandler
HotChocolate.Types.Filters.Expressions.StringContainsOperationHandler.StringContainsOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.StringEndsWithOperationHandler
HotChocolate.Types.Filters.Expressions.StringEndsWithOperationHandler.StringEndsWithOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.StringEqualsOperationHandler
HotChocolate.Types.Filters.Expressions.StringEqualsOperationHandler.StringEqualsOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.StringInOperationHandler
HotChocolate.Types.Filters.Expressions.StringInOperationHandler.StringInOperationHandler() -> void
HotChocolate.Types.Filters.Expressions.StringInOperationHandler.TryHandle(HotChocolate.Types.Filters.FilterOperation! operation, HotChocolate.Types.IInputType! type, HotChocolate.Language.IValueNode! value, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out System.Linq.Expressions.Expression? expression) -> bool
HotChocolate.Types.Filters.Expressions.StringOperationHandlerBase
HotChocolate.Types.Filters.Expressions.StringOperationHandlerBase.StringOperationHandlerBase() -> void
HotChocolate.Types.Filters.Expressions.StringOperationHandlerBase.TryHandle(HotChocolate.Types.Filters.FilterOperation! operation, HotChocolate.Types.IInputType! type, HotChocolate.Language.IValueNode! value, HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, out System.Linq.Expressions.Expression? expression) -> bool
HotChocolate.Types.Filters.Expressions.StringStartsWithOperationHandler
HotChocolate.Types.Filters.Expressions.StringStartsWithOperationHandler.StringStartsWithOperationHandler() -> void
HotChocolate.Types.Filters.Extensions.FilterFieldCollectionExtensions
HotChocolate.Types.Filters.FilterFieldDefintion
HotChocolate.Types.Filters.FilterFieldDefintion.FilterFieldDefintion() -> void
HotChocolate.Types.Filters.FilterFieldDefintion.Filters.get -> HotChocolate.Types.Descriptors.Definitions.IBindableList<HotChocolate.Types.Filters.FilterOperationDefintion!>!
HotChocolate.Types.Filters.FilterFieldDescriptorBase
HotChocolate.Types.Filters.FilterFieldDescriptorBase.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.FilterFieldDescriptorBase!
HotChocolate.Types.Filters.FilterFieldDescriptorBase.CreateFieldName(HotChocolate.Types.Filters.FilterOperationKind kind) -> HotChocolate.NameString
HotChocolate.Types.Filters.FilterFieldDescriptorBase.FilterFieldDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.PropertyInfo! property) -> void
HotChocolate.Types.Filters.FilterFieldDescriptorBase.Filters.get -> System.Collections.Generic.ICollection<HotChocolate.Types.Filters.FilterOperationDescriptorBase!>!
HotChocolate.Types.Filters.FilterFieldDescriptorBase.RewriteTypeListType() -> HotChocolate.Types.Descriptors.ITypeReference!
HotChocolate.Types.Filters.FilterFieldDescriptorBase.RewriteTypeToNullableType() -> HotChocolate.Types.Descriptors.ITypeReference!
HotChocolate.Types.Filters.FilterFieldDescriptorBase.Type(HotChocolate.Language.ITypeNode! typeNode) -> void
HotChocolate.Types.Filters.FilterFieldDescriptorBase.Type(System.Type! type) -> void
HotChocolate.Types.Filters.FilterFieldDescriptorBase.Type<TInputType>() -> void
HotChocolate.Types.Filters.FilterFieldDescriptorBase.Type<TInputType>(TInputType! inputType) -> void
HotChocolate.Types.Filters.FilterInputType<T>
HotChocolate.Types.Filters.FilterInputType<T>.EntityType.get -> System.Type!
HotChocolate.Types.Filters.FilterInputType<T>.FilterInputType() -> void
HotChocolate.Types.Filters.FilterInputType<T>.FilterInputType(System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!>! configure) -> void
HotChocolate.Types.Filters.FilterInputTypeDefinition
HotChocolate.Types.Filters.FilterInputTypeDefinition.EntityType.get -> System.Type?
HotChocolate.Types.Filters.FilterInputTypeDefinition.EntityType.set -> void
HotChocolate.Types.Filters.FilterInputTypeDefinition.FilterInputTypeDefinition() -> void
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Description(string! value) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Fields.get -> System.Collections.Generic.List<HotChocolate.Types.Filters.FilterFieldDescriptorBase!>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Filter(System.Linq.Expressions.Expression<System.Func<T, bool>!>! property) -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Filter(System.Linq.Expressions.Expression<System.Func<T, string!>!>! property) -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Filter(System.Linq.Expressions.Expression<System.Func<T, System.IComparable!>!>! property) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.FilterInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> void
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Ignore(System.Linq.Expressions.Expression<System.Func<T, object!>!>! property) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.List(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<bool>!>!>! property) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<HotChocolate.Types.Filters.ISingleFilter<bool>!>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.List(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<string!>!>!>! property) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<HotChocolate.Types.Filters.ISingleFilter<string!>!>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.List<TObject>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TObject!>!>!>! property) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TObject!>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.List<TStruct>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TStruct?>!>!>! property, HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.RequireStruct<TStruct>? ignore = null) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<HotChocolate.Types.Filters.ISingleFilter<TStruct>!>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.List<TStruct>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TStruct>!>!>! property, HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.RequireStruct<TStruct>? ignore = null) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<HotChocolate.Types.Filters.ISingleFilter<TStruct>!>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.ListFilter<TObject, TListType>(System.Linq.Expressions.Expression<System.Func<T, TListType>!>! property) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TObject>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Object<TObject>(System.Linq.Expressions.Expression<System.Func<T, TObject!>!>! property) -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject!>!
HotChocolate.Types.Filters.FilterMiddlewareContext
HotChocolate.Types.Filters.FilterMiddlewareContext.ArgumentName.get -> string!
HotChocolate.Types.Filters.FilterMiddlewareContext.FilterMiddlewareContext(string! argumentName) -> void
HotChocolate.Types.Filters.FilterNamingConventionBase
HotChocolate.Types.Filters.FilterNamingConventionBase.FilterNamingConventionBase() -> void
HotChocolate.Types.Filters.FilterNamingConventionBase.Scope.get -> string?
HotChocolate.Types.Filters.FilterNamingConventionExtensions
HotChocolate.Types.Filters.FilterNamingConventionPascalCase
HotChocolate.Types.Filters.FilterNamingConventionPascalCase.FilterNamingConventionPascalCase() -> void
HotChocolate.Types.Filters.FilterNamingConventionSnakeCase
HotChocolate.Types.Filters.FilterNamingConventionSnakeCase.FilterNamingConventionSnakeCase() -> void
HotChocolate.Types.Filters.FilterOperation
HotChocolate.Types.Filters.FilterOperation.FilterOperation(System.Type! type, HotChocolate.Types.Filters.FilterOperationKind kind, System.Reflection.PropertyInfo! property) -> void
HotChocolate.Types.Filters.FilterOperation.IsSimpleArrayType() -> bool
HotChocolate.Types.Filters.FilterOperation.Kind.get -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperation.Property.get -> System.Reflection.PropertyInfo!
HotChocolate.Types.Filters.FilterOperation.TryGetSimpleFilterBaseType(out System.Type? baseType) -> bool
HotChocolate.Types.Filters.FilterOperation.Type.get -> System.Type!
HotChocolate.Types.Filters.FilterOperationDefintion
HotChocolate.Types.Filters.FilterOperationDefintion.FilterOperationDefintion() -> void
HotChocolate.Types.Filters.FilterOperationDefintion.Operation.get -> HotChocolate.Types.Filters.FilterOperation?
HotChocolate.Types.Filters.FilterOperationDefintion.Operation.set -> void
HotChocolate.Types.Filters.FilterOperationDescriptorBase
HotChocolate.Types.Filters.FilterOperationDescriptorBase.FilterOperationDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext! context) -> void
HotChocolate.Types.Filters.FilterOperationDescriptorBase.Name(HotChocolate.NameString value) -> void
HotChocolate.Types.Filters.FilterOperationField
HotChocolate.Types.Filters.FilterOperationField.Operation.get -> HotChocolate.Types.Filters.FilterOperation!
HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.ArrayAll = 48 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.ArrayAny = 50 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.ArrayNone = 40 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.ArraySome = 38 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.Contains = 2 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.EndsWith = 8 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.Equals = 0 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.GreaterThan = 22 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.GreaterThanOrEquals = 24 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.In = 4 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.LowerThan = 32 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.LowerThanOrEquals = 34 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.NotContains = 3 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.NotEndsWith = 9 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.NotEquals = 1 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.NotGreaterThan = 23 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.NotGreaterThanOrEquals = 25 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.NotIn = 5 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.NotLowerThan = 33 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.NotLowerThanOrEquals = 35 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.NotStartsWith = 7 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.Object = 36 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterOperationKind.StartsWith = 6 -> HotChocolate.Types.Filters.FilterOperationKind
HotChocolate.Types.Filters.FilterTypeNameExtensions
HotChocolate.Types.Filters.FilterVisitorBase<TContext>
HotChocolate.Types.Filters.FilterVisitorBase<TContext>.FilterVisitorBase() -> void
HotChocolate.Types.Filters.FilterVisitorContextBase
HotChocolate.Types.Filters.FilterVisitorContextBase.FilterVisitorContextBase(HotChocolate.Types.InputObjectType! initialType) -> void
HotChocolate.Types.Filters.FilterVisitorContextBase.Operations.get -> System.Collections.Generic.Stack<HotChocolate.Types.IInputField!>!
HotChocolate.Types.Filters.FilterVisitorContextBase.Types.get -> System.Collections.Generic.Stack<HotChocolate.Types.IType!>!
HotChocolate.Types.Filters.IAndField
HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor
HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor.AllowAll() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor.AllowAny() -> HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor.AllowNone() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor.AllowSome() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor.BindExplicitly() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor.BindImplicitly() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowAll() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowAll(System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<TArray>!>! descriptor) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowAll<TFilter>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowAny() -> HotChocolate.Types.Filters.IArrayBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowNone() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowNone(System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<TArray>!>! descriptor) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowNone<TFilter>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowSome() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowSome(System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<TArray>!>! descriptor) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.AllowSome<TFilter>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.BindExplicitly() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>.BindImplicitly() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>.And() -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>.Description(string! value) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>.Directive<T>() -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IArrayFilterOperationDescriptor<TArray>!
HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor
HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor.AllowEquals() -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor.AllowNotEquals() -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor.BindFiltersExplicitly() -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor.BindFiltersImplicitly() -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptor!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase.Description(string! value) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase.Directive<T>() -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IBooleanFilterOperationDescriptorBase!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowGreaterThan() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowGreaterThanOrEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowIn() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowLowerThan() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowLowerThanOrEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowNotEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowNotGreaterThan() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowNotGreaterThanOrEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowNotIn() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowNotLowerThan() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.AllowNotLowerThanOrEquals() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.BindFiltersExplicitly() -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.BindFiltersImplicitly() -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.Type(HotChocolate.Language.NamedTypeNode! typeNode) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.Type(System.Type! type) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.Type<TLeafType>() -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IComparableFilterFieldDescriptor.Type<TLeafType>(TLeafType! inputType) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IComparableFilterOperationDescriptor
HotChocolate.Types.Filters.IComparableFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IComparableFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IComparableFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IComparableFilterOperationDescriptor!
HotChocolate.Types.Filters.IFilterInputType
HotChocolate.Types.Filters.IFilterInputType.EntityType.get -> System.Type!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Description(string! value) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Filter(System.Linq.Expressions.Expression<System.Func<T, bool>!>! property) -> HotChocolate.Types.Filters.IBooleanFilterFieldDescriptor!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Filter(System.Linq.Expressions.Expression<System.Func<T, string!>!>! property) -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Filter(System.Linq.Expressions.Expression<System.Func<T, System.IComparable!>!>! property) -> HotChocolate.Types.Filters.IComparableFilterFieldDescriptor!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Ignore(System.Linq.Expressions.Expression<System.Func<T, object!>!>! property) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.List(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<string!>!>!>! property) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<HotChocolate.Types.Filters.ISingleFilter<string!>!>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.List<TObject>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TObject!>!>!>! property) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<TObject!>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.List<TStruct>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TStruct?>!>!>! property, HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.RequireStruct<TStruct>? ignore = null) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<HotChocolate.Types.Filters.ISingleFilter<TStruct>!>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.List<TStruct>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TStruct>!>!>! property, HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.RequireStruct<TStruct>? ignore = null) -> HotChocolate.Types.Filters.IArrayFilterFieldDescriptor<HotChocolate.Types.Filters.ISingleFilter<TStruct>!>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.Object<TObject>(System.Linq.Expressions.Expression<System.Func<T, TObject!>!>! property) -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject!>!
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.RequireStruct<TStruct>
HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>.RequireStruct<TStruct>.RequireStruct() -> void
HotChocolate.Types.Filters.IFilterInputTypeNameDependencyDescriptor<T>
HotChocolate.Types.Filters.IFilterInputTypeNameDependencyDescriptor<T>.DependsOn(System.Type! schemaType) -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterInputTypeNameDependencyDescriptor<T>.DependsOn<TDependency>() -> HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!
HotChocolate.Types.Filters.IFilterNamingConvention
HotChocolate.Types.Filters.IFilterNamingConvention.ArgumentName.get -> HotChocolate.NameString
HotChocolate.Types.Filters.IFilterNamingConvention.ArrayFilterPropertyName.get -> HotChocolate.NameString
HotChocolate.Types.Filters.IFilterNamingConvention.CreateFieldName(HotChocolate.Types.Filters.FilterFieldDefintion! definition, HotChocolate.Types.Filters.FilterOperationKind kind) -> HotChocolate.NameString
HotChocolate.Types.Filters.IFilterNamingConvention.GetFilterTypeName(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> HotChocolate.NameString
HotChocolate.Types.Filters.IFilterOperationField
HotChocolate.Types.Filters.IFilterOperationField.Operation.get -> HotChocolate.Types.Filters.FilterOperation!
HotChocolate.Types.Filters.IFilterVisitorContextBase
HotChocolate.Types.Filters.IFilterVisitorContextBase.Operations.get -> System.Collections.Generic.Stack<HotChocolate.Types.IInputField!>!
HotChocolate.Types.Filters.IFilterVisitorContextBase.Types.get -> System.Collections.Generic.Stack<HotChocolate.Types.IType!>!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor.AllowObject() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor.BindExplicitly() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor.BindImplicitly() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>.AllowObject() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>.AllowObject(System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<TObject>!>! descriptor) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>.AllowObject<TFilter>() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>.BindExplicitly() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>.BindImplicitly() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>.And() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>.Description(string! value) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>.Directive<T>() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.IOrField
HotChocolate.Types.Filters.IQueryableFilterVisitorContext
HotChocolate.Types.Filters.IQueryableFilterVisitorContext.Closures.get -> System.Collections.Generic.Stack<HotChocolate.Types.Filters.QueryableClosure!>!
HotChocolate.Types.Filters.IQueryableFilterVisitorContext.FieldHandlers.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Filters.Expressions.IExpressionFieldHandler!>!
HotChocolate.Types.Filters.IQueryableFilterVisitorContext.InMemory.get -> bool
HotChocolate.Types.Filters.IQueryableFilterVisitorContext.OperationHandlers.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Filters.Expressions.IExpressionOperationHandler!>!
HotChocolate.Types.Filters.IQueryableFilterVisitorContext.TypeConverter.get -> HotChocolate.Utilities.ITypeConverter!
HotChocolate.Types.Filters.ISingleFilter
HotChocolate.Types.Filters.ISingleFilter<T>
HotChocolate.Types.Filters.ISingleFilter<T>.Element.get -> T
HotChocolate.Types.Filters.IStringFilterFieldDescriptor
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowContains() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowEndsWith() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowEquals() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowIn() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowNotContains() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowNotEndsWith() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowNotEquals() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowNotIn() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowNotStartsWith() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.AllowStartsWith() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.BindFiltersExplicitly() -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.BindFiltersImplicitly() -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.IStringFilterFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.IStringFilterOperationDescriptor
HotChocolate.Types.Filters.IStringFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.IStringFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.IStringFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor.AllowObject() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor.BindExplicitly() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor.BindImplicitly() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor.ObjectFilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.PropertyInfo! property, System.Type! type) -> void
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>.AllowObject() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>.AllowObject(System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<TObject>!>! descriptor) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>.AllowObject<TFilter>() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>.BindExplicitly() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>.BindImplicitly() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>.ObjectFilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.PropertyInfo! property) -> void
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor.ObjectFilterOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ObjectFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> void
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>.And() -> HotChocolate.Types.Filters.IObjectFilterFieldDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>.Description(string! value) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>.Directive<T>() -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IObjectFilterOperationDescriptor<TObject>!
HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>.ObjectFilterOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> void
HotChocolate.Types.Filters.OrField
HotChocolate.Types.Filters.QueryableClosure
HotChocolate.Types.Filters.QueryableClosure.CreateLambda() -> System.Linq.Expressions.LambdaExpression!
HotChocolate.Types.Filters.QueryableClosure.CreateLambda<T>() -> System.Linq.Expressions.Expression<T>!
HotChocolate.Types.Filters.QueryableClosure.Instance.get -> System.Collections.Generic.Stack<System.Linq.Expressions.Expression!>!
HotChocolate.Types.Filters.QueryableClosure.Level.get -> System.Collections.Generic.Stack<System.Collections.Generic.Queue<System.Linq.Expressions.Expression!>!>!
HotChocolate.Types.Filters.QueryableClosure.Parameter.get -> System.Linq.Expressions.ParameterExpression!
HotChocolate.Types.Filters.QueryableClosure.QueryableClosure(System.Type! type, string! parameterName, bool inMemory) -> void
HotChocolate.Types.Filters.QueryableFilterMiddleware<T>
HotChocolate.Types.Filters.QueryableFilterMiddleware<T>.InvokeAsync(HotChocolate.Resolvers.IMiddlewareContext! context) -> System.Threading.Tasks.Task!
HotChocolate.Types.Filters.QueryableFilterMiddleware<T>.QueryableFilterMiddleware(HotChocolate.Resolvers.FieldDelegate! next, HotChocolate.Types.Filters.FilterMiddlewareContext! contextData, HotChocolate.Utilities.ITypeConverter! converter) -> void
HotChocolate.Types.Filters.QueryableFilterVisitor
HotChocolate.Types.Filters.QueryableFilterVisitor.QueryableFilterVisitor() -> void
HotChocolate.Types.Filters.QueryableFilterVisitorContext
HotChocolate.Types.Filters.QueryableFilterVisitorContext.Closures.get -> System.Collections.Generic.Stack<HotChocolate.Types.Filters.QueryableClosure!>!
HotChocolate.Types.Filters.QueryableFilterVisitorContext.FieldHandlers.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Filters.Expressions.IExpressionFieldHandler!>!
HotChocolate.Types.Filters.QueryableFilterVisitorContext.InMemory.get -> bool
HotChocolate.Types.Filters.QueryableFilterVisitorContext.OperationHandlers.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Filters.Expressions.IExpressionOperationHandler!>!
HotChocolate.Types.Filters.QueryableFilterVisitorContext.QueryableFilterVisitorContext(HotChocolate.Types.InputObjectType! initialType, System.Type! source, HotChocolate.Utilities.ITypeConverter! converter, bool inMemory) -> void
HotChocolate.Types.Filters.QueryableFilterVisitorContext.QueryableFilterVisitorContext(HotChocolate.Types.InputObjectType! initialType, System.Type! source, System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Filters.Expressions.IExpressionOperationHandler!>! operationHandlers, System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Filters.Expressions.IExpressionFieldHandler!>! fieldHandlers, HotChocolate.Utilities.ITypeConverter! typeConverter, bool inMemory) -> void
HotChocolate.Types.Filters.QueryableFilterVisitorContext.TypeConverter.get -> HotChocolate.Utilities.ITypeConverter!
HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions
HotChocolate.Types.Filters.StringFilterFieldDescriptor
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowContains() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowEndsWith() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowEquals() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowIn() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowNotContains() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowNotEndsWith() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowNotEquals() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowNotIn() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowNotStartsWith() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowStartsWith() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.BindFilters(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.BindFiltersExplicitly() -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.BindFiltersImplicitly() -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.StringFilterFieldDescriptor.StringFilterFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.PropertyInfo! property) -> void
HotChocolate.Types.Filters.StringFilterOperationDescriptor
HotChocolate.Types.Filters.StringFilterOperationDescriptor.And() -> HotChocolate.Types.Filters.IStringFilterFieldDescriptor!
HotChocolate.Types.Filters.StringFilterOperationDescriptor.Description(string! value) -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterOperationDescriptor.Directive<T>() -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Filters.IStringFilterOperationDescriptor!
HotChocolate.Types.Filters.StringFilterOperationDescriptor.StringFilterOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.StringFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> void
HotChocolate.Types.UseFilteringAttribute
HotChocolate.Types.UseFilteringAttribute.FilterType.get -> System.Type?
HotChocolate.Types.UseFilteringAttribute.FilterType.set -> void
HotChocolate.Types.UseFilteringAttribute.UseFilteringAttribute() -> void
override HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.AllowedOperations.get -> System.Collections.Generic.ISet<HotChocolate.Types.Filters.FilterOperationKind>!
override HotChocolate.Types.Filters.ArrayFilterFieldDescriptor.CreateOperationDefinition(HotChocolate.Types.Filters.FilterOperationKind operationKind) -> HotChocolate.Types.Filters.FilterOperationDefintion!
override HotChocolate.Types.Filters.BooleanFilterFieldDescriptor.AllowedOperations.get -> System.Collections.Generic.ISet<HotChocolate.Types.Filters.FilterOperationKind>!
override HotChocolate.Types.Filters.BooleanFilterFieldDescriptor.CreateOperationDefinition(HotChocolate.Types.Filters.FilterOperationKind operationKind) -> HotChocolate.Types.Filters.FilterOperationDefintion!
override HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.AllowedOperations.get -> System.Collections.Generic.ISet<HotChocolate.Types.Filters.FilterOperationKind>!
override HotChocolate.Types.Filters.ComparableFilterFieldDescriptor.CreateOperationDefinition(HotChocolate.Types.Filters.FilterOperationKind operationKind) -> HotChocolate.Types.Filters.FilterOperationDefintion!
override HotChocolate.Types.Filters.FilterFieldDescriptorBase.OnCreateDefinition(HotChocolate.Types.Filters.FilterFieldDefintion! definition) -> void
override HotChocolate.Types.Filters.FilterInputType<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition!
override HotChocolate.Types.Filters.FilterInputType<T>.OnCompleteFields(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition, System.Collections.Generic.ICollection<HotChocolate.Types.InputField!>! fields) -> void
override HotChocolate.Types.Filters.FilterInputType<T>.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Types.Filters.FilterInputType<T>.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.OnCreateDefinition(HotChocolate.Types.Filters.FilterInputTypeDefinition! definition) -> void
override HotChocolate.Types.Filters.FilterNamingConventionPascalCase.ArgumentName.get -> HotChocolate.NameString
override HotChocolate.Types.Filters.FilterNamingConventionPascalCase.CreateFieldName(HotChocolate.Types.Filters.FilterFieldDefintion! definition, HotChocolate.Types.Filters.FilterOperationKind kind) -> HotChocolate.NameString
override HotChocolate.Types.Filters.FilterNamingConventionSnakeCase.ArgumentName.get -> HotChocolate.NameString
override HotChocolate.Types.Filters.FilterNamingConventionSnakeCase.CreateFieldName(HotChocolate.Types.Filters.FilterFieldDefintion! definition, HotChocolate.Types.Filters.FilterOperationKind kind) -> HotChocolate.NameString
override HotChocolate.Types.Filters.FilterOperationDescriptorBase.Definition.get -> HotChocolate.Types.Filters.FilterOperationDefintion!
override HotChocolate.Types.Filters.FilterOperationDescriptorBase.Definition.set -> void
override HotChocolate.Types.Filters.FilterVisitorBase<TContext>.Enter(HotChocolate.Language.ObjectFieldNode! node, TContext context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Filters.FilterVisitorBase<TContext>.Leave(HotChocolate.Language.ObjectFieldNode! node, TContext context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Filters.ObjectFilterFieldDescriptor.AllowedOperations.get -> System.Collections.Generic.ISet<HotChocolate.Types.Filters.FilterOperationKind>!
override HotChocolate.Types.Filters.ObjectFilterFieldDescriptor.CreateOperationDefinition(HotChocolate.Types.Filters.FilterOperationKind operationKind) -> HotChocolate.Types.Filters.FilterOperationDefintion!
override HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>.CreateOperationDefinition(HotChocolate.Types.Filters.FilterOperationKind operationKind) -> HotChocolate.Types.Filters.FilterOperationDefintion!
override HotChocolate.Types.Filters.QueryableFilterVisitor.Enter(HotChocolate.Language.ListValueNode! node, HotChocolate.Types.Filters.QueryableFilterVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Filters.QueryableFilterVisitor.Enter(HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Filters.QueryableFilterVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Filters.QueryableFilterVisitor.Enter(HotChocolate.Language.ObjectValueNode! node, HotChocolate.Types.Filters.QueryableFilterVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Filters.QueryableFilterVisitor.Leave(HotChocolate.Language.ListValueNode! node, HotChocolate.Types.Filters.QueryableFilterVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Filters.QueryableFilterVisitor.Leave(HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Filters.QueryableFilterVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Filters.QueryableFilterVisitor.Leave(HotChocolate.Language.ObjectValueNode! node, HotChocolate.Types.Filters.QueryableFilterVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Filters.StringFilterFieldDescriptor.AllowedOperations.get -> System.Collections.Generic.ISet<HotChocolate.Types.Filters.FilterOperationKind>!
override HotChocolate.Types.Filters.StringFilterFieldDescriptor.CreateOperationDefinition(HotChocolate.Types.Filters.FilterOperationKind operationKind) -> HotChocolate.Types.Filters.FilterOperationDefintion!
override HotChocolate.Types.UseFilteringAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override sealed HotChocolate.Types.Filters.FilterFieldDescriptorBase.Definition.get -> HotChocolate.Types.Filters.FilterFieldDefintion!
override sealed HotChocolate.Types.Filters.FilterFieldDescriptorBase.Definition.set -> void
override sealed HotChocolate.Types.Filters.FilterInputType<T>.Configure(HotChocolate.Types.IInputObjectTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Definition.get -> HotChocolate.Types.Filters.FilterInputTypeDefinition!
override sealed HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.Definition.set -> void
static HotChocolate.Types.FilterObjectFieldDescriptorExtensions.AddFilterArguments<TFilter>(this HotChocolate.Types.IInterfaceFieldDescriptor! descriptor) -> HotChocolate.Types.IInterfaceFieldDescriptor!
static HotChocolate.Types.FilterObjectFieldDescriptorExtensions.AddFilterArguments<TFilter>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.FilterObjectFieldDescriptorExtensions.UseFiltering(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.FilterObjectFieldDescriptorExtensions.UseFiltering<T>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Action<HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>!>! configure) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.FilterObjectFieldDescriptorExtensions.UseFiltering<T>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ArrayFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> HotChocolate.Types.Filters.ArrayBooleanFilterOperationDescriptor!
static HotChocolate.Types.Filters.ArrayFilterOperationDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ArrayFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> HotChocolate.Types.Filters.ArrayFilterOperationDescriptor!
static HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ArrayFilterFieldDescriptor<TArray>! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> HotChocolate.Types.Filters.ArrayFilterOperationDescriptor<TArray>!
static HotChocolate.Types.Filters.BooleanFilterOperationDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.BooleanFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> HotChocolate.Types.Filters.BooleanFilterOperationDescriptor!
static HotChocolate.Types.Filters.ComparableFilterOperationDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ComparableFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> HotChocolate.Types.Filters.ComparableFilterOperationDescriptor!
static HotChocolate.Types.Filters.Expressions.ExpressionFieldHandlers.All.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Filters.Expressions.IExpressionFieldHandler!>!
static HotChocolate.Types.Filters.Expressions.ExpressionOperationHandlers.All.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Filters.Expressions.IExpressionOperationHandler!>!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.All(System.Type! type, System.Linq.Expressions.Expression! property, System.Linq.Expressions.LambdaExpression! lambda) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.Any(System.Type! type, System.Linq.Expressions.Expression! property, System.Linq.Expressions.Expression! body, params System.Linq.Expressions.ParameterExpression![]! parameterExpression) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.Any(System.Type! type, System.Linq.Expressions.Expression! property, System.Linq.Expressions.LambdaExpression! lambda) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.Any(System.Type! type, System.Linq.Expressions.Expression! property) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.Contains(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.EndsWith(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.Equals(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.GreaterThan(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.GreaterThanOrEqual(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.In(System.Linq.Expressions.Expression! property, System.Type! genericType, object! parsedValue) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.LowerThan(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.LowerThanOrEqual(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.Not(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.NotContains(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.NotEquals(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.NotNull(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.NotNullAndAlso(System.Linq.Expressions.Expression! property, System.Linq.Expressions.Expression! condition) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Expressions.FilterExpressionBuilder.StartsWith(System.Linq.Expressions.Expression! property, object! value) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.Extensions.FilterFieldCollectionExtensions.GetOrAddDescriptor<T>(this System.Collections.Generic.IList<HotChocolate.Types.Filters.FilterFieldDescriptorBase!>! fields, System.Reflection.PropertyInfo! propertyInfo, System.Func<T!>! valueFactory) -> T!
static HotChocolate.Types.Filters.Extensions.FilterFieldCollectionExtensions.GetOrAddOperation<T>(this System.Collections.Generic.ICollection<HotChocolate.Types.Filters.FilterOperationDescriptorBase!>! fields, HotChocolate.Types.Filters.FilterOperationKind operationKind, System.Func<T!>! valueFactory) -> T!
static HotChocolate.Types.Filters.FilterFieldDescriptorBase.RewriteTypeToNullableType(HotChocolate.Types.Descriptors.ITypeReference! reference, HotChocolate.Types.Descriptors.ITypeInspector! typeInspector) -> HotChocolate.Types.Descriptors.ITypeReference!
static HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>!
static HotChocolate.Types.Filters.FilterMiddlewareContext.Create(string! argumentName) -> HotChocolate.Types.Filters.FilterMiddlewareContext!
static HotChocolate.Types.Filters.FilterNamingConventionBase.Default.get -> HotChocolate.Types.Filters.IFilterNamingConvention!
static HotChocolate.Types.Filters.FilterNamingConventionExtensions.GetFilterNamingConvention(this HotChocolate.Types.Descriptors.IDescriptorContext! context) -> HotChocolate.Types.Filters.IFilterNamingConvention!
static HotChocolate.Types.Filters.FilterTypeNameExtensions.Name<T>(this HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>! descriptor, System.Func<HotChocolate.Types.INamedType!, HotChocolate.NameString>! createName) -> HotChocolate.Types.Filters.IFilterInputTypeNameDependencyDescriptor<T>!
static HotChocolate.Types.Filters.ObjectFilterOperationDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ObjectFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> HotChocolate.Types.Filters.ObjectFilterOperationDescriptor!
static HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.ObjectFilterFieldDescriptor<TObject>! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> HotChocolate.Types.Filters.ObjectFilterOperationDescriptor<TObject>!
static HotChocolate.Types.Filters.QueryableFilterVisitor.Default -> HotChocolate.Types.Filters.QueryableFilterVisitor!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.AddClosure(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, System.Type! type, string! parameterName, bool inMemory) -> HotChocolate.Types.Filters.QueryableClosure!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.AddClosure(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, System.Type! type) -> HotChocolate.Types.Filters.QueryableClosure!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.CreateFilter(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.CreateFilter<TSource>(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> System.Linq.Expressions.Expression<System.Func<TSource, bool>!>!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.GetClosure(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> HotChocolate.Types.Filters.QueryableClosure!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.GetInstance(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.GetLevel(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> System.Collections.Generic.Queue<System.Linq.Expressions.Expression!>!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.PopClosure(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> HotChocolate.Types.Filters.QueryableClosure!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.PopInstance(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.PopLevel(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context) -> System.Collections.Generic.Queue<System.Linq.Expressions.Expression!>!
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.PushInstance(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, System.Linq.Expressions.Expression! nextExpression) -> void
static HotChocolate.Types.Filters.QueryableFilterVisitorContextExtensions.PushLevel(this HotChocolate.Types.Filters.IQueryableFilterVisitorContext! context, System.Collections.Generic.Queue<System.Linq.Expressions.Expression!>! nextLevel) -> void
static HotChocolate.Types.Filters.StringFilterOperationDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Filters.StringFilterFieldDescriptor! descriptor, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Filters.FilterOperation! operation) -> HotChocolate.Types.Filters.StringFilterOperationDescriptor!
virtual HotChocolate.Types.Filters.FilterFieldDescriptorBase.AddImplicitOperation(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Filters.FilterOperationDefintion!>! fields, System.Collections.Generic.ISet<HotChocolate.Types.Filters.FilterOperationKind>! handledFilterKinds, HotChocolate.Types.Filters.FilterOperationKind operationKind) -> void
virtual HotChocolate.Types.Filters.FilterFieldDescriptorBase.ListOperations.get -> System.Collections.Generic.ISet<HotChocolate.Types.Filters.FilterOperationKind>!
virtual HotChocolate.Types.Filters.FilterFieldDescriptorBase.OnCompleteFilters(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Filters.FilterOperationDefintion!>! fields, System.Collections.Generic.ISet<HotChocolate.Types.Filters.FilterOperationKind>! handledFilterKinds) -> void
virtual HotChocolate.Types.Filters.FilterFieldDescriptorBase.RewriteType(HotChocolate.Types.Filters.FilterOperationKind operationKind) -> HotChocolate.Types.Descriptors.ITypeReference!
virtual HotChocolate.Types.Filters.FilterInputType<T>.Configure(HotChocolate.Types.Filters.IFilterInputTypeDescriptor<T>! descriptor) -> void
virtual HotChocolate.Types.Filters.FilterInputTypeDescriptor<T>.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Filters.FilterOperationDefintion!>! fields, System.Collections.Generic.ISet<System.Reflection.PropertyInfo!>! handledProperties) -> void
virtual HotChocolate.Types.Filters.FilterNamingConventionBase.ArrayFilterPropertyName.get -> HotChocolate.NameString
virtual HotChocolate.Types.Filters.FilterNamingConventionBase.GetFilterTypeName(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> HotChocolate.NameString
