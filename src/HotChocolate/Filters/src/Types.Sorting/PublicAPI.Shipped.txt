#nullable enable
abstract HotChocolate.Types.Sorting.SortingNamingConventionBase.ArgumentName.get -> HotChocolate.NameString
HotChocolate.Types.Sorting.Extensions.SortingFieldCollectionExtensions
HotChocolate.Types.Sorting.ISortingNamingConvention
HotChocolate.Types.Sorting.ISortingNamingConvention.ArgumentName.get -> HotChocolate.NameString
HotChocolate.Types.Sorting.ISortingNamingConvention.GetSortingOperationKindTypeName(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> HotChocolate.NameString
HotChocolate.Types.Sorting.ISortingNamingConvention.GetSortingTypeName(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> HotChocolate.NameString
HotChocolate.Types.Sorting.ISortingNamingConvention.SortKindAscName.get -> HotChocolate.NameString
HotChocolate.Types.Sorting.ISortingNamingConvention.SortKindDescName.get -> HotChocolate.NameString
HotChocolate.Types.Sorting.ISortInputType
HotChocolate.Types.Sorting.ISortInputType.EntityType.get -> System.Type!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.Description(string! value) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.Ignore(System.Linq.Expressions.Expression<System.Func<T, object!>!>! property) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.Sortable(System.Linq.Expressions.Expression<System.Func<T, System.IComparable!>!>! property) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>.SortableObject<TObject>(System.Linq.Expressions.Expression<System.Func<T, TObject!>!>! property) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject!>!
HotChocolate.Types.Sorting.ISortInputTypeNameDependencyDescriptor<T>
HotChocolate.Types.Sorting.ISortInputTypeNameDependencyDescriptor<T>.DependsOn(System.Type! schemaType) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortInputTypeNameDependencyDescriptor<T>.DependsOn<TDependency>() -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor.Description(string! value) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor.Directive<T>() -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>.Description(string! value) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>.Directive<T>() -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>.Ignore(bool ignore = true) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>.Type(System.Action<HotChocolate.Types.Sorting.ISortInputTypeDescriptor<TObject>!>! descriptor) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>.Type<TFilter>() -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.ISortOperationDescriptor
HotChocolate.Types.Sorting.ISortOperationDescriptor.Description(string! value) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.ISortOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.ISortOperationDescriptor.Directive<T>() -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.ISortOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.ISortOperationDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.ISortOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.ISortVisitorContextBase
HotChocolate.Types.Sorting.ISortVisitorContextBase.Operations.get -> System.Collections.Generic.Stack<HotChocolate.Types.IInputField!>!
HotChocolate.Types.Sorting.ISortVisitorContextBase.Types.get -> System.Collections.Generic.Stack<HotChocolate.Types.IType!>!
HotChocolate.Types.Sorting.QueryableSortMiddleware<T>
HotChocolate.Types.Sorting.QueryableSortMiddleware<T>.InvokeAsync(HotChocolate.Resolvers.IMiddlewareContext! context) -> System.Threading.Tasks.Task!
HotChocolate.Types.Sorting.QueryableSortMiddleware<T>.QueryableSortMiddleware(HotChocolate.Resolvers.FieldDelegate! next, HotChocolate.Types.Sorting.SortMiddlewareContext! contextData) -> void
HotChocolate.Types.Sorting.QueryableSortVisitor
HotChocolate.Types.Sorting.QueryableSortVisitor.QueryableSortVisitor() -> void
HotChocolate.Types.Sorting.QueryableSortVisitorContext
HotChocolate.Types.Sorting.QueryableSortVisitorContext.Closure.get -> HotChocolate.Types.Sorting.SortQueryableClosure!
HotChocolate.Types.Sorting.QueryableSortVisitorContext.InMemory.get -> bool
HotChocolate.Types.Sorting.QueryableSortVisitorContext.QueryableSortVisitorContext(HotChocolate.Types.InputObjectType! initialType, System.Type! source, bool inMemory) -> void
HotChocolate.Types.Sorting.QueryableSortVisitorContext.SortOperations.get -> System.Collections.Generic.Queue<HotChocolate.Types.Sorting.SortOperationInvocation!>!
HotChocolate.Types.Sorting.QueryableSortVisitorContextExtensions
HotChocolate.Types.Sorting.SortExpressionBuilder
HotChocolate.Types.Sorting.SortingNamingConventionBase
HotChocolate.Types.Sorting.SortingNamingConventionBase.Scope.get -> string?
HotChocolate.Types.Sorting.SortingNamingConventionBase.SortingNamingConventionBase() -> void
HotChocolate.Types.Sorting.SortingNamingConventionExtension
HotChocolate.Types.Sorting.SortingNamingConventionPascalCase
HotChocolate.Types.Sorting.SortingNamingConventionPascalCase.SortingNamingConventionPascalCase() -> void
HotChocolate.Types.Sorting.SortingNamingConventionSnakeCase
HotChocolate.Types.Sorting.SortingNamingConventionSnakeCase.SortingNamingConventionSnakeCase() -> void
HotChocolate.Types.Sorting.SortInputType<T>
HotChocolate.Types.Sorting.SortInputType<T>.EntityType.get -> System.Type!
HotChocolate.Types.Sorting.SortInputType<T>.SortInputType() -> void
HotChocolate.Types.Sorting.SortInputType<T>.SortInputType(System.Action<HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!>! configure) -> void
HotChocolate.Types.Sorting.SortInputTypeDefinition
HotChocolate.Types.Sorting.SortInputTypeDefinition.EntityType.get -> System.Type?
HotChocolate.Types.Sorting.SortInputTypeDefinition.EntityType.set -> void
HotChocolate.Types.Sorting.SortInputTypeDefinition.SortInputTypeDefinition() -> void
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Description(string! value) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Fields.get -> System.Collections.Generic.ICollection<HotChocolate.Types.Sorting.SortOperationDescriptorBase!>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Ignore(System.Linq.Expressions.Expression<System.Func<T, object!>!>! property) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Sortable(System.Linq.Expressions.Expression<System.Func<T, System.IComparable!>!>! property) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.SortableObject<TObject>(System.Linq.Expressions.Expression<System.Func<T, TObject!>!>! property) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject!>!
HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.SortInputTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> void
HotChocolate.Types.Sorting.SortMiddlewareContext
HotChocolate.Types.Sorting.SortMiddlewareContext.ArgumentName.get -> string!
HotChocolate.Types.Sorting.SortMiddlewareContext.SortMiddlewareContext(string! argumentName) -> void
HotChocolate.Types.Sorting.SortObjectOperationDescriptor
HotChocolate.Types.Sorting.SortObjectOperationDescriptor.Description(string! value) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor.Directive<T>() -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor.SortObjectOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Sorting.SortOperation! operation) -> void
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.Description(string! value) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.Directive<T>() -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.Ignore(bool ignore = true) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.Name(HotChocolate.NameString value) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.SortObjectOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Sorting.SortOperation! operation) -> void
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.Type(System.Action<HotChocolate.Types.Sorting.ISortInputTypeDescriptor<TObject>!>! descriptor) -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.Type<TFilter>() -> HotChocolate.Types.Sorting.ISortObjectOperationDescriptor<TObject>!
HotChocolate.Types.Sorting.SortOperation
HotChocolate.Types.Sorting.SortOperation.IsObject.get -> bool
HotChocolate.Types.Sorting.SortOperation.Property.get -> System.Reflection.PropertyInfo!
HotChocolate.Types.Sorting.SortOperation.SortOperation(System.Reflection.PropertyInfo! property, bool isObject) -> void
HotChocolate.Types.Sorting.SortOperation.SortOperation(System.Reflection.PropertyInfo! property) -> void
HotChocolate.Types.Sorting.SortOperationDefintion
HotChocolate.Types.Sorting.SortOperationDefintion.Operation.get -> HotChocolate.Types.Sorting.SortOperation?
HotChocolate.Types.Sorting.SortOperationDefintion.Operation.set -> void
HotChocolate.Types.Sorting.SortOperationDefintion.SortOperationDefintion() -> void
HotChocolate.Types.Sorting.SortOperationDescriptor
HotChocolate.Types.Sorting.SortOperationDescriptor.Description(string! value) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.SortOperationDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.SortOperationDescriptor.Directive<T>() -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.SortOperationDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.SortOperationDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.SortOperationDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.Sorting.ISortOperationDescriptor!
HotChocolate.Types.Sorting.SortOperationDescriptor.SortOperationDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Sorting.SortOperation! operation) -> void
HotChocolate.Types.Sorting.SortOperationDescriptorBase
HotChocolate.Types.Sorting.SortOperationDescriptorBase.Name(HotChocolate.NameString value) -> void
HotChocolate.Types.Sorting.SortOperationDescriptorBase.SortOperationDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Sorting.SortOperation! operation) -> void
HotChocolate.Types.Sorting.SortOperationInvocation
HotChocolate.Types.Sorting.SortOperationInvocation.ExpressionBody.get -> System.Linq.Expressions.Expression!
HotChocolate.Types.Sorting.SortOperationInvocation.Kind.get -> HotChocolate.Types.Sorting.SortOperationKind
HotChocolate.Types.Sorting.SortOperationInvocation.Parameter.get -> System.Linq.Expressions.ParameterExpression!
HotChocolate.Types.Sorting.SortOperationInvocation.ReturnType.get -> System.Type!
HotChocolate.Types.Sorting.SortOperationInvocation.SortOperationInvocation(HotChocolate.Types.Sorting.SortOperationKind kind, System.Linq.Expressions.ParameterExpression! parameterExpression, System.Linq.Expressions.Expression! expressionBody, System.Type! returnType) -> void
HotChocolate.Types.Sorting.SortOperationKind
HotChocolate.Types.Sorting.SortOperationKind.Asc = 0 -> HotChocolate.Types.Sorting.SortOperationKind
HotChocolate.Types.Sorting.SortOperationKind.Desc = 1 -> HotChocolate.Types.Sorting.SortOperationKind
HotChocolate.Types.Sorting.SortOperationKindType
HotChocolate.Types.Sorting.SortOperationKindType.SortOperationKindType() -> void
HotChocolate.Types.Sorting.SortQueryableClosure
HotChocolate.Types.Sorting.SortQueryableClosure.CreateInMemorySortOperation(HotChocolate.Types.Sorting.SortOperationKind kind) -> HotChocolate.Types.Sorting.SortOperationInvocation!
HotChocolate.Types.Sorting.SortQueryableClosure.CreateSortOperation(HotChocolate.Types.Sorting.SortOperationKind kind) -> HotChocolate.Types.Sorting.SortOperationInvocation!
HotChocolate.Types.Sorting.SortQueryableClosure.EnqueueProperty(System.Reflection.PropertyInfo! property) -> void
HotChocolate.Types.Sorting.SortQueryableClosure.Parameter.get -> System.Linq.Expressions.ParameterExpression!
HotChocolate.Types.Sorting.SortQueryableClosure.Pop() -> System.Linq.Expressions.Expression!
HotChocolate.Types.Sorting.SortQueryableClosure.SortQueryableClosure(System.Type! type, string! parameterName) -> void
HotChocolate.Types.Sorting.SortTypeNameExtensions
HotChocolate.Types.Sorting.SortVisitorBase<TContext>
HotChocolate.Types.Sorting.SortVisitorBase<TContext>.SortVisitorBase() -> void
HotChocolate.Types.Sorting.SortVisitorContextBase
HotChocolate.Types.Sorting.SortVisitorContextBase.Operations.get -> System.Collections.Generic.Stack<HotChocolate.Types.IInputField!>!
HotChocolate.Types.Sorting.SortVisitorContextBase.SortVisitorContextBase(HotChocolate.Types.InputObjectType! initialType) -> void
HotChocolate.Types.Sorting.SortVisitorContextBase.Types.get -> System.Collections.Generic.Stack<HotChocolate.Types.IType!>!
HotChocolate.Types.SortObjectFieldDescriptorExtensions
HotChocolate.Types.UseSortingAttribute
HotChocolate.Types.UseSortingAttribute.SortType.get -> System.Type?
HotChocolate.Types.UseSortingAttribute.SortType.set -> void
HotChocolate.Types.UseSortingAttribute.UseSortingAttribute() -> void
override HotChocolate.Types.Sorting.QueryableSortVisitor.Enter(HotChocolate.Language.ListValueNode! node, HotChocolate.Types.Sorting.QueryableSortVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Sorting.QueryableSortVisitor.Enter(HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Sorting.QueryableSortVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Sorting.QueryableSortVisitor.Enter(HotChocolate.Language.ObjectValueNode! node, HotChocolate.Types.Sorting.QueryableSortVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Sorting.QueryableSortVisitor.Leave(HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Types.Sorting.QueryableSortVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Sorting.QueryableSortVisitor.Leave(HotChocolate.Language.ObjectValueNode! node, HotChocolate.Types.Sorting.QueryableSortVisitorContext! context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Sorting.SortingNamingConventionPascalCase.ArgumentName.get -> HotChocolate.NameString
override HotChocolate.Types.Sorting.SortingNamingConventionSnakeCase.ArgumentName.get -> HotChocolate.NameString
override HotChocolate.Types.Sorting.SortInputType<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition!
override HotChocolate.Types.Sorting.SortInputType<T>.OnCompleteFields(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition, System.Collections.Generic.ICollection<HotChocolate.Types.InputField!>! fields) -> void
override HotChocolate.Types.Sorting.SortInputType<T>.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Types.Sorting.SortInputType<T>.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.OnCreateDefinition(HotChocolate.Types.Sorting.SortInputTypeDefinition! definition) -> void
override HotChocolate.Types.Sorting.SortOperationDescriptor.OnCreateDefinition(HotChocolate.Types.Sorting.SortOperationDefintion! definition) -> void
override HotChocolate.Types.Sorting.SortOperationDescriptorBase.Definition.get -> HotChocolate.Types.Sorting.SortOperationDefintion!
override HotChocolate.Types.Sorting.SortOperationDescriptorBase.Definition.set -> void
override HotChocolate.Types.Sorting.SortOperationKindType.Configure(HotChocolate.Types.IEnumTypeDescriptor<HotChocolate.Types.Sorting.SortOperationKind>! descriptor) -> void
override HotChocolate.Types.Sorting.SortOperationKindType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition!
override HotChocolate.Types.Sorting.SortVisitorBase<TContext>.Enter(HotChocolate.Language.ObjectFieldNode! node, TContext context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.Sorting.SortVisitorBase<TContext>.Leave(HotChocolate.Language.ObjectFieldNode! node, TContext context) -> HotChocolate.Language.Visitors.ISyntaxVisitorAction!
override HotChocolate.Types.UseSortingAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override sealed HotChocolate.Types.Sorting.SortInputType<T>.Configure(HotChocolate.Types.IInputObjectTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Definition.get -> HotChocolate.Types.Sorting.SortInputTypeDefinition!
override sealed HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.Definition.set -> void
override sealed HotChocolate.Types.Sorting.SortOperationDescriptor.Definition.get -> HotChocolate.Types.Sorting.SortOperationDefintion!
override sealed HotChocolate.Types.Sorting.SortOperationDescriptor.Definition.set -> void
static HotChocolate.Types.Sorting.Extensions.SortingFieldCollectionExtensions.GetOrAddDescriptor<T>(this System.Collections.Generic.ICollection<HotChocolate.Types.Sorting.SortOperationDescriptorBase!>! fields, System.Reflection.PropertyInfo! propertyInfo, System.Func<T!>! valueFactory) -> T!
static HotChocolate.Types.Sorting.QueryableSortVisitorContextExtensions.Compile(this HotChocolate.Types.Sorting.QueryableSortVisitorContext! context, System.Linq.Expressions.Expression! source) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Sorting.QueryableSortVisitorContextExtensions.CreateSortOperation(this HotChocolate.Types.Sorting.QueryableSortVisitorContext! context, HotChocolate.Types.Sorting.SortOperationKind kind) -> HotChocolate.Types.Sorting.SortOperationInvocation!
static HotChocolate.Types.Sorting.QueryableSortVisitorContextExtensions.Sort<TSource>(this HotChocolate.Types.Sorting.QueryableSortVisitorContext! context, System.Linq.IQueryable<TSource>! source) -> System.Linq.IQueryable<TSource>!
static HotChocolate.Types.Sorting.SortExpressionBuilder.IfNullThenDefault(System.Linq.Expressions.Expression! left, System.Linq.Expressions.Expression! right, System.Linq.Expressions.DefaultExpression! defaultExpression) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Sorting.SortExpressionBuilder.IsNull(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
static HotChocolate.Types.Sorting.SortingNamingConventionBase.Default.get -> HotChocolate.Types.Sorting.ISortingNamingConvention!
static HotChocolate.Types.Sorting.SortingNamingConventionExtension.GetSortingNamingConvention(this HotChocolate.Types.Descriptors.IDescriptorContext! context) -> HotChocolate.Types.Sorting.ISortingNamingConvention!
static HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>!
static HotChocolate.Types.Sorting.SortMiddlewareContext.Create(string! argumentName) -> HotChocolate.Types.Sorting.SortMiddlewareContext!
static HotChocolate.Types.Sorting.SortObjectOperationDescriptor.CreateOperation(System.Reflection.PropertyInfo! property, HotChocolate.Types.Descriptors.IDescriptorContext! context) -> HotChocolate.Types.Sorting.SortObjectOperationDescriptor!
static HotChocolate.Types.Sorting.SortObjectOperationDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Sorting.SortOperation! operation) -> HotChocolate.Types.Sorting.SortObjectOperationDescriptor!
static HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.CreateOperation(System.Reflection.PropertyInfo! property, HotChocolate.Types.Descriptors.IDescriptorContext! context) -> HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>!
static HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Sorting.SortOperation! operation) -> HotChocolate.Types.Sorting.SortObjectOperationDescriptor<TObject>!
static HotChocolate.Types.Sorting.SortOperationDescriptor.CreateOperation(System.Reflection.PropertyInfo! property, HotChocolate.Types.Descriptors.IDescriptorContext! context) -> HotChocolate.Types.Sorting.SortOperationDescriptor!
static HotChocolate.Types.Sorting.SortOperationDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString name, HotChocolate.Types.Descriptors.ITypeReference! type, HotChocolate.Types.Sorting.SortOperation! operation) -> HotChocolate.Types.Sorting.SortOperationDescriptor!
static HotChocolate.Types.Sorting.SortTypeNameExtensions.Name<T>(this HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>! descriptor, System.Func<HotChocolate.Types.INamedType!, HotChocolate.NameString>! createName) -> HotChocolate.Types.Sorting.ISortInputTypeNameDependencyDescriptor<T>!
static HotChocolate.Types.SortObjectFieldDescriptorExtensions.UseSorting(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type? sortType, HotChocolate.Types.ITypeSystemMember? sortTypeInstance = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.SortObjectFieldDescriptorExtensions.UseSorting(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.SortObjectFieldDescriptorExtensions.UseSorting<T>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Action<HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>!>! configure) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.SortObjectFieldDescriptorExtensions.UseSorting<T>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static readonly HotChocolate.Types.Sorting.QueryableSortVisitor.Default -> HotChocolate.Types.Sorting.QueryableSortVisitor!
virtual HotChocolate.Types.Sorting.SortingNamingConventionBase.GetSortingOperationKindTypeName(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> HotChocolate.NameString
virtual HotChocolate.Types.Sorting.SortingNamingConventionBase.GetSortingTypeName(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! entityType) -> HotChocolate.NameString
virtual HotChocolate.Types.Sorting.SortingNamingConventionBase.SortKindAscName.get -> HotChocolate.NameString
virtual HotChocolate.Types.Sorting.SortingNamingConventionBase.SortKindDescName.get -> HotChocolate.NameString
virtual HotChocolate.Types.Sorting.SortInputType<T>.Configure(HotChocolate.Types.Sorting.ISortInputTypeDescriptor<T>! descriptor) -> void
virtual HotChocolate.Types.Sorting.SortInputTypeDescriptor<T>.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Sorting.SortOperationDefintion!>! fields, System.Collections.Generic.ISet<System.Reflection.PropertyInfo!>! handledProperties) -> void
