schema {
  query: Test
}

type Author {
  id: ID!
  name: String!
}

type Book {
  id: Int!
  title: String!
  pages: Int!
  chapters: Int!
  author: Author!
}

type Test {
  books(where: BookFilter): [Book!]!
}

input AuthorFilter {
  AND: [AuthorFilter!]
  OR: [AuthorFilter!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_gt: ID
  id_not_gt: ID
  id_gte: ID
  id_not_gte: ID
  id_lt: ID
  id_not_lt: ID
  id_lte: ID
  id_not_lte: ID
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_in: [String!]
  name_not_in: [String!]
}

input BookFilter {
  AND: [BookFilter!]
  OR: [BookFilter!]
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_not_gt: Int
  id_gte: Int
  id_not_gte: Int
  id_lt: Int
  id_not_lt: Int
  id_lte: Int
  id_not_lte: Int
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_in: [String!]
  title_not_in: [String!]
  pages: Int
  pages_not: Int
  pages_in: [Int!]
  pages_not_in: [Int!]
  pages_gt: Int
  pages_not_gt: Int
  pages_gte: Int
  pages_not_gte: Int
  pages_lt: Int
  pages_not_lt: Int
  pages_lte: Int
  pages_not_lte: Int
  chapters: Int
  chapters_not: Int
  chapters_in: [Int!]
  chapters_not_in: [Int!]
  chapters_gt: Int
  chapters_not_gt: Int
  chapters_gte: Int
  chapters_not_gte: Int
  chapters_lt: Int
  chapters_not_lt: Int
  chapters_lte: Int
  chapters_not_lte: Int
  author: AuthorFilter
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD
