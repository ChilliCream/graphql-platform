schema {
  query: Test
}

type Author {
  id: ID!
  name: String!
}

type Book {
  author: Author!
  chapters: Int!
  id: Int!
  pages: Int!
  title: String!
}

type Test {
  books(where: BookFilter): [Book!]!
}

input AuthorFilter {
  AND: [AuthorFilter!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_gt: ID
  id_not_gte: ID
  id_not_in: [ID!]
  id_not_lt: ID
  id_not_lte: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_in: [String!]
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  OR: [AuthorFilter!]
}

input BookFilter {
  AND: [BookFilter!]
  author: AuthorFilter
  chapters: Int
  chapters_gt: Int
  chapters_gte: Int
  chapters_in: [Int!]
  chapters_lt: Int
  chapters_lte: Int
  chapters_not: Int
  chapters_not_gt: Int
  chapters_not_gte: Int
  chapters_not_in: [Int!]
  chapters_not_lt: Int
  chapters_not_lte: Int
  id: Int
  id_gt: Int
  id_gte: Int
  id_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_not: Int
  id_not_gt: Int
  id_not_gte: Int
  id_not_in: [Int!]
  id_not_lt: Int
  id_not_lte: Int
  OR: [BookFilter!]
  pages: Int
  pages_gt: Int
  pages_gte: Int
  pages_in: [Int!]
  pages_lt: Int
  pages_lte: Int
  pages_not: Int
  pages_not_gt: Int
  pages_not_gte: Int
  pages_not_in: [Int!]
  pages_not_lt: Int
  pages_not_lte: Int
  title: String
  title_contains: String
  title_ends_with: String
  title_in: [String!]
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
scalar ID

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
