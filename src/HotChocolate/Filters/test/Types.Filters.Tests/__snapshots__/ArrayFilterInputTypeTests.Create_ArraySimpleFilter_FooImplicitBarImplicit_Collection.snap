schema {
  query: Query
}

type Query {
  foo: String
}

input FooSimpleCollectionFilter {
  AND: [FooSimpleCollectionFilter!]
  OR: [FooSimpleCollectionFilter!]
  array_some: ISingleFilterOfInt32Filter
  array_none: ISingleFilterOfInt32Filter
  array_all: ISingleFilterOfInt32Filter
  array_any: Boolean
  arrayNullable_some: NullableOfInt32Filter
  arrayNullable_none: NullableOfInt32Filter
  arrayNullable_all: NullableOfInt32Filter
  arrayNullable_any: Boolean
  list_some: ISingleFilterOfInt32Filter
  list_none: ISingleFilterOfInt32Filter
  list_all: ISingleFilterOfInt32Filter
  list_any: Boolean
  listNullable_some: NullableOfInt32Filter
  listNullable_none: NullableOfInt32Filter
  listNullable_all: NullableOfInt32Filter
  listNullable_any: Boolean
  queue_some: ISingleFilterOfInt32Filter
  queue_none: ISingleFilterOfInt32Filter
  queue_all: ISingleFilterOfInt32Filter
  queue_any: Boolean
  queueNullable_some: NullableOfInt32Filter
  queueNullable_none: NullableOfInt32Filter
  queueNullable_all: NullableOfInt32Filter
  queueNullable_any: Boolean
  stack_some: ISingleFilterOfInt32Filter
  stack_none: ISingleFilterOfInt32Filter
  stack_all: ISingleFilterOfInt32Filter
  stack_any: Boolean
  stackNullable_some: NullableOfInt32Filter
  stackNullable_none: NullableOfInt32Filter
  stackNullable_all: NullableOfInt32Filter
  stackNullable_any: Boolean
  iList_some: ISingleFilterOfInt32Filter
  iList_none: ISingleFilterOfInt32Filter
  iList_all: ISingleFilterOfInt32Filter
  iList_any: Boolean
  iListNullable_some: NullableOfInt32Filter
  iListNullable_none: NullableOfInt32Filter
  iListNullable_all: NullableOfInt32Filter
  iListNullable_any: Boolean
  hashSet_some: ISingleFilterOfInt32Filter
  hashSet_none: ISingleFilterOfInt32Filter
  hashSet_all: ISingleFilterOfInt32Filter
  hashSet_any: Boolean
  hashSetNullable_some: NullableOfInt32Filter
  hashSetNullable_none: NullableOfInt32Filter
  hashSetNullable_all: NullableOfInt32Filter
  hashSetNullable_any: Boolean
  iCollection_some: ISingleFilterOfInt32Filter
  iCollection_none: ISingleFilterOfInt32Filter
  iCollection_all: ISingleFilterOfInt32Filter
  iCollection_any: Boolean
  iCollectionNullable_some: NullableOfInt32Filter
  iCollectionNullable_none: NullableOfInt32Filter
  iCollectionNullable_all: NullableOfInt32Filter
  iCollectionNullable_any: Boolean
  iReadOnlyCollection_some: ISingleFilterOfInt32Filter
  iReadOnlyCollection_none: ISingleFilterOfInt32Filter
  iReadOnlyCollection_all: ISingleFilterOfInt32Filter
  iReadOnlyCollection_any: Boolean
  iReadOnlyCollectionNullable_some: NullableOfInt32Filter
  iReadOnlyCollectionNullable_none: NullableOfInt32Filter
  iReadOnlyCollectionNullable_all: NullableOfInt32Filter
  iReadOnlyCollectionNullable_any: Boolean
  iSet_some: ISingleFilterOfInt32Filter
  iSet_none: ISingleFilterOfInt32Filter
  iSet_all: ISingleFilterOfInt32Filter
  iSet_any: Boolean
  iSetNullable_some: NullableOfInt32Filter
  iSetNullable_none: NullableOfInt32Filter
  iSetNullable_all: NullableOfInt32Filter
  iSetNullable_any: Boolean
}

input ISingleFilterOfInt32Filter {
  AND: [ISingleFilterOfInt32Filter!]
  OR: [ISingleFilterOfInt32Filter!]
  element: Int
  element_not: Int
  element_in: [Int!]
  element_not_in: [Int!]
  element_gt: Int
  element_not_gt: Int
  element_gte: Int
  element_not_gte: Int
  element_lt: Int
  element_not_lt: Int
  element_lte: Int
  element_not_lte: Int
}

input NullableOfInt32Filter {
  AND: [NullableOfInt32Filter!]
  OR: [NullableOfInt32Filter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_gt: Int
  value_not_gt: Int
  value_gte: Int
  value_not_gte: Int
  value_lt: Int
  value_not_lt: Int
  value_lte: Int
  value_not_lte: Int
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD
