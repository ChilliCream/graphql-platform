schema {
  query: Query
}

type Query {
  foo: String
}

input FooSimpleFilter {
  AND: [FooSimpleFilter!]
  OR: [FooSimpleFilter!]
  barString_some: ISingleFilterOfStringFilter
  barString_none: ISingleFilterOfStringFilter
  barString_all: ISingleFilterOfStringFilter
  barString_any: Boolean
  barBool_some: ISingleFilterOfBooleanFilter
  barBool_none: ISingleFilterOfBooleanFilter
  barBool_all: ISingleFilterOfBooleanFilter
  barBool_any: Boolean
  barInt16_some: ISingleFilterOfInt16Filter
  barInt16_none: ISingleFilterOfInt16Filter
  barInt16_all: ISingleFilterOfInt16Filter
  barInt16_any: Boolean
  barInt32_some: ISingleFilterOfInt32Filter
  barInt32_none: ISingleFilterOfInt32Filter
  barInt32_all: ISingleFilterOfInt32Filter
  barInt32_any: Boolean
  barInt64_some: ISingleFilterOfInt64Filter
  barInt64_none: ISingleFilterOfInt64Filter
  barInt64_all: ISingleFilterOfInt64Filter
  barInt64_any: Boolean
  barDouble_some: ISingleFilterOfDoubleFilter
  barDouble_none: ISingleFilterOfDoubleFilter
  barDouble_all: ISingleFilterOfDoubleFilter
  barDouble_any: Boolean
  barSingle_some: ISingleFilterOfSingleFilter
  barSingle_none: ISingleFilterOfSingleFilter
  barSingle_all: ISingleFilterOfSingleFilter
  barSingle_any: Boolean
  barDecimal_some: ISingleFilterOfDecimalFilter
  barDecimal_none: ISingleFilterOfDecimalFilter
  barDecimal_all: ISingleFilterOfDecimalFilter
  barDecimal_any: Boolean
  barGuid_some: ISingleFilterOfGuidFilter
  barGuid_none: ISingleFilterOfGuidFilter
  barGuid_all: ISingleFilterOfGuidFilter
  barGuid_any: Boolean
  barDatetime_some: ISingleFilterOfDateTimeFilter
  barDatetime_none: ISingleFilterOfDateTimeFilter
  barDatetime_all: ISingleFilterOfDateTimeFilter
  barDatetime_any: Boolean
  barDatetimeOffset_some: ISingleFilterOfDateTimeOffsetFilter
  barDatetimeOffset_none: ISingleFilterOfDateTimeOffsetFilter
  barDatetimeOffset_all: ISingleFilterOfDateTimeOffsetFilter
  barDatetimeOffset_any: Boolean
  barBoolNullable_some: NullableOfBooleanFilter
  barBoolNullable_none: NullableOfBooleanFilter
  barBoolNullable_all: NullableOfBooleanFilter
  barBoolNullable_any: Boolean
  barInt16Nullable_some: NullableOfInt16Filter
  barInt16Nullable_none: NullableOfInt16Filter
  barInt16Nullable_all: NullableOfInt16Filter
  barInt16Nullable_any: Boolean
  barInt32Nullable_some: NullableOfInt32Filter
  barInt32Nullable_none: NullableOfInt32Filter
  barInt32Nullable_all: NullableOfInt32Filter
  barInt32Nullable_any: Boolean
  barInt64Nullable_some: NullableOfInt64Filter
  barInt64Nullable_none: NullableOfInt64Filter
  barInt64Nullable_all: NullableOfInt64Filter
  barInt64Nullable_any: Boolean
  barDoubleNullable_some: NullableOfDoubleFilter
  barDoubleNullable_none: NullableOfDoubleFilter
  barDoubleNullable_all: NullableOfDoubleFilter
  barDoubleNullable_any: Boolean
  barSingleNullable_some: NullableOfSingleFilter
  barSingleNullable_none: NullableOfSingleFilter
  barSingleNullable_all: NullableOfSingleFilter
  barSingleNullable_any: Boolean
  barDecimalNullable_some: NullableOfDecimalFilter
  barDecimalNullable_none: NullableOfDecimalFilter
  barDecimalNullable_all: NullableOfDecimalFilter
  barDecimalNullable_any: Boolean
  barGuidNullable_some: NullableOfGuidFilter
  barGuidNullable_none: NullableOfGuidFilter
  barGuidNullable_all: NullableOfGuidFilter
  barGuidNullable_any: Boolean
  barDatetimeNullable_some: NullableOfDateTimeFilter
  barDatetimeNullable_none: NullableOfDateTimeFilter
  barDatetimeNullable_all: NullableOfDateTimeFilter
  barDatetimeNullable_any: Boolean
  barDatetimeOffsetNullable_some: NullableOfDateTimeOffsetFilter
  barDatetimeOffsetNullable_none: NullableOfDateTimeOffsetFilter
  barDatetimeOffsetNullable_all: NullableOfDateTimeOffsetFilter
  barDatetimeOffsetNullable_any: Boolean
}

input ISingleFilterOfBooleanFilter {
  AND: [ISingleFilterOfBooleanFilter!]
  OR: [ISingleFilterOfBooleanFilter!]
  element: Boolean
  element_not: Boolean
}

input ISingleFilterOfDateTimeFilter {
  AND: [ISingleFilterOfDateTimeFilter!]
  OR: [ISingleFilterOfDateTimeFilter!]
  element: DateTime
  element_not: DateTime
  element_in: [DateTime!]
  element_not_in: [DateTime!]
  element_gt: DateTime
  element_not_gt: DateTime
  element_gte: DateTime
  element_not_gte: DateTime
  element_lt: DateTime
  element_not_lt: DateTime
  element_lte: DateTime
  element_not_lte: DateTime
}

input ISingleFilterOfDateTimeOffsetFilter {
  AND: [ISingleFilterOfDateTimeOffsetFilter!]
  OR: [ISingleFilterOfDateTimeOffsetFilter!]
  element: DateTime
  element_not: DateTime
  element_in: [DateTime!]
  element_not_in: [DateTime!]
  element_gt: DateTime
  element_not_gt: DateTime
  element_gte: DateTime
  element_not_gte: DateTime
  element_lt: DateTime
  element_not_lt: DateTime
  element_lte: DateTime
  element_not_lte: DateTime
}

input ISingleFilterOfDecimalFilter {
  AND: [ISingleFilterOfDecimalFilter!]
  OR: [ISingleFilterOfDecimalFilter!]
  element: Decimal
  element_not: Decimal
  element_in: [Decimal!]
  element_not_in: [Decimal!]
  element_gt: Decimal
  element_not_gt: Decimal
  element_gte: Decimal
  element_not_gte: Decimal
  element_lt: Decimal
  element_not_lt: Decimal
  element_lte: Decimal
  element_not_lte: Decimal
}

input ISingleFilterOfDoubleFilter {
  AND: [ISingleFilterOfDoubleFilter!]
  OR: [ISingleFilterOfDoubleFilter!]
  element: Float
  element_not: Float
  element_in: [Float!]
  element_not_in: [Float!]
  element_gt: Float
  element_not_gt: Float
  element_gte: Float
  element_not_gte: Float
  element_lt: Float
  element_not_lt: Float
  element_lte: Float
  element_not_lte: Float
}

input ISingleFilterOfGuidFilter {
  AND: [ISingleFilterOfGuidFilter!]
  OR: [ISingleFilterOfGuidFilter!]
  element: UUID
  element_not: UUID
  element_in: [UUID!]
  element_not_in: [UUID!]
  element_gt: UUID
  element_not_gt: UUID
  element_gte: UUID
  element_not_gte: UUID
  element_lt: UUID
  element_not_lt: UUID
  element_lte: UUID
  element_not_lte: UUID
}

input ISingleFilterOfInt16Filter {
  AND: [ISingleFilterOfInt16Filter!]
  OR: [ISingleFilterOfInt16Filter!]
  element: Short
  element_not: Short
  element_in: [Short!]
  element_not_in: [Short!]
  element_gt: Short
  element_not_gt: Short
  element_gte: Short
  element_not_gte: Short
  element_lt: Short
  element_not_lt: Short
  element_lte: Short
  element_not_lte: Short
}

input ISingleFilterOfInt32Filter {
  AND: [ISingleFilterOfInt32Filter!]
  OR: [ISingleFilterOfInt32Filter!]
  element: Int
  element_not: Int
  element_in: [Int!]
  element_not_in: [Int!]
  element_gt: Int
  element_not_gt: Int
  element_gte: Int
  element_not_gte: Int
  element_lt: Int
  element_not_lt: Int
  element_lte: Int
  element_not_lte: Int
}

input ISingleFilterOfInt64Filter {
  AND: [ISingleFilterOfInt64Filter!]
  OR: [ISingleFilterOfInt64Filter!]
  element: Long
  element_not: Long
  element_in: [Long!]
  element_not_in: [Long!]
  element_gt: Long
  element_not_gt: Long
  element_gte: Long
  element_not_gte: Long
  element_lt: Long
  element_not_lt: Long
  element_lte: Long
  element_not_lte: Long
}

input ISingleFilterOfSingleFilter {
  AND: [ISingleFilterOfSingleFilter!]
  OR: [ISingleFilterOfSingleFilter!]
  element: Float
  element_not: Float
  element_in: [Float!]
  element_not_in: [Float!]
  element_gt: Float
  element_not_gt: Float
  element_gte: Float
  element_not_gte: Float
  element_lt: Float
  element_not_lt: Float
  element_lte: Float
  element_not_lte: Float
}

input ISingleFilterOfStringFilter {
  AND: [ISingleFilterOfStringFilter!]
  OR: [ISingleFilterOfStringFilter!]
  element: String
  element_not: String
  element_contains: String
  element_not_contains: String
  element_starts_with: String
  element_not_starts_with: String
  element_ends_with: String
  element_not_ends_with: String
  element_in: [String!]
  element_not_in: [String!]
}

input NullableOfBooleanFilter {
  AND: [NullableOfBooleanFilter!]
  OR: [NullableOfBooleanFilter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: Boolean
  value_not: Boolean
}

input NullableOfDateTimeFilter {
  AND: [NullableOfDateTimeFilter!]
  OR: [NullableOfDateTimeFilter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: DateTime
  value_not: DateTime
  value_in: [DateTime!]
  value_not_in: [DateTime!]
  value_gt: DateTime
  value_not_gt: DateTime
  value_gte: DateTime
  value_not_gte: DateTime
  value_lt: DateTime
  value_not_lt: DateTime
  value_lte: DateTime
  value_not_lte: DateTime
}

input NullableOfDateTimeOffsetFilter {
  AND: [NullableOfDateTimeOffsetFilter!]
  OR: [NullableOfDateTimeOffsetFilter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: DateTime
  value_not: DateTime
  value_in: [DateTime!]
  value_not_in: [DateTime!]
  value_gt: DateTime
  value_not_gt: DateTime
  value_gte: DateTime
  value_not_gte: DateTime
  value_lt: DateTime
  value_not_lt: DateTime
  value_lte: DateTime
  value_not_lte: DateTime
}

input NullableOfDecimalFilter {
  AND: [NullableOfDecimalFilter!]
  OR: [NullableOfDecimalFilter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: Decimal
  value_not: Decimal
  value_in: [Decimal!]
  value_not_in: [Decimal!]
  value_gt: Decimal
  value_not_gt: Decimal
  value_gte: Decimal
  value_not_gte: Decimal
  value_lt: Decimal
  value_not_lt: Decimal
  value_lte: Decimal
  value_not_lte: Decimal
}

input NullableOfDoubleFilter {
  AND: [NullableOfDoubleFilter!]
  OR: [NullableOfDoubleFilter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: Float
  value_not: Float
  value_in: [Float!]
  value_not_in: [Float!]
  value_gt: Float
  value_not_gt: Float
  value_gte: Float
  value_not_gte: Float
  value_lt: Float
  value_not_lt: Float
  value_lte: Float
  value_not_lte: Float
}

input NullableOfGuidFilter {
  AND: [NullableOfGuidFilter!]
  OR: [NullableOfGuidFilter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: UUID
  value_not: UUID
  value_in: [UUID!]
  value_not_in: [UUID!]
  value_gt: UUID
  value_not_gt: UUID
  value_gte: UUID
  value_not_gte: UUID
  value_lt: UUID
  value_not_lt: UUID
  value_lte: UUID
  value_not_lte: UUID
}

input NullableOfInt16Filter {
  AND: [NullableOfInt16Filter!]
  OR: [NullableOfInt16Filter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: Short
  value_not: Short
  value_in: [Short!]
  value_not_in: [Short!]
  value_gt: Short
  value_not_gt: Short
  value_gte: Short
  value_not_gte: Short
  value_lt: Short
  value_not_lt: Short
  value_lte: Short
  value_not_lte: Short
}

input NullableOfInt32Filter {
  AND: [NullableOfInt32Filter!]
  OR: [NullableOfInt32Filter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_gt: Int
  value_not_gt: Int
  value_gte: Int
  value_not_gte: Int
  value_lt: Int
  value_not_lt: Int
  value_lte: Int
  value_not_lte: Int
}

input NullableOfInt64Filter {
  AND: [NullableOfInt64Filter!]
  OR: [NullableOfInt64Filter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: Long
  value_not: Long
  value_in: [Long!]
  value_not_in: [Long!]
  value_gt: Long
  value_not_gt: Long
  value_gte: Long
  value_not_gte: Long
  value_lt: Long
  value_not_lt: Long
  value_lte: Long
  value_not_lte: Long
}

input NullableOfSingleFilter {
  AND: [NullableOfSingleFilter!]
  OR: [NullableOfSingleFilter!]
  hasValue: Boolean
  hasValue_not: Boolean
  value: Float
  value_not: Float
  value_in: [Float!]
  value_not_in: [Float!]
  value_gt: Float
  value_not_gt: Float
  value_gte: Float
  value_not_gte: Float
  value_lt: Float
  value_not_lt: Float
  value_lte: Float
  value_not_lte: Float
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
