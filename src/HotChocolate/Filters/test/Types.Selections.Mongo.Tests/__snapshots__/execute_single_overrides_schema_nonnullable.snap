schema {
  query: Query
}

type Foo {
  baz: Int!
  fakeBar: String
  id: Uuid!
  middlewareList(order_by: NestedFooSort where: NestedFooFilter): NestedFoo
}

type NestedFoo {
  bar: String
  baz: Int!
  clone: NestedFoo
  id: Int!
}

type Query {
  foos: Foo!
}

input NestedFooFilter {
  AND: [NestedFooFilter!]
  bar: String
  bar_contains: String
  bar_ends_with: String
  bar_in: [String]
  bar_not: String
  bar_not_contains: String
  bar_not_ends_with: String
  bar_not_in: [String]
  bar_not_starts_with: String
  bar_starts_with: String
  baz: Int
  baz_gt: Int
  baz_gte: Int
  baz_in: [Int!]
  baz_lt: Int
  baz_lte: Int
  baz_not: Int
  baz_not_gt: Int
  baz_not_gte: Int
  baz_not_in: [Int!]
  baz_not_lt: Int
  baz_not_lte: Int
  id: Int
  id_gt: Int
  id_gte: Int
  id_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_not: Int
  id_not_gt: Int
  id_not_gte: Int
  id_not_in: [Int!]
  id_not_lt: Int
  id_not_lte: Int
  OR: [NestedFooFilter!]
}

input NestedFooSort {
  bar: SortOperationKind
  baz: SortOperationKind
  id: SortOperationKind
}

enum SortOperationKind {
  ASC
  DESC
}

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

scalar Uuid
