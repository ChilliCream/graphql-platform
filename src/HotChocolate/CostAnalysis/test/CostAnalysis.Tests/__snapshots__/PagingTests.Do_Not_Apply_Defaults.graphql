schema {
  query: Query
}

type Author {
  name: String!
}

"A connection to a list of items."
type AuthorsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AuthorsEdge!]
  "A flattened list of the nodes."
  nodes: [Author!]
}

"An edge in a connection."
type AuthorsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Author!
}

type Book {
  title: String!
  authors("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AuthorsConnection
}

"A connection to a list of items."
type BooksConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BooksEdge!]
  "A flattened list of the nodes."
  nodes: [Book!]
}

"An edge in a connection."
type BooksEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Book!
}

"A segment of a collection."
type BooksOffsetCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Book!]
}

"A segment of a collection."
type BooksTotalCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Book!]
  totalCount: Int!
}

"A connection to a list of items."
type BooksTotalConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BooksTotalEdge!]
  "A flattened list of the nodes."
  nodes: [Book!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type BooksTotalEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Book!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BookFilterInput order: [BookSortInput!]): BooksConnection
  booksWithTotalCount("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BookFilterInput order: [BookSortInput!]): BooksTotalConnection
  booksOffset(skip: Int take: Int where: BookFilterInput order: [BookSortInput!]): BooksOffsetCollectionSegment
  booksOffsetWithTotalCount(skip: Int take: Int where: BookFilterInput order: [BookSortInput!]): BooksTotalCollectionSegment
}

input BookFilterInput {
  and: [BookFilterInput!]
  or: [BookFilterInput!]
  title: StringOperationFilterInput
}

input BookSortInput {
  title: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}
