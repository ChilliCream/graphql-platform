*REMOVED*HotChocolate.Types.Pagination.OffsetPagingArguments.OffsetPagingArguments(int? skip, int take) -> void
*REMOVED*HotChocolate.Types.Pagination.OffsetPagingArguments.Take.get -> int
*REMOVED*virtual HotChocolate.Types.Pagination.QueryableOffsetPagingHandler<TItemType>.ExecuteQueryableAsync(System.Linq.IQueryable<TItemType>! queryable, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.List<TItemType>!>
abstract HotChocolate.Types.Pagination.OffsetPaginationAlgorithm<TQuery, TEntity>.ApplySkip(TQuery query, int skip) -> TQuery
abstract HotChocolate.Types.Pagination.OffsetPaginationAlgorithm<TQuery, TEntity>.ApplyTake(TQuery query, int take) -> TQuery
abstract HotChocolate.Types.Pagination.OffsetPaginationAlgorithm<TQuery, TEntity>.CountAsync(TQuery query, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<int>
abstract HotChocolate.Types.Pagination.OffsetPaginationAlgorithm<TQuery, TEntity>.ExecuteAsync(TQuery query, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<TEntity>!>
HotChocolate.Types.Pagination.CollectionSegment<T>.CollectionSegment(System.Collections.Generic.IReadOnlyCollection<T>! items, HotChocolate.Types.Pagination.CollectionSegmentInfo! info, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<int>>! getTotalCount) -> void
HotChocolate.Types.Pagination.CollectionSegment<T>.Items.get -> System.Collections.Generic.IReadOnlyCollection<T>!
HotChocolate.Types.Pagination.Extensions.OffsetPagingQueryableExtensions
HotChocolate.Types.Pagination.OffsetPaginationAlgorithm<TQuery, TEntity>
HotChocolate.Types.Pagination.OffsetPaginationAlgorithm<TQuery, TEntity>.ApplyPaginationAsync(TQuery query, HotChocolate.Types.Pagination.OffsetPagingArguments arguments, int? totalCount, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.CollectionSegment<TEntity>!>
HotChocolate.Types.Pagination.OffsetPaginationAlgorithm<TQuery, TEntity>.ApplyPaginationAsync(TQuery query, HotChocolate.Types.Pagination.OffsetPagingArguments arguments, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.CollectionSegment<TEntity>!>
HotChocolate.Types.Pagination.OffsetPaginationAlgorithm<TQuery, TEntity>.OffsetPaginationAlgorithm() -> void
HotChocolate.Types.Pagination.OffsetPagingArguments.OffsetPagingArguments(int? skip, int? take) -> void
HotChocolate.Types.Pagination.OffsetPagingArguments.Take.get -> int?
HotChocolate.Types.Pagination.OffsetPagingHandler.RequirePagingBoundaries.get -> bool
HotChocolate.Types.Pagination.QueryableOffsetPagingHandler<TEntity>
HotChocolate.Types.Pagination.QueryableOffsetPagingHandler<TEntity>.QueryableOffsetPagingHandler(HotChocolate.Types.Pagination.PagingOptions options) -> void
HotChocolate.Types.UseOffsetPagingAttribute.ProviderName.get -> string?
HotChocolate.Types.UseOffsetPagingAttribute.ProviderName.set -> void
HotChocolate.Types.UseOffsetPagingAttribute.RequirePagingBoundaries.get -> bool
HotChocolate.Types.UseOffsetPagingAttribute.RequirePagingBoundaries.set -> void
Microsoft.Extensions.DependencyInjection.OffsetPagingRequestExecutorBuilderExtension
override HotChocolate.Types.Pagination.QueryableOffsetPagingHandler<TEntity>.SliceAsync(HotChocolate.Resolvers.IResolverContext! context, object! source, HotChocolate.Types.Pagination.OffsetPagingArguments arguments) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.CollectionSegment!>
static HotChocolate.Types.Pagination.Extensions.OffsetPagingQueryableExtensions.ApplyOffsetPaginationAsync<TEntity>(this System.Linq.IQueryable<TEntity>! query, HotChocolate.Types.Pagination.OffsetPagingArguments arguments, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.CollectionSegment<TEntity>!>
static HotChocolate.Types.Pagination.Extensions.OffsetPagingQueryableExtensions.ApplyOffsetPaginationAsync<TEntity>(this System.Linq.IQueryable<TEntity>! query, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.CollectionSegment<TEntity>!>
static Microsoft.Extensions.DependencyInjection.OffsetPagingRequestExecutorBuilderExtension.AddOffsetPagingProvider<TProvider>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? providerName = null, bool defaultProvider = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.OffsetPagingRequestExecutorBuilderExtension.AddOffsetPagingProvider<TProvider>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, TProvider!>! factory, string? providerName = null, bool defaultProvider = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.OffsetPagingRequestExecutorBuilderExtension.AddQueryableOffsetPagingProvider(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? providerName = null, bool defaultProvider = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*HotChocolate.Types.EnumerableOffsetPagingExtensions
*REMOVED*HotChocolate.Types.Pagination.CollectionSegment<T>.CollectionSegment(System.Collections.Generic.IReadOnlyCollection<T!>! items, HotChocolate.Types.Pagination.CollectionSegmentInfo! info, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<int>>! getTotalCount) -> void
*REMOVED*HotChocolate.Types.Pagination.CollectionSegment<T>.Items.get -> System.Collections.Generic.IReadOnlyCollection<T!>!
*REMOVED*HotChocolate.Types.Pagination.OffsetPagingHelper
*REMOVED*HotChocolate.Types.Pagination.OffsetPagingHelper.ApplySkip<TSource>
*REMOVED*HotChocolate.Types.Pagination.OffsetPagingHelper.ApplyTake<TSource>
*REMOVED*HotChocolate.Types.Pagination.OffsetPagingHelper.CountAsync<TSource>
*REMOVED*HotChocolate.Types.Pagination.OffsetPagingHelper.Execute<TSource, TEntity>
*REMOVED*HotChocolate.Types.Pagination.QueryableOffsetPagingHandler<TItemType>
*REMOVED*HotChocolate.Types.Pagination.QueryableOffsetPagingHandler<TItemType>.QueryableOffsetPagingHandler(HotChocolate.Types.Pagination.PagingOptions options) -> void
*REMOVED*override HotChocolate.Types.Pagination.QueryableOffsetPagingHandler<TItemType>.SliceAsync(HotChocolate.Resolvers.IResolverContext! context, object! source, HotChocolate.Types.Pagination.OffsetPagingArguments arguments) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.CollectionSegment!>
*REMOVED*static HotChocolate.Types.EnumerableOffsetPagingExtensions.ApplyOffsetPaginationAsync<TItemType>(this System.Collections.Generic.IEnumerable<TItemType>! source, HotChocolate.Types.Pagination.OffsetPagingArguments arguments, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.CollectionSegment!>
*REMOVED*static HotChocolate.Types.EnumerableOffsetPagingExtensions.ApplyOffsetPaginationAsync<TItemType>(this System.Collections.Generic.IEnumerable<TItemType>! source, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.CollectionSegment!>
*REMOVED*static HotChocolate.Types.Pagination.OffsetPagingHelper.ApplyPagination<TSource, TEntity>(TSource source, HotChocolate.Types.Pagination.OffsetPagingArguments arguments, HotChocolate.Types.Pagination.OffsetPagingHelper.ApplySkip<TSource>! applySkip, HotChocolate.Types.Pagination.OffsetPagingHelper.ApplyTake<TSource>! applyTake, HotChocolate.Types.Pagination.OffsetPagingHelper.Execute<TSource, TEntity>! execute, HotChocolate.Types.Pagination.OffsetPagingHelper.CountAsync<TSource>! countAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.CollectionSegment!>