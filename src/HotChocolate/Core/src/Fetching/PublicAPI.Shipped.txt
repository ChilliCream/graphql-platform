#nullable enable
HotChocolate.Fetching.BatchDispatcherResult
HotChocolate.Fetching.BatchDispatcherResult.BatchDispatcherResult(System.Collections.Generic.IReadOnlyList<System.Exception!>! exceptions) -> void
HotChocolate.Fetching.BatchDispatcherResult.Exceptions.get -> System.Collections.Generic.IReadOnlyList<System.Exception!>!
HotChocolate.Fetching.BatchDispatcherResult.IsSuccessful.get -> bool
HotChocolate.Fetching.BatchScheduler
HotChocolate.Fetching.BatchScheduler.BatchScheduler() -> void
HotChocolate.Fetching.BatchScheduler.BeginDispatch(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
HotChocolate.Fetching.BatchScheduler.DispatchOnSchedule.get -> bool
HotChocolate.Fetching.BatchScheduler.DispatchOnSchedule.set -> void
HotChocolate.Fetching.BatchScheduler.Schedule(System.Func<System.Threading.Tasks.ValueTask>! dispatch) -> void
HotChocolate.Fetching.BatchScheduler.TaskEnqueued -> System.EventHandler?
HotChocolate.Fetching.DataLoaderParameterExpressionBuilder
HotChocolate.Fetching.DataLoaderParameterExpressionBuilder.DataLoaderParameterExpressionBuilder() -> void
HotChocolate.Fetching.DefaultDataLoaderRegistry
HotChocolate.Fetching.DefaultDataLoaderRegistry.DefaultDataLoaderRegistry() -> void
HotChocolate.Fetching.DefaultDataLoaderRegistry.Dispose() -> void
HotChocolate.Fetching.DefaultDataLoaderRegistry.GetOrRegister<T>(string! key, System.Func<T>! createDataLoader) -> T
HotChocolate.Fetching.DefaultDataLoaderRegistry.GetOrRegister<T>(System.Func<T>! createDataLoader) -> T
HotChocolate.Fetching.FetchBatch<TKey, TValue>
HotChocolate.Fetching.FetchCacheCt<TKey, TValue>
HotChocolate.Fetching.FetchGroup<TKey, TValue>
HotChocolate.Fetching.IBatchDispatcher
HotChocolate.Fetching.IBatchDispatcher.BeginDispatch(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
HotChocolate.Fetching.IBatchDispatcher.DispatchOnSchedule.get -> bool
HotChocolate.Fetching.IBatchDispatcher.DispatchOnSchedule.set -> void
HotChocolate.Fetching.IBatchDispatcher.TaskEnqueued -> System.EventHandler?
HotChocolate.Fetching.IDataLoaderRegistry
HotChocolate.Fetching.IDataLoaderRegistry.GetOrRegister<T>(string! key, System.Func<T>! createDataLoader) -> T
HotChocolate.Fetching.IDataLoaderRegistry.GetOrRegister<T>(System.Func<T>! createDataLoader) -> T
HotChocolate.Fetching.RegisterDataLoaderException
HotChocolate.Fetching.RegisterDataLoaderException.RegisterDataLoaderException(string! message) -> void
HotChocolate.Types.DataLoaderObjectFieldExtensions
HotChocolate.Types.DataLoaderResolverContextExtensions
HotChocolate.Types.UseDataLoaderAttribute
HotChocolate.Types.UseDataLoaderAttribute.UseDataLoaderAttribute(System.Type! dataLoaderType, int order = 0) -> void
override HotChocolate.Fetching.DataLoaderParameterExpressionBuilder.Build(System.Reflection.ParameterInfo! parameter, System.Linq.Expressions.Expression! context) -> System.Linq.Expressions.Expression!
override HotChocolate.Fetching.DataLoaderParameterExpressionBuilder.CanHandle(System.Reflection.ParameterInfo! parameter) -> bool
override HotChocolate.Types.UseDataLoaderAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
static HotChocolate.Fetching.BatchDispatcherResult.Success.get -> HotChocolate.Fetching.BatchDispatcherResult!
static HotChocolate.Types.DataLoaderObjectFieldExtensions.UseDataloader(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type! dataLoaderType) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.DataLoaderObjectFieldExtensions.UseDataloader<TDataLoader>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.DataLoaderResolverContextExtensions.BatchDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, HotChocolate.Fetching.FetchBatch<TKey, TValue>! fetch, string? key = null) -> GreenDonut.IDataLoader<TKey, TValue>!
static HotChocolate.Types.DataLoaderResolverContextExtensions.BatchDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, string! key, HotChocolate.Fetching.FetchBatch<TKey, TValue>! fetch) -> GreenDonut.IDataLoader<TKey, TValue>!
static HotChocolate.Types.DataLoaderResolverContextExtensions.CacheDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, HotChocolate.Fetching.FetchCacheCt<TKey, TValue>! fetch, string? key = null) -> GreenDonut.IDataLoader<TKey, TValue>!
static HotChocolate.Types.DataLoaderResolverContextExtensions.CacheDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, string! key, HotChocolate.Fetching.FetchCacheCt<TKey, TValue>! fetch) -> GreenDonut.IDataLoader<TKey, TValue>!
static HotChocolate.Types.DataLoaderResolverContextExtensions.DataLoader<T>(this HotChocolate.Resolvers.IResolverContext! context, string! key) -> T
static HotChocolate.Types.DataLoaderResolverContextExtensions.DataLoader<T>(this HotChocolate.Resolvers.IResolverContext! context) -> T
static HotChocolate.Types.DataLoaderResolverContextExtensions.FetchOnceAsync<TValue>(this HotChocolate.Resolvers.IResolverContext! context, string! key, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TValue>!>! fetch) -> System.Threading.Tasks.Task<TValue>!
static HotChocolate.Types.DataLoaderResolverContextExtensions.FetchOnceAsync<TValue>(this HotChocolate.Resolvers.IResolverContext! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TValue>!>! fetch, string? key = null) -> System.Threading.Tasks.Task<TValue>!
static HotChocolate.Types.DataLoaderResolverContextExtensions.GroupDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, HotChocolate.Fetching.FetchGroup<TKey, TValue>! fetch, string? key = null) -> GreenDonut.IDataLoader<TKey, TValue[]!>!
static HotChocolate.Types.DataLoaderResolverContextExtensions.GroupDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, string! key, HotChocolate.Fetching.FetchGroup<TKey, TValue>! fetch) -> GreenDonut.IDataLoader<TKey, TValue[]!>!
