#nullable enable
~abstract HotChocolate.Types.Descriptors.ConventionExtension.Merge(HotChocolate.Types.Descriptors.IConventionContext context, HotChocolate.Types.Descriptors.Convention convention) -> void
~abstract HotChocolate.Types.Descriptors.ConventionExtension<TDefinition>.Merge(HotChocolate.Types.Descriptors.IConventionContext context, HotChocolate.Types.Descriptors.Convention convention) -> void
~const HotChocolate.Types.DeprecatedDirectiveType.Names.Deprecated = "deprecated" -> string
~const HotChocolate.Types.DeprecatedDirectiveType.Names.Reason = "reason" -> string
~const HotChocolate.Types.OperationTypeNames.Mutation = "Mutation" -> string
~const HotChocolate.Types.OperationTypeNames.Query = "Query" -> string
~const HotChocolate.Types.OperationTypeNames.Subscription = "Subscription" -> string
~const HotChocolate.Types.ScalarNames.Any = "Any" -> string
~const HotChocolate.Types.ScalarNames.Boolean = "Boolean" -> string
~const HotChocolate.Types.ScalarNames.Byte = "Byte" -> string
~const HotChocolate.Types.ScalarNames.ByteArray = "ByteArray" -> string
~const HotChocolate.Types.ScalarNames.Date = "Date" -> string
~const HotChocolate.Types.ScalarNames.DateTime = "DateTime" -> string
~const HotChocolate.Types.ScalarNames.Decimal = "Decimal" -> string
~const HotChocolate.Types.ScalarNames.Float = "Float" -> string
~const HotChocolate.Types.ScalarNames.ID = "ID" -> string
~const HotChocolate.Types.ScalarNames.Int = "Int" -> string
~const HotChocolate.Types.ScalarNames.Long = "Long" -> string
~const HotChocolate.Types.ScalarNames.MultiplierPath = "MultiplierPath" -> string
~const HotChocolate.Types.ScalarNames.Name = "Name" -> string
~const HotChocolate.Types.ScalarNames.Short = "Short" -> string
~const HotChocolate.Types.ScalarNames.String = "String" -> string
~const HotChocolate.Types.ScalarNames.TimeSpan = "TimeSpan" -> string
~const HotChocolate.Types.ScalarNames.Url = "Url" -> string
~const HotChocolate.Types.ScalarNames.Uuid = "Uuid" -> string
~const HotChocolate.Types.SpecifiedByDirectiveType.Names.SpecifiedBy = "specifiedBy" -> string
~const HotChocolate.Types.SpecifiedByDirectiveType.Names.Url = "url" -> string
~HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder.AddField(HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder builder) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder.AddField(System.Action<HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder> configure) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder.Create() -> HotChocolate.Configuration.Bindings.IBindingInfo
~HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder.SetFieldBinding(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder.SetName(HotChocolate.NameString typeName) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder.SetType(System.Type type) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ComplexTypeFieldBindingBuilder.SetMember(System.Reflection.MemberInfo member) -> HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder
~HotChocolate.Configuration.Bindings.ComplexTypeFieldBindingBuilder.SetName(HotChocolate.NameString name) -> HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder
~HotChocolate.Configuration.Bindings.IBindField<T>
~HotChocolate.Configuration.Bindings.IBindField<T>.Name(HotChocolate.NameString fieldName) -> HotChocolate.Configuration.Bindings.IBoundType<T>
~HotChocolate.Configuration.Bindings.IBindFieldResolver<TResolver, TObjectType>
~HotChocolate.Configuration.Bindings.IBindFieldResolver<TResolver, TObjectType>.With<TPropertyType>(System.Linq.Expressions.Expression<System.Func<TResolver, TPropertyType>> resolver) -> HotChocolate.Configuration.Bindings.IBoundResolver<TResolver, TObjectType>
~HotChocolate.Configuration.Bindings.IBindFieldResolver<TResolver>
~HotChocolate.Configuration.Bindings.IBindFieldResolver<TResolver>.With<TPropertyType>(System.Linq.Expressions.Expression<System.Func<TResolver, TPropertyType>> resolver) -> HotChocolate.Configuration.Bindings.IBoundResolver<TResolver>
~HotChocolate.Configuration.Bindings.IBindingBuilder.Create() -> HotChocolate.Configuration.Bindings.IBindingInfo
~HotChocolate.Configuration.Bindings.IBindingInfo.Clone() -> HotChocolate.Configuration.Bindings.IBindingInfo
~HotChocolate.Configuration.Bindings.IBindResolver<TResolver>
~HotChocolate.Configuration.Bindings.IBindResolver<TResolver>.To(HotChocolate.NameString typeName) -> HotChocolate.Configuration.Bindings.IBoundResolver<TResolver>
~HotChocolate.Configuration.Bindings.IBindResolver<TResolver>.To<TObjectType>() -> HotChocolate.Configuration.Bindings.IBoundResolver<TResolver, TObjectType>
~HotChocolate.Configuration.Bindings.IBindResolverDelegate.To<TObjectType>(System.Linq.Expressions.Expression<System.Func<TObjectType, object>> resolver) -> void
~HotChocolate.Configuration.Bindings.IBindType<T>
~HotChocolate.Configuration.Bindings.IBindType<T>.To(HotChocolate.NameString typeName) -> HotChocolate.Configuration.Bindings.IBoundType<T>
~HotChocolate.Configuration.Bindings.IBoundResolver<TResolver, TObjectType>
~HotChocolate.Configuration.Bindings.IBoundResolver<TResolver, TObjectType>.Resolve<TPropertyType>(System.Linq.Expressions.Expression<System.Func<TObjectType, TPropertyType>> field) -> HotChocolate.Configuration.Bindings.IBindFieldResolver<TResolver, TObjectType>
~HotChocolate.Configuration.Bindings.IBoundResolver<TResolver>
~HotChocolate.Configuration.Bindings.IBoundResolver<TResolver>.Resolve(HotChocolate.NameString fieldName) -> HotChocolate.Configuration.Bindings.IBindFieldResolver<TResolver>
~HotChocolate.Configuration.Bindings.IBoundType<T>
~HotChocolate.Configuration.Bindings.IBoundType<T>.Field<TPropertyType>(System.Linq.Expressions.Expression<System.Func<T, TPropertyType>> field) -> HotChocolate.Configuration.Bindings.IBindField<T>
~HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder.AddField(HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder builder) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder.AddField(System.Action<HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder> configure) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder.SetFieldBinding(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder.SetName(HotChocolate.NameString typeName) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder.SetType(System.Type type) -> HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder.SetMember(System.Reflection.MemberInfo member) -> HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder
~HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder.SetName(HotChocolate.NameString name) -> HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder
~HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor.To(HotChocolate.NameString typeName) -> HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor
~HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor.Value(object value) -> HotChocolate.Configuration.Bindings.IEnumValueBindingDescriptor
~HotChocolate.Configuration.Bindings.IEnumValueBindingDescriptor.To(HotChocolate.NameString valueName) -> HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor
~HotChocolate.Configuration.Bindings.IResolverBindingBuilder.SetField(HotChocolate.NameString fieldName) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverBindingBuilder.SetField(System.Reflection.MemberInfo member) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverBindingBuilder.SetResolver(HotChocolate.Resolvers.FieldResolverDelegate resolver) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverBindingBuilder.SetType(HotChocolate.NameString typeName) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverBindingBuilder.SetType(System.Type type) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder.SetField(HotChocolate.NameString fieldName) -> HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder.SetField(System.Reflection.MemberInfo member) -> HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder.SetResolver(HotChocolate.Resolvers.FieldResolverDelegate resolver) -> HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder.SetResolver(System.Reflection.MemberInfo member) -> HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder.AddField(HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder builder) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder.AddField(System.Action<HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder> configure) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder.SetFieldBinding(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder.SetResolverType(System.Type type) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder.SetType(HotChocolate.NameString typeName) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder.SetType(System.Type type) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverBindingBuilder.Create() -> HotChocolate.Configuration.Bindings.IBindingInfo
~HotChocolate.Configuration.Bindings.ResolverBindingBuilder.SetField(HotChocolate.NameString fieldName) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverBindingBuilder.SetField(System.Reflection.MemberInfo member) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverBindingBuilder.SetResolver(HotChocolate.Resolvers.FieldResolverDelegate resolver) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverBindingBuilder.SetType(HotChocolate.NameString typeName) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverBindingBuilder.SetType(System.Type type) -> HotChocolate.Configuration.Bindings.IResolverBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverFieldBindingBuilder.SetField(HotChocolate.NameString fieldName) -> HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverFieldBindingBuilder.SetField(System.Reflection.MemberInfo member) -> HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverFieldBindingBuilder.SetResolver(HotChocolate.Resolvers.FieldResolverDelegate resolver) -> HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverFieldBindingBuilder.SetResolver(System.Reflection.MemberInfo member) -> HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.AddField(HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder builder) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.AddField(System.Action<HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder> configure) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.Create() -> HotChocolate.Configuration.Bindings.IBindingInfo
~HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.SetFieldBinding(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.SetResolverType(System.Type type) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.SetType(HotChocolate.NameString typeName) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.SetType(System.Type type) -> HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
~HotChocolate.Configuration.ISchemaConfiguration.BindResolver(HotChocolate.Resolvers.FieldResolverDelegate fieldResolver) -> HotChocolate.Configuration.Bindings.IBindResolverDelegate
~HotChocolate.Configuration.ISchemaConfiguration.BindResolver<TResolver>(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Configuration.Bindings.IBindResolver<TResolver>
~HotChocolate.Configuration.ISchemaConfiguration.BindType<T>(HotChocolate.Types.BindingBehavior bindingBehavior) -> HotChocolate.Configuration.Bindings.IBindType<T>
~HotChocolate.Configuration.ISchemaConfiguration.Extend() -> HotChocolate.Configuration.ISchemaConfigurationExtension
~HotChocolate.Configuration.ISchemaConfiguration.Options.get -> HotChocolate.Configuration.ISchemaOptions
~HotChocolate.Configuration.ISchemaConfiguration.RegisterDirective(System.Type type) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterDirective<T>() -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterDirective<T>(T directive) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterIsOfType(HotChocolate.Types.IsOfTypeFallback isOfType) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterMutationType(System.Type type) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterMutationType<T>() -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterMutationType<T>(T objectType) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterQueryType(System.Type type) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterQueryType<T>() -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterQueryType<T>(T objectType) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterServiceProvider(System.IServiceProvider serviceProvider) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterSubscriptionType(System.Type type) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterSubscriptionType<T>() -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterSubscriptionType<T>(T objectType) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterType(HotChocolate.Types.INamedType namedType) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterType(HotChocolate.Types.INamedTypeExtension namedTypeExtension) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterType(System.Type type) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.RegisterType<T>() -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfiguration.Use(HotChocolate.Resolvers.FieldMiddleware middleware) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaConfigurationExtension.OnBeforeBuild(System.Action<HotChocolate.ISchemaBuilder> build) -> HotChocolate.Configuration.ISchemaConfiguration
~HotChocolate.Configuration.ISchemaInterceptor.OnAfterCreate(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.ISchema schema) -> void
~HotChocolate.Configuration.ISchemaInterceptor.OnBeforeCreate(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.ISchemaBuilder schemaBuilder) -> void
~HotChocolate.Configuration.ISchemaInterceptor.OnError(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Exception exception) -> void
~HotChocolate.Configuration.ISchemaOptions.MutationTypeName.get -> string
~HotChocolate.Configuration.ISchemaOptions.MutationTypeName.set -> void
~HotChocolate.Configuration.ISchemaOptions.QueryTypeName.get -> string
~HotChocolate.Configuration.ISchemaOptions.QueryTypeName.set -> void
~HotChocolate.Configuration.ISchemaOptions.SubscriptionTypeName.get -> string
~HotChocolate.Configuration.ISchemaOptions.SubscriptionTypeName.set -> void
~HotChocolate.Configuration.ITypeDiscoveryContext.RegisterDependency(HotChocolate.Types.Descriptors.Definitions.TypeDependency dependency) -> void
~HotChocolate.Configuration.ITypeDiscoveryContext.RegisterDependency(HotChocolate.Types.Descriptors.IDirectiveReference reference) -> void
~HotChocolate.Configuration.ITypeDiscoveryContext.RegisterDependency(HotChocolate.Types.Descriptors.ITypeReference reference, HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind kind) -> void
~HotChocolate.Configuration.ITypeDiscoveryContext.RegisterDependencyRange(System.Collections.Generic.IEnumerable<HotChocolate.Types.Descriptors.Definitions.TypeDependency> dependencies) -> void
~HotChocolate.Configuration.ITypeDiscoveryContext.RegisterDependencyRange(System.Collections.Generic.IEnumerable<HotChocolate.Types.Descriptors.IDirectiveReference> references) -> void
~HotChocolate.Configuration.ITypeDiscoveryContext.RegisterDependencyRange(System.Collections.Generic.IEnumerable<HotChocolate.Types.Descriptors.ITypeReference> references, HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind kind) -> void
~HotChocolate.Configuration.ITypeDiscoveryContext.TypeDependencies.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Descriptors.Definitions.TypeDependency>
~HotChocolate.Configuration.ITypeRegistryInterceptor.OnTypeRegistered(HotChocolate.Configuration.ITypeDiscoveryContext discoveryContext) -> void
~HotChocolate.Configuration.ReadOnlySchemaOptions.MutationTypeName.get -> string
~HotChocolate.Configuration.ReadOnlySchemaOptions.QueryTypeName.get -> string
~HotChocolate.Configuration.ReadOnlySchemaOptions.ReadOnlySchemaOptions(HotChocolate.Configuration.IReadOnlySchemaOptions options) -> void
~HotChocolate.Configuration.ReadOnlySchemaOptions.SubscriptionTypeName.get -> string
~HotChocolate.Configuration.SchemaOptions.MutationTypeName.get -> string
~HotChocolate.Configuration.SchemaOptions.MutationTypeName.set -> void
~HotChocolate.Configuration.SchemaOptions.QueryTypeName.get -> string
~HotChocolate.Configuration.SchemaOptions.QueryTypeName.set -> void
~HotChocolate.Configuration.SchemaOptions.SubscriptionTypeName.get -> string
~HotChocolate.Configuration.SchemaOptions.SubscriptionTypeName.set -> void
~HotChocolate.IFluent.Equals(object obj) -> bool
~HotChocolate.IFluent.ToString() -> string
~HotChocolate.IInputTypeParser.Parse(HotChocolate.Language.IValueNode literal) -> object
~HotChocolate.Internal.ITypeFactory.CreateType(HotChocolate.Types.INamedType namedType) -> HotChocolate.Types.IType
~HotChocolate.Internal.ITypeInfo.Components.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Internal.TypeComponent>
~HotChocolate.Internal.ITypeInfo.GetExtendedType() -> HotChocolate.Internal.IExtendedType
~HotChocolate.Internal.ITypeInfo.NamedType.get -> System.Type
~HotChocolate.Internal.ITypeInfo.OriginalType.get -> System.Type
~HotChocolate.Internal.TypeComponent.Type.get -> HotChocolate.Internal.IExtendedType
~HotChocolate.Internal.TypeComponent.TypeComponent(HotChocolate.Internal.TypeComponentKind kind, HotChocolate.Internal.IExtendedType type) -> void
~HotChocolate.ISchemaErrorBuilder.AddSyntaxNode(HotChocolate.Language.ISyntaxNode syntaxNode) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.ISchemaErrorBuilder.Build() -> HotChocolate.ISchemaError
~HotChocolate.ISchemaErrorBuilder.SetCode(string code) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.ISchemaErrorBuilder.SetException(System.Exception exception) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.ISchemaErrorBuilder.SetExtension(string key, object value) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.ISchemaErrorBuilder.SetMessage(string message) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.ISchemaErrorBuilder.SetPath(HotChocolate.Path path) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.ISchemaErrorBuilder.SetPath(System.Collections.Generic.IReadOnlyCollection<object> path) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.ISchemaErrorBuilder.SetTypeSystemObject(HotChocolate.Types.ITypeSystemObject typeSystemObject) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.Resolvers.FieldReference.Equals(HotChocolate.Resolvers.FieldReference other) -> bool
~HotChocolate.Resolvers.FieldReference.WithExpression(System.Linq.Expressions.Expression expression) -> HotChocolate.Resolvers.FieldMember
~HotChocolate.Resolvers.FieldReference.WithFieldName(HotChocolate.NameString fieldName) -> HotChocolate.Resolvers.FieldReference
~HotChocolate.Resolvers.FieldReference.WithMember(System.Reflection.MemberInfo member) -> HotChocolate.Resolvers.FieldMember
~HotChocolate.Resolvers.FieldReference.WithResolver(HotChocolate.Resolvers.FieldResolverDelegate resolver) -> HotChocolate.Resolvers.FieldResolver
~HotChocolate.Resolvers.FieldReference.WithTypeName(HotChocolate.NameString typeName) -> HotChocolate.Resolvers.FieldReference
~HotChocolate.Resolvers.FieldReferenceBase.FieldReferenceBase(HotChocolate.Resolvers.FieldReferenceBase fieldReference) -> void
~HotChocolate.Resolvers.FieldReferenceBase.IsEqualTo(HotChocolate.Resolvers.FieldReferenceBase other) -> bool
~HotChocolate.Resolvers.FieldReferenceBase.IsReferenceEqualTo<T>(T value) -> bool
~HotChocolate.Resolvers.FieldResolver.Equals(HotChocolate.Resolvers.FieldResolver other) -> bool
~HotChocolate.Resolvers.FieldResolver.FieldResolver(HotChocolate.NameString typeName, HotChocolate.NameString fieldName, HotChocolate.Resolvers.FieldResolverDelegate resolver) -> void
~HotChocolate.Resolvers.FieldResolver.FieldResolver(HotChocolate.Resolvers.FieldReference fieldReference, HotChocolate.Resolvers.FieldResolverDelegate resolver) -> void
~HotChocolate.Resolvers.FieldResolver.Resolver.get -> HotChocolate.Resolvers.FieldResolverDelegate
~HotChocolate.Resolvers.FieldResolver.ToFieldReference() -> HotChocolate.Resolvers.FieldReference
~HotChocolate.Resolvers.FieldResolver.WithFieldName(HotChocolate.NameString fieldName) -> HotChocolate.Resolvers.FieldResolver
~HotChocolate.Resolvers.FieldResolver.WithResolver(HotChocolate.Resolvers.FieldResolverDelegate resolver) -> HotChocolate.Resolvers.FieldResolver
~HotChocolate.Resolvers.FieldResolver.WithTypeName(HotChocolate.NameString typeName) -> HotChocolate.Resolvers.FieldResolver
~HotChocolate.Resolvers.IDirectiveContext.Directive.get -> HotChocolate.Types.IDirective
~HotChocolate.Resolvers.IFieldSelection.Field.get -> HotChocolate.Types.IObjectField
~HotChocolate.Resolvers.IFieldSelection.Nodes.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.FieldNode>
~HotChocolate.Resolvers.IFieldSelection.SyntaxNode.get -> HotChocolate.Language.FieldNode
~HotChocolate.Resolvers.IFieldSelection.SyntaxNodes.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.FieldNode>
~HotChocolate.Schema.Schema(System.Action<HotChocolate.Types.ISchemaTypeDescriptor> configure) -> void
~HotChocolate.SchemaBuilder.AddBinding(HotChocolate.Configuration.Bindings.IBindingInfo binding) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddConvention(System.Type convention, HotChocolate.CreateConvention factory, string scope = null) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddDirectiveType(HotChocolate.Types.DirectiveType type) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddDocument(HotChocolate.LoadSchemaDocument loadSchemaDocument) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddResolver(HotChocolate.Resolvers.FieldResolver fieldResolver) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddRootType(HotChocolate.Types.ObjectType type, HotChocolate.Language.OperationType operation) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddRootType(System.Type type, HotChocolate.Language.OperationType operation) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddServices(System.IServiceProvider services) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddType(HotChocolate.Types.INamedType type) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddType(HotChocolate.Types.INamedTypeExtension type) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.AddType(System.Type type) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.BindClrType(System.Type runtimeType, System.Type schemaType) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.Create() -> HotChocolate.Schema
~HotChocolate.SchemaBuilder.ModifyOptions(System.Action<HotChocolate.Configuration.ISchemaOptions> configure) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.SetContextData(string key, object value) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.SetContextData(string key, System.Func<object, object> update) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.SetOptions(HotChocolate.Configuration.IReadOnlySchemaOptions options) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.SetSchema(HotChocolate.ISchema schema) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.SetSchema(System.Action<HotChocolate.Types.ISchemaTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.SetSchema(System.Type type) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.SetTypeResolver(HotChocolate.Types.IsOfTypeFallback isOfType) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.TryAddConvention(System.Type convention, HotChocolate.CreateConvention factory, string scope = null) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.TryAddSchemaInterceptor(HotChocolate.Configuration.ISchemaInterceptor interceptor) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.TryAddSchemaInterceptor(System.Type interceptor) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.TryAddTypeInterceptor(HotChocolate.Configuration.ITypeInitializationInterceptor interceptor) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.TryAddTypeInterceptor(System.Type interceptor) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaBuilder.Use(HotChocolate.Resolvers.FieldMiddleware middleware) -> HotChocolate.ISchemaBuilder
~HotChocolate.SchemaErrorBuilder.AddSyntaxNode(HotChocolate.Language.ISyntaxNode syntaxNode) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.SchemaErrorBuilder.Build() -> HotChocolate.ISchemaError
~HotChocolate.SchemaErrorBuilder.SetCode(string code) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.SchemaErrorBuilder.SetException(System.Exception exception) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.SchemaErrorBuilder.SetExtension(string key, object value) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.SchemaErrorBuilder.SetMessage(string message) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.SchemaErrorBuilder.SetPath(HotChocolate.Path path) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.SchemaErrorBuilder.SetPath(System.Collections.Generic.IReadOnlyCollection<object> path) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.SchemaErrorBuilder.SetTypeSystemObject(HotChocolate.Types.ITypeSystemObject typeSystemObject) -> HotChocolate.ISchemaErrorBuilder
~HotChocolate.SchemaException.Errors.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.ISchemaError>
~HotChocolate.SchemaException.SchemaException(params HotChocolate.ISchemaError[] errors) -> void
~HotChocolate.SchemaException.SchemaException(System.Collections.Generic.IEnumerable<HotChocolate.ISchemaError> errors) -> void
~HotChocolate.SchemaException.SchemaException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
~HotChocolate.Types.CostDirective.CostDirective(int complexity, params HotChocolate.Types.MultiplierPathString[] multipliers) -> void
~HotChocolate.Types.CostDirective.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
~HotChocolate.Types.CostDirective.Multipliers.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.MultiplierPathString>
~HotChocolate.Types.Descriptors.ArgumentDescriptor.ArgumentDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString argumentName, System.Type argumentType) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptor.ArgumentDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString argumentName) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptor.ArgumentDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition definition) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptor.ArgumentDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Reflection.ParameterInfo parameter) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptor.DefaultValue(HotChocolate.Language.IValueNode value) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.DefaultValue(object value) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.Description(string value) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.Directive<TDirective>() -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.Directive<TDirective>(TDirective directiveInstance) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode inputValueDefinition) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.Type(HotChocolate.Language.ITypeNode typeNode) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.Type(System.Type type) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.Type<TInputType>() -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptor.Type<TInputType>(TInputType inputType) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.ArgumentDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.DefaultValue(HotChocolate.Language.IValueNode value) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.DefaultValue(object value) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Description(string value) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Directive<TDirective>() -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Directive<TDirective>(TDirective directiveInstance) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode inputValueDefinition) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Type(HotChocolate.Language.ITypeNode typeNode) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Type(HotChocolate.Types.Descriptors.ITypeReference typeReference) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Type(System.Type type) -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Type<TInputType>() -> void
~HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Type<TInputType>(TInputType inputType) -> void
~HotChocolate.Types.Descriptors.ConventionExtension<TDefinition>
~HotChocolate.Types.Descriptors.Definitions.DefinitionValidationResult.DefinitionValidationResult(System.Collections.Generic.IReadOnlyList<HotChocolate.IError> errors) -> void
~HotChocolate.Types.Descriptors.Definitions.DefinitionValidationResult.Errors.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.IError>
~HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition.Values.get -> HotChocolate.Types.Descriptors.Definitions.IBindableList<HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition>
~HotChocolate.Types.Descriptors.Definitions.IBindableList<T>.AddRange(System.Collections.Generic.IEnumerable<T> items) -> void
~HotChocolate.Types.Descriptors.Definitions.ICanBeDeprecated.DeprecationReason.get -> string
~HotChocolate.Types.Descriptors.Definitions.IDefinitionFactory.CreateDefinition() -> HotChocolate.Types.Descriptors.Definitions.DefinitionBase
~HotChocolate.Types.Descriptors.Definitions.IDefinitionFactory<T>
~HotChocolate.Types.Descriptors.Definitions.IDefinitionFactory<T>.CreateDefinition() -> T
~HotChocolate.Types.Descriptors.Definitions.IDefinitionValidationResult.Errors.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.IError>
~HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration.Configure(HotChocolate.Configuration.ITypeCompletionContext context) -> void
~HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration.Copy(HotChocolate.Types.Descriptors.Definitions.DefinitionBase newOwner) -> HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration
~HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration.Dependencies.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Descriptors.Definitions.TypeDependency>
~HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition.Property.get -> System.Reflection.PropertyInfo
~HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition.Property.set -> void
~HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition.Fields.get -> HotChocolate.Types.Descriptors.Definitions.IBindableList<HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition>
~HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition.Member.get -> System.Reflection.MemberInfo
~HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition.Member.set -> void
~HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition.ResolveAbstractType.get -> HotChocolate.Types.ResolveAbstractType
~HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition.ResolveAbstractType.set -> void
~HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition.Types.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.ITypeReference>
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.DefaultValue(HotChocolate.Language.IValueNode value) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.DefaultValue(object value) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.Description(string value) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.DirectiveArgumentDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString argumentName) -> void
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.DirectiveArgumentDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition definition) -> void
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.DirectiveArgumentDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Reflection.PropertyInfo property) -> void
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode inputValueDefinition) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.Type(HotChocolate.Language.ITypeNode typeNode) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.Type(System.Type type) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.Type<TInputType>() -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.Type<TInputType>(TInputType inputType) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Argument(HotChocolate.NameString name) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Arguments.get -> System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Description(string value) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.DirectiveTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.DirectiveTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> void
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.DirectiveTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Internal() -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Location(HotChocolate.Types.DirectiveLocation value) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Middleware(HotChocolate.Resolvers.DirectiveMiddleware middleware) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Middleware<T>(System.Linq.Expressions.Expression<System.Action<T>> method) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Middleware<T>(System.Linq.Expressions.Expression<System.Func<T, object>> method) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Public() -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Repeatable() -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.SyntaxNode(HotChocolate.Language.DirectiveDefinitionNode directiveDefinitionNode) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Use(HotChocolate.Resolvers.DirectiveMiddleware middleware) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Use<TMiddleware>() -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Use<TMiddleware>(System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Argument(System.Linq.Expressions.Expression<System.Func<T, object>> property) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.BindArguments(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.BindArgumentsExplicitly() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.BindArgumentsImplicitly() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Description(string value) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.DirectiveTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.DirectiveTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Internal() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Location(HotChocolate.Types.DirectiveLocation value) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Middleware(HotChocolate.Resolvers.DirectiveMiddleware middleware) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Middleware<TMiddleware>(System.Linq.Expressions.Expression<System.Action<TMiddleware>> method) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Middleware<TMiddleware>(System.Linq.Expressions.Expression<System.Func<TMiddleware, object>> method) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Public() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Repeatable() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.SyntaxNode(HotChocolate.Language.DirectiveDefinitionNode directiveDefinitionNode) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Use(HotChocolate.Resolvers.DirectiveMiddleware middleware) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Use<TMiddleware>() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.Use<TMiddleware>(System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.AddImplicitValues(HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition typeDefinition, System.Collections.Generic.IDictionary<object, HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition> values) -> void
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.BindItems(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.BindValues(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.BindValuesExplicitly() -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.BindValuesImplicitly() -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.Description(string value) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.Directive<T>() -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.EnumTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.EnumTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> void
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.EnumTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.Item<T>(T value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode enumTypeDefinition) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.Value<T>(T value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor.Values.get -> System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.EnumValueDescriptor>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.BindItems(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.BindValues(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.BindValuesExplicitly() -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.BindValuesImplicitly() -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.Description(string value) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.Directive<TDirective>(TDirective directiveInstance) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.EnumTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.EnumTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.Item(T value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode enumTypeDefinition) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>.Value(T value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumValueDescriptor.Deprecated() -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumValueDescriptor.Deprecated(string reason) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumValueDescriptor.DeprecationReason(string reason) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumValueDescriptor.Description(string value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumValueDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumValueDescriptor.Directive<T>() -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumValueDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumValueDescriptor.EnumValueDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition definition) -> void
~HotChocolate.Types.Descriptors.EnumValueDescriptor.EnumValueDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, object value) -> void
~HotChocolate.Types.Descriptors.EnumValueDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.EnumValueDescriptor.SyntaxNode(HotChocolate.Language.EnumValueDefinitionNode enumValueDefinition) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.Descriptors.IConventionExtension.Merge(HotChocolate.Types.Descriptors.IConventionContext context, HotChocolate.Types.Descriptors.Convention convention) -> void
~HotChocolate.Types.Descriptors.InputFieldDescriptor.DefaultValue(HotChocolate.Language.IValueNode value) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.DefaultValue(object value) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Description(string value) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Directive<TDirective>() -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Directive<TDirective>(TDirective directiveInstance) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.InputFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString fieldName) -> void
~HotChocolate.Types.Descriptors.InputFieldDescriptor.InputFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition definition) -> void
~HotChocolate.Types.Descriptors.InputFieldDescriptor.InputFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Reflection.PropertyInfo property) -> void
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode inputValueDefinition) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Type(HotChocolate.Language.ITypeNode typeNode) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Type(System.Type type) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Type<TInputType>() -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputFieldDescriptor.Type<TInputType>(TInputType inputType) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.Description(string value) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.Directive<T>() -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.Directive<T>(T directive) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.Fields.get -> System.Collections.Generic.List<HotChocolate.Types.Descriptors.InputFieldDescriptor>
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.InputObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.InputObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> void
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.InputObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.SyntaxNode(HotChocolate.Language.InputObjectTypeDefinitionNode inputObjectTypeDefinitionNode) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.Description(string value) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.Directive<TDirective>(TDirective directive) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.Field<TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>> property) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.InputObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.InputObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.SyntaxNode(HotChocolate.Language.InputObjectTypeDefinitionNode inputObjectTypeDefinitionNode) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Argument(HotChocolate.NameString name, System.Action<HotChocolate.Types.IArgumentDescriptor> argument) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Deprecated() -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Deprecated(string reason) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.DeprecationReason(string reason) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Description(string description) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Directive<T>() -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Directive<T>(T directive) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.InterfaceFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString fieldName) -> void
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.InterfaceFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition definition) -> void
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.InterfaceFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Reflection.MemberInfo member) -> void
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Name(HotChocolate.NameString name) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.SyntaxNode(HotChocolate.Language.FieldDefinitionNode fieldDefinitionNode) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Type(HotChocolate.Language.ITypeNode type) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Type(System.Type type) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Type<TOutputType>() -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Type<TOutputType>(TOutputType outputType) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Description(string value) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Directive<T>() -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Fields.get -> System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.InterfaceFieldDescriptor>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Implements(HotChocolate.Language.NamedTypeNode type) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Implements<T>() -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Implements<T>(T type) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Interface(HotChocolate.Language.NamedTypeNode namedType) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Interface<TInterface>() -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Interface<TInterface>(TInterface type) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.InterfaceTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.InterfaceTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> void
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.InterfaceTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.ResolveAbstractType(HotChocolate.Types.ResolveAbstractType typeResolver) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.SyntaxNode(HotChocolate.Language.InterfaceTypeDefinitionNode interfaceTypeDefinition) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Description(string value) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Directive<TDirective>(TDirective directiveInstance) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Field(System.Linq.Expressions.Expression<System.Func<T, object>> propertyOrMethod) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Implements(HotChocolate.Language.NamedTypeNode type) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Implements<TInterface>() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Implements<TInterface>(TInterface type) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Interface(HotChocolate.Language.NamedTypeNode type) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Interface<TInterface>() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Interface<TInterface>(TInterface type) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.InterfaceTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.InterfaceTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.ResolveAbstractType(HotChocolate.Types.ResolveAbstractType typeResolver) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.SyntaxNode(HotChocolate.Language.InterfaceTypeDefinitionNode interfaceTypeDefinition) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.Descriptors.IXmlDocumentationFileResolver.TryGetXmlDocument(System.Reflection.Assembly assembly, out System.Xml.Linq.XDocument document) -> bool
~HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>
~HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>.Build() -> HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration
~HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>.Configure(System.Action<HotChocolate.Configuration.ITypeCompletionContext, T> configure) -> HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>
~HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>.Definition(T definition) -> HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>
~HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>.DependsOn(HotChocolate.Types.Descriptors.ITypeReference typeReference, bool mustBeCompleted) -> HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>
~HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>.On(HotChocolate.Types.ApplyConfigurationOn kind) -> HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptor<T>.ObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.ObjectTypeDescriptor<T>.ObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.BindFieldsExplicitly() -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.BindFieldsImplicitly() -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Description(string value) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Directive<TDirective>() -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Directive<TDirective>(TDirective directiveInstance) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Field(System.Linq.Expressions.Expression<System.Func<T, object>> propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Field<TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>> propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Implements(HotChocolate.Language.NamedTypeNode type) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Implements<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Implements<TInterface>(TInterface type) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Include<TResolver>() -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Interface(HotChocolate.Language.NamedTypeNode type) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Interface<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Interface<TInterface>(TInterface type) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.IsOfType(HotChocolate.Types.IsOfType isOfType) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.ObjectTypeDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.ObjectTypeDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> void
~HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.ObjectTypeDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.SchemaCompletedEventArgs.Schema.get -> HotChocolate.ISchema
~HotChocolate.Types.Descriptors.SchemaCompletedEventArgs.SchemaCompletedEventArgs(HotChocolate.ISchema schema) -> void
~HotChocolate.Types.Descriptors.SchemaTypeDescriptor.Description(string value) -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.Descriptors.SchemaTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.Descriptors.SchemaTypeDescriptor.Directive<T>() -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.Descriptors.SchemaTypeDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.Descriptors.SchemaTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.Descriptors.SchemaTypeDescriptor.SchemaTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.SchemaTypeDescriptor.SchemaTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type type) -> void
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.Description(string value) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.Directive<T>() -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.ResolveAbstractType(HotChocolate.Types.ResolveAbstractType resolveAbstractType) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.SyntaxNode(HotChocolate.Language.UnionTypeDefinitionNode unionTypeDefinitionNode) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.Type(HotChocolate.Language.NamedTypeNode objectType) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.Type<TObjectType>() -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.Type<TObjectType>(TObjectType objectType) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.UnionTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition definition) -> void
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.UnionTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> void
~HotChocolate.Types.Descriptors.UnionTypeDescriptor.UnionTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext context) -> void
~HotChocolate.Types.Descriptors.XmlDocumentationFileResolver.TryGetXmlDocument(System.Reflection.Assembly assembly, out System.Xml.Linq.XDocument document) -> bool
~HotChocolate.Types.IArgumentDescriptor.DefaultValue(HotChocolate.Language.IValueNode value) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.DefaultValue(object value) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.Description(string value) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.Directive<T>() -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode inputValueDefinition) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.Type(HotChocolate.Language.ITypeNode typeNode) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.Type(System.Type type) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.Type<TInputType>() -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.IArgumentDescriptor.Type<TInputType>(TInputType inputType) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.ICompletedDependencyDescriptor.DependsOn(HotChocolate.NameString typeName, bool mustBeCompleted) -> HotChocolate.Types.ICompletedDependencyDescriptor
~HotChocolate.Types.ICompletedDependencyDescriptor.DependsOn(HotChocolate.NameString typeName) -> HotChocolate.Types.ICompletedDependencyDescriptor
~HotChocolate.Types.ICompletedDependencyDescriptor.DependsOn(System.Type schemaType, bool mustBeCompleted) -> HotChocolate.Types.ICompletedDependencyDescriptor
~HotChocolate.Types.ICompletedDependencyDescriptor.DependsOn(System.Type schemaType) -> HotChocolate.Types.ICompletedDependencyDescriptor
~HotChocolate.Types.ICompletedDependencyDescriptor.DependsOn<T>() -> HotChocolate.Types.ICompletedDependencyDescriptor
~HotChocolate.Types.ICompletedDependencyDescriptor.DependsOn<T>(bool mustBeCompleted) -> HotChocolate.Types.ICompletedDependencyDescriptor
~HotChocolate.Types.IComplexOutputType.Fields.get -> HotChocolate.Types.IFieldCollection<HotChocolate.Types.IOutputField>
~HotChocolate.Types.IComplexOutputType.Implements.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.IInterfaceType>
~HotChocolate.Types.IComplexOutputType.IsImplementing(HotChocolate.Types.IInterfaceType interfaceType) -> bool
~HotChocolate.Types.IDirective.GetArgument<T>(string argumentName) -> T
~HotChocolate.Types.IDirective.MiddlewareComponents.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Resolvers.DirectiveMiddleware>
~HotChocolate.Types.IDirective.Source.get -> object
~HotChocolate.Types.IDirective.ToNode() -> HotChocolate.Language.DirectiveNode
~HotChocolate.Types.IDirective.ToNode(bool removeNullArguments) -> HotChocolate.Language.DirectiveNode
~HotChocolate.Types.IDirective.Type.get -> HotChocolate.Types.DirectiveType
~HotChocolate.Types.IDirectiveArgumentDescriptor.DefaultValue(HotChocolate.Language.IValueNode value) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveArgumentDescriptor.DefaultValue(object value) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveArgumentDescriptor.Description(string value) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveArgumentDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveArgumentDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveArgumentDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode inputValueDefinition) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveArgumentDescriptor.Type(HotChocolate.Language.ITypeNode typeNode) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveArgumentDescriptor.Type(System.Type type) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveArgumentDescriptor.Type<TInputType>() -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveArgumentDescriptor.Type<TInputType>(TInputType inputType) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveCollection.this[HotChocolate.NameString key].get -> System.Collections.Generic.IEnumerable<HotChocolate.Types.IDirective>
~HotChocolate.Types.IDirectiveTypeDescriptor.Argument(HotChocolate.NameString name) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Description(string value) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Internal() -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Location(HotChocolate.Types.DirectiveLocation value) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Middleware(HotChocolate.Resolvers.DirectiveMiddleware middleware) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Middleware<T>(System.Linq.Expressions.Expression<System.Action<T>> method) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Middleware<T>(System.Linq.Expressions.Expression<System.Func<T, object>> method) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Public() -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Repeatable() -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.SyntaxNode(HotChocolate.Language.DirectiveDefinitionNode directiveDefinitionNode) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Use(HotChocolate.Resolvers.DirectiveMiddleware middleware) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Use<TMiddleware>() -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor.Use<TMiddleware>(System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.Types.IDirectiveTypeDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Argument(HotChocolate.NameString name) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Argument(System.Linq.Expressions.Expression<System.Func<T, object>> property) -> HotChocolate.Types.IDirectiveArgumentDescriptor
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.BindArguments(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.BindArgumentsExplicitly() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.BindArgumentsImplicitly() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Description(string value) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Internal() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Location(HotChocolate.Types.DirectiveLocation value) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Middleware(HotChocolate.Resolvers.DirectiveMiddleware middleware) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Middleware<TMiddleware>(System.Linq.Expressions.Expression<System.Action<TMiddleware>> method) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Middleware<TMiddleware>(System.Linq.Expressions.Expression<System.Func<TMiddleware, object>> method) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Public() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Repeatable() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.SyntaxNode(HotChocolate.Language.DirectiveDefinitionNode directiveDefinitionNode) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Use(HotChocolate.Resolvers.DirectiveMiddleware middleware) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Use<TMiddleware>() -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IDirectiveTypeDescriptor<T>.Use<TMiddleware>(System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor.BindItems(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.BindValues(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.BindValuesExplicitly() -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.BindValuesImplicitly() -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.Description(string value) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.Directive<T>() -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.Item<T>(T value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode enumTypeDefinition) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeDescriptor.Value<T>(T value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumTypeDescriptor<T>.BindItems(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.BindValues(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.BindValuesExplicitly() -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.BindValuesImplicitly() -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.Description(string value) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.Directive<TDirective>(TDirective directiveInstance) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.Item(T value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode enumTypeDefinition) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeDescriptor<T>.Value(T value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumTypeNameDependencyDescriptor.DependsOn(System.Type schemaType) -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeNameDependencyDescriptor.DependsOn<TDependency>() -> HotChocolate.Types.IEnumTypeDescriptor
~HotChocolate.Types.IEnumTypeNameDependencyDescriptor<T>.DependsOn(System.Type schemaType) -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumTypeNameDependencyDescriptor<T>.DependsOn<TDependency>() -> HotChocolate.Types.IEnumTypeDescriptor<T>
~HotChocolate.Types.IEnumValueDescriptor.Deprecated() -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumValueDescriptor.Deprecated(string reason) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumValueDescriptor.DeprecationReason(string reason) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumValueDescriptor.Description(string value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumValueDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumValueDescriptor.Directive<T>() -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumValueDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumValueDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IEnumValueDescriptor.SyntaxNode(HotChocolate.Language.EnumValueDefinitionNode enumValueDefinition) -> HotChocolate.Types.IEnumValueDescriptor
~HotChocolate.Types.IHasDescriptorContext.Context.get -> HotChocolate.Types.Descriptors.IDescriptorContext
~HotChocolate.Types.IInputFieldDescriptor.DefaultValue(HotChocolate.Language.IValueNode value) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.DefaultValue(object value) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Description(string value) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Directive<T>() -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode inputValueDefinitionNode) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Type(HotChocolate.Language.ITypeNode typeNode) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Type(System.Type type) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Type<TInputType>() -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputFieldDescriptor.Type<TInputType>(TInputType inputType) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor.Description(string value) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor.Directive<T>() -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor.SyntaxNode(HotChocolate.Language.InputObjectTypeDefinitionNode inputObjectTypeDefinitionNode) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.Description(string value) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.Directive<TDirective>(TDirective directiveInstance) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.Field(HotChocolate.NameString name) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.Field<TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>> property) -> HotChocolate.Types.IInputFieldDescriptor
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeDescriptor<T>.SyntaxNode(HotChocolate.Language.InputObjectTypeDefinitionNode inputObjectTypeDefinitionNode) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeNameDependencyDescriptor.DependsOn(System.Type schemaType) -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.IInputObjectTypeNameDependencyDescriptor.DependsOn<TDependency>() -> HotChocolate.Types.IInputObjectTypeDescriptor
~HotChocolate.Types.IInputObjectTypeNameDependencyDescriptor<T>.DependsOn(System.Type schemaType) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInputObjectTypeNameDependencyDescriptor<T>.DependsOn<TDependency>() -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~HotChocolate.Types.IInterfaceFieldDescriptor.Argument(HotChocolate.NameString name, System.Action<HotChocolate.Types.IArgumentDescriptor> argument) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Deprecated() -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Deprecated(string reason) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.DeprecationReason(string reason) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Description(string value) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Directive<T>() -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.SyntaxNode(HotChocolate.Language.FieldDefinitionNode fieldDefinitionNode) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Type(HotChocolate.Language.ITypeNode type) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Type(System.Type type) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Type<TOutputType>() -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceFieldDescriptor.Type<TOutputType>(TOutputType type) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Description(string value) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Directive<T>() -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Implements(HotChocolate.Language.NamedTypeNode type) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Implements<T>() -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Implements<T>(T type) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Interface(HotChocolate.Language.NamedTypeNode type) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Interface<T>() -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Interface<T>(T type) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.ResolveAbstractType(HotChocolate.Types.ResolveAbstractType typeResolver) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor.SyntaxNode(HotChocolate.Language.InterfaceTypeDefinitionNode interfaceTypeDefinition) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Description(string value) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Directive<TDirective>(TDirective directiveInstance) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Field(HotChocolate.NameString name) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Field(System.Linq.Expressions.Expression<System.Func<T, object>> propertyOrMethod) -> HotChocolate.Types.IInterfaceFieldDescriptor
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Implements(HotChocolate.Language.NamedTypeNode type) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Implements<TInterface>() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Implements<TInterface>(TInterface type) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Interface(HotChocolate.Language.NamedTypeNode type) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Interface<TInterface>() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Interface<TInterface>(TInterface type) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.ResolveAbstractType(HotChocolate.Types.ResolveAbstractType typeResolver) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeDescriptor<T>.SyntaxNode(HotChocolate.Language.InterfaceTypeDefinitionNode interfaceTypeDefinitionNode) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeNameDependencyDescriptor.DependsOn(System.Type schemaType) -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeNameDependencyDescriptor.DependsOn<TDependency>() -> HotChocolate.Types.IInterfaceTypeDescriptor
~HotChocolate.Types.IInterfaceTypeNameDependencyDescriptor<T>.DependsOn(System.Type schemaType) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.IInterfaceTypeNameDependencyDescriptor<T>.DependsOn<TDependency>() -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~HotChocolate.Types.ILiteralParser.ParseLiteral(HotChocolate.Language.IValueNode literal) -> object
~HotChocolate.Types.INamedDependencyDescriptor.DependsOn(HotChocolate.NameString typeName, bool mustBeNamed) -> HotChocolate.Types.INamedDependencyDescriptor
~HotChocolate.Types.INamedDependencyDescriptor.DependsOn(HotChocolate.NameString typeName) -> HotChocolate.Types.INamedDependencyDescriptor
~HotChocolate.Types.INamedDependencyDescriptor.DependsOn(System.Type schemaType, bool mustBeNamed) -> HotChocolate.Types.INamedDependencyDescriptor
~HotChocolate.Types.INamedDependencyDescriptor.DependsOn(System.Type schemaType) -> HotChocolate.Types.INamedDependencyDescriptor
~HotChocolate.Types.INamedDependencyDescriptor.DependsOn<T>() -> HotChocolate.Types.INamedDependencyDescriptor
~HotChocolate.Types.INamedDependencyDescriptor.DependsOn<T>(bool mustBeNamed) -> HotChocolate.Types.INamedDependencyDescriptor
~HotChocolate.Types.INamedType.IsAssignableFrom(HotChocolate.Types.INamedType type) -> bool
~HotChocolate.Types.InterfaceField.InterfaceField(HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition definition, HotChocolate.FieldCoordinate fieldCoordinate, bool sortArgumentsByName = false) -> void
~HotChocolate.Types.IObjectTypeNameDependencyDescriptor.DependsOn(System.Type schemaType) -> HotChocolate.Types.IObjectTypeDescriptor
~HotChocolate.Types.IObjectTypeNameDependencyDescriptor.DependsOn<TDependency>() -> HotChocolate.Types.IObjectTypeDescriptor
~HotChocolate.Types.IObjectTypeNameDependencyDescriptor<T>.DependsOn(System.Type schemaType) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.IObjectTypeNameDependencyDescriptor<T>.DependsOn<TDependency>() -> HotChocolate.Types.IObjectTypeDescriptor<T>
~HotChocolate.Types.ISchemaTypeDescriptor.Description(string value) -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.ISchemaTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.ISchemaTypeDescriptor.Directive<T>() -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.ISchemaTypeDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.ISchemaTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.ISchemaTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.Description(string value) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode[] arguments) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.Directive<T>() -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.Directive<T>(T directiveInstance) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.ResolveAbstractType(HotChocolate.Types.ResolveAbstractType resolveAbstractType) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.SyntaxNode(HotChocolate.Language.UnionTypeDefinitionNode unionTypeDefinitionNode) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.Type(HotChocolate.Language.NamedTypeNode objectType) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.Type<TObjectType>() -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeDescriptor.Type<TObjectType>(TObjectType objectType) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeNameDependencyDescriptor.DependsOn(System.Type schemaType) -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.IUnionTypeNameDependencyDescriptor.DependsOn<TDependency>() -> HotChocolate.Types.IUnionTypeDescriptor
~HotChocolate.Types.ListType<T>
~HotChocolate.Types.MultiplierPathString.MultiplierPathString(string value) -> void
~HotChocolate.Types.MultiplierPathString.Value.get -> string
~HotChocolate.Types.NonNullType<T>
~HotChocolate.Types.OutputFieldBase<TDefinition>
~HotChocolate.Types.OutputFieldBase<TDefinition>.Arguments.get -> HotChocolate.Types.FieldCollection<HotChocolate.Types.Argument>
~HotChocolate.Types.OutputFieldBase<TDefinition>.DeclaringType.get -> HotChocolate.Types.IComplexOutputType
~HotChocolate.Types.OutputFieldBase<TDefinition>.DeprecationReason.get -> string
~HotChocolate.Types.OutputFieldBase<TDefinition>.SyntaxNode.get -> HotChocolate.Language.FieldDefinitionNode
~HotChocolate.Types.Relay.IdMiddleware.IdMiddleware(HotChocolate.Resolvers.FieldDelegate next, HotChocolate.Types.Relay.IIdSerializer serializer) -> void
~HotChocolate.Types.Relay.IdMiddleware.InvokeAsync(HotChocolate.Resolvers.IMiddlewareContext context) -> System.Threading.Tasks.Task
~HotChocolate.Types.Relay.IdSerializationException.IdSerializationException(string message, System.Buffers.OperationStatus operationStatus, string originalValue) -> void
~HotChocolate.Types.Relay.IdSerializationException.IdSerializationException(string message) -> void
~HotChocolate.Types.Relay.IdSerializationException.IdSerializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
~HotChocolate.Types.Relay.IdSerializer.Deserialize(string serializedId) -> HotChocolate.Types.Relay.IdValue
~HotChocolate.Types.Relay.IdSerializer.Serialize<T>(HotChocolate.NameString schemaName, HotChocolate.NameString typeName, T id) -> string
~HotChocolate.Types.Relay.IdSerializer.Serialize<T>(HotChocolate.NameString typeName, T id) -> string
~HotChocolate.Types.Relay.IdValue.IdValue(HotChocolate.NameString schemaName, HotChocolate.NameString typeName, object value) -> void
~HotChocolate.Types.Relay.IdValue.Value.get -> object
~HotChocolate.Types.Relay.INodeResolver.ResolveAsync(HotChocolate.Resolvers.IResolverContext context, object id) -> System.Threading.Tasks.Task<object>
~HotChocolate.Types.Relay.RelayOptions.MutationPayloadPredicate.get -> System.Func<HotChocolate.Types.INamedType, bool>
~HotChocolate.Types.Relay.RelayOptions.MutationPayloadPredicate.set -> void
~HotChocolate.Types.TypeInitializationException.TypeInitializationException(string message, System.Exception inner) -> void
~HotChocolate.Types.TypeInitializationException.TypeInitializationException(string message) -> void
~HotChocolate.Types.TypeInitializationException.TypeInitializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
~HotChocolate.Utilities.ConverterContext.ClrType.get -> System.Type
~HotChocolate.Utilities.ConverterContext.ClrType.set -> void
~HotChocolate.Utilities.ConverterContext.Fields.get -> System.Linq.ILookup<string, System.Reflection.PropertyInfo>
~HotChocolate.Utilities.ConverterContext.Fields.set -> void
~HotChocolate.Utilities.ConverterContext.InputFields.get -> HotChocolate.Types.FieldCollection<HotChocolate.Types.InputField>
~HotChocolate.Utilities.ConverterContext.InputFields.set -> void
~HotChocolate.Utilities.ConverterContext.InputType.get -> HotChocolate.Types.IInputType
~HotChocolate.Utilities.ConverterContext.InputType.set -> void
~HotChocolate.Utilities.ConverterContext.Name.get -> string
~HotChocolate.Utilities.ConverterContext.Name.set -> void
~HotChocolate.Utilities.ConverterContext.Node.get -> HotChocolate.Language.ISyntaxNode
~HotChocolate.Utilities.ConverterContext.Node.set -> void
~HotChocolate.Utilities.ConverterContext.Object.get -> object
~HotChocolate.Utilities.ConverterContext.Object.set -> void
~HotChocolate.Utilities.DictionaryToObjectConverter.Convert(object from, System.Type to) -> object
~HotChocolate.Utilities.DictionaryToObjectConverter.DictionaryToObjectConverter(HotChocolate.Utilities.ITypeConverter converter) -> void
~HotChocolate.Utilities.ObjectValueToDictionaryConverter.Convert(HotChocolate.Language.ListValueNode listValue) -> System.Collections.Generic.List<object>
~HotChocolate.Utilities.ObjectValueToDictionaryConverter.Convert(HotChocolate.Language.ObjectValueNode objectValue) -> System.Collections.Generic.Dictionary<string, object>
~override HotChocolate.Internal.TypeComponent.Equals(object obj) -> bool
~override HotChocolate.Internal.TypeComponent.ToString() -> string
~override HotChocolate.Resolvers.FieldReferenceBase.Equals(object obj) -> bool
~override HotChocolate.Resolvers.FieldReferenceBase.ToString() -> string
override HotChocolate.Resolvers.FieldResolver.Equals(object? obj) -> bool
override HotChocolate.Resolvers.FieldResolver.ToString() -> string!
~override HotChocolate.Schema.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext context, HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition definition) -> void
~override HotChocolate.Schema.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext context, HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition definition) -> void
~override HotChocolate.Types.Descriptors.ArgumentDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition definition) -> void
~override HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Definition.get -> T
~override HotChocolate.Types.Descriptors.ArgumentDescriptorBase<T>.Definition.set -> void
~override HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition definition) -> void
~override HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition
~override HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.Definition.set -> void
~override HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition definition) -> void
~override HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>.OnCompleteArguments(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition> arguments, System.Collections.Generic.ISet<System.Reflection.PropertyInfo> handledProperties) -> void
~override HotChocolate.Types.Descriptors.EnumTypeDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition
~override HotChocolate.Types.Descriptors.EnumTypeDescriptor.Definition.set -> void
~override HotChocolate.Types.Descriptors.EnumTypeDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition definition) -> void
~override HotChocolate.Types.Descriptors.EnumValueDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition
~override HotChocolate.Types.Descriptors.EnumValueDescriptor.Definition.set -> void
~override HotChocolate.Types.Descriptors.EnumValueDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition definition) -> void
~override HotChocolate.Types.Descriptors.InputFieldDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition definition) -> void
~override HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition
~override HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.Definition.set -> void
~override HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition definition) -> void
~override HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition> fields, System.Collections.Generic.ISet<System.Reflection.PropertyInfo> handledProperties) -> void
~override HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition
~override HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.Definition.set -> void
~override HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition definition) -> void
~override HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition
~override HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.Definition.set -> void
~override HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition definition) -> void
~override HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition> fields, System.Collections.Generic.ISet<System.Reflection.MemberInfo> handledMembers) -> void
~override HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition> fields, System.Collections.Generic.ISet<System.Reflection.MemberInfo> handledMembers) -> void
~override HotChocolate.Types.Descriptors.SchemaTypeDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition
~override HotChocolate.Types.Descriptors.SchemaTypeDescriptor.Definition.set -> void
~override HotChocolate.Types.Descriptors.UnionTypeDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition
~override HotChocolate.Types.Descriptors.UnionTypeDescriptor.Definition.set -> void
~override HotChocolate.Types.Descriptors.UnionTypeDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition definition) -> void
~override HotChocolate.Types.MultiplierPathString.Equals(object obj) -> bool
~override HotChocolate.Types.MultiplierPathString.ToString() -> string
~override HotChocolate.Types.Relay.NodeType.Configure(HotChocolate.Types.IInterfaceTypeDescriptor<HotChocolate.Types.Relay.INode> descriptor) -> void
~override HotChocolate.Utilities.ObjectValueToDictionaryConverter.VisitBooleanValue(HotChocolate.Language.BooleanValueNode node, System.Action<object> setValue) -> void
~override HotChocolate.Utilities.ObjectValueToDictionaryConverter.VisitEnumValue(HotChocolate.Language.EnumValueNode node, System.Action<object> setValue) -> void
~override HotChocolate.Utilities.ObjectValueToDictionaryConverter.VisitFloatValue(HotChocolate.Language.FloatValueNode node, System.Action<object> setValue) -> void
~override HotChocolate.Utilities.ObjectValueToDictionaryConverter.VisitIntValue(HotChocolate.Language.IntValueNode node, System.Action<object> setValue) -> void
~override HotChocolate.Utilities.ObjectValueToDictionaryConverter.VisitListValue(HotChocolate.Language.ListValueNode node, System.Action<object> setValue) -> void
~override HotChocolate.Utilities.ObjectValueToDictionaryConverter.VisitNullValue(HotChocolate.Language.NullValueNode node, System.Action<object> setValue) -> void
~override HotChocolate.Utilities.ObjectValueToDictionaryConverter.VisitObjectValue(HotChocolate.Language.ObjectValueNode node, System.Action<object> setValue) -> void
~override HotChocolate.Utilities.ObjectValueToDictionaryConverter.VisitStringValue(HotChocolate.Language.StringValueNode node, System.Action<object> setValue) -> void
~override sealed HotChocolate.Schema.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext context) -> HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition
~override sealed HotChocolate.Types.Descriptors.ConventionExtension.Complete(HotChocolate.Types.Descriptors.IConventionContext context) -> void
~static HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder.New() -> HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder
~static HotChocolate.Configuration.Bindings.ComplexTypeFieldBindingBuilder.New() -> HotChocolate.Configuration.Bindings.ComplexTypeFieldBindingBuilder
~static HotChocolate.Configuration.Bindings.ResolverBindingBuilder.New() -> HotChocolate.Configuration.Bindings.ResolverBindingBuilder
~static HotChocolate.Configuration.Bindings.ResolverFieldBindingBuilder.New() -> HotChocolate.Configuration.Bindings.ResolverFieldBindingBuilder
~static HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.New() -> HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder
~static HotChocolate.Configuration.SchemaOptions.FromOptions(HotChocolate.Configuration.IReadOnlySchemaOptions options) -> HotChocolate.Configuration.SchemaOptions
~static HotChocolate.Configuration.SchemaTypeResolver.TryInferSchemaType(HotChocolate.Types.Descriptors.ITypeInspector typeInspector, HotChocolate.Types.Descriptors.ExtendedTypeReference unresolvedType, out HotChocolate.Types.Descriptors.ExtendedTypeReference schemaType) -> bool
~static HotChocolate.Configuration.SchemaTypeResolver.TryInferSchemaTypeKind(HotChocolate.Types.Descriptors.ExtendedTypeReference unresolvedType, out HotChocolate.Types.TypeKind kind) -> bool
static HotChocolate.IdSchemaBuilderExtensions.EnableRelaySupport(this HotChocolate.ISchemaBuilder! schemaBuilder, HotChocolate.Types.Relay.RelayOptions? options = null) -> HotChocolate.ISchemaBuilder!
~static HotChocolate.Internal.TypeComponent.implicit operator HotChocolate.Internal.TypeComponent((HotChocolate.Internal.TypeComponentKind, HotChocolate.Internal.IExtendedType) component) -> HotChocolate.Internal.TypeComponent
~static HotChocolate.Internal.TypeDependencyHelper.RegisterDependencies(this HotChocolate.Configuration.ITypeDiscoveryContext context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition definition) -> void
~static HotChocolate.Internal.TypeDependencyHelper.RegisterDependencies(this HotChocolate.Configuration.ITypeDiscoveryContext context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition definition) -> void
~static HotChocolate.Internal.TypeDependencyHelper.RegisterDependencies(this HotChocolate.Configuration.ITypeDiscoveryContext context, HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition definition) -> void
~static HotChocolate.Internal.TypeDependencyHelper.RegisterDependencies(this HotChocolate.Configuration.ITypeDiscoveryContext context, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition definition) -> void
~static HotChocolate.Internal.TypeExtensionHelper.MergeConfigurations(System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration> extensionConfigurations, System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration> typeConfigurations) -> void
~static HotChocolate.Internal.TypeExtensionHelper.MergeContextData(HotChocolate.Types.Descriptors.Definitions.DefinitionBase extension, HotChocolate.Types.Descriptors.Definitions.DefinitionBase type) -> void
~static HotChocolate.Internal.TypeExtensionHelper.MergeDirectives(HotChocolate.Configuration.ITypeCompletionContext context, System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition> extension, System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition> type) -> void
~static HotChocolate.Internal.TypeExtensionHelper.MergeInputObjectFields(HotChocolate.Configuration.ITypeCompletionContext context, System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition> extensionFields, System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition> typeFields) -> void
~static HotChocolate.Internal.TypeExtensionHelper.MergeInterfaceFields(HotChocolate.Configuration.ITypeCompletionContext context, System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition> extensionFields, System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition> typeFields) -> void
~static HotChocolate.Internal.TypeExtensionHelper.MergeInterfaces(HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition extension, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition type) -> void
~static HotChocolate.Internal.TypeExtensionHelper.MergeTypes(System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.ITypeReference> extensionTypes, System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.ITypeReference> typeTypes) -> void
~static HotChocolate.Internal.TypeExtensions.IsSchemaType(this System.Type type) -> bool
~static HotChocolate.MiddlewareConfigurationExtensions.Map(this HotChocolate.Configuration.ISchemaConfiguration configuration, HotChocolate.Resolvers.FieldReference fieldReference, HotChocolate.Resolvers.FieldMiddleware middleware) -> HotChocolate.Configuration.ISchemaConfiguration
~static HotChocolate.MiddlewareConfigurationExtensions.Map<TMiddleware>(this HotChocolate.Configuration.ISchemaConfiguration configuration, HotChocolate.Resolvers.FieldReference fieldReference, System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.Configuration.ISchemaConfiguration
~static HotChocolate.MiddlewareConfigurationExtensions.Map<TMiddleware>(this HotChocolate.Configuration.ISchemaConfiguration configuration, HotChocolate.Resolvers.FieldReference fieldReference) -> HotChocolate.Configuration.ISchemaConfiguration
~static HotChocolate.MiddlewareConfigurationExtensions.Use<TMiddleware>(this HotChocolate.Configuration.ISchemaConfiguration configuration, System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.Configuration.ISchemaConfiguration
~static HotChocolate.MiddlewareConfigurationExtensions.Use<TMiddleware>(this HotChocolate.Configuration.ISchemaConfiguration configuration) -> HotChocolate.Configuration.ISchemaConfiguration
~static HotChocolate.Resolvers.FieldClassMiddlewareFactory.Create(System.Type middlewareType, params (System.Type Service, object Instance)[] services) -> HotChocolate.Resolvers.FieldMiddleware
~static HotChocolate.Resolvers.FieldClassMiddlewareFactory.Create<TMiddleware>(params (System.Type Service, object Instance)[] services) -> HotChocolate.Resolvers.FieldMiddleware
~static HotChocolate.Resolvers.FieldClassMiddlewareFactory.Create<TMiddleware>(System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.Resolvers.FieldMiddleware
~static HotChocolate.Schema.Create(HotChocolate.Language.DocumentNode schemaDocument, System.Action<HotChocolate.Configuration.ISchemaConfiguration> configure) -> HotChocolate.Schema
~static HotChocolate.Schema.Create(string schema, System.Action<HotChocolate.Configuration.ISchemaConfiguration> configure) -> HotChocolate.Schema
~static HotChocolate.Schema.Create(System.Action<HotChocolate.Configuration.ISchemaConfiguration> configure) -> HotChocolate.Schema
~static HotChocolate.SchemaBuilder.New() -> HotChocolate.SchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddDirectiveType(this HotChocolate.ISchemaBuilder builder, System.Type directiveType) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddDirectiveType<TDirective>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddDocument(this HotChocolate.ISchemaBuilder builder, HotChocolate.Language.DocumentNode document) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddDocumentFromFile(this HotChocolate.ISchemaBuilder builder, string filePath) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddDocumentFromString(this HotChocolate.ISchemaBuilder builder, string schema) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddEnumType(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IEnumTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddEnumType<T>(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IEnumTypeDescriptor<T>> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddEnumType<T>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddInputObjectType(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IInputObjectTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddInputObjectType<T>(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IInputObjectTypeDescriptor<T>> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddInputObjectType<T>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddInterfaceType(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IInterfaceTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddInterfaceType<T>(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IInterfaceTypeDescriptor<T>> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddInterfaceType<T>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddMutationType(this HotChocolate.ISchemaBuilder builder, HotChocolate.Types.ObjectType queryType) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddMutationType(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddMutationType(this HotChocolate.ISchemaBuilder builder, System.Type type) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddMutationType<T>(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddMutationType<TMutation>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddObjectType(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddObjectType<T>(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddObjectType<T>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddQueryType(this HotChocolate.ISchemaBuilder builder, HotChocolate.Types.ObjectType queryType) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddQueryType(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddQueryType(this HotChocolate.ISchemaBuilder builder, System.Type type) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddQueryType<T>(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddQueryType<TQuery>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddSubscriptionType(this HotChocolate.ISchemaBuilder builder, HotChocolate.Types.ObjectType queryType) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddSubscriptionType(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddSubscriptionType(this HotChocolate.ISchemaBuilder builder, System.Type type) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddSubscriptionType<T>(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddSubscriptionType<TSubscription>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddType<T>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddTypes(this HotChocolate.ISchemaBuilder builder, params HotChocolate.Types.INamedType[] types) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddTypes(this HotChocolate.ISchemaBuilder builder, params System.Type[] types) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddUnionType(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IUnionTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddUnionType<T>(this HotChocolate.ISchemaBuilder builder, System.Action<HotChocolate.Types.IUnionTypeDescriptor> configure) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.AddUnionType<T>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.BindClrType<TClrType, TSchemaType>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.Map(this HotChocolate.ISchemaBuilder builder, HotChocolate.Resolvers.FieldReference fieldReference, HotChocolate.Resolvers.FieldMiddleware middleware) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.Map<TMiddleware>(this HotChocolate.ISchemaBuilder builder, HotChocolate.Resolvers.FieldReference fieldReference, System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.Map<TMiddleware>(this HotChocolate.ISchemaBuilder builder, HotChocolate.Resolvers.FieldReference fieldReference) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.SetPagingOptions(this HotChocolate.ISchemaBuilder builder, HotChocolate.Types.Pagination.PagingOptions options) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.SetSchema<TSchema>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.TryAddSchemaInterceptor<T>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.TryAddTypeInterceptor<T>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.Use<TMiddleware>(this HotChocolate.ISchemaBuilder builder, System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaBuilderExtensions.Use<TMiddleware>(this HotChocolate.ISchemaBuilder builder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.SchemaConfigurationExtensions.BindResolver(this HotChocolate.Configuration.ISchemaConfiguration schemaConfiguration, System.Func<HotChocolate.Resolvers.IResolverContext, object> resolver) -> HotChocolate.Configuration.Bindings.IBindResolverDelegate
~static HotChocolate.SchemaConfigurationExtensions.BindResolver(this HotChocolate.Configuration.ISchemaConfiguration schemaConfiguration, System.Func<HotChocolate.Resolvers.IResolverContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<object>> resolver) -> HotChocolate.Configuration.Bindings.IBindResolverDelegate
~static HotChocolate.SchemaConfigurationExtensions.BindResolver(this HotChocolate.Configuration.ISchemaConfiguration schemaConfiguration, System.Func<object> resolver) -> HotChocolate.Configuration.Bindings.IBindResolverDelegate
~static HotChocolate.SchemaConfigurationExtensions.BindResolver(this HotChocolate.Configuration.ISchemaConfiguration schemaConfiguration, System.Func<System.Threading.Tasks.Task<object>> resolver) -> HotChocolate.Configuration.Bindings.IBindResolverDelegate
~static HotChocolate.SchemaConfigurationExtensions.BindResolver<TResolver>(this HotChocolate.Configuration.ISchemaConfiguration schemaConfiguration) -> HotChocolate.Configuration.Bindings.IBindResolver<TResolver>
~static HotChocolate.SchemaConfigurationExtensions.BindType<T>(this HotChocolate.Configuration.ISchemaConfiguration schemaConfiguration) -> HotChocolate.Configuration.Bindings.IBindType<T>
~static HotChocolate.SchemaConfigurationExtensions.RegisterExtendedScalarTypes(this HotChocolate.Configuration.ISchemaConfiguration schemaConfiguration) -> HotChocolate.Configuration.ISchemaConfiguration
~static HotChocolate.SchemaErrorBuilder.New() -> HotChocolate.SchemaErrorBuilder
~static HotChocolate.SchemaErrorBuilderExtensions.SetMessage(this HotChocolate.ISchemaErrorBuilder builder, string format, params object[] args) -> HotChocolate.ISchemaErrorBuilder
~static HotChocolate.SchemaErrorBuilderExtensions.SpecifiedBy(this HotChocolate.ISchemaErrorBuilder errorBuilder, string section, bool condition = true) -> HotChocolate.ISchemaErrorBuilder
~static HotChocolate.SchemaExtensions.GetOperationType(this HotChocolate.ISchema schema, HotChocolate.Language.OperationType operation) -> HotChocolate.Types.ObjectType
~static HotChocolate.SchemaSerializer.Serialize(HotChocolate.ISchema schema, System.IO.TextWriter textWriter) -> void
~static HotChocolate.SchemaSerializer.Serialize(HotChocolate.ISchema schema) -> string
~static HotChocolate.SchemaSerializer.SerializeAsync(HotChocolate.ISchema schema, System.IO.Stream stream, bool indented = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
~static HotChocolate.SchemaSerializer.SerializeSchema(HotChocolate.ISchema schema, bool includeSpecScalars = false) -> HotChocolate.Language.DocumentNode
~static HotChocolate.Types.CostInterfaceFieldDescriptorExtensions.Cost(this HotChocolate.Types.IInterfaceFieldDescriptor descriptor, int complexity, HotChocolate.Types.MultiplierPathString multiplier) -> HotChocolate.Types.IInterfaceFieldDescriptor
~static HotChocolate.Types.CostInterfaceFieldDescriptorExtensions.Cost(this HotChocolate.Types.IInterfaceFieldDescriptor descriptor, int complexity, params HotChocolate.Types.MultiplierPathString[] multipliers) -> HotChocolate.Types.IInterfaceFieldDescriptor
~static HotChocolate.Types.CostInterfaceFieldDescriptorExtensions.Cost(this HotChocolate.Types.IInterfaceFieldDescriptor descriptor, int complexity) -> HotChocolate.Types.IInterfaceFieldDescriptor
~static HotChocolate.Types.CostObjectFieldDescriptorExtensions.Cost(this HotChocolate.Types.IObjectFieldDescriptor descriptor, int complexity, HotChocolate.Types.MultiplierPathString multiplier) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.CostObjectFieldDescriptorExtensions.Cost(this HotChocolate.Types.IObjectFieldDescriptor descriptor, int complexity, params HotChocolate.Types.MultiplierPathString[] multipliers) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.CostObjectFieldDescriptorExtensions.Cost(this HotChocolate.Types.IObjectFieldDescriptor descriptor, int complexity) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.Descriptors.ArgumentDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition argumentDefinition) -> HotChocolate.Types.Descriptors.ArgumentDescriptor
~static HotChocolate.Types.Descriptors.ArgumentDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString argumentName, System.Type argumentType) -> HotChocolate.Types.Descriptors.ArgumentDescriptor
~static HotChocolate.Types.Descriptors.ArgumentDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString argumentName) -> HotChocolate.Types.Descriptors.ArgumentDescriptor
~static HotChocolate.Types.Descriptors.ArgumentDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Reflection.ParameterInfo parameter) -> HotChocolate.Types.Descriptors.ArgumentDescriptor
~static HotChocolate.Types.Descriptors.Definitions.BindableListExtensions.IsImplicitBinding<T>(this HotChocolate.Types.Descriptors.Definitions.IBindableList<T> list) -> bool
~static HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition definition) -> HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor
~static HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString argumentName) -> HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor
~static HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Reflection.PropertyInfo property) -> HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor
~static HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition definition) -> HotChocolate.Types.Descriptors.DirectiveTypeDescriptor
~static HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.From<T>(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition definition) -> HotChocolate.Types.Descriptors.DirectiveTypeDescriptor
~static HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.FromSchemaType(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type schemaType) -> HotChocolate.Types.Descriptors.DirectiveTypeDescriptor
~static HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> HotChocolate.Types.Descriptors.DirectiveTypeDescriptor
~static HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context) -> HotChocolate.Types.Descriptors.DirectiveTypeDescriptor
~static HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.New<T>(HotChocolate.Types.Descriptors.IDescriptorContext context) -> HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>
~static HotChocolate.Types.Descriptors.DirectiveUtils.AddDirective(this HotChocolate.Types.Descriptors.Definitions.IHasDirectiveDefinition directivesContainer, HotChocolate.NameString name, System.Collections.Generic.IEnumerable<HotChocolate.Language.ArgumentNode> arguments) -> void
~static HotChocolate.Types.Descriptors.DirectiveUtils.AddDirective<T>(this HotChocolate.Types.Descriptors.Definitions.IHasDirectiveDefinition directivesContainer, T directive, HotChocolate.Types.Descriptors.ITypeInspector typeInspector) -> void
~static HotChocolate.Types.Descriptors.EnumTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition definition) -> HotChocolate.Types.Descriptors.EnumTypeDescriptor
~static HotChocolate.Types.Descriptors.EnumTypeDescriptor.From<T>(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition definition) -> HotChocolate.Types.Descriptors.EnumTypeDescriptor
~static HotChocolate.Types.Descriptors.EnumTypeDescriptor.FromSchemaType(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type schemaType) -> HotChocolate.Types.Descriptors.EnumTypeDescriptor
~static HotChocolate.Types.Descriptors.EnumTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> HotChocolate.Types.Descriptors.EnumTypeDescriptor
~static HotChocolate.Types.Descriptors.EnumTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context) -> HotChocolate.Types.Descriptors.EnumTypeDescriptor
~static HotChocolate.Types.Descriptors.EnumTypeDescriptor.New<T>(HotChocolate.Types.Descriptors.IDescriptorContext context) -> HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>
~static HotChocolate.Types.Descriptors.EnumValueDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition definition) -> HotChocolate.Types.Descriptors.EnumValueDescriptor
~static HotChocolate.Types.Descriptors.EnumValueDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, object value) -> HotChocolate.Types.Descriptors.EnumValueDescriptor
~static HotChocolate.Types.Descriptors.InputFieldDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition definition) -> HotChocolate.Types.Descriptors.InputFieldDescriptor
~static HotChocolate.Types.Descriptors.InputFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString fieldName) -> HotChocolate.Types.Descriptors.InputFieldDescriptor
~static HotChocolate.Types.Descriptors.InputFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Reflection.PropertyInfo property) -> HotChocolate.Types.Descriptors.InputFieldDescriptor
~static HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition definition) -> HotChocolate.Types.Descriptors.InputObjectTypeDescriptor
~static HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.From<T>(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition definition) -> HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>
~static HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.FromSchemaType(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type schemaType) -> HotChocolate.Types.Descriptors.InputObjectTypeDescriptor
~static HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> HotChocolate.Types.Descriptors.InputObjectTypeDescriptor
~static HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context) -> HotChocolate.Types.Descriptors.InputObjectTypeDescriptor
~static HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.New<T>(HotChocolate.Types.Descriptors.IDescriptorContext context) -> HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>
~static HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition definition) -> HotChocolate.Types.Descriptors.InterfaceFieldDescriptor
~static HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.NameString fieldName) -> HotChocolate.Types.Descriptors.InterfaceFieldDescriptor
~static HotChocolate.Types.Descriptors.InterfaceFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Reflection.MemberInfo member) -> HotChocolate.Types.Descriptors.InterfaceFieldDescriptor
~static HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition definition) -> HotChocolate.Types.Descriptors.InterfaceTypeDescriptor
~static HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.From<T>(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition definition) -> HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>
~static HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.FromSchemaType(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type schemaType) -> HotChocolate.Types.Descriptors.InterfaceTypeDescriptor
~static HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> HotChocolate.Types.Descriptors.InterfaceTypeDescriptor
~static HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context) -> HotChocolate.Types.Descriptors.InterfaceTypeDescriptor
~static HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.New<T>(HotChocolate.Types.Descriptors.IDescriptorContext context) -> HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>
~static HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder.New<T>() -> HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>
~static HotChocolate.Types.Descriptors.SchemaTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition definition) -> HotChocolate.Types.Descriptors.SchemaTypeDescriptor
~static HotChocolate.Types.Descriptors.SchemaTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type type) -> HotChocolate.Types.Descriptors.SchemaTypeDescriptor
~static HotChocolate.Types.Descriptors.TypeInspectorExtensions.GetInputReturnTypeRef(this HotChocolate.Types.Descriptors.ITypeInspector typeInspector, System.Reflection.MemberInfo member) -> HotChocolate.Types.Descriptors.ITypeReference
~static HotChocolate.Types.Descriptors.TypeInspectorExtensions.GetInputTypeRef(this HotChocolate.Types.Descriptors.ITypeInspector typeInspector, System.Type type) -> HotChocolate.Types.Descriptors.ITypeReference
~static HotChocolate.Types.Descriptors.TypeInspectorExtensions.GetOutputReturnTypeRef(this HotChocolate.Types.Descriptors.ITypeInspector typeInspector, System.Reflection.MemberInfo member) -> HotChocolate.Types.Descriptors.ITypeReference
~static HotChocolate.Types.Descriptors.TypeInspectorExtensions.GetOutputTypeRef(this HotChocolate.Types.Descriptors.ITypeInspector typeInspector, System.Type type) -> HotChocolate.Types.Descriptors.ITypeReference
~static HotChocolate.Types.Descriptors.TypeNameHelper.AddNameFunction<TDefinition>(HotChocolate.Types.IDescriptor<TDefinition> descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName, System.Type dependency) -> void
~static HotChocolate.Types.Descriptors.UnionTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition definition) -> HotChocolate.Types.Descriptors.UnionTypeDescriptor
~static HotChocolate.Types.Descriptors.UnionTypeDescriptor.FromSchemaType(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type schemaType) -> HotChocolate.Types.Descriptors.UnionTypeDescriptor
~static HotChocolate.Types.Descriptors.UnionTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context, System.Type clrType) -> HotChocolate.Types.Descriptors.UnionTypeDescriptor
~static HotChocolate.Types.Descriptors.UnionTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext context) -> HotChocolate.Types.Descriptors.UnionTypeDescriptor
~static HotChocolate.Types.DirectiveCollectionExtensions.SingleOrDefault<T>(this HotChocolate.Types.IDirectiveCollection directives) -> T
~static HotChocolate.Types.DirectiveLocationExtensions.MapDirectiveLocation(this HotChocolate.Types.DirectiveLocation location) -> HotChocolate.Language.DirectiveLocation
~static HotChocolate.Types.DirectiveTypeDescriptorExtensions.Ignore<T>(this HotChocolate.Types.IDirectiveTypeDescriptor<T> descriptor, System.Linq.Expressions.Expression<System.Func<T, object>> property) -> HotChocolate.Types.IDirectiveTypeDescriptor<T>
~static HotChocolate.Types.InputObjectTypeDescriptorExtensions.Ignore<T>(this HotChocolate.Types.IInputObjectTypeDescriptor<T> descriptor, System.Linq.Expressions.Expression<System.Func<T, object>> property) -> HotChocolate.Types.IInputObjectTypeDescriptor<T>
~static HotChocolate.Types.InterfaceTypeDescriptorExtensions.Ignore<T>(this HotChocolate.Types.IInterfaceTypeDescriptor<T> descriptor, System.Linq.Expressions.Expression<System.Func<T, object>> propertyOrMethod) -> HotChocolate.Types.IInterfaceTypeDescriptor<T>
~static HotChocolate.Types.MiddlewareObjectFieldDescriptorExtensions.Use<TMiddleware>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Func<System.IServiceProvider, HotChocolate.Resolvers.FieldDelegate, TMiddleware> factory) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.MiddlewareObjectFieldDescriptorExtensions.Use<TMiddleware>(this HotChocolate.Types.IObjectFieldDescriptor descriptor) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.MultiplierPathString.implicit operator HotChocolate.Types.MultiplierPathString(string s) -> HotChocolate.Types.MultiplierPathString
~static HotChocolate.Types.MultiplierPathString.implicit operator string(HotChocolate.Types.MultiplierPathString name) -> string
~static HotChocolate.Types.MultiplierPathString.IsValidPath(string name) -> bool
~static HotChocolate.Types.MultiplierPathString.operator +(HotChocolate.Types.MultiplierPathString left, string right) -> string
~static HotChocolate.Types.MultiplierPathString.operator +(string left, HotChocolate.Types.MultiplierPathString right) -> string
~static HotChocolate.Types.MultiplierPathStringExtensions.EnsureNotEmpty(this HotChocolate.Types.MultiplierPathString name, string argumentName) -> HotChocolate.Types.MultiplierPathString
~static HotChocolate.Types.NodeObjectTypeExtensions.AsNode(this HotChocolate.Types.IObjectTypeDescriptor descriptor) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor
~static HotChocolate.Types.NodeObjectTypeExtensions.AsNode<T>(this HotChocolate.Types.IObjectTypeDescriptor<T> descriptor) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor<T>
~static HotChocolate.Types.NodeObjectTypeExtensions.ImplementsNode(this HotChocolate.Types.IObjectTypeDescriptor descriptor) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor
~static HotChocolate.Types.NodeObjectTypeExtensions.ImplementsNode<T>(this HotChocolate.Types.IObjectTypeDescriptor<T> descriptor) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor<T>
~static HotChocolate.Types.ObjectTypeDescriptorExtensions.Ignore<T>(this HotChocolate.Types.IObjectTypeDescriptor<T> descriptor, System.Linq.Expressions.Expression<System.Func<T, object>> propertyOrMethod) -> HotChocolate.Types.IObjectTypeDescriptor<T>
~static HotChocolate.Types.Relay.IdSerializer.IsPossibleBase64String(string s) -> bool
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.Subscribe<T>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Func<HotChocolate.Resolvers.IResolverContext, System.Collections.Generic.IAsyncEnumerable<T>> subscribe) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.Subscribe<T>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Func<HotChocolate.Resolvers.IResolverContext, System.Collections.Generic.IEnumerable<T>> subscribe) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.Subscribe<T>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Func<HotChocolate.Resolvers.IResolverContext, System.IObservable<T>> subscribe) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.Subscribe<T>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Func<HotChocolate.Resolvers.IResolverContext, System.Threading.Tasks.Task<System.Collections.Generic.IAsyncEnumerable<T>>> subscribe) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.Subscribe<T>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Func<HotChocolate.Resolvers.IResolverContext, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> subscribe) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.Subscribe<T>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Func<HotChocolate.Resolvers.IResolverContext, System.Threading.Tasks.Task<System.IObservable<T>>> subscribe) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic<TMessage>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, string topicName) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic<TTopic, TMessage>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, string argumentName) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic<TTopic, TMessage>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Func<HotChocolate.Resolvers.IResolverContext, System.Threading.Tasks.ValueTask<TTopic>> resolveTopic) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic<TTopic, TMessage>(this HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Func<HotChocolate.Resolvers.IResolverContext, TTopic> resolveTopic) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.TypeExtensions.Depth(this HotChocolate.Types.IType type) -> int
~static HotChocolate.Types.TypeExtensions.ElementType(this HotChocolate.Types.IType type) -> HotChocolate.Types.IType
~static HotChocolate.Types.TypeExtensions.InnerType(this HotChocolate.Types.IType type) -> HotChocolate.Types.IType
~static HotChocolate.Types.TypeExtensions.IsAbstractType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsComplexType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsCompositeType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsEnumType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsEqualTo(this HotChocolate.Types.IType x, HotChocolate.Types.IType y) -> bool
~static HotChocolate.Types.TypeExtensions.IsInputObjectType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsInputType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsInterfaceType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsLeafType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsListType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsNamedType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsNonNullType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsNullableType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsObjectType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsOutputType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsScalarType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsType<T>(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.IsUnionType(this HotChocolate.Types.IType type) -> bool
~static HotChocolate.Types.TypeExtensions.ListType(this HotChocolate.Types.IType type) -> HotChocolate.Types.ListType
~static HotChocolate.Types.TypeExtensions.NamedType(this HotChocolate.Types.IType type) -> HotChocolate.Types.INamedType
~static HotChocolate.Types.TypeExtensions.NullableType(this HotChocolate.Types.IType type) -> HotChocolate.Types.IType
~static HotChocolate.Types.TypeExtensions.Rewrite(this HotChocolate.Types.IType original, HotChocolate.Types.INamedType newNamedType) -> HotChocolate.Types.IType
~static HotChocolate.Types.TypeExtensions.ToRuntimeType(this HotChocolate.Types.IType type) -> System.Type
~static HotChocolate.Types.TypeExtensions.ToType(this HotChocolate.Language.ITypeNode typeNode, HotChocolate.Types.INamedType namedType) -> HotChocolate.Types.IType
~static HotChocolate.Types.TypeExtensions.ToTypeNode(this HotChocolate.Types.IType original, HotChocolate.Types.INamedType namedType) -> HotChocolate.Language.ITypeNode
~static HotChocolate.Types.TypeExtensions.ToTypeNode(this HotChocolate.Types.IType type) -> HotChocolate.Language.ITypeNode
~static HotChocolate.Types.TypeExtensions.TypeName(this HotChocolate.Types.IType type) -> HotChocolate.NameString
~static HotChocolate.Types.TypeNameExtensions.Name(this HotChocolate.Types.IEnumTypeDescriptor descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName) -> HotChocolate.Types.IEnumTypeNameDependencyDescriptor
~static HotChocolate.Types.TypeNameExtensions.Name(this HotChocolate.Types.IInputObjectTypeDescriptor descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName) -> HotChocolate.Types.IInputObjectTypeNameDependencyDescriptor
~static HotChocolate.Types.TypeNameExtensions.Name(this HotChocolate.Types.IInterfaceTypeDescriptor descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName) -> HotChocolate.Types.IInterfaceTypeNameDependencyDescriptor
~static HotChocolate.Types.TypeNameExtensions.Name(this HotChocolate.Types.IObjectTypeDescriptor descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName) -> HotChocolate.Types.IObjectTypeNameDependencyDescriptor
~static HotChocolate.Types.TypeNameExtensions.Name(this HotChocolate.Types.IUnionTypeDescriptor descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName) -> HotChocolate.Types.IUnionTypeNameDependencyDescriptor
~static HotChocolate.Types.TypeNameExtensions.Name<T>(this HotChocolate.Types.IEnumTypeDescriptor<T> descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName) -> HotChocolate.Types.IEnumTypeNameDependencyDescriptor<T>
~static HotChocolate.Types.TypeNameExtensions.Name<T>(this HotChocolate.Types.IInputObjectTypeDescriptor<T> descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName) -> HotChocolate.Types.IInputObjectTypeNameDependencyDescriptor<T>
~static HotChocolate.Types.TypeNameExtensions.Name<T>(this HotChocolate.Types.IInterfaceTypeDescriptor<T> descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName) -> HotChocolate.Types.IInterfaceTypeNameDependencyDescriptor<T>
~static HotChocolate.Types.TypeNameExtensions.Name<T>(this HotChocolate.Types.IObjectTypeDescriptor<T> descriptor, System.Func<HotChocolate.Types.INamedType, HotChocolate.NameString> createName) -> HotChocolate.Types.IObjectTypeNameDependencyDescriptor<T>
~static HotChocolate.Types.TypeVisualizer.Print(this HotChocolate.Types.IType type) -> string
~static HotChocolate.Types.TypeVisualizer.Visualize(this HotChocolate.Types.IType type) -> string
~static HotChocolate.Utilities.AstUtilities.TryGetTypeFromAst<T>(this HotChocolate.ISchema schema, HotChocolate.Language.ITypeNode typeNode, out T type) -> bool
~static HotChocolate.Utilities.ReflectionUtils.CreatePropertyLookup(this System.Type type) -> System.Linq.ILookup<string, System.Reflection.PropertyInfo>
~static HotChocolate.Utilities.ReflectionUtils.ExtractMember<T, TPropertyType>(this System.Linq.Expressions.Expression<System.Func<T, TPropertyType>> memberExpression) -> System.Reflection.MemberInfo
~static HotChocolate.Utilities.ReflectionUtils.GetProperties(System.Type type) -> System.Collections.Generic.Dictionary<string, System.Reflection.PropertyInfo>
~static HotChocolate.Utilities.ReflectionUtils.GetReturnType(this System.Reflection.MemberInfo member) -> System.Type
~static HotChocolate.Utilities.ReflectionUtils.GetTypeName(this System.Type type) -> string
~static HotChocolate.Utilities.ReflectionUtils.TryExtractMember<T, TPropertyType>(this System.Linq.Expressions.Expression<System.Func<T, TPropertyType>> memberExpression) -> System.Reflection.MemberInfo
~static HotChocolate.Utilities.TypeConverterExtensions.Convert<TFrom, TTo>(this HotChocolate.Utilities.ITypeConverter typeConverter, object source) -> TTo
~static HotChocolate.Utilities.TypeConverterExtensions.TryConvert(this HotChocolate.Utilities.ITypeConverter typeConverter, System.Type to, object source, out object converted) -> bool
~static HotChocolate.Utilities.TypeConverterExtensions.TryConvert<TFrom, TTo>(this HotChocolate.Utilities.ITypeConverter typeConverter, TFrom source, out TTo converted) -> bool
~static HotChocolate.Utilities.TypeConverterServiceProviderExtensions.GetServiceOrDefault<T>(this System.IServiceProvider services, T defaultService) -> T
~static HotChocolate.Utilities.TypeConverterServiceProviderExtensions.GetTypeConverter(this HotChocolate.Resolvers.IResolverContext resolverContext) -> HotChocolate.Utilities.ITypeConverter
~static HotChocolate.Utilities.TypeConverterServiceProviderExtensions.GetTypeConverter(this System.IServiceProvider services) -> HotChocolate.Utilities.ITypeConverter
~virtual HotChocolate.Schema.Configure(HotChocolate.Types.ISchemaTypeDescriptor descriptor) -> void
~virtual HotChocolate.Types.Descriptors.DirectiveTypeDescriptor.OnCompleteArguments(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition> arguments, System.Collections.Generic.ISet<System.Reflection.PropertyInfo> handledProperties) -> void
~virtual HotChocolate.Types.Descriptors.InputObjectTypeDescriptor.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition> fields, System.Collections.Generic.ISet<System.Reflection.PropertyInfo> handledProperties) -> void
~virtual HotChocolate.Types.Descriptors.InterfaceTypeDescriptor.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition> fields, System.Collections.Generic.ISet<System.Reflection.MemberInfo> handledMembers) -> void
~virtual HotChocolate.Utilities.DictionaryVisitor<TContext>.Visit(object value, TContext context) -> void
~virtual HotChocolate.Utilities.DictionaryVisitor<TContext>.VisitField(System.Collections.Generic.KeyValuePair<string, object> field, TContext context) -> void
~virtual HotChocolate.Utilities.DictionaryVisitor<TContext>.VisitList(System.Collections.Generic.IReadOnlyList<object> list, TContext context) -> void
~virtual HotChocolate.Utilities.DictionaryVisitor<TContext>.VisitObject(System.Collections.Generic.IReadOnlyDictionary<string, object> dictionary, TContext context) -> void
~virtual HotChocolate.Utilities.DictionaryVisitor<TContext>.VisitValue(object value, TContext context) -> void
abstract HotChocolate.DataLoader.BatchDataLoader<TKey, TValue>.LoadBatchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>!>!
abstract HotChocolate.DataLoader.CacheDataLoader<TKey, TValue>.LoadSingleAsync(TKey key, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TValue>!
abstract HotChocolate.DataLoader.GroupedDataLoader<TKey, TValue>.LoadGroupedBatchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TValue>!>!
abstract HotChocolate.Types.ArgumentDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IArgumentDescriptor! descriptor, System.Reflection.ParameterInfo! parameter) -> void
abstract HotChocolate.Types.DescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
abstract HotChocolate.Types.Descriptors.Convention<TDefinition>.CreateDefinition(HotChocolate.Types.Descriptors.IConventionContext! context) -> TDefinition!
abstract HotChocolate.Types.Descriptors.DescriptorBase<T>.Definition.get -> T!
abstract HotChocolate.Types.Descriptors.DescriptorBase<T>.Definition.set -> void
abstract HotChocolate.Types.Descriptors.TypeReference.Equals(HotChocolate.Types.Descriptors.ITypeReference? other) -> bool
abstract HotChocolate.Types.EnumTypeDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IEnumTypeDescriptor! descriptor, System.Type! type) -> void
abstract HotChocolate.Types.EnumValueDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IEnumValueDescriptor! descriptor, System.Reflection.FieldInfo! field) -> void
abstract HotChocolate.Types.FloatTypeBase<TRuntimeType>.ParseLiteral(HotChocolate.Language.IFloatValueLiteral! valueSyntax) -> TRuntimeType
abstract HotChocolate.Types.FloatTypeBase<TRuntimeType>.ParseValue(TRuntimeType runtimeValue) -> HotChocolate.Language.FloatValueNode!
abstract HotChocolate.Types.InputFieldDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IInputFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
abstract HotChocolate.Types.InputObjectTypeDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IInputObjectTypeDescriptor! descriptor, System.Type! type) -> void
abstract HotChocolate.Types.InterfaceFieldDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IInterfaceFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
abstract HotChocolate.Types.InterfaceTypeDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IInterfaceTypeDescriptor! descriptor, System.Type! type) -> void
abstract HotChocolate.Types.NamedTypeBase<TDefinition>.Kind.get -> HotChocolate.Types.TypeKind
abstract HotChocolate.Types.NamedTypeExtensionBase<TDefinition>.Kind.get -> HotChocolate.Types.TypeKind
abstract HotChocolate.Types.NamedTypeExtensionBase<TDefinition>.Merge(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.INamedType! type) -> void
abstract HotChocolate.Types.NonNamedType.IsInstanceOfType(HotChocolate.Language.IValueNode! literal) -> bool
abstract HotChocolate.Types.NonNamedType.IsInstanceOfType(object? runtimeValue) -> bool
abstract HotChocolate.Types.NonNamedType.Kind.get -> HotChocolate.Types.TypeKind
abstract HotChocolate.Types.NonNamedType.ParseLiteral(HotChocolate.Language.IValueNode! literal, bool withDefaults) -> object?
abstract HotChocolate.Types.NonNamedType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
abstract HotChocolate.Types.NonNamedType.ParseValue(object? runtimeValue) -> HotChocolate.Language.IValueNode!
abstract HotChocolate.Types.NonNamedType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
abstract HotChocolate.Types.NonNamedType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
abstract HotChocolate.Types.ObjectFieldDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
abstract HotChocolate.Types.ObjectTypeDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectTypeDescriptor! descriptor, System.Type! type) -> void
abstract HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.ConfigureNodeField() -> HotChocolate.Types.IObjectFieldDescriptor!
abstract HotChocolate.Types.ScalarType.IsInstanceOfType(HotChocolate.Language.IValueNode! valueSyntax) -> bool
abstract HotChocolate.Types.ScalarType.ParseLiteral(HotChocolate.Language.IValueNode! valueSyntax, bool withDefaults = true) -> object?
abstract HotChocolate.Types.ScalarType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
abstract HotChocolate.Types.ScalarType.ParseValue(object? runtimeValue) -> HotChocolate.Language.IValueNode!
abstract HotChocolate.Types.ScalarType.RuntimeType.get -> System.Type!
abstract HotChocolate.Types.ScalarType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
abstract HotChocolate.Types.ScalarType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
abstract HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.ParseLiteral(TLiteral valueSyntax) -> TRuntimeType
abstract HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.ParseValue(TRuntimeType runtimeValue) -> TLiteral
abstract HotChocolate.Types.TypeSystemObjectBase.ContextData.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object?>!
abstract HotChocolate.Types.TypeSystemObjectBase<TDefinition>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> TDefinition!
abstract HotChocolate.Types.UnionTypeDescriptorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IUnionTypeDescriptor! descriptor, System.Type! type) -> void
const HotChocolate.Types.DeferDirectiveType.Names.Defer = "defer" -> string!
const HotChocolate.Types.DeferDirectiveType.Names.If = "if" -> string!
const HotChocolate.Types.DeferDirectiveType.Names.Label = "label" -> string!
const HotChocolate.Types.Introspection.__AppliedDirective.Names.__AppliedDirective = "__AppliedDirective" -> string!
const HotChocolate.Types.Introspection.__AppliedDirective.Names.Args = "args" -> string!
const HotChocolate.Types.Introspection.__AppliedDirective.Names.Name = "name" -> string!
const HotChocolate.Types.Introspection.__DirectiveArgument.Names.__DirectiveArgument = "__DirectiveArgument" -> string!
const HotChocolate.Types.Introspection.__DirectiveArgument.Names.Name = "name" -> string!
const HotChocolate.Types.Introspection.__DirectiveArgument.Names.Value = "value" -> string!
const HotChocolate.Types.Pagination.PagingDefaults.DefaultPageSize = 10 -> int
const HotChocolate.Types.Pagination.PagingDefaults.IncludeTotalCount = false -> bool
const HotChocolate.Types.Pagination.PagingDefaults.MaxPageSize = 50 -> int
const HotChocolate.Types.StreamDirectiveType.Names.If = "if" -> string!
const HotChocolate.Types.StreamDirectiveType.Names.InitialCount = "initialCount" -> string!
const HotChocolate.Types.StreamDirectiveType.Names.Label = "label" -> string!
const HotChocolate.Types.StreamDirectiveType.Names.Stream = "stream" -> string!
HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder
HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder.ComplexTypeBindingBuilder() -> void
HotChocolate.Configuration.Bindings.ComplexTypeBindingBuilder.IsComplete() -> bool
HotChocolate.Configuration.Bindings.ComplexTypeFieldBindingBuilder
HotChocolate.Configuration.Bindings.ComplexTypeFieldBindingBuilder.ComplexTypeFieldBindingBuilder() -> void
HotChocolate.Configuration.Bindings.ComplexTypeFieldBindingBuilder.IsComplete() -> bool
HotChocolate.Configuration.Bindings.IBindingBuilder
HotChocolate.Configuration.Bindings.IBindingBuilder.IsComplete() -> bool
HotChocolate.Configuration.Bindings.IBindingInfo
HotChocolate.Configuration.Bindings.IBindingInfo.IsValid() -> bool
HotChocolate.Configuration.Bindings.IBindResolverDelegate
HotChocolate.Configuration.Bindings.IBindResolverDelegate.To(HotChocolate.NameString typeName, HotChocolate.NameString fieldName) -> void
HotChocolate.Configuration.Bindings.IComplexTypeBindingBuilder
HotChocolate.Configuration.Bindings.IComplexTypeFieldBindingBuilder
HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor
HotChocolate.Configuration.Bindings.IEnumValueBindingDescriptor
HotChocolate.Configuration.Bindings.IResolverBindingBuilder
HotChocolate.Configuration.Bindings.IResolverFieldBindingBuilder
HotChocolate.Configuration.Bindings.IResolverTypeBindingBuilder
HotChocolate.Configuration.Bindings.ResolverBindingBuilder
HotChocolate.Configuration.Bindings.ResolverBindingBuilder.IsComplete() -> bool
HotChocolate.Configuration.Bindings.ResolverBindingBuilder.ResolverBindingBuilder() -> void
HotChocolate.Configuration.Bindings.ResolverFieldBindingBuilder
HotChocolate.Configuration.Bindings.ResolverFieldBindingBuilder.IsComplete() -> bool
HotChocolate.Configuration.Bindings.ResolverFieldBindingBuilder.ResolverFieldBindingBuilder() -> void
HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder
HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.IsComplete() -> bool
HotChocolate.Configuration.Bindings.ResolverTypeBindingBuilder.ResolverTypeBindingBuilder() -> void
HotChocolate.Configuration.DelegateSchemaInterceptor
HotChocolate.Configuration.DelegateSchemaInterceptor.DelegateSchemaInterceptor(HotChocolate.Configuration.OnBeforeSchemaCreate? onBeforeCreate = null, HotChocolate.Configuration.OnAfterSchemaCreate? onAfterCreate = null, HotChocolate.Configuration.OnSchemaError? onError = null) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.CanHandle(HotChocolate.Configuration.ITypeSystemObjectContext! context) -> bool
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.DelegateTypeInitializationInterceptor(System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null, System.Action<HotChocolate.Configuration.ITypeDiscoveryContext!>? onBeforeInitialize = null, HotChocolate.Configuration.OnInitializeType<T!>? onAfterInitialize = null, HotChocolate.Configuration.OnInitializeType<T!>? onBeforeRegisterDependencies = null, HotChocolate.Configuration.OnInitializeType<T!>? onAfterRegisterDependencies = null, HotChocolate.Configuration.OnCompleteType<T!>? onBeforeCompleteName = null, HotChocolate.Configuration.OnCompleteType<T!>? onAfterCompleteName = null, HotChocolate.Configuration.OnCompleteType<T!>? onBeforeCompleteType = null, HotChocolate.Configuration.OnCompleteType<T!>? onAfterCompleteType = null) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnAfterCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnAfterCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnAfterInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnAfterRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnBeforeCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnBeforeCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnBeforeInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnBeforeRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnTypesCompleted(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeCompletionContext!>! completionContexts) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnTypesCompletedName(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeCompletionContext!>! completionContexts) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.OnTypesInitialized(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeDiscoveryContext!>! discoveryContexts) -> void
HotChocolate.Configuration.DelegateTypeInitializationInterceptor<T>.TriggerAggregations.get -> bool
HotChocolate.Configuration.DelegateTypeInterceptor
HotChocolate.Configuration.DelegateTypeInterceptor.CanHandle(HotChocolate.Configuration.ITypeSystemObjectContext! context) -> bool
HotChocolate.Configuration.DelegateTypeInterceptor.DelegateTypeInterceptor(System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null, System.Action<HotChocolate.Configuration.ITypeDiscoveryContext!>? onBeforeInitialize = null, HotChocolate.Configuration.OnInitializeType? onAfterInitialize = null, HotChocolate.Configuration.OnInitializeType? onBeforeRegisterDependencies = null, HotChocolate.Configuration.OnInitializeType? onAfterRegisterDependencies = null, HotChocolate.Configuration.OnCompleteType? onBeforeCompleteName = null, HotChocolate.Configuration.OnCompleteType? onAfterCompleteName = null, HotChocolate.Configuration.OnCompleteType? onBeforeCompleteType = null, HotChocolate.Configuration.OnCompleteType? onAfterCompleteType = null) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnAfterCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnAfterCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnAfterInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnAfterRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnBeforeCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnBeforeCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnBeforeInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnBeforeRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnTypesCompleted(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeCompletionContext!>! completionContexts) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnTypesCompletedName(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeCompletionContext!>! completionContexts) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.OnTypesInitialized(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeDiscoveryContext!>! discoveryContexts) -> void
HotChocolate.Configuration.DelegateTypeInterceptor.TriggerAggregations.get -> bool
HotChocolate.Configuration.DirectiveVisibility
HotChocolate.Configuration.DirectiveVisibility.Internal = 1 -> HotChocolate.Configuration.DirectiveVisibility
HotChocolate.Configuration.DirectiveVisibility.Public = 0 -> HotChocolate.Configuration.DirectiveVisibility
HotChocolate.Configuration.FieldMiddlewareApplication
HotChocolate.Configuration.FieldMiddlewareApplication.AllFields = 1 -> HotChocolate.Configuration.FieldMiddlewareApplication
HotChocolate.Configuration.FieldMiddlewareApplication.UserDefinedFields = 0 -> HotChocolate.Configuration.FieldMiddlewareApplication
HotChocolate.Configuration.IReadOnlySchemaOptions
HotChocolate.Configuration.IReadOnlySchemaOptions.DefaultBindingBehavior.get -> HotChocolate.Types.BindingBehavior
HotChocolate.Configuration.IReadOnlySchemaOptions.DefaultDirectiveVisibility.get -> HotChocolate.Configuration.DirectiveVisibility
HotChocolate.Configuration.IReadOnlySchemaOptions.EnableDirectiveIntrospection.get -> bool
HotChocolate.Configuration.IReadOnlySchemaOptions.FieldMiddleware.get -> HotChocolate.Configuration.FieldMiddlewareApplication
HotChocolate.Configuration.IReadOnlySchemaOptions.MutationTypeName.get -> string?
HotChocolate.Configuration.IReadOnlySchemaOptions.PreserveSyntaxNodes.get -> bool
HotChocolate.Configuration.IReadOnlySchemaOptions.QueryTypeName.get -> string?
HotChocolate.Configuration.IReadOnlySchemaOptions.RemoveUnreachableTypes.get -> bool
HotChocolate.Configuration.IReadOnlySchemaOptions.SortFieldsByName.get -> bool
HotChocolate.Configuration.IReadOnlySchemaOptions.StrictValidation.get -> bool
HotChocolate.Configuration.IReadOnlySchemaOptions.SubscriptionTypeName.get -> string?
HotChocolate.Configuration.IReadOnlySchemaOptions.UseXmlDocumentation.get -> bool
HotChocolate.Configuration.ISchemaConfiguration
HotChocolate.Configuration.ISchemaConfigurationExtension
HotChocolate.Configuration.ISchemaInterceptor
HotChocolate.Configuration.ISchemaOptions
HotChocolate.Configuration.ISchemaOptions.DefaultBindingBehavior.get -> HotChocolate.Types.BindingBehavior
HotChocolate.Configuration.ISchemaOptions.DefaultBindingBehavior.set -> void
HotChocolate.Configuration.ISchemaOptions.DefaultDirectiveVisibility.get -> HotChocolate.Configuration.DirectiveVisibility
HotChocolate.Configuration.ISchemaOptions.DefaultDirectiveVisibility.set -> void
HotChocolate.Configuration.ISchemaOptions.EnableDirectiveIntrospection.get -> bool
HotChocolate.Configuration.ISchemaOptions.EnableDirectiveIntrospection.set -> void
HotChocolate.Configuration.ISchemaOptions.FieldMiddleware.get -> HotChocolate.Configuration.FieldMiddlewareApplication
HotChocolate.Configuration.ISchemaOptions.FieldMiddleware.set -> void
HotChocolate.Configuration.ISchemaOptions.PreserveSyntaxNodes.get -> bool
HotChocolate.Configuration.ISchemaOptions.PreserveSyntaxNodes.set -> void
HotChocolate.Configuration.ISchemaOptions.RemoveUnreachableTypes.get -> bool
HotChocolate.Configuration.ISchemaOptions.RemoveUnreachableTypes.set -> void
HotChocolate.Configuration.ISchemaOptions.SortFieldsByName.get -> bool
HotChocolate.Configuration.ISchemaOptions.SortFieldsByName.set -> void
HotChocolate.Configuration.ISchemaOptions.StrictValidation.get -> bool
HotChocolate.Configuration.ISchemaOptions.StrictValidation.set -> void
HotChocolate.Configuration.ISchemaOptions.UseXmlDocumentation.get -> bool
HotChocolate.Configuration.ISchemaOptions.UseXmlDocumentation.set -> void
HotChocolate.Configuration.ITypeCompletionContext
HotChocolate.Configuration.ITypeCompletionContext.GetDirectiveType(HotChocolate.Types.Descriptors.IDirectiveReference! directiveRef) -> HotChocolate.Types.DirectiveType!
HotChocolate.Configuration.ITypeCompletionContext.GetResolver(HotChocolate.NameString fieldName) -> HotChocolate.Resolvers.FieldResolver!
HotChocolate.Configuration.ITypeCompletionContext.GetSchemaResolver() -> System.Func<HotChocolate.ISchema!>!
HotChocolate.Configuration.ITypeCompletionContext.GetType<T>(HotChocolate.Types.Descriptors.ITypeReference! typeRef) -> T
HotChocolate.Configuration.ITypeCompletionContext.GetTypes<T>() -> System.Collections.Generic.IEnumerable<T>!
HotChocolate.Configuration.ITypeCompletionContext.GlobalComponents.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Resolvers.FieldMiddleware!>!
HotChocolate.Configuration.ITypeCompletionContext.IsMutationType.get -> bool?
HotChocolate.Configuration.ITypeCompletionContext.IsOfType.get -> HotChocolate.Types.IsOfTypeFallback?
HotChocolate.Configuration.ITypeCompletionContext.IsQueryType.get -> bool?
HotChocolate.Configuration.ITypeCompletionContext.IsSubscriptionType.get -> bool?
HotChocolate.Configuration.ITypeCompletionContext.TryGetDirectiveType(HotChocolate.Types.Descriptors.IDirectiveReference! directiveRef, out HotChocolate.Types.DirectiveType? directiveType) -> bool
HotChocolate.Configuration.ITypeCompletionContext.TryGetType<T>(HotChocolate.Types.Descriptors.ITypeReference! typeRef, out T type) -> bool
HotChocolate.Configuration.ITypeDiscoveryContext
HotChocolate.Configuration.ITypeInitializationFlowInterceptor
HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnAfterCompleteTypeNames() -> void
HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnAfterCompleteTypes() -> void
HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnAfterDiscoverTypes() -> void
HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnAfterMergeTypeExtensions() -> void
HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnBeforeCompleteTypeNames() -> void
HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnBeforeCompleteTypes() -> void
HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnBeforeDiscoverTypes() -> void
HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnBeforeMergeTypeExtensions() -> void
HotChocolate.Configuration.ITypeInitializationInterceptor
HotChocolate.Configuration.ITypeInitializationInterceptor.CanHandle(HotChocolate.Configuration.ITypeSystemObjectContext! context) -> bool
HotChocolate.Configuration.ITypeInitializationInterceptor.OnAfterCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnAfterCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnAfterInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnAfterRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnBeforeCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnBeforeCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnBeforeInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnBeforeRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnTypesCompleted(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeCompletionContext!>! completionContexts) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnTypesCompletedName(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeCompletionContext!>! completionContexts) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.OnTypesInitialized(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeDiscoveryContext!>! discoveryContexts) -> void
HotChocolate.Configuration.ITypeInitializationInterceptor.TriggerAggregations.get -> bool
HotChocolate.Configuration.ITypeInterceptor
HotChocolate.Configuration.ITypeRegistryInterceptor
HotChocolate.Configuration.ITypeScopeInterceptor
HotChocolate.Configuration.ITypeScopeInterceptor.TryCreateScope(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, out System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Descriptors.Definitions.TypeDependency!>? typeDependencies) -> bool
HotChocolate.Configuration.ITypeSystemObjectContext
HotChocolate.Configuration.ITypeSystemObjectContext.DescriptorContext.get -> HotChocolate.Types.Descriptors.IDescriptorContext!
HotChocolate.Configuration.ITypeSystemObjectContext.IsDirective.get -> bool
HotChocolate.Configuration.ITypeSystemObjectContext.IsIntrospectionType.get -> bool
HotChocolate.Configuration.ITypeSystemObjectContext.IsSchema.get -> bool
HotChocolate.Configuration.ITypeSystemObjectContext.IsType.get -> bool
HotChocolate.Configuration.ITypeSystemObjectContext.ReportError(HotChocolate.ISchemaError! error) -> void
HotChocolate.Configuration.ITypeSystemObjectContext.Services.get -> System.IServiceProvider!
HotChocolate.Configuration.ITypeSystemObjectContext.TryPredictTypeKind(HotChocolate.Types.Descriptors.ITypeReference! typeRef, out HotChocolate.Types.TypeKind kind) -> bool
HotChocolate.Configuration.ITypeSystemObjectContext.Type.get -> HotChocolate.Types.ITypeSystemObject!
HotChocolate.Configuration.ITypeSystemObjectContext.TypeInspector.get -> HotChocolate.Types.Descriptors.ITypeInspector!
HotChocolate.Configuration.ITypeSystemObjectContext.TypeInterceptor.get -> HotChocolate.Configuration.ITypeInterceptor!
HotChocolate.Configuration.OnAfterSchemaCreate
HotChocolate.Configuration.OnBeforeSchemaCreate
HotChocolate.Configuration.OnCompleteType
HotChocolate.Configuration.OnCompleteType<T>
HotChocolate.Configuration.OnInitializeType
HotChocolate.Configuration.OnInitializeType<T>
HotChocolate.Configuration.OnSchemaError
HotChocolate.Configuration.ReadOnlySchemaOptions
HotChocolate.Configuration.ReadOnlySchemaOptions.DefaultBindingBehavior.get -> HotChocolate.Types.BindingBehavior
HotChocolate.Configuration.ReadOnlySchemaOptions.DefaultDirectiveVisibility.get -> HotChocolate.Configuration.DirectiveVisibility
HotChocolate.Configuration.ReadOnlySchemaOptions.EnableDirectiveIntrospection.get -> bool
HotChocolate.Configuration.ReadOnlySchemaOptions.FieldMiddleware.get -> HotChocolate.Configuration.FieldMiddlewareApplication
HotChocolate.Configuration.ReadOnlySchemaOptions.PreserveSyntaxNodes.get -> bool
HotChocolate.Configuration.ReadOnlySchemaOptions.RemoveUnreachableTypes.get -> bool
HotChocolate.Configuration.ReadOnlySchemaOptions.SortFieldsByName.get -> bool
HotChocolate.Configuration.ReadOnlySchemaOptions.StrictValidation.get -> bool
HotChocolate.Configuration.ReadOnlySchemaOptions.UseXmlDocumentation.get -> bool
HotChocolate.Configuration.SchemaInterceptor
HotChocolate.Configuration.SchemaInterceptor.SchemaInterceptor() -> void
HotChocolate.Configuration.SchemaOptions
HotChocolate.Configuration.SchemaOptions.DefaultBindingBehavior.get -> HotChocolate.Types.BindingBehavior
HotChocolate.Configuration.SchemaOptions.DefaultBindingBehavior.set -> void
HotChocolate.Configuration.SchemaOptions.DefaultDirectiveVisibility.get -> HotChocolate.Configuration.DirectiveVisibility
HotChocolate.Configuration.SchemaOptions.DefaultDirectiveVisibility.set -> void
HotChocolate.Configuration.SchemaOptions.EnableDirectiveIntrospection.get -> bool
HotChocolate.Configuration.SchemaOptions.EnableDirectiveIntrospection.set -> void
HotChocolate.Configuration.SchemaOptions.FieldMiddleware.get -> HotChocolate.Configuration.FieldMiddlewareApplication
HotChocolate.Configuration.SchemaOptions.FieldMiddleware.set -> void
HotChocolate.Configuration.SchemaOptions.PreserveSyntaxNodes.get -> bool
HotChocolate.Configuration.SchemaOptions.PreserveSyntaxNodes.set -> void
HotChocolate.Configuration.SchemaOptions.RemoveUnreachableTypes.get -> bool
HotChocolate.Configuration.SchemaOptions.RemoveUnreachableTypes.set -> void
HotChocolate.Configuration.SchemaOptions.SchemaOptions() -> void
HotChocolate.Configuration.SchemaOptions.SortFieldsByName.get -> bool
HotChocolate.Configuration.SchemaOptions.SortFieldsByName.set -> void
HotChocolate.Configuration.SchemaOptions.StrictValidation.get -> bool
HotChocolate.Configuration.SchemaOptions.StrictValidation.set -> void
HotChocolate.Configuration.SchemaOptions.UseXmlDocumentation.get -> bool
HotChocolate.Configuration.SchemaOptions.UseXmlDocumentation.set -> void
HotChocolate.Configuration.SchemaTypeResolver
HotChocolate.Configuration.TypeInterceptor
HotChocolate.Configuration.TypeInterceptor.TypeInterceptor() -> void
HotChocolate.Configuration.Validation.InterfaceTypeValidationRule
HotChocolate.Configuration.Validation.InterfaceTypeValidationRule.InterfaceTypeValidationRule() -> void
HotChocolate.Configuration.Validation.InterfaceTypeValidationRule.Validate(System.Collections.Generic.IReadOnlyList<HotChocolate.Types.ITypeSystemObject!>! typeSystemObjects, HotChocolate.Configuration.IReadOnlySchemaOptions! options, System.Collections.Generic.ICollection<HotChocolate.ISchemaError!>! errors) -> void
HotChocolate.CreateConvention
HotChocolate.DataLoader.BatchDataLoader<TKey, TValue>
HotChocolate.DataLoader.BatchDataLoader<TKey, TValue>.BatchDataLoader(GreenDonut.IBatchScheduler! batchScheduler, GreenDonut.DataLoaderOptions<TKey>? options = null) -> void
HotChocolate.DataLoader.CacheDataLoader<TKey, TValue>
HotChocolate.DataLoader.CacheDataLoader<TKey, TValue>.CacheDataLoader(int cacheSize) -> void
HotChocolate.DataLoader.DefaultDataLoaderRegistry
HotChocolate.DataLoader.DefaultDataLoaderRegistry.DefaultDataLoaderRegistry() -> void
HotChocolate.DataLoader.DefaultDataLoaderRegistry.Dispose() -> void
HotChocolate.DataLoader.DefaultDataLoaderRegistry.GetOrRegister<T>(string! key, System.Func<T>! createDataLoader) -> T
HotChocolate.DataLoader.DefaultDataLoaderRegistry.GetOrRegister<T>(System.Func<T>! createDataLoader) -> T
HotChocolate.DataLoader.FetchBatch<TKey, TValue>
HotChocolate.DataLoader.FetchCacheCt<TKey, TValue>
HotChocolate.DataLoader.FetchGroup<TKey, TValue>
HotChocolate.DataLoader.GroupedDataLoader<TKey, TValue>
HotChocolate.DataLoader.GroupedDataLoader<TKey, TValue>.GroupedDataLoader(GreenDonut.IBatchScheduler! batchScheduler, GreenDonut.DataLoaderOptions<TKey>? options = null) -> void
HotChocolate.DataLoader.IDataLoaderRegistry
HotChocolate.DataLoader.IDataLoaderRegistry.GetOrRegister<T>(string! key, System.Func<T>! createDataLoader) -> T
HotChocolate.DataLoader.IDataLoaderRegistry.GetOrRegister<T>(System.Func<T>! createDataLoader) -> T
HotChocolate.DataLoader.RegisterDataLoaderException
HotChocolate.DataLoader.RegisterDataLoaderException.RegisterDataLoaderException(string! message) -> void
HotChocolate.DirectiveTypeExtensions
HotChocolate.IdSchemaBuilderExtensions
HotChocolate.IFluent
HotChocolate.IFluent.GetHashCode() -> int
HotChocolate.IInputTypeParser
HotChocolate.Internal.ExtendedTypeExtensions
HotChocolate.Internal.ExtendedTypeId
HotChocolate.Internal.ExtendedTypeId.Equals(HotChocolate.Internal.ExtendedTypeId other) -> bool
HotChocolate.Internal.ExtendedTypeId.ExtendedTypeId() -> void
HotChocolate.Internal.ExtendedTypeId.ExtendedTypeId(System.Type! type, HotChocolate.Internal.ExtendedTypeKind kind, uint nullability) -> void
HotChocolate.Internal.ExtendedTypeId.Kind.get -> HotChocolate.Internal.ExtendedTypeKind
HotChocolate.Internal.ExtendedTypeId.Nullability.get -> uint
HotChocolate.Internal.ExtendedTypeId.Type.get -> System.Type!
HotChocolate.Internal.ExtendedTypeKind
HotChocolate.Internal.ExtendedTypeKind.Extended = 1 -> HotChocolate.Internal.ExtendedTypeKind
HotChocolate.Internal.ExtendedTypeKind.Runtime = 0 -> HotChocolate.Internal.ExtendedTypeKind
HotChocolate.Internal.ExtendedTypeKind.Schema = 2 -> HotChocolate.Internal.ExtendedTypeKind
HotChocolate.Internal.IExtendedType
HotChocolate.Internal.IExtendedType.Definition.get -> System.Type?
HotChocolate.Internal.IExtendedType.ElementType.get -> HotChocolate.Internal.IExtendedType?
HotChocolate.Internal.IExtendedType.IsArray.get -> bool
HotChocolate.Internal.IExtendedType.IsArrayOrList.get -> bool
HotChocolate.Internal.IExtendedType.IsGeneric.get -> bool
HotChocolate.Internal.IExtendedType.IsInterface.get -> bool
HotChocolate.Internal.IExtendedType.IsList.get -> bool
HotChocolate.Internal.IExtendedType.IsNamedType.get -> bool
HotChocolate.Internal.IExtendedType.IsNullable.get -> bool
HotChocolate.Internal.IExtendedType.IsSchemaType.get -> bool
HotChocolate.Internal.IExtendedType.Kind.get -> HotChocolate.Internal.ExtendedTypeKind
HotChocolate.Internal.IExtendedType.Source.get -> System.Type!
HotChocolate.Internal.IExtendedType.Type.get -> System.Type!
HotChocolate.Internal.IExtendedType.TypeArguments.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Internal.IExtendedType!>!
HotChocolate.Internal.ITypeFactory
HotChocolate.Internal.ITypeInfo
HotChocolate.Internal.ITypeInfo.IsInputType() -> bool
HotChocolate.Internal.ITypeInfo.IsOutputType() -> bool
HotChocolate.Internal.ITypeInfo.IsRuntimeType.get -> bool
HotChocolate.Internal.ITypeInfo.IsSchemaType.get -> bool
HotChocolate.Internal.TypeComponent
HotChocolate.Internal.TypeComponent.Kind.get -> HotChocolate.Internal.TypeComponentKind
HotChocolate.Internal.TypeComponent.TypeComponent() -> void
HotChocolate.Internal.TypeComponentKind
HotChocolate.Internal.TypeComponentKind.List = 1 -> HotChocolate.Internal.TypeComponentKind
HotChocolate.Internal.TypeComponentKind.Named = 2 -> HotChocolate.Internal.TypeComponentKind
HotChocolate.Internal.TypeComponentKind.NonNull = 0 -> HotChocolate.Internal.TypeComponentKind
HotChocolate.Internal.TypeDependencyHelper
HotChocolate.Internal.TypeExtensionHelper
HotChocolate.Internal.TypeExtensions
HotChocolate.ISchema
HotChocolate.ISchema.DirectiveTypes.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.DirectiveType!>!
HotChocolate.ISchema.GetDirectiveType(HotChocolate.NameString directiveName) -> HotChocolate.Types.DirectiveType!
HotChocolate.ISchema.GetPossibleTypes(HotChocolate.Types.INamedType! abstractType) -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.ObjectType!>!
HotChocolate.ISchema.GetType<T>(HotChocolate.NameString typeName) -> T
HotChocolate.ISchema.MutationType.get -> HotChocolate.Types.ObjectType?
HotChocolate.ISchema.Print() -> string!
HotChocolate.ISchema.QueryType.get -> HotChocolate.Types.ObjectType!
HotChocolate.ISchema.Services.get -> System.IServiceProvider?
HotChocolate.ISchema.SubscriptionType.get -> HotChocolate.Types.ObjectType?
HotChocolate.ISchema.ToDocument(bool includeSpecScalars = false) -> HotChocolate.Language.DocumentNode!
HotChocolate.ISchema.ToString() -> string!
HotChocolate.ISchema.TryGetDirectiveType(HotChocolate.NameString directiveName, out HotChocolate.Types.DirectiveType? directiveType) -> bool
HotChocolate.ISchema.TryGetRuntimeType(HotChocolate.NameString typeName, out System.Type? runtimeType) -> bool
HotChocolate.ISchema.TryGetType<T>(HotChocolate.NameString typeName, out T type) -> bool
HotChocolate.ISchema.Types.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.INamedType!>!
HotChocolate.ISchemaBuilder
HotChocolate.ISchemaBuilder.AddBinding(HotChocolate.Configuration.Bindings.IBindingInfo! binding) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddConvention(System.Type! convention, HotChocolate.CreateConvention! factory, string? scope = null) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddDirectiveType(HotChocolate.Types.DirectiveType! type) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddDocument(HotChocolate.LoadSchemaDocument! loadDocument) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddResolver(HotChocolate.Resolvers.FieldResolver! fieldResolver) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddRootType(HotChocolate.Types.ObjectType! type, HotChocolate.Language.OperationType operation) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddRootType(System.Type! type, HotChocolate.Language.OperationType operation) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddServices(System.IServiceProvider! services) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddType(HotChocolate.Types.INamedType! type) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddType(HotChocolate.Types.INamedTypeExtension! type) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.AddType(System.Type! type) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.BindClrType(System.Type! clrType, System.Type! schemaType) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.Create() -> HotChocolate.ISchema!
HotChocolate.ISchemaBuilder.ModifyOptions(System.Action<HotChocolate.Configuration.ISchemaOptions!>! configure) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.SetContextData(string! key, object? value) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.SetContextData(string! key, System.Func<object?, object?>! update) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.SetOptions(HotChocolate.Configuration.IReadOnlySchemaOptions! options) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.SetSchema(HotChocolate.ISchema! schema) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.SetSchema(System.Action<HotChocolate.Types.ISchemaTypeDescriptor!>! configure) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.SetSchema(System.Type! type) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.SetTypeResolver(HotChocolate.Types.IsOfTypeFallback! isOfType) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.TryAddConvention(System.Type! convention, HotChocolate.CreateConvention! factory, string? scope = null) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.TryAddSchemaInterceptor(HotChocolate.Configuration.ISchemaInterceptor! interceptor) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.TryAddSchemaInterceptor(System.Type! interceptor) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.TryAddTypeInterceptor(HotChocolate.Configuration.ITypeInitializationInterceptor! interceptor) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.TryAddTypeInterceptor(System.Type! interceptor) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaBuilder.Use(HotChocolate.Resolvers.FieldMiddleware! middleware) -> HotChocolate.ISchemaBuilder!
HotChocolate.ISchemaError
HotChocolate.ISchemaError.Code.get -> string?
HotChocolate.ISchemaError.Exception.get -> System.Exception?
HotChocolate.ISchemaError.Extensions.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object!>!
HotChocolate.ISchemaError.Message.get -> string!
HotChocolate.ISchemaError.Path.get -> System.Collections.Generic.IReadOnlyCollection<object!>?
HotChocolate.ISchemaError.SyntaxNodes.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Language.ISyntaxNode!>!
HotChocolate.ISchemaError.TypeSystemObject.get -> HotChocolate.Types.ITypeSystemObject?
HotChocolate.ISchemaErrorBuilder
HotChocolate.LoadDocumentAsync
HotChocolate.LoadSchemaDocument
HotChocolate.MiddlewareConfigurationExtensions
HotChocolate.ResolverContextExtensions
HotChocolate.Resolvers.DataLoaderResolverContextExtensions
HotChocolate.Resolvers.DirectiveClassMiddlewareFactory
HotChocolate.Resolvers.DirectiveDelegate
HotChocolate.Resolvers.DirectiveMiddleware
HotChocolate.Resolvers.DirectiveScope
HotChocolate.Resolvers.DirectiveScope.All = 0 -> HotChocolate.Resolvers.DirectiveScope
HotChocolate.Resolvers.DirectiveScope.FieldSelection = 1 -> HotChocolate.Resolvers.DirectiveScope
HotChocolate.Resolvers.FieldClassMiddlewareFactory
HotChocolate.Resolvers.FieldDelegate
HotChocolate.Resolvers.FieldMember
HotChocolate.Resolvers.FieldMember.Equals(HotChocolate.Resolvers.FieldMember? other) -> bool
HotChocolate.Resolvers.FieldMember.Expression.get -> System.Linq.Expressions.Expression?
HotChocolate.Resolvers.FieldMember.FieldMember(HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Linq.Expressions.Expression! expression) -> void
HotChocolate.Resolvers.FieldMember.FieldMember(HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Reflection.MemberInfo! member) -> void
HotChocolate.Resolvers.FieldMember.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Resolvers.FieldMember.ToFieldReference() -> HotChocolate.Resolvers.FieldReference!
HotChocolate.Resolvers.FieldMember.WithExpression(System.Linq.Expressions.Expression! expression) -> HotChocolate.Resolvers.FieldMember!
HotChocolate.Resolvers.FieldMember.WithFieldName(HotChocolate.NameString fieldName) -> HotChocolate.Resolvers.FieldMember!
HotChocolate.Resolvers.FieldMember.WithMember(System.Reflection.MemberInfo! member) -> HotChocolate.Resolvers.FieldMember!
HotChocolate.Resolvers.FieldMember.WithTypeName(HotChocolate.NameString typeName) -> HotChocolate.Resolvers.FieldMember!
HotChocolate.Resolvers.FieldMiddleware
HotChocolate.Resolvers.FieldReference
HotChocolate.Resolvers.FieldReference.FieldReference(HotChocolate.NameString typeName, HotChocolate.NameString fieldName) -> void
HotChocolate.Resolvers.FieldReferenceBase
HotChocolate.Resolvers.FieldReferenceBase.FieldName.get -> HotChocolate.NameString
HotChocolate.Resolvers.FieldReferenceBase.FieldReferenceBase(HotChocolate.NameString typeName, HotChocolate.NameString fieldName) -> void
HotChocolate.Resolvers.FieldReferenceBase.TypeName.get -> HotChocolate.NameString
HotChocolate.Resolvers.FieldResolver
HotChocolate.Resolvers.FieldResolverDelegate
HotChocolate.Resolvers.IDirectiveContext
HotChocolate.Resolvers.IDirectiveMiddleware
HotChocolate.Resolvers.IDirectiveMiddleware.DirectiveName.get -> HotChocolate.NameString
HotChocolate.Resolvers.IFieldReference
HotChocolate.Resolvers.IFieldReference.FieldName.get -> HotChocolate.NameString
HotChocolate.Resolvers.IFieldReference.TypeName.get -> HotChocolate.NameString
HotChocolate.Resolvers.IFieldSelection
HotChocolate.Resolvers.IFieldSelection.ResponseName.get -> HotChocolate.NameString
HotChocolate.Resolvers.IMiddlewareContext
HotChocolate.Resolvers.IMiddlewareContext.IsResultModified.get -> bool
HotChocolate.Resolvers.IMiddlewareContext.RegisterForCleanup(System.Action! action) -> void
HotChocolate.Resolvers.IMiddlewareContext.ResolveAsync<T>() -> System.Threading.Tasks.ValueTask<T>
HotChocolate.Resolvers.IMiddlewareContext.Result.get -> object?
HotChocolate.Resolvers.IMiddlewareContext.Result.set -> void
HotChocolate.Resolvers.IMiddlewareContext.ValueType.get -> HotChocolate.Types.IType?
HotChocolate.Resolvers.IMiddlewareContext.ValueType.set -> void
HotChocolate.Resolvers.IOperation
HotChocolate.Resolvers.IOperation.Definition.get -> HotChocolate.Language.OperationDefinitionNode!
HotChocolate.Resolvers.IOperation.Document.get -> HotChocolate.Language.DocumentNode!
HotChocolate.Resolvers.IOperation.Name.get -> HotChocolate.NameString?
HotChocolate.Resolvers.IOperation.RootType.get -> HotChocolate.Types.ObjectType!
HotChocolate.Resolvers.IOperation.Type.get -> HotChocolate.Language.OperationType
HotChocolate.Resolvers.IResolverContext
HotChocolate.Resolvers.IResolverContext.Argument<T>(HotChocolate.NameString name) -> T
HotChocolate.Resolvers.IResolverContext.ArgumentKind(HotChocolate.NameString name) -> HotChocolate.Types.ValueKind
HotChocolate.Resolvers.IResolverContext.ArgumentLiteral<TValueNode>(HotChocolate.NameString name) -> TValueNode
HotChocolate.Resolvers.IResolverContext.ArgumentOptional<T>(HotChocolate.NameString name) -> HotChocolate.Optional<T>
HotChocolate.Resolvers.IResolverContext.ArgumentValue<T>(HotChocolate.NameString name) -> T
HotChocolate.Resolvers.IResolverContext.Document.get -> HotChocolate.Language.DocumentNode!
HotChocolate.Resolvers.IResolverContext.Field.get -> HotChocolate.Types.IObjectField!
HotChocolate.Resolvers.IResolverContext.FieldSelection.get -> HotChocolate.Language.FieldNode!
HotChocolate.Resolvers.IResolverContext.GetQueryRoot<T>() -> T
HotChocolate.Resolvers.IResolverContext.GetSelections(HotChocolate.Types.ObjectType! typeContext, HotChocolate.Language.SelectionSetNode? selectionSet = null, bool allowInternals = false) -> System.Collections.Generic.IReadOnlyList<HotChocolate.Resolvers.IFieldSelection!>!
HotChocolate.Resolvers.IResolverContext.HasErrors.get -> bool
HotChocolate.Resolvers.IResolverContext.LocalContextData.get -> System.Collections.Immutable.IImmutableDictionary<string!, object?>!
HotChocolate.Resolvers.IResolverContext.LocalContextData.set -> void
HotChocolate.Resolvers.IResolverContext.ObjectType.get -> HotChocolate.Types.IObjectType!
HotChocolate.Resolvers.IResolverContext.Operation.get -> HotChocolate.Language.OperationDefinitionNode!
HotChocolate.Resolvers.IResolverContext.Parent<T>() -> T
HotChocolate.Resolvers.IResolverContext.Path.get -> HotChocolate.Path!
HotChocolate.Resolvers.IResolverContext.ReportError(HotChocolate.IError! error) -> void
HotChocolate.Resolvers.IResolverContext.ReportError(string! errorMessage) -> void
HotChocolate.Resolvers.IResolverContext.RequestAborted.get -> System.Threading.CancellationToken
HotChocolate.Resolvers.IResolverContext.Resolver<T>() -> T
HotChocolate.Resolvers.IResolverContext.ResponseName.get -> HotChocolate.NameString
HotChocolate.Resolvers.IResolverContext.RootType.get -> HotChocolate.Types.IObjectType!
HotChocolate.Resolvers.IResolverContext.Schema.get -> HotChocolate.ISchema!
HotChocolate.Resolvers.IResolverContext.ScopedContextData.get -> System.Collections.Immutable.IImmutableDictionary<string!, object?>!
HotChocolate.Resolvers.IResolverContext.ScopedContextData.set -> void
HotChocolate.Resolvers.IResolverContext.Selection.get -> HotChocolate.Resolvers.IFieldSelection!
HotChocolate.Resolvers.IResolverContext.Service(System.Type! service) -> object!
HotChocolate.Resolvers.IResolverContext.Service<T>() -> T
HotChocolate.Resolvers.IResolverContext.Services.get -> System.IServiceProvider!
HotChocolate.Resolvers.IResolverContext.Variables.get -> HotChocolate.Execution.IVariableValueCollection!
HotChocolate.Resolvers.SubscribeResolverDelegate
HotChocolate.Schema
HotChocolate.Schema.Directives.get -> HotChocolate.Types.IDirectiveCollection!
HotChocolate.Schema.DirectiveTypes.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.DirectiveType!>!
HotChocolate.Schema.GetDirectiveType(HotChocolate.NameString directiveName) -> HotChocolate.Types.DirectiveType!
HotChocolate.Schema.GetPossibleTypes(HotChocolate.Types.INamedType! abstractType) -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.ObjectType!>!
HotChocolate.Schema.GetType<T>(HotChocolate.NameString typeName) -> T
HotChocolate.Schema.MutationType.get -> HotChocolate.Types.ObjectType?
HotChocolate.Schema.Print() -> string!
HotChocolate.Schema.QueryType.get -> HotChocolate.Types.ObjectType!
HotChocolate.Schema.Schema() -> void
HotChocolate.Schema.Services.get -> System.IServiceProvider!
HotChocolate.Schema.SubscriptionType.get -> HotChocolate.Types.ObjectType?
HotChocolate.Schema.ToDocument(bool includeSpecScalars = false) -> HotChocolate.Language.DocumentNode!
HotChocolate.Schema.TryGetDirectiveType(HotChocolate.NameString directiveName, out HotChocolate.Types.DirectiveType? directiveType) -> bool
HotChocolate.Schema.TryGetRuntimeType(HotChocolate.NameString typeName, out System.Type? clrType) -> bool
HotChocolate.Schema.TryGetType<T>(HotChocolate.NameString typeName, out T type) -> bool
HotChocolate.Schema.Types.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.INamedType!>!
HotChocolate.SchemaBuilder
HotChocolate.SchemaBuilder.LazySchema
HotChocolate.SchemaBuilder.LazySchema.Completed -> System.EventHandler?
HotChocolate.SchemaBuilder.LazySchema.LazySchema() -> void
HotChocolate.SchemaBuilder.LazySchema.Schema.get -> HotChocolate.ISchema!
HotChocolate.SchemaBuilder.LazySchema.Schema.set -> void
HotChocolate.SchemaBuilder.SchemaBuilder() -> void
HotChocolate.SchemaBuilderExtensions
HotChocolate.SchemaConfigurationExtensions
HotChocolate.SchemaErrorBuilder
HotChocolate.SchemaErrorBuilder.SchemaErrorBuilder() -> void
HotChocolate.SchemaErrorBuilderExtensions
HotChocolate.SchemaException
HotChocolate.SchemaExtensions
HotChocolate.SchemaSerializer
HotChocolate.Types.AnyType
HotChocolate.Types.AnyType.AnyType() -> void
HotChocolate.Types.AnyType.AnyType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.ApplyConfigurationOn
HotChocolate.Types.ApplyConfigurationOn.Completion = 1 -> HotChocolate.Types.ApplyConfigurationOn
HotChocolate.Types.ApplyConfigurationOn.Naming = 0 -> HotChocolate.Types.ApplyConfigurationOn
HotChocolate.Types.Argument
HotChocolate.Types.Argument.Argument(HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition! definition, HotChocolate.FieldCoordinate fieldCoordinate) -> void
HotChocolate.Types.Argument.DefaultValue.get -> HotChocolate.Language.IValueNode?
HotChocolate.Types.Argument.Formatter.get -> HotChocolate.Types.IInputValueFormatter?
HotChocolate.Types.Argument.SyntaxNode.get -> HotChocolate.Language.InputValueDefinitionNode?
HotChocolate.Types.ArgumentDescriptorAttribute
HotChocolate.Types.ArgumentDescriptorAttribute.ArgumentDescriptorAttribute() -> void
HotChocolate.Types.BindFieldAttribute
HotChocolate.Types.BindFieldAttribute.BindFieldAttribute(string! name) -> void
HotChocolate.Types.BindFieldAttribute.Name.get -> string!
HotChocolate.Types.BindFieldAttribute.Replace.get -> bool
HotChocolate.Types.BindFieldAttribute.Replace.set -> void
HotChocolate.Types.BindingBehavior
HotChocolate.Types.BindingBehavior.Explicit = 1 -> HotChocolate.Types.BindingBehavior
HotChocolate.Types.BindingBehavior.Implicit = 0 -> HotChocolate.Types.BindingBehavior
HotChocolate.Types.BindMemberAttribute
HotChocolate.Types.BindMemberAttribute.BindMemberAttribute(string! name) -> void
HotChocolate.Types.BindMemberAttribute.Name.get -> string!
HotChocolate.Types.BindMemberAttribute.Replace.get -> bool
HotChocolate.Types.BindMemberAttribute.Replace.set -> void
HotChocolate.Types.BooleanType
HotChocolate.Types.BooleanType.BooleanType() -> void
HotChocolate.Types.BooleanType.BooleanType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.ByteArrayType
HotChocolate.Types.ByteArrayType.ByteArrayType() -> void
HotChocolate.Types.ByteArrayType.ByteArrayType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.ByteType
HotChocolate.Types.ByteType.ByteType() -> void
HotChocolate.Types.ByteType.ByteType(byte min, byte max) -> void
HotChocolate.Types.ByteType.ByteType(HotChocolate.NameString name, string? description = null, byte min = 0, byte max = 255, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.CostDirective
HotChocolate.Types.CostDirective.Complexity.get -> int
HotChocolate.Types.CostDirective.CostDirective() -> void
HotChocolate.Types.CostDirective.CostDirective(int complexity) -> void
HotChocolate.Types.CostDirectiveType
HotChocolate.Types.CostDirectiveType.CostDirectiveType() -> void
HotChocolate.Types.CostInterfaceFieldDescriptorExtensions
HotChocolate.Types.CostObjectFieldDescriptorExtensions
HotChocolate.Types.DataLoaderObjectFieldExtensions
HotChocolate.Types.DateTimeType
HotChocolate.Types.DateTimeType.DateTimeType() -> void
HotChocolate.Types.DateTimeType.DateTimeType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.DateType
HotChocolate.Types.DateType.DateType() -> void
HotChocolate.Types.DateType.DateType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.DecimalType
HotChocolate.Types.DecimalType.DecimalType() -> void
HotChocolate.Types.DecimalType.DecimalType(decimal min, decimal max) -> void
HotChocolate.Types.DecimalType.DecimalType(HotChocolate.NameString name, string? description = null, decimal min = -79228162514264337593543950335, decimal max = 79228162514264337593543950335, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.DefaultValueAttribute
HotChocolate.Types.DefaultValueAttribute.DefaultValueAttribute(object! value) -> void
HotChocolate.Types.DefaultValueAttribute.Value.get -> object!
HotChocolate.Types.DeferDirective
HotChocolate.Types.DeferDirective.DeferDirective(bool if, string? label = null) -> void
HotChocolate.Types.DeferDirective.If.get -> bool
HotChocolate.Types.DeferDirective.Label.get -> string?
HotChocolate.Types.DeferDirectiveType
HotChocolate.Types.DeferDirectiveType.DeferDirectiveType() -> void
HotChocolate.Types.DeferDirectiveType.Names
HotChocolate.Types.DeprecatedDirective
HotChocolate.Types.DeprecatedDirective.DeprecatedDirective() -> void
HotChocolate.Types.DeprecatedDirective.DeprecatedDirective(string? reason) -> void
HotChocolate.Types.DeprecatedDirective.Reason.get -> string?
HotChocolate.Types.DeprecatedDirectiveType
HotChocolate.Types.DeprecatedDirectiveType.DeprecatedDirectiveType() -> void
HotChocolate.Types.DeprecatedDirectiveType.Names
HotChocolate.Types.DescriptorAttribute
HotChocolate.Types.DescriptorAttribute.DescriptorAttribute() -> void
HotChocolate.Types.Descriptors.ArgumentDescriptor
HotChocolate.Types.Descriptors.ClrTypeDirectiveReference
HotChocolate.Types.Descriptors.ClrTypeDirectiveReference.ClrType.get -> System.Type!
HotChocolate.Types.Descriptors.ClrTypeDirectiveReference.ClrTypeDirectiveReference(System.Type! clrType) -> void
HotChocolate.Types.Descriptors.Convention
HotChocolate.Types.Descriptors.Convention.Convention() -> void
HotChocolate.Types.Descriptors.Convention.IsInitialized.get -> bool
HotChocolate.Types.Descriptors.Convention.MarkInitialized() -> void
HotChocolate.Types.Descriptors.Convention.Scope.get -> string?
HotChocolate.Types.Descriptors.Convention.Scope.set -> void
HotChocolate.Types.Descriptors.Convention<TDefinition>
HotChocolate.Types.Descriptors.Convention<TDefinition>.Convention() -> void
HotChocolate.Types.Descriptors.ConventionExtension
HotChocolate.Types.Descriptors.ConventionExtension.ConventionExtension() -> void
HotChocolate.Types.Descriptors.ConventionExtension<TDefinition>.ConventionExtension() -> void
HotChocolate.Types.Descriptors.DefaultNamingConventions
HotChocolate.Types.Descriptors.DefaultNamingConventions.DefaultNamingConventions() -> void
HotChocolate.Types.Descriptors.DefaultNamingConventions.DefaultNamingConventions(bool useXmlDocumentation) -> void
HotChocolate.Types.Descriptors.DefaultNamingConventions.DefaultNamingConventions(HotChocolate.Types.Descriptors.IDocumentationProvider! documentation) -> void
HotChocolate.Types.Descriptors.DefaultNamingConventions.DocumentationProvider.get -> HotChocolate.Types.Descriptors.IDocumentationProvider!
HotChocolate.Types.Descriptors.DefaultTypeInspector
HotChocolate.Types.Descriptors.DefaultTypeInspector.ApplyAttributes(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! attributeProvider) -> void
HotChocolate.Types.Descriptors.DefaultTypeInspector.ChangeNullability(HotChocolate.Internal.IExtendedType! type, params bool?[]! nullable) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.DefaultTypeInspector.ChangeNullability(HotChocolate.Internal.IExtendedType! type, System.ReadOnlySpan<bool?> nullable) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.DefaultTypeInspector.CollectNullability(HotChocolate.Internal.IExtendedType! type, System.Span<bool?> buffer, out int written) -> bool
HotChocolate.Types.Descriptors.DefaultTypeInspector.CollectNullability(HotChocolate.Internal.IExtendedType! type) -> bool?[]!
HotChocolate.Types.Descriptors.DefaultTypeInspector.CreateTypeFactory(HotChocolate.Internal.IExtendedType! type) -> HotChocolate.Internal.ITypeFactory!
HotChocolate.Types.Descriptors.DefaultTypeInspector.CreateTypeInfo(HotChocolate.Internal.IExtendedType! type) -> HotChocolate.Internal.ITypeInfo!
HotChocolate.Types.Descriptors.DefaultTypeInspector.CreateTypeInfo(System.Type! type) -> HotChocolate.Internal.ITypeInfo!
HotChocolate.Types.Descriptors.DefaultTypeInspector.DefaultTypeInspector(bool ignoreRequiredAttribute = false) -> void
HotChocolate.Types.Descriptors.DefaultTypeInspector.ExtractNamedType(System.Type! type) -> System.Type!
HotChocolate.Types.Descriptors.DefaultTypeInspector.GetArgumentType(System.Reflection.ParameterInfo! parameter, bool ignoreAttributes = false) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.DefaultTypeInspector.GetArgumentTypeRef(System.Reflection.ParameterInfo! parameter, string? scope = null, bool ignoreAttributes = false) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Descriptors.DefaultTypeInspector.GetEnumValueMember(object! value) -> System.Reflection.MemberInfo?
HotChocolate.Types.Descriptors.DefaultTypeInspector.GetType(System.Type! type, params bool?[]! nullable) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.DefaultTypeInspector.GetType(System.Type! type, System.ReadOnlySpan<bool?> nullable) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.DefaultTypeInspector.GetType(System.Type! type) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.DefaultTypeInspector.GetTypeRef(System.Type! type, HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None, string? scope = null) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Descriptors.DefaultTypeInspector.IgnoreRequiredAttribute.get -> bool
HotChocolate.Types.Descriptors.DefaultTypeInspector.IgnoreRequiredAttribute.set -> void
HotChocolate.Types.Descriptors.DefaultTypeInspector.IsSchemaType(System.Type! type) -> bool
HotChocolate.Types.Descriptors.DefaultTypeInspector.TryCreateTypeInfo(HotChocolate.Internal.IExtendedType! type, out HotChocolate.Internal.ITypeInfo? typeInfo) -> bool
HotChocolate.Types.Descriptors.DefaultTypeInspector.TryCreateTypeInfo(System.Type! type, out HotChocolate.Internal.ITypeInfo? typeInfo) -> bool
HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition
HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.ArgumentDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.DefaultValue.get -> HotChocolate.Language.IValueNode?
HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.DefaultValue.set -> void
HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.Formatters.get -> System.Collections.Generic.IList<HotChocolate.Types.IInputValueFormatter!>!
HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.NativeDefaultValue.get -> object?
HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.NativeDefaultValue.set -> void
HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.Parameter.get -> System.Reflection.ParameterInfo?
HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.Parameter.set -> void
HotChocolate.Types.Descriptors.Definitions.BindableList<T>
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.Add(T item) -> void
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.AddRange(System.Collections.Generic.IEnumerable<T>! items) -> void
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.BindableList() -> void
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.BindingBehavior.get -> HotChocolate.Types.BindingBehavior
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.BindingBehavior.set -> void
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.Clear() -> void
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.Contains(T item) -> bool
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.CopyTo(T[]! array, int arrayIndex) -> void
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.Count.get -> int
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.IndexOf(T item) -> int
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.Insert(int index, T item) -> void
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.IsReadOnly.get -> bool
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.Remove(T item) -> bool
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.RemoveAt(int index) -> void
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.this[int index].get -> T
HotChocolate.Types.Descriptors.Definitions.BindableList<T>.this[int index].set -> void
HotChocolate.Types.Descriptors.Definitions.BindableListExtensions
HotChocolate.Types.Descriptors.Definitions.DefinitionBase
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.AttributesAreApplied.get -> bool
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.AttributesAreApplied.set -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Configurations.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration!>!
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.ContextData.get -> HotChocolate.ExtensionData!
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.CopyTo(HotChocolate.Types.Descriptors.Definitions.DefinitionBase! target) -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.DefinitionBase() -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Dependencies.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.TypeDependency!>!
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Description.get -> string?
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Description.set -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.MergeInto(HotChocolate.Types.Descriptors.Definitions.DefinitionBase! target) -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Name.get -> HotChocolate.NameString
HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Name.set -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionBase<T>
HotChocolate.Types.Descriptors.Definitions.DefinitionBase<T>.CopyTo(HotChocolate.Types.Descriptors.Definitions.DefinitionBase<T!>! target) -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionBase<T>.DefinitionBase() -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionBase<T>.MergeInto(HotChocolate.Types.Descriptors.Definitions.DefinitionBase<T!>! target) -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionBase<T>.SyntaxNode.get -> T?
HotChocolate.Types.Descriptors.Definitions.DefinitionBase<T>.SyntaxNode.set -> void
HotChocolate.Types.Descriptors.Definitions.DefinitionValidationResult
HotChocolate.Types.Descriptors.Definitions.DefinitionValidationResult.HasErrors.get -> bool
HotChocolate.Types.Descriptors.Definitions.DefinitionValidationResult.IsValid.get -> bool
HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition
HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition.DirectiveArgumentDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition.Property.get -> System.Reflection.PropertyInfo?
HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition.Property.set -> void
HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition
HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition.CustomDirective.get -> object?
HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition.DirectiveDefinition(HotChocolate.Language.DirectiveNode! parsedDirective) -> void
HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition.DirectiveDefinition(object! customDirective, HotChocolate.Types.Descriptors.ITypeReference! typeReference) -> void
HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition.ParsedDirective.get -> HotChocolate.Language.DirectiveNode?
HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition.Reference.get -> HotChocolate.Types.Descriptors.IDirectiveReference!
HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition.TypeReference.get -> HotChocolate.Types.Descriptors.ITypeReference!
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.Arguments.get -> HotChocolate.Types.Descriptors.Definitions.IBindableList<HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition!>!
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.DirectiveTypeDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.IsPublic.get -> bool
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.IsPublic.set -> void
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.IsRepeatable.get -> bool
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.IsRepeatable.set -> void
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.Locations.get -> System.Collections.Generic.ISet<HotChocolate.Types.DirectiveLocation>!
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.MiddlewareComponents.get -> System.Collections.Generic.IList<HotChocolate.Resolvers.DirectiveMiddleware!>!
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.RuntimeType.get -> System.Type!
HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.RuntimeType.set -> void
HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition
HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition.EnumTypeDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition
HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.DeprecationReason.get -> string?
HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.DeprecationReason.set -> void
HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.EnumValueDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.IsDeprecated.get -> bool
HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.Member.set -> void
HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.Value.get -> object?
HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.Value.set -> void
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.CopyTo(HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase! target) -> void
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Directives.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>!
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.FieldDefinitionBase() -> void
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.GetDirectives() -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>!
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Ignore.get -> bool
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Ignore.set -> void
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.MergeInto(HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase! target) -> void
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Type.get -> HotChocolate.Types.Descriptors.ITypeReference?
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Type.set -> void
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase<T>
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase<T>.CopyTo(HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase<T!>! target) -> void
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase<T>.FieldDefinitionBase() -> void
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase<T>.MergeInto(HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase<T!>! target) -> void
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase<T>.SyntaxNode.get -> T?
HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase<T>.SyntaxNode.set -> void
HotChocolate.Types.Descriptors.Definitions.IBindableList<T>
HotChocolate.Types.Descriptors.Definitions.IBindableList<T>.BindingBehavior.get -> HotChocolate.Types.BindingBehavior
HotChocolate.Types.Descriptors.Definitions.IBindableList<T>.BindingBehavior.set -> void
HotChocolate.Types.Descriptors.Definitions.ICanBeDeprecated
HotChocolate.Types.Descriptors.Definitions.ICanBeDeprecated.IsDeprecated.get -> bool
HotChocolate.Types.Descriptors.Definitions.IComplexOutputTypeDefinition
HotChocolate.Types.Descriptors.Definitions.IComplexOutputTypeDefinition.Interfaces.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.ITypeReference!>!
HotChocolate.Types.Descriptors.Definitions.IComplexOutputTypeDefinition.KnownRuntimeTypes.get -> System.Collections.Generic.IList<System.Type!>!
HotChocolate.Types.Descriptors.Definitions.IComplexOutputTypeDefinition.Name.get -> HotChocolate.NameString
HotChocolate.Types.Descriptors.Definitions.IComplexOutputTypeDefinition.RuntimeType.get -> System.Type!
HotChocolate.Types.Descriptors.Definitions.IDefinitionFactory
HotChocolate.Types.Descriptors.Definitions.IDefinitionValidationResult
HotChocolate.Types.Descriptors.Definitions.IDefinitionValidationResult.HasErrors.get -> bool
HotChocolate.Types.Descriptors.Definitions.IDefinitionValidationResult.IsValid.get -> bool
HotChocolate.Types.Descriptors.Definitions.IHasDirectiveDefinition
HotChocolate.Types.Descriptors.Definitions.IHasDirectiveDefinition.Directives.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>!
HotChocolate.Types.Descriptors.Definitions.IHasDirectiveDefinition.GetDirectives() -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>!
HotChocolate.Types.Descriptors.Definitions.IHasExtendsType
HotChocolate.Types.Descriptors.Definitions.IHasExtendsType.ExtendsType.get -> System.Type?
HotChocolate.Types.Descriptors.Definitions.IHasIgnore
HotChocolate.Types.Descriptors.Definitions.IHasIgnore.Ignore.get -> bool
HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration
HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration.On.get -> HotChocolate.Types.ApplyConfigurationOn
HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition
HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition.InputFieldDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition
HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition.InputObjectTypeDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition
HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition.InterfaceFieldDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition
HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition.Fields.get -> HotChocolate.Types.Descriptors.Definitions.IBindableList<HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition!>!
HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition.Interfaces.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.ITypeReference!>!
HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition.InterfaceTypeDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition.KnownRuntimeTypes.get -> System.Collections.Generic.IList<System.Type!>!
HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition.ResolveAbstractType.get -> HotChocolate.Types.ResolveAbstractType?
HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition.ResolveAbstractType.set -> void
HotChocolate.Types.Descriptors.Definitions.ITypeDefinition
HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding
HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding.Name.get -> HotChocolate.NameString
HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding.ObjectFieldBinding() -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding.ObjectFieldBinding(HotChocolate.NameString name, HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType type, bool replace = true) -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding.Replace.get -> bool
HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding.Type.get -> HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType
HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType
HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType.Field = 1 -> HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType
HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType.Property = 0 -> HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.BindTo.get -> HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.BindTo.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Expression.get -> System.Linq.Expressions.Expression?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Expression.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.IsIntrospectionField.get -> bool
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Member.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.MiddlewareComponents.get -> System.Collections.Generic.IList<HotChocolate.Resolvers.FieldMiddleware!>!
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ObjectFieldDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Resolver.get -> HotChocolate.Resolvers.FieldResolverDelegate?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Resolver.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResolverMember.get -> System.Reflection.MemberInfo?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResolverMember.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResolverType.get -> System.Type?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResolverType.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResultType.get -> System.Type?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResultType.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.SourceType.get -> System.Type?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.SourceType.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.SubscribeResolver.get -> HotChocolate.Resolvers.SubscribeResolverDelegate?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.SubscribeResolver.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.CopyTo(HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition! target) -> void
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.FieldBindingType.get -> System.Type?
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.FieldBindingType.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.FieldIgnores.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding>!
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.Fields.get -> HotChocolate.Types.Descriptors.Definitions.IBindableList<HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition!>!
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.Interfaces.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.ITypeReference!>!
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.IsExtension.get -> bool
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.IsExtension.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.IsOfType.get -> HotChocolate.Types.IsOfType?
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.IsOfType.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.KnownRuntimeTypes.get -> System.Collections.Generic.IList<System.Type!>!
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.MergeInto(HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition! target) -> void
HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.ObjectTypeDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase
HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase.Arguments.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition!>!
HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase.CopyTo(HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase! target) -> void
HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase.DeprecationReason.get -> string?
HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase.DeprecationReason.set -> void
HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase.GetArguments() -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition!>!
HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase.IsDeprecated.get -> bool
HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase.MergeInto(HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase! target) -> void
HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase.OutputFieldDefinitionBase() -> void
HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition
HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition.Directives.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>!
HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition.GetDirectives() -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>!
HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition.SchemaTypeDefinition() -> void
HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>
HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>.CopyTo(HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T!>! target) -> void
HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>.Directives.get -> System.Collections.Generic.IList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>!
HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>.ExtendsType.get -> System.Type?
HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>.ExtendsType.set -> void
HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>.GetDirectives() -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>!
HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>.MergeInto(HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T!>! target) -> void
HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>.TypeDefinitionBase() -> void
HotChocolate.Types.Descriptors.Definitions.TypeDependency
HotChocolate.Types.Descriptors.Definitions.TypeDependency.Kind.get -> HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind
HotChocolate.Types.Descriptors.Definitions.TypeDependency.TypeDependency(HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind kind = HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Default) -> void
HotChocolate.Types.Descriptors.Definitions.TypeDependency.TypeReference.get -> HotChocolate.Types.Descriptors.ITypeReference!
HotChocolate.Types.Descriptors.Definitions.TypeDependency.With(HotChocolate.Types.Descriptors.ITypeReference? typeReference = null, HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind? kind = null) -> HotChocolate.Types.Descriptors.Definitions.TypeDependency!
HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind
HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Completed = 2 -> HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind
HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Default = 0 -> HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind
HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Named = 1 -> HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind
HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition
HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition.UnionTypeDefinition() -> void
HotChocolate.Types.Descriptors.DescriptorBase<T>
HotChocolate.Types.Descriptors.DescriptorBase<T>.ConfigureContextData(System.Action<HotChocolate.ExtensionData!>! configure) -> void
HotChocolate.Types.Descriptors.DescriptorBase<T>.Context.get -> HotChocolate.Types.Descriptors.IDescriptorContext!
HotChocolate.Types.Descriptors.DescriptorBase<T>.CreateDefinition() -> T!
HotChocolate.Types.Descriptors.DescriptorBase<T>.DescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext! context) -> void
HotChocolate.Types.Descriptors.DescriptorBase<T>.Extend() -> HotChocolate.Types.IDescriptorExtension<T!>!
HotChocolate.Types.Descriptors.DescriptorContext
HotChocolate.Types.Descriptors.DescriptorContext.ContextData.get -> System.Collections.Generic.IDictionary<string!, object?>!
HotChocolate.Types.Descriptors.DescriptorContext.GetConventionOrDefault<T>(System.Func<T!>! defaultConvention, string? scope = null) -> T!
HotChocolate.Types.Descriptors.DescriptorContext.Naming.get -> HotChocolate.Types.Descriptors.INamingConventions!
HotChocolate.Types.Descriptors.DescriptorContext.Options.get -> HotChocolate.Configuration.IReadOnlySchemaOptions!
HotChocolate.Types.Descriptors.DescriptorContext.SchemaCompleted -> System.EventHandler<HotChocolate.Types.Descriptors.SchemaCompletedEventArgs!>?
HotChocolate.Types.Descriptors.DescriptorContext.SchemaInterceptor.get -> HotChocolate.Configuration.SchemaInterceptor!
HotChocolate.Types.Descriptors.DescriptorContext.Services.get -> System.IServiceProvider!
HotChocolate.Types.Descriptors.DescriptorContext.TypeInspector.get -> HotChocolate.Types.Descriptors.ITypeInspector!
HotChocolate.Types.Descriptors.DescriptorContext.TypeInterceptor.get -> HotChocolate.Configuration.TypeInterceptor!
HotChocolate.Types.Descriptors.DescriptorContextConventionExtensions
HotChocolate.Types.Descriptors.DirectiveArgumentDescriptor
HotChocolate.Types.Descriptors.DirectiveTypeDescriptor
HotChocolate.Types.Descriptors.DirectiveTypeDescriptor<T>
HotChocolate.Types.Descriptors.DirectiveUtils
HotChocolate.Types.Descriptors.EnumTypeDescriptor
HotChocolate.Types.Descriptors.EnumTypeDescriptor<T>
HotChocolate.Types.Descriptors.EnumValueDescriptor
HotChocolate.Types.Descriptors.ExtendedTypeReference
HotChocolate.Types.Descriptors.ExtendedTypeReference.Equals(HotChocolate.Types.Descriptors.ExtendedTypeReference? other) -> bool
HotChocolate.Types.Descriptors.ExtendedTypeReference.ExtendedTypeReference(HotChocolate.Internal.IExtendedType! type, HotChocolate.Types.TypeContext context, string? scope = null) -> void
HotChocolate.Types.Descriptors.ExtendedTypeReference.Type.get -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.ExtendedTypeReference.With(HotChocolate.Internal.IExtendedType? type = null, HotChocolate.Optional<HotChocolate.Types.TypeContext> context = default(HotChocolate.Optional<HotChocolate.Types.TypeContext>), HotChocolate.Optional<string?> scope = default(HotChocolate.Optional<string?>)) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Descriptors.ExtendedTypeReference.WithContext(HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Descriptors.ExtendedTypeReference.WithScope(string? scope = null) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Descriptors.ExtendedTypeReference.WithType(HotChocolate.Internal.IExtendedType! type) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Descriptors.FieldDescriptorUtilities
HotChocolate.Types.Descriptors.IConvention
HotChocolate.Types.Descriptors.IConventionContext
HotChocolate.Types.Descriptors.IConventionContext.ContextData.get -> System.Collections.Generic.IDictionary<string!, object?>!
HotChocolate.Types.Descriptors.IConventionContext.DescriptorContext.get -> HotChocolate.Types.Descriptors.IDescriptorContext!
HotChocolate.Types.Descriptors.IConventionContext.Services.get -> System.IServiceProvider!
HotChocolate.Types.Descriptors.IConventionExtension
HotChocolate.Types.Descriptors.IDescriptorContext
HotChocolate.Types.Descriptors.IDescriptorContext.GetConventionOrDefault<T>(System.Func<T!>! defaultConvention, string? scope = null) -> T!
HotChocolate.Types.Descriptors.IDescriptorContext.Naming.get -> HotChocolate.Types.Descriptors.INamingConventions!
HotChocolate.Types.Descriptors.IDescriptorContext.Options.get -> HotChocolate.Configuration.IReadOnlySchemaOptions!
HotChocolate.Types.Descriptors.IDescriptorContext.SchemaCompleted -> System.EventHandler<HotChocolate.Types.Descriptors.SchemaCompletedEventArgs!>!
HotChocolate.Types.Descriptors.IDescriptorContext.SchemaInterceptor.get -> HotChocolate.Configuration.SchemaInterceptor!
HotChocolate.Types.Descriptors.IDescriptorContext.Services.get -> System.IServiceProvider!
HotChocolate.Types.Descriptors.IDescriptorContext.TypeInspector.get -> HotChocolate.Types.Descriptors.ITypeInspector!
HotChocolate.Types.Descriptors.IDescriptorContext.TypeInterceptor.get -> HotChocolate.Configuration.TypeInterceptor!
HotChocolate.Types.Descriptors.IDirectiveReference
HotChocolate.Types.Descriptors.IDocumentationProvider
HotChocolate.Types.Descriptors.IDocumentationProvider.GetDescription(System.Reflection.MemberInfo! member) -> string?
HotChocolate.Types.Descriptors.IDocumentationProvider.GetDescription(System.Reflection.ParameterInfo! parameter) -> string?
HotChocolate.Types.Descriptors.IDocumentationProvider.GetDescription(System.Type! type) -> string?
HotChocolate.Types.Descriptors.INamingConventions
HotChocolate.Types.Descriptors.INamingConventions.GetArgumentDescription(System.Reflection.ParameterInfo! parameter) -> string?
HotChocolate.Types.Descriptors.INamingConventions.GetArgumentName(System.Reflection.ParameterInfo! parameter) -> HotChocolate.NameString
HotChocolate.Types.Descriptors.INamingConventions.GetEnumValueDescription(object! value) -> string?
HotChocolate.Types.Descriptors.INamingConventions.GetEnumValueName(object! value) -> HotChocolate.NameString
HotChocolate.Types.Descriptors.INamingConventions.GetMemberDescription(System.Reflection.MemberInfo! member, HotChocolate.Types.MemberKind kind) -> string?
HotChocolate.Types.Descriptors.INamingConventions.GetMemberName(System.Reflection.MemberInfo! member, HotChocolate.Types.MemberKind kind) -> HotChocolate.NameString
HotChocolate.Types.Descriptors.INamingConventions.GetTypeDescription(System.Type! type, HotChocolate.Types.TypeKind kind) -> string?
HotChocolate.Types.Descriptors.INamingConventions.GetTypeName(System.Type! type, HotChocolate.Types.TypeKind kind) -> HotChocolate.NameString
HotChocolate.Types.Descriptors.INamingConventions.GetTypeName(System.Type! type) -> HotChocolate.NameString
HotChocolate.Types.Descriptors.INamingConventions.IsDeprecated(object! value, out string? reason) -> bool
HotChocolate.Types.Descriptors.INamingConventions.IsDeprecated(System.Reflection.MemberInfo! member, out string? reason) -> bool
HotChocolate.Types.Descriptors.InputFieldDescriptor
HotChocolate.Types.Descriptors.InputObjectTypeDescriptor
HotChocolate.Types.Descriptors.InputObjectTypeDescriptor<T>
HotChocolate.Types.Descriptors.InterfaceFieldDescriptor
HotChocolate.Types.Descriptors.InterfaceTypeDescriptor
HotChocolate.Types.Descriptors.InterfaceTypeDescriptor<T>
HotChocolate.Types.Descriptors.ITypeInspector
HotChocolate.Types.Descriptors.ITypeInspector.ApplyAttributes(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! attributeProvider) -> void
HotChocolate.Types.Descriptors.ITypeInspector.ChangeNullability(HotChocolate.Internal.IExtendedType! type, params bool?[]! nullable) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.ITypeInspector.ChangeNullability(HotChocolate.Internal.IExtendedType! type, System.ReadOnlySpan<bool?> nullable) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.ITypeInspector.CollectNullability(HotChocolate.Internal.IExtendedType! type, System.Span<bool?> buffer, out int written) -> bool
HotChocolate.Types.Descriptors.ITypeInspector.CollectNullability(HotChocolate.Internal.IExtendedType! type) -> bool?[]!
HotChocolate.Types.Descriptors.ITypeInspector.CreateTypeFactory(HotChocolate.Internal.IExtendedType! type) -> HotChocolate.Internal.ITypeFactory!
HotChocolate.Types.Descriptors.ITypeInspector.CreateTypeInfo(HotChocolate.Internal.IExtendedType! type) -> HotChocolate.Internal.ITypeInfo!
HotChocolate.Types.Descriptors.ITypeInspector.CreateTypeInfo(System.Type! type) -> HotChocolate.Internal.ITypeInfo!
HotChocolate.Types.Descriptors.ITypeInspector.ExtractNamedType(System.Type! type) -> System.Type!
HotChocolate.Types.Descriptors.ITypeInspector.GetArgumentType(System.Reflection.ParameterInfo! parameter, bool ignoreAttributes = false) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.ITypeInspector.GetArgumentTypeRef(System.Reflection.ParameterInfo! parameter, string? scope = null, bool ignoreAttributes = false) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Descriptors.ITypeInspector.GetEnumValueMember(object! value) -> System.Reflection.MemberInfo?
HotChocolate.Types.Descriptors.ITypeInspector.GetEnumValues(System.Type! enumType) -> System.Collections.Generic.IEnumerable<object!>!
HotChocolate.Types.Descriptors.ITypeInspector.GetMembers(System.Type! type, bool includeIgnored) -> System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>!
HotChocolate.Types.Descriptors.ITypeInspector.GetMembers(System.Type! type) -> System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>!
HotChocolate.Types.Descriptors.ITypeInspector.GetNodeIdMember(System.Type! type) -> System.Reflection.MemberInfo?
HotChocolate.Types.Descriptors.ITypeInspector.GetNodeResolverMethod(System.Type! nodeType, System.Type? resolverType = null) -> System.Reflection.MethodInfo?
HotChocolate.Types.Descriptors.ITypeInspector.GetResolverTypes(System.Type! type) -> System.Collections.Generic.IEnumerable<System.Type!>!
HotChocolate.Types.Descriptors.ITypeInspector.GetReturnType(System.Reflection.MemberInfo! member, bool ignoreAttributes = false) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.ITypeInspector.GetReturnTypeRef(System.Reflection.MemberInfo! member, HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None, string? scope = null, bool ignoreAttributes = false) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Descriptors.ITypeInspector.GetType(System.Type! type, params bool?[]! nullable) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.ITypeInspector.GetType(System.Type! type, System.ReadOnlySpan<bool?> nullable) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.ITypeInspector.GetType(System.Type! type) -> HotChocolate.Internal.IExtendedType!
HotChocolate.Types.Descriptors.ITypeInspector.GetTypeRef(System.Type! type, HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None, string? scope = null) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
HotChocolate.Types.Descriptors.ITypeInspector.IsMemberIgnored(System.Reflection.MemberInfo! member) -> bool
HotChocolate.Types.Descriptors.ITypeInspector.IsSchemaType(System.Type! type) -> bool
HotChocolate.Types.Descriptors.ITypeInspector.TryCreateTypeInfo(HotChocolate.Internal.IExtendedType! type, out HotChocolate.Internal.ITypeInfo? typeInfo) -> bool
HotChocolate.Types.Descriptors.ITypeInspector.TryCreateTypeInfo(System.Type! type, out HotChocolate.Internal.ITypeInfo? typeInfo) -> bool
HotChocolate.Types.Descriptors.ITypeInspector.TryGetDefaultValue(System.Reflection.ParameterInfo! parameter, out object? defaultValue) -> bool
HotChocolate.Types.Descriptors.ITypeInspector.TryGetDefaultValue(System.Reflection.PropertyInfo! property, out object? defaultValue) -> bool
HotChocolate.Types.Descriptors.ITypeReference
HotChocolate.Types.Descriptors.ITypeReference.Context.get -> HotChocolate.Types.TypeContext
HotChocolate.Types.Descriptors.ITypeReference.Scope.get -> string?
HotChocolate.Types.Descriptors.IXmlDocumentationFileResolver
HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder
HotChocolate.Types.Descriptors.LazyTypeConfigurationBuilder<T>.LazyTypeConfigurationBuilder() -> void
HotChocolate.Types.Descriptors.NameDirectiveReference
HotChocolate.Types.Descriptors.NameDirectiveReference.Name.get -> HotChocolate.NameString
HotChocolate.Types.Descriptors.NameDirectiveReference.NameDirectiveReference(HotChocolate.NameString name) -> void
HotChocolate.Types.Descriptors.ObjectFieldDescriptor
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Argument(HotChocolate.NameString argumentName, System.Action<HotChocolate.Types.IArgumentDescriptor!>! argumentDescriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.ConfigureContextData(System.Action<HotChocolate.ExtensionData!>! configure) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Deprecated() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Deprecated(string? reason) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.DeprecationReason(string? reason) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Description(string? value) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Directive<T>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.ObjectFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString fieldName) -> void
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.ObjectFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition! definition) -> void
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.ObjectFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Linq.Expressions.LambdaExpression! expression, System.Type! sourceType, System.Type? resolverType) -> void
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.ObjectFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.MemberInfo! member, System.Type! sourceType, System.Type? resolverType) -> void
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.ObjectFieldDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.MemberInfo! member, System.Type! sourceType) -> void
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Resolve(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver, System.Type! resultType) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Resolve(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Resolver(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver, System.Type! resultType) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Resolver(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.ResolveWith(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.ResolveWith<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object?>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Subscribe(HotChocolate.Resolvers.SubscribeResolverDelegate! subscribeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.SyntaxNode(HotChocolate.Language.FieldDefinitionNode? fieldDefinition) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Type(HotChocolate.Language.ITypeNode! typeNode) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Type(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Type<TOutputType>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Type<TOutputType>(TOutputType! outputType) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Use(HotChocolate.Resolvers.FieldMiddleware! middleware) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Description(string? value) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Directive<T>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.DiscoverResolvers(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition!>! fields) -> void
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.ExtendsType(System.Type! extendsType) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.ExtendsType<T>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Field(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Field<TResolver, TPropertyType>(System.Linq.Expressions.Expression<System.Func<TResolver, TPropertyType>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Field<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object!>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Fields.get -> System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.ObjectFieldDescriptor!>!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Implements(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Implements<T>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Implements<T>(T! type) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Include<TResolver>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Interface(HotChocolate.Language.NamedTypeNode! namedType) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Interface<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Interface<TInterface>(TInterface! type) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.IsOfType(HotChocolate.Types.IsOfType? isOfType) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.ObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition! definition) -> void
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.ObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! clrType) -> void
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.ObjectTypeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context) -> void
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.ResolverTypes.get -> System.Collections.Generic.ICollection<System.Type!>!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor.SyntaxNode(HotChocolate.Language.ObjectTypeDefinitionNode? objectTypeDefinition) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.Descriptors.ObjectTypeDescriptor<T>
HotChocolate.Types.Descriptors.ObjectTypeDescriptorBase<T>
HotChocolate.Types.Descriptors.ObjectTypeExtensionDescriptor<T>
HotChocolate.Types.Descriptors.ObjectTypeExtensionDescriptor<T>.ObjectTypeExtensionDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Argument(HotChocolate.NameString name, System.Action<HotChocolate.Types.IArgumentDescriptor!>! argument) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Arguments.get -> System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.ArgumentDescriptor!>!
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Deprecated() -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Deprecated(string? reason) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Description(string? description) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Directive<T>() -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Directive<T>(T! directive) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Ignore(bool ignore = true) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Name(HotChocolate.NameString name) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.OutputFieldDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext! context) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Parameters.get -> System.Collections.Generic.IReadOnlyDictionary<HotChocolate.NameString, System.Reflection.ParameterInfo!>!
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Parameters.set -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.SyntaxNode(HotChocolate.Language.FieldDefinitionNode? syntaxNode) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Type(HotChocolate.Language.ITypeNode! typeNode) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Type(System.Type! type) -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Type<TOutputType>() -> void
HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.Type<TOutputType>(TOutputType! outputType) -> void
HotChocolate.Types.Descriptors.SchemaCompletedEventArgs
HotChocolate.Types.Descriptors.SchemaTypeDescriptor
HotChocolate.Types.Descriptors.SchemaTypeReference
HotChocolate.Types.Descriptors.SchemaTypeReference.Equals(HotChocolate.Types.Descriptors.SchemaTypeReference? other) -> bool
HotChocolate.Types.Descriptors.SchemaTypeReference.SchemaTypeReference(HotChocolate.Types.ITypeSystemMember! type, HotChocolate.Types.TypeContext? context = null, string? scope = null) -> void
HotChocolate.Types.Descriptors.SchemaTypeReference.Type.get -> HotChocolate.Types.ITypeSystemMember!
HotChocolate.Types.Descriptors.SchemaTypeReference.With(HotChocolate.Optional<HotChocolate.Types.ITypeSystemMember!> type = default(HotChocolate.Optional<HotChocolate.Types.ITypeSystemMember!>), HotChocolate.Optional<HotChocolate.Types.TypeContext> context = default(HotChocolate.Optional<HotChocolate.Types.TypeContext>), HotChocolate.Optional<string?> scope = default(HotChocolate.Optional<string?>)) -> HotChocolate.Types.Descriptors.SchemaTypeReference!
HotChocolate.Types.Descriptors.SchemaTypeReference.WithContext(HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None) -> HotChocolate.Types.Descriptors.SchemaTypeReference!
HotChocolate.Types.Descriptors.SchemaTypeReference.WithScope(string? scope = null) -> HotChocolate.Types.Descriptors.SchemaTypeReference!
HotChocolate.Types.Descriptors.SchemaTypeReference.WithType(HotChocolate.Types.ITypeSystemMember! type) -> HotChocolate.Types.Descriptors.SchemaTypeReference!
HotChocolate.Types.Descriptors.SyntaxTypeReference
HotChocolate.Types.Descriptors.SyntaxTypeReference.Equals(HotChocolate.Types.Descriptors.SyntaxTypeReference? other) -> bool
HotChocolate.Types.Descriptors.SyntaxTypeReference.SyntaxTypeReference(HotChocolate.Language.ITypeNode! type, HotChocolate.Types.TypeContext context, string? scope = null) -> void
HotChocolate.Types.Descriptors.SyntaxTypeReference.Type.get -> HotChocolate.Language.ITypeNode!
HotChocolate.Types.Descriptors.SyntaxTypeReference.With(HotChocolate.Optional<HotChocolate.Language.ITypeNode!> type = default(HotChocolate.Optional<HotChocolate.Language.ITypeNode!>), HotChocolate.Optional<HotChocolate.Types.TypeContext> context = default(HotChocolate.Optional<HotChocolate.Types.TypeContext>), HotChocolate.Optional<string?> scope = default(HotChocolate.Optional<string?>)) -> HotChocolate.Types.Descriptors.SyntaxTypeReference!
HotChocolate.Types.Descriptors.SyntaxTypeReference.WithContext(HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None) -> HotChocolate.Types.Descriptors.SyntaxTypeReference!
HotChocolate.Types.Descriptors.SyntaxTypeReference.WithScope(string? scope = null) -> HotChocolate.Types.Descriptors.SyntaxTypeReference!
HotChocolate.Types.Descriptors.SyntaxTypeReference.WithType(HotChocolate.Language.ITypeNode! type) -> HotChocolate.Types.Descriptors.SyntaxTypeReference!
HotChocolate.Types.Descriptors.TypeInspectorExtensions
HotChocolate.Types.Descriptors.TypeNameHelper
HotChocolate.Types.Descriptors.TypeReference
HotChocolate.Types.Descriptors.TypeReference.Context.get -> HotChocolate.Types.TypeContext
HotChocolate.Types.Descriptors.TypeReference.IsEqual(HotChocolate.Types.Descriptors.ITypeReference! other) -> bool
HotChocolate.Types.Descriptors.TypeReference.Scope.get -> string?
HotChocolate.Types.Descriptors.TypeReference.TypeReference(HotChocolate.Types.TypeContext context, string? scope) -> void
HotChocolate.Types.Descriptors.TypeReferenceExtensions
HotChocolate.Types.Descriptors.UnionTypeDescriptor
HotChocolate.Types.Descriptors.XmlDocumentationFileResolver
HotChocolate.Types.Descriptors.XmlDocumentationFileResolver.XmlDocumentationFileResolver() -> void
HotChocolate.Types.Descriptors.XmlDocumentationProvider
HotChocolate.Types.Descriptors.XmlDocumentationProvider.GetDescription(System.Reflection.MemberInfo! member) -> string?
HotChocolate.Types.Descriptors.XmlDocumentationProvider.GetDescription(System.Reflection.ParameterInfo! parameter) -> string?
HotChocolate.Types.Descriptors.XmlDocumentationProvider.GetDescription(System.Type! type) -> string?
HotChocolate.Types.Descriptors.XmlDocumentationProvider.XmlDocumentationProvider(HotChocolate.Types.Descriptors.IXmlDocumentationFileResolver! fileResolver) -> void
HotChocolate.Types.Directive
HotChocolate.Types.Directive.GetArgument<T>(string! argumentName) -> T
HotChocolate.Types.Directive.MiddlewareComponents.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Resolvers.DirectiveMiddleware!>!
HotChocolate.Types.Directive.Name.get -> HotChocolate.NameString
HotChocolate.Types.Directive.Source.get -> object!
HotChocolate.Types.Directive.ToNode() -> HotChocolate.Language.DirectiveNode!
HotChocolate.Types.Directive.ToNode(bool removeNullArguments) -> HotChocolate.Language.DirectiveNode!
HotChocolate.Types.Directive.ToObject<T>() -> T
HotChocolate.Types.Directive.Type.get -> HotChocolate.Types.DirectiveType!
HotChocolate.Types.DirectiveCollection
HotChocolate.Types.DirectiveCollection.CompleteCollection(HotChocolate.Configuration.ITypeCompletionContext! context) -> void
HotChocolate.Types.DirectiveCollection.Contains(HotChocolate.NameString key) -> bool
HotChocolate.Types.DirectiveCollection.Count.get -> int
HotChocolate.Types.DirectiveCollection.DirectiveCollection(object! source, System.Collections.Generic.IEnumerable<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>! directiveDefinitions) -> void
HotChocolate.Types.DirectiveCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<HotChocolate.Types.IDirective!>!
HotChocolate.Types.DirectiveCollection.this[HotChocolate.NameString key].get -> System.Collections.Generic.IEnumerable<HotChocolate.Types.IDirective!>!
HotChocolate.Types.DirectiveCollectionExtensions
HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.ArgumentDefinition = 2048 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Enum = 16384 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.EnumValue = 32768 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Field = 8 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.FieldDefinition = 1024 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.FragmentDefinition = 16 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.FragmentSpread = 32 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.InlineFragment = 64 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.InputFieldDefinition = 131072 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.InputObject = 65536 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Interface = 4096 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Mutation = 2 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Object = 512 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Query = 1 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Scalar = 256 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Schema = 128 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Subscription = 4 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.Union = 8192 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocation.VariableDefinition = 262144 -> HotChocolate.Types.DirectiveLocation
HotChocolate.Types.DirectiveLocationExtensions
HotChocolate.Types.Directives
HotChocolate.Types.DirectiveType
HotChocolate.Types.DirectiveType.Arguments.get -> HotChocolate.Types.FieldCollection<HotChocolate.Types.Argument!>!
HotChocolate.Types.DirectiveType.DirectiveType() -> void
HotChocolate.Types.DirectiveType.DirectiveType(System.Action<HotChocolate.Types.IDirectiveTypeDescriptor!>! configure) -> void
HotChocolate.Types.DirectiveType.HasMiddleware.get -> bool
HotChocolate.Types.DirectiveType.IsExecutableDirective.get -> bool
HotChocolate.Types.DirectiveType.IsRepeatable.get -> bool
HotChocolate.Types.DirectiveType.IsTypeSystemDirective.get -> bool
HotChocolate.Types.DirectiveType.Locations.get -> System.Collections.Generic.ICollection<HotChocolate.Types.DirectiveLocation>!
HotChocolate.Types.DirectiveType.MiddlewareComponents.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Resolvers.DirectiveMiddleware!>!
HotChocolate.Types.DirectiveType.RuntimeType.get -> System.Type!
HotChocolate.Types.DirectiveType.SyntaxNode.get -> HotChocolate.Language.DirectiveDefinitionNode?
HotChocolate.Types.DirectiveType<TDirective>
HotChocolate.Types.DirectiveType<TDirective>.DirectiveType() -> void
HotChocolate.Types.DirectiveType<TDirective>.DirectiveType(System.Action<HotChocolate.Types.IDirectiveTypeDescriptor<TDirective!>!>! configure) -> void
HotChocolate.Types.DirectiveTypeDescriptorExtensions
HotChocolate.Types.EnumType
HotChocolate.Types.EnumType.Deserialize(object? resultValue) -> object?
HotChocolate.Types.EnumType.EnumType() -> void
HotChocolate.Types.EnumType.EnumType(System.Action<HotChocolate.Types.IEnumTypeDescriptor!>! configure) -> void
HotChocolate.Types.EnumType.IsInstanceOfType(HotChocolate.Language.IValueNode! valueSyntax) -> bool
HotChocolate.Types.EnumType.IsInstanceOfType(object? runtimeValue) -> bool
HotChocolate.Types.EnumType.NameLookup.get -> System.Collections.Generic.IReadOnlyDictionary<HotChocolate.NameString, HotChocolate.Types.IEnumValue!>!
HotChocolate.Types.EnumType.ParseLiteral(HotChocolate.Language.IValueNode! valueSyntax, bool withDefaults = true) -> object?
HotChocolate.Types.EnumType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
HotChocolate.Types.EnumType.ParseValue(object? runtimeValue) -> HotChocolate.Language.IValueNode!
HotChocolate.Types.EnumType.Serialize(object? runtimeValue) -> object?
HotChocolate.Types.EnumType.SyntaxNode.get -> HotChocolate.Language.EnumTypeDefinitionNode?
HotChocolate.Types.EnumType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
HotChocolate.Types.EnumType.TryGetRuntimeValue(HotChocolate.NameString name, out object? runtimeValue) -> bool
HotChocolate.Types.EnumType.ValueLookup.get -> System.Collections.Generic.IReadOnlyDictionary<object!, HotChocolate.Types.IEnumValue!>!
HotChocolate.Types.EnumType.Values.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.IEnumValue!>!
HotChocolate.Types.EnumType<T>
HotChocolate.Types.EnumType<T>.EnumType() -> void
HotChocolate.Types.EnumType<T>.EnumType(System.Action<HotChocolate.Types.IEnumTypeDescriptor<T>!>! configure) -> void
HotChocolate.Types.EnumType<T>.TryGetRuntimeValue(HotChocolate.NameString name, out T runtimeValue) -> bool
HotChocolate.Types.EnumTypeAttribute
HotChocolate.Types.EnumTypeAttribute.EnumTypeAttribute(string? name = null) -> void
HotChocolate.Types.EnumTypeAttribute.Name.get -> string?
HotChocolate.Types.EnumTypeAttribute.Name.set -> void
HotChocolate.Types.EnumTypeDescriptorAttribute
HotChocolate.Types.EnumTypeDescriptorAttribute.EnumTypeDescriptorAttribute() -> void
HotChocolate.Types.EnumTypeExtension
HotChocolate.Types.EnumTypeExtension.EnumTypeExtension() -> void
HotChocolate.Types.EnumTypeExtension.EnumTypeExtension(System.Action<HotChocolate.Types.IEnumTypeDescriptor!>! configure) -> void
HotChocolate.Types.EnumValue
HotChocolate.Types.EnumValue.ContextData.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object?>!
HotChocolate.Types.EnumValue.DeprecationReason.get -> string?
HotChocolate.Types.EnumValue.Description.get -> string?
HotChocolate.Types.EnumValue.Directives.get -> HotChocolate.Types.IDirectiveCollection!
HotChocolate.Types.EnumValue.EnumValue(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition! enumValueDefinition) -> void
HotChocolate.Types.EnumValue.IsDeprecated.get -> bool
HotChocolate.Types.EnumValue.Name.get -> HotChocolate.NameString
HotChocolate.Types.EnumValue.SyntaxNode.get -> HotChocolate.Language.EnumValueDefinitionNode?
HotChocolate.Types.EnumValue.Value.get -> object!
HotChocolate.Types.EnumValueDescriptorAttribute
HotChocolate.Types.EnumValueDescriptorAttribute.EnumValueDescriptorAttribute() -> void
HotChocolate.Types.ExtendObjectTypeAttribute
HotChocolate.Types.ExtendObjectTypeAttribute.ExtendObjectTypeAttribute(string? name = null) -> void
HotChocolate.Types.ExtendObjectTypeAttribute.ExtendObjectTypeAttribute(System.Type! extendsType) -> void
HotChocolate.Types.ExtendObjectTypeAttribute.ExtendsType.get -> System.Type?
HotChocolate.Types.ExtendObjectTypeAttribute.IgnoreFields.get -> string![]?
HotChocolate.Types.ExtendObjectTypeAttribute.IgnoreFields.set -> void
HotChocolate.Types.ExtendObjectTypeAttribute.IgnoreProperties.get -> string![]?
HotChocolate.Types.ExtendObjectTypeAttribute.IgnoreProperties.set -> void
HotChocolate.Types.ExtendObjectTypeAttribute.Name.get -> string?
HotChocolate.Types.ExtendObjectTypeAttribute.Name.set -> void
HotChocolate.Types.FieldBase<TType, TDefinition>
HotChocolate.Types.FieldBase<TType, TDefinition>.ContextData.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object?>!
HotChocolate.Types.FieldBase<TType, TDefinition>.Coordinate.get -> HotChocolate.FieldCoordinate
HotChocolate.Types.FieldBase<TType, TDefinition>.Coordinate.set -> void
HotChocolate.Types.FieldBase<TType, TDefinition>.DeclaringType.get -> HotChocolate.Types.ITypeSystemObject!
HotChocolate.Types.FieldBase<TType, TDefinition>.Description.get -> string?
HotChocolate.Types.FieldBase<TType, TDefinition>.Directives.get -> HotChocolate.Types.IDirectiveCollection!
HotChocolate.Types.FieldBase<TType, TDefinition>.FieldBase(TDefinition! definition, HotChocolate.FieldCoordinate fieldCoordinate) -> void
HotChocolate.Types.FieldBase<TType, TDefinition>.Name.get -> HotChocolate.NameString
HotChocolate.Types.FieldBase<TType, TDefinition>.Type.get -> TType
HotChocolate.Types.FieldCollection<T>
HotChocolate.Types.FieldCollection<T>.ContainsField(HotChocolate.NameString fieldName) -> bool
HotChocolate.Types.FieldCollection<T>.Count.get -> int
HotChocolate.Types.FieldCollection<T>.FieldCollection(System.Collections.Generic.IEnumerable<T!>! fields, bool sortByName = false) -> void
HotChocolate.Types.FieldCollection<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T!>!
HotChocolate.Types.FieldCollection<T>.IndexOfField(HotChocolate.NameString fieldName) -> int
HotChocolate.Types.FieldCollection<T>.this[int index].get -> T!
HotChocolate.Types.FieldCollection<T>.this[string! fieldName].get -> T!
HotChocolate.Types.FieldCollection<T>.TryGetField(HotChocolate.NameString fieldName, out T? field) -> bool
HotChocolate.Types.FieldCollectionExtensions
HotChocolate.Types.FloatType
HotChocolate.Types.FloatType.FloatType() -> void
HotChocolate.Types.FloatType.FloatType(double min, double max) -> void
HotChocolate.Types.FloatType.FloatType(HotChocolate.NameString name, string? description = null, double min = -1.7976931348623157E+308, double max = 1.7976931348623157E+308, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.FloatTypeBase<TRuntimeType>
HotChocolate.Types.FloatTypeBase<TRuntimeType>.FloatTypeBase(HotChocolate.NameString name, TRuntimeType min, TRuntimeType max, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.FloatTypeBase<TRuntimeType>.MaxValue.get -> TRuntimeType
HotChocolate.Types.FloatTypeBase<TRuntimeType>.MinValue.get -> TRuntimeType
HotChocolate.Types.FluentWrapperType
HotChocolate.Types.FluentWrapperType.FluentWrapperType() -> void
HotChocolate.Types.FluentWrapperType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
HotChocolate.Types.IArgumentDescriptor
HotChocolate.Types.ICompletedDependencyDescriptor
HotChocolate.Types.IComplexOutputType
HotChocolate.Types.IComplexOutputType.IsImplementing(HotChocolate.NameString typeName) -> bool
HotChocolate.Types.IDescriptor
HotChocolate.Types.IDescriptor<T>
HotChocolate.Types.IDescriptor<T>.Extend() -> HotChocolate.Types.IDescriptorExtension<T!>!
HotChocolate.Types.IDescriptorExtension
HotChocolate.Types.IDescriptorExtension.OnBeforeCompletion(System.Action<HotChocolate.Configuration.ITypeCompletionContext!, HotChocolate.Types.Descriptors.Definitions.DefinitionBase!>! configure) -> HotChocolate.Types.ICompletedDependencyDescriptor!
HotChocolate.Types.IDescriptorExtension.OnBeforeCreate(System.Action<HotChocolate.Types.Descriptors.Definitions.DefinitionBase!>! configure) -> void
HotChocolate.Types.IDescriptorExtension.OnBeforeCreate(System.Action<HotChocolate.Types.Descriptors.IDescriptorContext!, HotChocolate.Types.Descriptors.Definitions.DefinitionBase!>! configure) -> void
HotChocolate.Types.IDescriptorExtension.OnBeforeNaming(System.Action<HotChocolate.Configuration.ITypeCompletionContext!, HotChocolate.Types.Descriptors.Definitions.DefinitionBase!>! configure) -> HotChocolate.Types.INamedDependencyDescriptor!
HotChocolate.Types.IDescriptorExtension<T>
HotChocolate.Types.IDescriptorExtension<T>.OnBeforeCompletion(System.Action<HotChocolate.Configuration.ITypeCompletionContext!, T!>! configure) -> HotChocolate.Types.ICompletedDependencyDescriptor!
HotChocolate.Types.IDescriptorExtension<T>.OnBeforeCreate(System.Action<HotChocolate.Types.Descriptors.IDescriptorContext!, T!>! configure) -> void
HotChocolate.Types.IDescriptorExtension<T>.OnBeforeCreate(System.Action<T!>! configure) -> void
HotChocolate.Types.IDescriptorExtension<T>.OnBeforeNaming(System.Action<HotChocolate.Configuration.ITypeCompletionContext!, T!>! configure) -> HotChocolate.Types.INamedDependencyDescriptor!
HotChocolate.Types.IDirective
HotChocolate.Types.IDirective.Name.get -> HotChocolate.NameString
HotChocolate.Types.IDirective.ToObject<T>() -> T
HotChocolate.Types.IDirectiveArgumentDescriptor
HotChocolate.Types.IDirectiveCollection
HotChocolate.Types.IDirectiveCollection.Contains(HotChocolate.NameString key) -> bool
HotChocolate.Types.IDirectiveTypeDescriptor
HotChocolate.Types.IDirectiveTypeDescriptor<T>
HotChocolate.Types.IdType
HotChocolate.Types.IdType.IdType() -> void
HotChocolate.Types.IdType.IdType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.IEnumType
HotChocolate.Types.IEnumType.SyntaxNode.get -> HotChocolate.Language.EnumTypeDefinitionNode?
HotChocolate.Types.IEnumType.TryGetRuntimeValue(HotChocolate.NameString name, out object? runtimeValue) -> bool
HotChocolate.Types.IEnumType.Values.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.IEnumValue!>!
HotChocolate.Types.IEnumType<T>
HotChocolate.Types.IEnumType<T>.TryGetRuntimeValue(HotChocolate.NameString name, out T runtimeValue) -> bool
HotChocolate.Types.IEnumTypeDescriptor
HotChocolate.Types.IEnumTypeDescriptor<T>
HotChocolate.Types.IEnumTypeNameDependencyDescriptor
HotChocolate.Types.IEnumTypeNameDependencyDescriptor<T>
HotChocolate.Types.IEnumValue
HotChocolate.Types.IEnumValue.DeprecationReason.get -> string?
HotChocolate.Types.IEnumValue.Description.get -> string?
HotChocolate.Types.IEnumValue.IsDeprecated.get -> bool
HotChocolate.Types.IEnumValue.Name.get -> HotChocolate.NameString
HotChocolate.Types.IEnumValue.SyntaxNode.get -> HotChocolate.Language.EnumValueDefinitionNode?
HotChocolate.Types.IEnumValue.Value.get -> object!
HotChocolate.Types.IEnumValueDescriptor
HotChocolate.Types.IField
HotChocolate.Types.IField.Coordinate.get -> HotChocolate.FieldCoordinate
HotChocolate.Types.IField.DeclaringType.get -> HotChocolate.Types.ITypeSystemObject!
HotChocolate.Types.IFieldCollection<T>
HotChocolate.Types.IFieldCollection<T>.ContainsField(HotChocolate.NameString fieldName) -> bool
HotChocolate.Types.IFieldCollection<T>.IndexOfField(HotChocolate.NameString fieldName) -> int
HotChocolate.Types.IFieldCollection<T>.this[int index].get -> T!
HotChocolate.Types.IFieldCollection<T>.this[string! fieldName].get -> T!
HotChocolate.Types.IHasDescription
HotChocolate.Types.IHasDescription.Description.get -> string?
HotChocolate.Types.IHasDescriptorContext
HotChocolate.Types.IHasDirectives
HotChocolate.Types.IHasDirectives.Directives.get -> HotChocolate.Types.IDirectiveCollection!
HotChocolate.Types.IHasName
HotChocolate.Types.IHasName.Name.get -> HotChocolate.NameString
HotChocolate.Types.IHasScope
HotChocolate.Types.IHasScope.Scope.get -> string?
HotChocolate.Types.IHasSyntaxNode
HotChocolate.Types.IHasSyntaxNode.SyntaxNode.get -> HotChocolate.Language.ISyntaxNode?
HotChocolate.Types.IHasTypeIdentity
HotChocolate.Types.IHasTypeIdentity.TypeIdentity.get -> System.Type?
HotChocolate.Types.IInputField
HotChocolate.Types.IInputField.DefaultValue.get -> HotChocolate.Language.IValueNode?
HotChocolate.Types.IInputField.Formatter.get -> HotChocolate.Types.IInputValueFormatter?
HotChocolate.Types.IInputField.Type.get -> HotChocolate.Types.IInputType!
HotChocolate.Types.IInputFieldDescriptor
HotChocolate.Types.IInputObjectType
HotChocolate.Types.IInputObjectType.Fields.get -> HotChocolate.Types.IFieldCollection<HotChocolate.Types.IInputField!>!
HotChocolate.Types.IInputObjectTypeDescriptor
HotChocolate.Types.IInputObjectTypeDescriptor<T>
HotChocolate.Types.IInputObjectTypeNameDependencyDescriptor
HotChocolate.Types.IInputObjectTypeNameDependencyDescriptor<T>
HotChocolate.Types.IInputValueFormatter
HotChocolate.Types.IInputValueFormatter.OnAfterDeserialize(object? runtimeValue) -> object?
HotChocolate.Types.IInterfaceFieldDescriptor
HotChocolate.Types.IInterfaceType
HotChocolate.Types.IInterfaceType.ResolveConcreteType(HotChocolate.Resolvers.IResolverContext! context, object! resolverResult) -> HotChocolate.Types.IObjectType?
HotChocolate.Types.IInterfaceType.SyntaxNode.get -> HotChocolate.Language.InterfaceTypeDefinitionNode?
HotChocolate.Types.IInterfaceTypeDescriptor
HotChocolate.Types.IInterfaceTypeDescriptor<T>
HotChocolate.Types.IInterfaceTypeNameDependencyDescriptor
HotChocolate.Types.IInterfaceTypeNameDependencyDescriptor<T>
HotChocolate.Types.ILeafType
HotChocolate.Types.ILiteralParser
HotChocolate.Types.INamedDependencyDescriptor
HotChocolate.Types.INamedInputType
HotChocolate.Types.INamedOutputType
HotChocolate.Types.INamedType
HotChocolate.Types.INamedTypeExtension
HotChocolate.Types.INamedTypeExtension.ExtendsType.get -> System.Type?
HotChocolate.Types.INamedTypeExtension.Kind.get -> HotChocolate.Types.TypeKind
HotChocolate.Types.IncludeDirectiveType
HotChocolate.Types.IncludeDirectiveType.IncludeDirectiveType() -> void
HotChocolate.Types.InputField
HotChocolate.Types.InputField.DeclaringType.get -> HotChocolate.Types.InputObjectType!
HotChocolate.Types.InputField.DefaultValue.get -> HotChocolate.Language.IValueNode?
HotChocolate.Types.InputField.Formatter.get -> HotChocolate.Types.IInputValueFormatter?
HotChocolate.Types.InputField.GetValue(object! obj) -> object?
HotChocolate.Types.InputField.InputField(HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition! definition, HotChocolate.FieldCoordinate fieldCoordinate) -> void
HotChocolate.Types.InputField.IsOptional.get -> bool
HotChocolate.Types.InputField.Property.get -> System.Reflection.PropertyInfo?
HotChocolate.Types.InputField.SetValue(object! obj, object? value) -> void
HotChocolate.Types.InputField.SyntaxNode.get -> HotChocolate.Language.InputValueDefinitionNode?
HotChocolate.Types.InputField.TryGetValue(object! obj, out object? value) -> bool
HotChocolate.Types.InputFieldDescriptorAttribute
HotChocolate.Types.InputFieldDescriptorAttribute.InputFieldDescriptorAttribute() -> void
HotChocolate.Types.InputObjectType
HotChocolate.Types.InputObjectType.Deserialize(object? resultValue) -> object?
HotChocolate.Types.InputObjectType.Fields.get -> HotChocolate.Types.FieldCollection<HotChocolate.Types.InputField!>!
HotChocolate.Types.InputObjectType.InputObjectType() -> void
HotChocolate.Types.InputObjectType.InputObjectType(System.Action<HotChocolate.Types.IInputObjectTypeDescriptor!>! configure) -> void
HotChocolate.Types.InputObjectType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
HotChocolate.Types.InputObjectType.Serialize(object? runtimeValue) -> object?
HotChocolate.Types.InputObjectType.SyntaxNode.get -> HotChocolate.Language.InputObjectTypeDefinitionNode?
HotChocolate.Types.InputObjectType<T>
HotChocolate.Types.InputObjectType<T>.InputObjectType() -> void
HotChocolate.Types.InputObjectType<T>.InputObjectType(System.Action<HotChocolate.Types.IInputObjectTypeDescriptor<T>!>! configure) -> void
HotChocolate.Types.InputObjectTypeAttribute
HotChocolate.Types.InputObjectTypeAttribute.InputObjectTypeAttribute(string? name = null) -> void
HotChocolate.Types.InputObjectTypeAttribute.Name.get -> string?
HotChocolate.Types.InputObjectTypeAttribute.Name.set -> void
HotChocolate.Types.InputObjectTypeDescriptorAttribute
HotChocolate.Types.InputObjectTypeDescriptorAttribute.InputObjectTypeDescriptorAttribute() -> void
HotChocolate.Types.InputObjectTypeDescriptorExtensions
HotChocolate.Types.InputObjectTypeExtension
HotChocolate.Types.InputObjectTypeExtension.InputObjectTypeExtension() -> void
HotChocolate.Types.InputObjectTypeExtension.InputObjectTypeExtension(System.Action<HotChocolate.Types.IInputObjectTypeDescriptor!>! configure) -> void
HotChocolate.Types.IntegerTypeBase<TRuntimeType>
HotChocolate.Types.IntegerTypeBase<TRuntimeType>.IntegerTypeBase(HotChocolate.NameString name, TRuntimeType min, TRuntimeType max, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.IntegerTypeBase<TRuntimeType>.MaxValue.get -> TRuntimeType
HotChocolate.Types.IntegerTypeBase<TRuntimeType>.MinValue.get -> TRuntimeType
HotChocolate.Types.InterfaceField
HotChocolate.Types.InterfaceFieldDescriptorAttribute
HotChocolate.Types.InterfaceFieldDescriptorAttribute.InterfaceFieldDescriptorAttribute() -> void
HotChocolate.Types.InterfaceType
HotChocolate.Types.InterfaceType.Fields.get -> HotChocolate.Types.FieldCollection<HotChocolate.Types.InterfaceField!>!
HotChocolate.Types.InterfaceType.Implements.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.InterfaceType!>!
HotChocolate.Types.InterfaceType.InterfaceType() -> void
HotChocolate.Types.InterfaceType.InterfaceType(System.Action<HotChocolate.Types.IInterfaceTypeDescriptor!>! configure) -> void
HotChocolate.Types.InterfaceType.IsImplementing(HotChocolate.NameString interfaceTypeName) -> bool
HotChocolate.Types.InterfaceType.IsImplementing(HotChocolate.Types.IInterfaceType! interfaceType) -> bool
HotChocolate.Types.InterfaceType.IsImplementing(HotChocolate.Types.InterfaceType! interfaceType) -> bool
HotChocolate.Types.InterfaceType.ResolveConcreteType(HotChocolate.Resolvers.IResolverContext! context, object! resolverResult) -> HotChocolate.Types.ObjectType?
HotChocolate.Types.InterfaceType.SyntaxNode.get -> HotChocolate.Language.InterfaceTypeDefinitionNode?
HotChocolate.Types.InterfaceType<T>
HotChocolate.Types.InterfaceType<T>.InterfaceType() -> void
HotChocolate.Types.InterfaceType<T>.InterfaceType(System.Action<HotChocolate.Types.IInterfaceTypeDescriptor<T>!>! configure) -> void
HotChocolate.Types.InterfaceTypeAttribute
HotChocolate.Types.InterfaceTypeAttribute.InterfaceTypeAttribute(string? name = null) -> void
HotChocolate.Types.InterfaceTypeAttribute.Name.get -> string?
HotChocolate.Types.InterfaceTypeAttribute.Name.set -> void
HotChocolate.Types.InterfaceTypeDescriptorAttribute
HotChocolate.Types.InterfaceTypeDescriptorAttribute.InterfaceTypeDescriptorAttribute() -> void
HotChocolate.Types.InterfaceTypeDescriptorExtensions
HotChocolate.Types.InterfaceTypeExtension
HotChocolate.Types.InterfaceTypeExtension.InterfaceTypeExtension() -> void
HotChocolate.Types.InterfaceTypeExtension.InterfaceTypeExtension(System.Action<HotChocolate.Types.IInterfaceTypeDescriptor!>! configure) -> void
HotChocolate.Types.Introspection.__AppliedDirective
HotChocolate.Types.Introspection.__AppliedDirective.__AppliedDirective() -> void
HotChocolate.Types.Introspection.__AppliedDirective.Names
HotChocolate.Types.Introspection.__DirectiveArgument
HotChocolate.Types.Introspection.__DirectiveArgument.__DirectiveArgument() -> void
HotChocolate.Types.Introspection.__DirectiveArgument.Names
HotChocolate.Types.Introspection.IntrospectionFields
HotChocolate.Types.Introspection.IntrospectionTypes
HotChocolate.Types.IntType
HotChocolate.Types.IntType.IntType() -> void
HotChocolate.Types.IntType.IntType(HotChocolate.NameString name, string? description = null, int min = -2147483648, int max = 2147483647, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.IntType.IntType(int min, int max) -> void
HotChocolate.Types.INullableType
HotChocolate.Types.IObjectField
HotChocolate.Types.IObjectField.DeclaringType.get -> HotChocolate.Types.IObjectType!
HotChocolate.Types.IObjectField.ExecutableDirectives.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.IDirective!>!
HotChocolate.Types.IObjectField.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Types.IObjectField.Middleware.get -> HotChocolate.Resolvers.FieldDelegate!
HotChocolate.Types.IObjectField.Resolver.get -> HotChocolate.Resolvers.FieldResolverDelegate!
HotChocolate.Types.IObjectField.ResolverMember.get -> System.Reflection.MemberInfo?
HotChocolate.Types.IObjectField.SubscribeResolver.get -> HotChocolate.Resolvers.SubscribeResolverDelegate?
HotChocolate.Types.IObjectFieldDescriptor
HotChocolate.Types.IObjectFieldDescriptor.Argument(HotChocolate.NameString argumentName, System.Action<HotChocolate.Types.IArgumentDescriptor!>! argumentDescriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.ConfigureContextData(System.Action<HotChocolate.ExtensionData!>! configure) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Deprecated() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Deprecated(string? reason) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.DeprecationReason(string? reason) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Description(string? value) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Directive<T>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Ignore(bool ignore = true) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Resolve(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver, System.Type! resultType) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Resolve(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Resolver(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver, System.Type! resultType) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Resolver(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.ResolveWith(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.ResolveWith<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object?>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Subscribe(HotChocolate.Resolvers.SubscribeResolverDelegate! subscribeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.SyntaxNode(HotChocolate.Language.FieldDefinitionNode? fieldDefinition) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Type(HotChocolate.Language.ITypeNode! typeNode) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Type(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Type<TOutputType>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Type<TOutputType>(TOutputType! outputType) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectFieldDescriptor.Use(HotChocolate.Resolvers.FieldMiddleware! middleware) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectType
HotChocolate.Types.IObjectType.Fields.get -> HotChocolate.Types.IFieldCollection<HotChocolate.Types.IObjectField!>!
HotChocolate.Types.IObjectType.SyntaxNode.get -> HotChocolate.Language.ObjectTypeDefinitionNode?
HotChocolate.Types.IObjectTypeDescriptor
HotChocolate.Types.IObjectTypeDescriptor.Description(string? value) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Directive<T>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Directive<T>(T! directiveInstance) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.ExtendsType(System.Type! extendsType) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.ExtendsType<T>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Field(HotChocolate.NameString name) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Field(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Field<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object!>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Implements(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Implements<T>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Implements<T>(T! type) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Include<TResolver>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Interface(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Interface<T>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Interface<T>(T! type) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.IsOfType(HotChocolate.Types.IsOfType? isOfType) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.Name(HotChocolate.NameString value) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor.SyntaxNode(HotChocolate.Language.ObjectTypeDefinitionNode? objectTypeDefinition) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<T>
HotChocolate.Types.IObjectTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Description(string? value) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.ExtendsType(System.Type! extendsType) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<T>.ExtendsType<TExtendsType>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<T>.Field(HotChocolate.NameString name) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<T>.Field(System.Linq.Expressions.Expression<System.Func<T, object!>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<T>.Field(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<T>.Field<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object!>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<T>.Field<TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<T>.Implements(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Implements<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Implements<TInterface>(TInterface! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Include<TResolver>() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Interface(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Interface<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Interface<TInterface>(TInterface! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.IsOfType(HotChocolate.Types.IsOfType! isOfType) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
HotChocolate.Types.IObjectTypeNameDependencyDescriptor
HotChocolate.Types.IObjectTypeNameDependencyDescriptor<T>
HotChocolate.Types.IOutputField
HotChocolate.Types.IOutputField.Arguments.get -> HotChocolate.Types.IFieldCollection<HotChocolate.Types.IInputField!>!
HotChocolate.Types.IOutputField.DeclaringType.get -> HotChocolate.Types.IComplexOutputType!
HotChocolate.Types.IOutputField.DeprecationReason.get -> string?
HotChocolate.Types.IOutputField.IsDeprecated.get -> bool
HotChocolate.Types.IOutputField.IsIntrospectionField.get -> bool
HotChocolate.Types.IOutputField.Type.get -> HotChocolate.Types.IOutputType!
HotChocolate.Types.ISchemaTypeDescriptor
HotChocolate.Types.IsOfType
HotChocolate.Types.IsOfTypeFallback
HotChocolate.Types.ITypeSystemObject
HotChocolate.Types.IUnionType
HotChocolate.Types.IUnionType.ContainsType(HotChocolate.NameString typeName) -> bool
HotChocolate.Types.IUnionType.ContainsType(HotChocolate.Types.IObjectType! objectType) -> bool
HotChocolate.Types.IUnionType.ResolveConcreteType(HotChocolate.Resolvers.IResolverContext! context, object! resolverResult) -> HotChocolate.Types.IObjectType?
HotChocolate.Types.IUnionType.SyntaxNode.get -> HotChocolate.Language.UnionTypeDefinitionNode?
HotChocolate.Types.IUnionType.Types.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.IObjectType!>!
HotChocolate.Types.IUnionTypeDescriptor
HotChocolate.Types.IUnionTypeNameDependencyDescriptor
HotChocolate.Types.ListType
HotChocolate.Types.ListType.ElementType.get -> HotChocolate.Types.IType!
HotChocolate.Types.ListType.ListType(HotChocolate.Types.IType! elementType) -> void
HotChocolate.Types.LongType
HotChocolate.Types.LongType.LongType() -> void
HotChocolate.Types.LongType.LongType(HotChocolate.NameString name, string? description = null, long min = -9223372036854775808, long max = 9223372036854775807, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.LongType.LongType(long min, long max) -> void
HotChocolate.Types.MemberKind
HotChocolate.Types.MemberKind.DirectiveArgument = 4 -> HotChocolate.Types.MemberKind
HotChocolate.Types.MemberKind.Field = 0 -> HotChocolate.Types.MemberKind
HotChocolate.Types.MemberKind.InputObjectField = 3 -> HotChocolate.Types.MemberKind
HotChocolate.Types.MemberKind.InterfaceField = 1 -> HotChocolate.Types.MemberKind
HotChocolate.Types.MemberKind.ObjectField = 2 -> HotChocolate.Types.MemberKind
HotChocolate.Types.MiddlewareObjectFieldDescriptorExtensions
HotChocolate.Types.MultiplierPathString
HotChocolate.Types.MultiplierPathString.Add(HotChocolate.Types.MultiplierPathString other) -> HotChocolate.Types.MultiplierPathString
HotChocolate.Types.MultiplierPathString.Equals(HotChocolate.Types.MultiplierPathString other, System.StringComparison comparisonType) -> bool
HotChocolate.Types.MultiplierPathString.Equals(HotChocolate.Types.MultiplierPathString other) -> bool
HotChocolate.Types.MultiplierPathString.HasValue.get -> bool
HotChocolate.Types.MultiplierPathString.IsEmpty.get -> bool
HotChocolate.Types.MultiplierPathString.MultiplierPathString() -> void
HotChocolate.Types.MultiplierPathStringExtensions
HotChocolate.Types.MultiplierPathType
HotChocolate.Types.MultiplierPathType.MultiplierPathType() -> void
HotChocolate.Types.MultiplierPathType.MultiplierPathType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.NamedTypeBase<TDefinition>
HotChocolate.Types.NamedTypeBase<TDefinition>.Directives.get -> HotChocolate.Types.IDirectiveCollection!
HotChocolate.Types.NamedTypeBase<TDefinition>.NamedTypeBase() -> void
HotChocolate.Types.NamedTypeBase<TDefinition>.RuntimeType.get -> System.Type!
HotChocolate.Types.NamedTypeBase<TDefinition>.SetTypeIdentity(System.Type! typeDefinitionOrIdentity) -> void
HotChocolate.Types.NamedTypeBase<TDefinition>.TypeIdentity.get -> System.Type?
HotChocolate.Types.NamedTypeExtensionBase<TDefinition>
HotChocolate.Types.NamedTypeExtensionBase<TDefinition>.ExtendsType.get -> System.Type?
HotChocolate.Types.NamedTypeExtensionBase<TDefinition>.NamedTypeExtensionBase() -> void
HotChocolate.Types.NameType
HotChocolate.Types.NameType.NameType() -> void
HotChocolate.Types.NameType.NameType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.NodeObjectTypeExtensions
HotChocolate.Types.NonNamedType
HotChocolate.Types.NonNamedType.InnerClrType.get -> System.Type!
HotChocolate.Types.NonNamedType.InnerInputType.get -> HotChocolate.Types.IInputType?
HotChocolate.Types.NonNamedType.InnerType.get -> HotChocolate.Types.IType!
HotChocolate.Types.NonNamedType.IsInputType.get -> bool
HotChocolate.Types.NonNamedType.NonNamedType(HotChocolate.Types.IType! innerType) -> void
HotChocolate.Types.NonNamedType.RuntimeType.get -> System.Type!
HotChocolate.Types.NonNullType
HotChocolate.Types.NonNullType.NonNullType(HotChocolate.Types.IType! type) -> void
HotChocolate.Types.NonNullType.Type.get -> HotChocolate.Types.IType!
HotChocolate.Types.ObjectField
HotChocolate.Types.ObjectField.DeclaringType.get -> HotChocolate.Types.ObjectType!
HotChocolate.Types.ObjectField.ExecutableDirectives.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.IDirective!>!
HotChocolate.Types.ObjectField.Expression.get -> System.Linq.Expressions.Expression?
HotChocolate.Types.ObjectField.Member.get -> System.Reflection.MemberInfo?
HotChocolate.Types.ObjectField.Middleware.get -> HotChocolate.Resolvers.FieldDelegate!
HotChocolate.Types.ObjectField.Resolver.get -> HotChocolate.Resolvers.FieldResolverDelegate!
HotChocolate.Types.ObjectField.ResolverExpression.get -> System.Linq.Expressions.Expression?
HotChocolate.Types.ObjectField.ResolverMember.get -> System.Reflection.MemberInfo?
HotChocolate.Types.ObjectField.SubscribeResolver.get -> HotChocolate.Resolvers.SubscribeResolverDelegate?
HotChocolate.Types.ObjectFieldDescriptorAttribute
HotChocolate.Types.ObjectFieldDescriptorAttribute.ObjectFieldDescriptorAttribute() -> void
HotChocolate.Types.ObjectType
HotChocolate.Types.ObjectType.Fields.get -> HotChocolate.Types.FieldCollection<HotChocolate.Types.ObjectField!>!
HotChocolate.Types.ObjectType.Implements.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.InterfaceType!>!
HotChocolate.Types.ObjectType.IsImplementing(HotChocolate.NameString interfaceTypeName) -> bool
HotChocolate.Types.ObjectType.IsImplementing(HotChocolate.Types.IInterfaceType! interfaceType) -> bool
HotChocolate.Types.ObjectType.IsImplementing(HotChocolate.Types.InterfaceType! interfaceType) -> bool
HotChocolate.Types.ObjectType.IsOfType(HotChocolate.Resolvers.IResolverContext! context, object! resolverResult) -> bool
HotChocolate.Types.ObjectType.ObjectType() -> void
HotChocolate.Types.ObjectType.ObjectType(System.Action<HotChocolate.Types.IObjectTypeDescriptor!>! configure) -> void
HotChocolate.Types.ObjectType.SyntaxNode.get -> HotChocolate.Language.ObjectTypeDefinitionNode?
HotChocolate.Types.ObjectType<T>
HotChocolate.Types.ObjectType<T>.ObjectType() -> void
HotChocolate.Types.ObjectType<T>.ObjectType(System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>!>! configure) -> void
HotChocolate.Types.ObjectTypeAttribute
HotChocolate.Types.ObjectTypeAttribute.Name.get -> string?
HotChocolate.Types.ObjectTypeAttribute.Name.set -> void
HotChocolate.Types.ObjectTypeAttribute.ObjectTypeAttribute(string? name = null) -> void
HotChocolate.Types.ObjectTypeDescriptorAttribute
HotChocolate.Types.ObjectTypeDescriptorAttribute.ObjectTypeDescriptorAttribute() -> void
HotChocolate.Types.ObjectTypeDescriptorExtensions
HotChocolate.Types.ObjectTypeExtension
HotChocolate.Types.ObjectTypeExtension.ObjectTypeExtension() -> void
HotChocolate.Types.ObjectTypeExtension.ObjectTypeExtension(System.Action<HotChocolate.Types.IObjectTypeDescriptor!>! configure) -> void
HotChocolate.Types.ObjectTypeExtension<T>
HotChocolate.Types.ObjectTypeExtension<T>.ObjectTypeExtension() -> void
HotChocolate.Types.ObjectTypeExtension<T>.ObjectTypeExtension(System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>!>! configure) -> void
HotChocolate.Types.OperationTypeNames
HotChocolate.Types.OutputFieldBase<TDefinition>.IsDeprecated.get -> bool
HotChocolate.Types.Pagination.GetPagingProvider
HotChocolate.Types.Pagination.IPage
HotChocolate.Types.Pagination.IPage.GetTotalCountAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<int>
HotChocolate.Types.Pagination.IPage.Info.get -> HotChocolate.Types.Pagination.IPageInfo!
HotChocolate.Types.Pagination.IPage.Items.get -> System.Collections.Generic.IReadOnlyCollection<object!>!
HotChocolate.Types.Pagination.IPageInfo
HotChocolate.Types.Pagination.IPageInfo.HasNextPage.get -> bool
HotChocolate.Types.Pagination.IPageInfo.HasPreviousPage.get -> bool
HotChocolate.Types.Pagination.IPageType
HotChocolate.Types.Pagination.IPageType.ItemType.get -> HotChocolate.Types.IOutputType!
HotChocolate.Types.Pagination.IPagingContext
HotChocolate.Types.Pagination.IPagingContext.IncludeTotalCount.get -> bool
HotChocolate.Types.Pagination.IPagingContext.ResolverContext.get -> HotChocolate.Resolvers.IResolverContext!
HotChocolate.Types.Pagination.IPagingContext.Source.get -> object!
HotChocolate.Types.Pagination.IPagingHandler
HotChocolate.Types.Pagination.IPagingHandler.SliceAsync(HotChocolate.Resolvers.IResolverContext! context, object! source) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.IPage!>
HotChocolate.Types.Pagination.IPagingHandler.ValidateContext(HotChocolate.Resolvers.IResolverContext! context) -> void
HotChocolate.Types.Pagination.IPagingProvider
HotChocolate.Types.Pagination.IPagingProvider.CanHandle(HotChocolate.Internal.IExtendedType! source) -> bool
HotChocolate.Types.Pagination.IPagingProvider.CreateHandler(HotChocolate.Internal.IExtendedType! source, HotChocolate.Types.Pagination.PagingOptions options) -> HotChocolate.Types.Pagination.IPagingHandler!
HotChocolate.Types.Pagination.PagingDefaults
HotChocolate.Types.Pagination.PagingHelper
HotChocolate.Types.Pagination.PagingMiddleware
HotChocolate.Types.Pagination.PagingMiddleware.InvokeAsync(HotChocolate.Resolvers.IMiddlewareContext! context) -> System.Threading.Tasks.Task!
HotChocolate.Types.Pagination.PagingMiddleware.PagingMiddleware(HotChocolate.Resolvers.FieldDelegate! next, HotChocolate.Types.Pagination.IPagingHandler! pagingHandler) -> void
HotChocolate.Types.Pagination.PagingOptions
HotChocolate.Types.Pagination.PagingOptions.DefaultPageSize.get -> int?
HotChocolate.Types.Pagination.PagingOptions.DefaultPageSize.set -> void
HotChocolate.Types.Pagination.PagingOptions.IncludeTotalCount.get -> bool?
HotChocolate.Types.Pagination.PagingOptions.IncludeTotalCount.set -> void
HotChocolate.Types.Pagination.PagingOptions.MaxPageSize.get -> int?
HotChocolate.Types.Pagination.PagingOptions.MaxPageSize.set -> void
HotChocolate.Types.Pagination.PagingOptions.PagingOptions() -> void
HotChocolate.Types.Relay.Descriptors.INodeDescriptor
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.IdField(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.NodeResolver(HotChocolate.Types.Relay.NodeResolverDelegate<object!, object!>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.NodeResolver<TId>(HotChocolate.Types.Relay.NodeResolverDelegate<object!, TId>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.ResolveNode(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.ResolveNode(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.ResolveNode<TId>(HotChocolate.Types.Relay.NodeResolverDelegate<object!, TId>! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.ResolveNodeWith(System.Reflection.MethodInfo! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.ResolveNodeWith(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.ResolveNodeWith<TResolver>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor.ResolveNodeWith<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object?>!>! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>.NodeResolver(HotChocolate.Types.Relay.NodeResolverDelegate<TNode, TId>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>.ResolveNode(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>.ResolveNode(HotChocolate.Types.Relay.NodeResolverDelegate<TNode, TId>! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>.ResolveNodeWith(System.Reflection.MethodInfo! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>.ResolveNodeWith(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>.ResolveNodeWith<TResolver>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>.ResolveNodeWith<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object?>!>! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.IdField(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.IdField<TId>(System.Linq.Expressions.Expression<System.Func<TNode, TId>!>! propertyOrMethod) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.NodeResolver(HotChocolate.Types.Relay.NodeResolverDelegate<TNode, object!>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.NodeResolver<TId>(HotChocolate.Types.Relay.NodeResolverDelegate<TNode, TId>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.ResolveNode(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.ResolveNode<TId>(HotChocolate.Types.Relay.NodeResolverDelegate<object!, TId>! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.ResolveNodeWith(System.Reflection.MethodInfo! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.ResolveNodeWith(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.ResolveNodeWith<TResolver>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>.ResolveNodeWith<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object?>!>! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDefinition
HotChocolate.Types.Relay.Descriptors.NodeDefinition.IdMember.get -> System.Reflection.MemberInfo?
HotChocolate.Types.Relay.Descriptors.NodeDefinition.IdMember.set -> void
HotChocolate.Types.Relay.Descriptors.NodeDefinition.NodeDefinition() -> void
HotChocolate.Types.Relay.Descriptors.NodeDefinition.NodeType.get -> System.Type?
HotChocolate.Types.Relay.Descriptors.NodeDefinition.NodeType.set -> void
HotChocolate.Types.Relay.Descriptors.NodeDefinition.Resolver.get -> HotChocolate.Resolvers.FieldResolverDelegate?
HotChocolate.Types.Relay.Descriptors.NodeDefinition.Resolver.set -> void
HotChocolate.Types.Relay.Descriptors.NodeDescriptor
HotChocolate.Types.Relay.Descriptors.NodeDescriptor.IdField(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor.NodeDescriptor(HotChocolate.Types.IObjectTypeDescriptor! descriptor, System.Type? nodeType = null) -> void
HotChocolate.Types.Relay.Descriptors.NodeDescriptor.NodeResolver(HotChocolate.Types.Relay.NodeResolverDelegate<object!, object!>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor.NodeResolver<TId>(HotChocolate.Types.Relay.NodeResolverDelegate<object!, TId>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor.ResolveNode(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor.ResolveNodeWith(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor.ResolveNodeWith<TResolver>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode, TId>
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode, TId>.NodeDescriptor(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Relay.Descriptors.NodeDefinition! definition, System.Func<HotChocolate.Types.IObjectFieldDescriptor!>! configureNodeField) -> void
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode, TId>.NodeResolver(HotChocolate.Types.Relay.NodeResolverDelegate<TNode, TId>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode, TId>.ResolveNode(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode, TId>.ResolveNode(HotChocolate.Types.Relay.NodeResolverDelegate<TNode, TId>! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode, TId>.ResolveNodeWith(System.Reflection.MethodInfo! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode, TId>.ResolveNodeWith(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode, TId>.ResolveNodeWith<TResolver>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode, TId>.ResolveNodeWith<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object?>!>! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode>
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode>.IdField(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode>!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode>.IdField<TId>(System.Linq.Expressions.Expression<System.Func<TNode, TId>!>! propertyOrMethod) -> HotChocolate.Types.Relay.Descriptors.INodeDescriptor<TNode, TId>!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode>.NodeDescriptor(HotChocolate.Types.IObjectTypeDescriptor<TNode>! typeDescriptor) -> void
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode>.NodeResolver(HotChocolate.Types.Relay.NodeResolverDelegate<TNode, object!>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode>.NodeResolver<TId>(HotChocolate.Types.Relay.NodeResolverDelegate<TNode, TId>! nodeResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode>.ResolveNodeWith(System.Type! type) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode>.ResolveNodeWith<TResolver>() -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase
HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.MiddlewareHelper
HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.NodeDescriptorBase(HotChocolate.Types.Descriptors.IDescriptorContext! context) -> void
HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.ResolveNode<TId>(HotChocolate.Types.Relay.NodeResolverDelegate<object!, TId>! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.ResolveNodeWith(System.Reflection.MethodInfo! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.ResolveNodeWith<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object?>!>! method) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.Relay.IDAttribute
HotChocolate.Types.Relay.IDAttribute.IDAttribute(string? typeName = null) -> void
HotChocolate.Types.Relay.IDAttribute.TypeName.get -> HotChocolate.NameString
HotChocolate.Types.Relay.IdMiddleware
HotChocolate.Types.Relay.IdSerializationException
HotChocolate.Types.Relay.IdSerializer
HotChocolate.Types.Relay.IdSerializer.IdSerializer(bool includeSchemaName = false) -> void
HotChocolate.Types.Relay.IdValue
HotChocolate.Types.Relay.IdValue.IdValue() -> void
HotChocolate.Types.Relay.IdValue.SchemaName.get -> HotChocolate.NameString
HotChocolate.Types.Relay.IdValue.TypeName.get -> HotChocolate.NameString
HotChocolate.Types.Relay.IIdSerializer
HotChocolate.Types.Relay.IIdSerializer.Deserialize(string! serializedId) -> HotChocolate.Types.Relay.IdValue
HotChocolate.Types.Relay.IIdSerializer.Serialize<T>(HotChocolate.NameString schemaName, HotChocolate.NameString typeName, T id) -> string!
HotChocolate.Types.Relay.INode
HotChocolate.Types.Relay.INodeResolver
HotChocolate.Types.Relay.NodeAttribute
HotChocolate.Types.Relay.NodeAttribute.IdField.get -> string?
HotChocolate.Types.Relay.NodeAttribute.IdField.set -> void
HotChocolate.Types.Relay.NodeAttribute.NodeAttribute() -> void
HotChocolate.Types.Relay.NodeAttribute.NodeResolver.get -> string?
HotChocolate.Types.Relay.NodeAttribute.NodeResolver.set -> void
HotChocolate.Types.Relay.NodeAttribute.NodeResolverType.get -> System.Type?
HotChocolate.Types.Relay.NodeAttribute.NodeResolverType.set -> void
HotChocolate.Types.Relay.NodeResolverAttribute
HotChocolate.Types.Relay.NodeResolverAttribute.NodeResolverAttribute() -> void
HotChocolate.Types.Relay.NodeResolverDelegate<TNode, TId>
HotChocolate.Types.Relay.NodeResolverDelegate<TNode>
HotChocolate.Types.Relay.NodeType
HotChocolate.Types.Relay.NodeType.Names
HotChocolate.Types.Relay.NodeType.NodeType() -> void
HotChocolate.Types.Relay.RelayOptions
HotChocolate.Types.Relay.RelayOptions.AddQueryFieldToMutationPayloads.get -> bool
HotChocolate.Types.Relay.RelayOptions.AddQueryFieldToMutationPayloads.set -> void
HotChocolate.Types.Relay.RelayOptions.QueryFieldName.get -> HotChocolate.NameString?
HotChocolate.Types.Relay.RelayOptions.QueryFieldName.set -> void
HotChocolate.Types.Relay.RelayOptions.RelayOptions() -> void
HotChocolate.Types.RelayIdFieldExtensions
HotChocolate.Types.ResolveAbstractType
HotChocolate.Types.ResolveObjectFieldDescriptorExtensions
HotChocolate.Types.ResolverObjectFieldDescriptorExtensions
HotChocolate.Types.ScalarNames
HotChocolate.Types.Scalars
HotChocolate.Types.ScalarType
HotChocolate.Types.ScalarType.Bind.get -> HotChocolate.Types.BindingBehavior
HotChocolate.Types.ScalarType.Directives.get -> HotChocolate.Types.IDirectiveCollection!
HotChocolate.Types.ScalarType.IsAssignableFrom(HotChocolate.Types.INamedType! type) -> bool
HotChocolate.Types.ScalarType.Kind.get -> HotChocolate.Types.TypeKind
HotChocolate.Types.ScalarType.ScalarType(HotChocolate.NameString name, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.ScalarType.SpecifiedBy.get -> System.Uri?
HotChocolate.Types.ScalarType.SpecifiedBy.set -> void
HotChocolate.Types.ScalarType.SyntaxNode.get -> HotChocolate.Language.ScalarTypeDefinitionNode?
HotChocolate.Types.ScalarType.TryConvertSerialized<T>(object! serialized, HotChocolate.Types.ValueKind expectedKind, out T value) -> bool
HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>
HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.ScalarType(HotChocolate.NameString name, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.ScalarType<TRuntimeType>
HotChocolate.Types.ScalarType<TRuntimeType>.ScalarType(HotChocolate.NameString name, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.ScopedServiceObjectFieldDescriptorExtensions
HotChocolate.Types.SerializationException
HotChocolate.Types.SerializationException.Path.get -> HotChocolate.Path?
HotChocolate.Types.SerializationException.SerializationException(HotChocolate.IError! error, HotChocolate.Types.IType! type, HotChocolate.Path? path = null) -> void
HotChocolate.Types.SerializationException.SerializationException(string! message, HotChocolate.Types.IType! type, HotChocolate.Path? path = null) -> void
HotChocolate.Types.SerializationException.Type.get -> HotChocolate.Types.IType!
HotChocolate.Types.ShortType
HotChocolate.Types.ShortType.ShortType() -> void
HotChocolate.Types.ShortType.ShortType(HotChocolate.NameString name, string? description = null, short min = -32768, short max = 32767, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.ShortType.ShortType(short min, short max) -> void
HotChocolate.Types.SkipDirectiveType
HotChocolate.Types.SkipDirectiveType.SkipDirectiveType() -> void
HotChocolate.Types.SpecifiedByDirective
HotChocolate.Types.SpecifiedByDirective.SpecifiedByDirective(string! url) -> void
HotChocolate.Types.SpecifiedByDirective.Url.get -> string!
HotChocolate.Types.SpecifiedByDirectiveType
HotChocolate.Types.SpecifiedByDirectiveType.Names
HotChocolate.Types.SpecifiedByDirectiveType.SpecifiedByDirectiveType() -> void
HotChocolate.Types.StreamDirectiveType
HotChocolate.Types.StreamDirectiveType.Names
HotChocolate.Types.StreamDirectiveType.StreamDirectiveType() -> void
HotChocolate.Types.StringType
HotChocolate.Types.StringType.StringType() -> void
HotChocolate.Types.StringType.StringType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.SubscribeAndResolveAttribute
HotChocolate.Types.SubscribeAndResolveAttribute.SubscribeAndResolveAttribute() -> void
HotChocolate.Types.SubscribeAttribute
HotChocolate.Types.SubscribeAttribute.MessageType.get -> System.Type?
HotChocolate.Types.SubscribeAttribute.MessageType.set -> void
HotChocolate.Types.SubscribeAttribute.SubscribeAttribute() -> void
HotChocolate.Types.SubscribeAttribute.With.get -> string?
HotChocolate.Types.SubscribeAttribute.With.set -> void
HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions
HotChocolate.Types.TimeSpanFormat
HotChocolate.Types.TimeSpanFormat.DotNet = 1 -> HotChocolate.Types.TimeSpanFormat
HotChocolate.Types.TimeSpanFormat.Iso8601 = 0 -> HotChocolate.Types.TimeSpanFormat
HotChocolate.Types.TimeSpanType
HotChocolate.Types.TimeSpanType.TimeSpanType() -> void
HotChocolate.Types.TimeSpanType.TimeSpanType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.TimeSpanFormat format = HotChocolate.Types.TimeSpanFormat.Iso8601, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.TimeSpanType.TimeSpanType(HotChocolate.Types.TimeSpanFormat format = HotChocolate.Types.TimeSpanFormat.Iso8601, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Implicit) -> void
HotChocolate.Types.TopicAttribute
HotChocolate.Types.TopicAttribute.Name.get -> string?
HotChocolate.Types.TopicAttribute.TopicAttribute(string? name = null) -> void
HotChocolate.Types.TypeContext
HotChocolate.Types.TypeContext.Input = 4 -> HotChocolate.Types.TypeContext
HotChocolate.Types.TypeContext.None = 0 -> HotChocolate.Types.TypeContext
HotChocolate.Types.TypeContext.Output = 2 -> HotChocolate.Types.TypeContext
HotChocolate.Types.TypeExtensions
HotChocolate.Types.TypeInitializationException
HotChocolate.Types.TypeInitializationException.TypeInitializationException() -> void
HotChocolate.Types.TypeNameExtensions
HotChocolate.Types.TypeSystemObjectBase
HotChocolate.Types.TypeSystemObjectBase.Description.get -> string?
HotChocolate.Types.TypeSystemObjectBase.Description.set -> void
HotChocolate.Types.TypeSystemObjectBase.IsCompleted.get -> bool
HotChocolate.Types.TypeSystemObjectBase.IsInitialized.get -> bool
HotChocolate.Types.TypeSystemObjectBase.IsNamed.get -> bool
HotChocolate.Types.TypeSystemObjectBase.MarkCompleted() -> void
HotChocolate.Types.TypeSystemObjectBase.MarkFinalized() -> void
HotChocolate.Types.TypeSystemObjectBase.MarkInitialized() -> void
HotChocolate.Types.TypeSystemObjectBase.MarkNamed() -> void
HotChocolate.Types.TypeSystemObjectBase.Name.get -> HotChocolate.NameString
HotChocolate.Types.TypeSystemObjectBase.Name.set -> void
HotChocolate.Types.TypeSystemObjectBase.Scope.get -> string?
HotChocolate.Types.TypeSystemObjectBase.Scope.set -> void
HotChocolate.Types.TypeSystemObjectBase.TypeSystemObjectBase() -> void
HotChocolate.Types.TypeSystemObjectBase<TDefinition>
HotChocolate.Types.TypeSystemObjectBase<TDefinition>.AssertMutable() -> void
HotChocolate.Types.TypeSystemObjectBase<TDefinition>.TypeSystemObjectBase() -> void
HotChocolate.Types.TypeVisualizer
HotChocolate.Types.UnionType
HotChocolate.Types.UnionType.ContainsType(HotChocolate.NameString typeName) -> bool
HotChocolate.Types.UnionType.ContainsType(HotChocolate.Types.ObjectType! objectType) -> bool
HotChocolate.Types.UnionType.ResolveConcreteType(HotChocolate.Resolvers.IResolverContext! context, object! resolverResult) -> HotChocolate.Types.ObjectType?
HotChocolate.Types.UnionType.SyntaxNode.get -> HotChocolate.Language.UnionTypeDefinitionNode?
HotChocolate.Types.UnionType.Types.get -> System.Collections.Generic.IReadOnlyDictionary<HotChocolate.NameString, HotChocolate.Types.ObjectType!>!
HotChocolate.Types.UnionType.UnionType() -> void
HotChocolate.Types.UnionType.UnionType(System.Action<HotChocolate.Types.IUnionTypeDescriptor!>! configure) -> void
HotChocolate.Types.UnionType<T>
HotChocolate.Types.UnionType<T>.UnionType() -> void
HotChocolate.Types.UnionType<T>.UnionType(System.Action<HotChocolate.Types.IUnionTypeDescriptor!>! configure) -> void
HotChocolate.Types.UnionTypeAttribute
HotChocolate.Types.UnionTypeAttribute.Name.get -> string?
HotChocolate.Types.UnionTypeAttribute.Name.set -> void
HotChocolate.Types.UnionTypeAttribute.UnionTypeAttribute(string? name = null) -> void
HotChocolate.Types.UnionTypeDescriptorAttribute
HotChocolate.Types.UnionTypeDescriptorAttribute.UnionTypeDescriptorAttribute() -> void
HotChocolate.Types.UnionTypeExtension
HotChocolate.Types.UnionTypeExtension.UnionTypeExtension() -> void
HotChocolate.Types.UnionTypeExtension.UnionTypeExtension(System.Action<HotChocolate.Types.IUnionTypeDescriptor!>! configure) -> void
HotChocolate.Types.UrlType
HotChocolate.Types.UrlType.UrlType() -> void
HotChocolate.Types.UrlType.UrlType(HotChocolate.NameString name, string? description = null, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Types.UseDataLoaderAttribute
HotChocolate.Types.UseDataLoaderAttribute.UseDataLoaderAttribute(System.Type! dataLoaderType) -> void
HotChocolate.Types.UuidType
HotChocolate.Types.UuidType.UuidType() -> void
HotChocolate.Types.UuidType.UuidType(char defaultFormat = '\0', bool enforceFormat = false) -> void
HotChocolate.Types.UuidType.UuidType(HotChocolate.NameString name, string? description = null, char defaultFormat = '\0', bool enforceFormat = false, HotChocolate.Types.BindingBehavior bind = HotChocolate.Types.BindingBehavior.Explicit) -> void
HotChocolate.Utilities.AstUtilities
HotChocolate.Utilities.ChangeType
HotChocolate.Utilities.ChangeType<TFrom, TTo>
HotChocolate.Utilities.ChangeTypeProvider
HotChocolate.Utilities.ConverterContext
HotChocolate.Utilities.ConverterContext.ConverterContext() -> void
HotChocolate.Utilities.DefaultTypeConverter
HotChocolate.Utilities.DefaultTypeConverter.Convert(System.Type! from, System.Type! to, object? source) -> object?
HotChocolate.Utilities.DefaultTypeConverter.DefaultTypeConverter(System.Collections.Generic.IEnumerable<HotChocolate.Utilities.IChangeTypeProvider!>? providers = null) -> void
HotChocolate.Utilities.DefaultTypeConverter.TryConvert(System.Type! from, System.Type! to, object? source, out object? converted) -> bool
HotChocolate.Utilities.DictionaryToObjectConverter
HotChocolate.Utilities.DictionaryVisitor<TContext>
HotChocolate.Utilities.DictionaryVisitor<TContext>.DictionaryVisitor() -> void
HotChocolate.Utilities.IChangeTypeProvider
HotChocolate.Utilities.IChangeTypeProvider.TryCreateConverter(System.Type! source, System.Type! target, HotChocolate.Utilities.ChangeTypeProvider! root, out HotChocolate.Utilities.ChangeType? converter) -> bool
HotChocolate.Utilities.ITypeConverter
HotChocolate.Utilities.ITypeConverter.Convert(System.Type! from, System.Type! to, object? source) -> object?
HotChocolate.Utilities.ITypeConverter.TryConvert(System.Type! from, System.Type! to, object? source, out object? converted) -> bool
HotChocolate.Utilities.NullableTypeConverter
HotChocolate.Utilities.NullableTypeConverter.NullableTypeConverter() -> void
HotChocolate.Utilities.NullableTypeConverter.TryCreateConverter(System.Type! source, System.Type! target, HotChocolate.Utilities.ChangeTypeProvider! root, out HotChocolate.Utilities.ChangeType? converter) -> bool
HotChocolate.Utilities.ObjectValueToDictionaryConverter
HotChocolate.Utilities.ObjectValueToDictionaryConverter.ObjectValueToDictionaryConverter() -> void
HotChocolate.Utilities.ReflectionUtils
HotChocolate.Utilities.TypeConverterExtensions
HotChocolate.Utilities.TypeConverterServiceProviderExtensions
override HotChocolate.Configuration.DelegateSchemaInterceptor.OnAfterCreate(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.ISchema! schema) -> void
override HotChocolate.Configuration.DelegateSchemaInterceptor.OnBeforeCreate(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.ISchemaBuilder! schemaBuilder) -> void
override HotChocolate.Configuration.DelegateSchemaInterceptor.OnError(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Exception! exception) -> void
override HotChocolate.Internal.ExtendedTypeId.Equals(object? obj) -> bool
override HotChocolate.Internal.ExtendedTypeId.GetHashCode() -> int
override HotChocolate.Internal.TypeComponent.GetHashCode() -> int
override HotChocolate.Resolvers.FieldMember.Equals(object? obj) -> bool
override HotChocolate.Resolvers.FieldMember.GetHashCode() -> int
override HotChocolate.Resolvers.FieldMember.ToString() -> string!
override HotChocolate.Resolvers.FieldReferenceBase.GetHashCode() -> int
override HotChocolate.Resolvers.FieldResolver.GetHashCode() -> int
override HotChocolate.Schema.ToString() -> string!
override HotChocolate.Types.AnyType.IsInstanceOfType(HotChocolate.Language.IValueNode! literal) -> bool
override HotChocolate.Types.AnyType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
override HotChocolate.Types.AnyType.ParseLiteral(HotChocolate.Language.IValueNode! literal, bool withDefaults = true) -> object?
override HotChocolate.Types.AnyType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.AnyType.ParseValue(object? value) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.AnyType.RuntimeType.get -> System.Type!
override HotChocolate.Types.AnyType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.AnyType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.Argument.OnCompleteField(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition! definition) -> void
override HotChocolate.Types.BindFieldAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Types.BindMemberAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Types.BooleanType.ParseLiteral(HotChocolate.Language.BooleanValueNode! valueSyntax) -> bool
override HotChocolate.Types.BooleanType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.BooleanType.ParseValue(bool runtimeValue) -> HotChocolate.Language.BooleanValueNode!
override HotChocolate.Types.ByteArrayType.ParseLiteral(HotChocolate.Language.StringValueNode! valueSyntax) -> byte[]!
override HotChocolate.Types.ByteArrayType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.ByteArrayType.ParseValue(byte[]! runtimeValue) -> HotChocolate.Language.StringValueNode!
override HotChocolate.Types.ByteArrayType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.ByteArrayType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.ByteType.ParseLiteral(HotChocolate.Language.IntValueNode! valueSyntax) -> byte
override HotChocolate.Types.ByteType.ParseValue(byte runtimeValue) -> HotChocolate.Language.IntValueNode!
override HotChocolate.Types.DateTimeType.ParseLiteral(HotChocolate.Language.StringValueNode! valueSyntax) -> System.DateTimeOffset
override HotChocolate.Types.DateTimeType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.DateTimeType.ParseValue(System.DateTimeOffset runtimeValue) -> HotChocolate.Language.StringValueNode!
override HotChocolate.Types.DateTimeType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.DateTimeType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.DateType.ParseLiteral(HotChocolate.Language.StringValueNode! valueSyntax) -> System.DateTime
override HotChocolate.Types.DateType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.DateType.ParseValue(System.DateTime runtimeValue) -> HotChocolate.Language.StringValueNode!
override HotChocolate.Types.DateType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.DateType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.DecimalType.ParseLiteral(HotChocolate.Language.IFloatValueLiteral! valueSyntax) -> decimal
override HotChocolate.Types.DecimalType.ParseValue(decimal runtimeValue) -> HotChocolate.Language.FloatValueNode!
override HotChocolate.Types.DeferDirectiveType.Configure(HotChocolate.Types.IDirectiveTypeDescriptor<HotChocolate.Types.DeferDirective!>! descriptor) -> void
override HotChocolate.Types.Descriptors.Convention<TDefinition>.Complete(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
override HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.RuntimeType.get -> System.Type!
override HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.RuntimeType.set -> void
override HotChocolate.Types.Descriptors.ExtendedTypeReference.Equals(HotChocolate.Types.Descriptors.ITypeReference? other) -> bool
override HotChocolate.Types.Descriptors.ExtendedTypeReference.Equals(object? obj) -> bool
override HotChocolate.Types.Descriptors.ExtendedTypeReference.GetHashCode() -> int
override HotChocolate.Types.Descriptors.ExtendedTypeReference.ToString() -> string!
override HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition!
override HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Definition.set -> void
override HotChocolate.Types.Descriptors.ObjectFieldDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition! definition) -> void
override HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Definition.get -> HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition!
override HotChocolate.Types.Descriptors.ObjectTypeDescriptor.Definition.set -> void
override HotChocolate.Types.Descriptors.ObjectTypeDescriptor.OnCreateDefinition(HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition! definition) -> void
override HotChocolate.Types.Descriptors.OutputFieldDescriptorBase<TDefinition>.OnCreateDefinition(TDefinition! definition) -> void
override HotChocolate.Types.Descriptors.SchemaTypeReference.Equals(HotChocolate.Types.Descriptors.ITypeReference? other) -> bool
override HotChocolate.Types.Descriptors.SchemaTypeReference.Equals(object? obj) -> bool
override HotChocolate.Types.Descriptors.SchemaTypeReference.GetHashCode() -> int
override HotChocolate.Types.Descriptors.SchemaTypeReference.ToString() -> string!
override HotChocolate.Types.Descriptors.SyntaxTypeReference.Equals(HotChocolate.Types.Descriptors.ITypeReference? other) -> bool
override HotChocolate.Types.Descriptors.SyntaxTypeReference.Equals(object? obj) -> bool
override HotChocolate.Types.Descriptors.SyntaxTypeReference.GetHashCode() -> int
override HotChocolate.Types.Descriptors.SyntaxTypeReference.ToString() -> string!
override HotChocolate.Types.Descriptors.TypeReference.Equals(object? obj) -> bool
override HotChocolate.Types.Descriptors.TypeReference.GetHashCode() -> int
override HotChocolate.Types.DirectiveType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition!
override HotChocolate.Types.DirectiveType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition! definition) -> void
override HotChocolate.Types.DirectiveType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition! definition) -> void
override HotChocolate.Types.DirectiveType<TDirective>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition!
override HotChocolate.Types.EnumType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition!
override HotChocolate.Types.EnumType.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.EnumType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition! definition) -> void
override HotChocolate.Types.EnumType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition! definition) -> void
override HotChocolate.Types.EnumType<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition!
override HotChocolate.Types.EnumTypeAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IEnumTypeDescriptor! descriptor, System.Type! type) -> void
override HotChocolate.Types.EnumTypeExtension.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition!
override HotChocolate.Types.EnumTypeExtension.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.EnumTypeExtension.Merge(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.INamedType! type) -> void
override HotChocolate.Types.EnumTypeExtension.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition! definition) -> void
override HotChocolate.Types.ExtendObjectTypeAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectTypeDescriptor! descriptor, System.Type! type) -> void
override HotChocolate.Types.FloatType.ParseLiteral(HotChocolate.Language.IFloatValueLiteral! valueSyntax) -> double
override HotChocolate.Types.FloatType.ParseValue(double runtimeValue) -> HotChocolate.Language.FloatValueNode!
override HotChocolate.Types.FloatTypeBase<TRuntimeType>.IsInstanceOfType(HotChocolate.Language.IValueNode! valueSyntax) -> bool
override HotChocolate.Types.FloatTypeBase<TRuntimeType>.ParseLiteral(HotChocolate.Language.IValueNode! valueSyntax, bool withDefaults = true) -> object?
override HotChocolate.Types.FloatTypeBase<TRuntimeType>.ParseValue(object? runtimeValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.FloatTypeBase<TRuntimeType>.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.FloatTypeBase<TRuntimeType>.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.IdType.IsInstanceOfType(HotChocolate.Language.IValueNode! literal) -> bool
override HotChocolate.Types.IdType.ParseLiteral(HotChocolate.Language.IValueNode! literal, bool withDefaults = true) -> object?
override HotChocolate.Types.IdType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.IdType.ParseValue(object? runtimeValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.IdType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.IdType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.InputField.OnCompleteField(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition! definition) -> void
override HotChocolate.Types.InputField.RuntimeType.get -> System.Type!
override HotChocolate.Types.InputObjectType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition!
override HotChocolate.Types.InputObjectType.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.InputObjectType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Types.InputObjectType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Types.InputObjectType<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition!
override HotChocolate.Types.InputObjectTypeAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IInputObjectTypeDescriptor! descriptor, System.Type! type) -> void
override HotChocolate.Types.InputObjectTypeExtension.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition!
override HotChocolate.Types.InputObjectTypeExtension.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.InputObjectTypeExtension.Merge(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.INamedType! type) -> void
override HotChocolate.Types.InputObjectTypeExtension.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition) -> void
override HotChocolate.Types.IntegerTypeBase<TRuntimeType>.IsInstanceOfType(HotChocolate.Language.IntValueNode! valueSyntax) -> bool
override HotChocolate.Types.IntegerTypeBase<TRuntimeType>.IsInstanceOfType(TRuntimeType runtimeValue) -> bool
override HotChocolate.Types.IntegerTypeBase<TRuntimeType>.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.IntegerTypeBase<TRuntimeType>.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.InterfaceType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition!
override HotChocolate.Types.InterfaceType.IsAssignableFrom(HotChocolate.Types.INamedType! namedType) -> bool
override HotChocolate.Types.InterfaceType.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.InterfaceType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition! definition) -> void
override HotChocolate.Types.InterfaceType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition! definition) -> void
override HotChocolate.Types.InterfaceType<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition!
override HotChocolate.Types.InterfaceTypeAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IInterfaceTypeDescriptor! descriptor, System.Type! type) -> void
override HotChocolate.Types.InterfaceTypeExtension.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition!
override HotChocolate.Types.InterfaceTypeExtension.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.InterfaceTypeExtension.Merge(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.INamedType! type) -> void
override HotChocolate.Types.InterfaceTypeExtension.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition! definition) -> void
override HotChocolate.Types.Introspection.__AppliedDirective.Configure(HotChocolate.Types.IObjectTypeDescriptor<HotChocolate.Language.DirectiveNode!>! descriptor) -> void
override HotChocolate.Types.Introspection.__DirectiveArgument.Configure(HotChocolate.Types.IObjectTypeDescriptor<HotChocolate.Language.ArgumentNode!>! descriptor) -> void
override HotChocolate.Types.IntType.ParseLiteral(HotChocolate.Language.IntValueNode! valueSyntax) -> int
override HotChocolate.Types.IntType.ParseValue(int runtimeValue) -> HotChocolate.Language.IntValueNode!
override HotChocolate.Types.ListType.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.ListType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.LongType.ParseLiteral(HotChocolate.Language.IntValueNode! valueSyntax) -> long
override HotChocolate.Types.LongType.ParseValue(long runtimeValue) -> HotChocolate.Language.IntValueNode!
override HotChocolate.Types.MultiplierPathString.GetHashCode() -> int
override HotChocolate.Types.MultiplierPathType.IsInstanceOfType(HotChocolate.Language.StringValueNode! valueSyntax) -> bool
override HotChocolate.Types.MultiplierPathType.ParseLiteral(HotChocolate.Language.StringValueNode! valueSyntax) -> HotChocolate.Types.MultiplierPathString
override HotChocolate.Types.MultiplierPathType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.MultiplierPathType.ParseValue(HotChocolate.Types.MultiplierPathString runtimeValue) -> HotChocolate.Language.StringValueNode!
override HotChocolate.Types.MultiplierPathType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.MultiplierPathType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.NamedTypeBase<TDefinition>.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, TDefinition! definition) -> void
override HotChocolate.Types.NamedTypeBase<TDefinition>.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, TDefinition! definition) -> void
override HotChocolate.Types.NamedTypeExtensionBase<TDefinition>.OnAfterCompleteName(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
override HotChocolate.Types.NameType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.NameType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.NameType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.NonNullType.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.NonNullType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.ObjectField.IsIntrospectionField.get -> bool
override HotChocolate.Types.ObjectField.ToString() -> string!
override HotChocolate.Types.ObjectType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition!
override HotChocolate.Types.ObjectType.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.ObjectType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition! definition) -> void
override HotChocolate.Types.ObjectType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition! definition) -> void
override HotChocolate.Types.ObjectType<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition!
override HotChocolate.Types.ObjectTypeAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectTypeDescriptor! descriptor, System.Type! type) -> void
override HotChocolate.Types.ObjectTypeExtension.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition!
override HotChocolate.Types.ObjectTypeExtension.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.ObjectTypeExtension.Merge(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.INamedType! type) -> void
override HotChocolate.Types.ObjectTypeExtension.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition! definition) -> void
override HotChocolate.Types.ObjectTypeExtension<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition!
override HotChocolate.Types.Relay.Descriptors.NodeDescriptor.ConfigureNodeField() -> HotChocolate.Types.IObjectFieldDescriptor!
override HotChocolate.Types.Relay.Descriptors.NodeDescriptor<TNode>.ConfigureNodeField() -> HotChocolate.Types.IObjectFieldDescriptor!
override HotChocolate.Types.Relay.IDAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override HotChocolate.Types.Relay.NodeAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectTypeDescriptor! descriptor, System.Type! type) -> void
override HotChocolate.Types.ScalarType.ContextData.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object?>!
override HotChocolate.Types.ScalarType<TRuntimeType>.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.ScalarType<TRuntimeType>.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.ShortType.ParseLiteral(HotChocolate.Language.IntValueNode! valueSyntax) -> short
override HotChocolate.Types.ShortType.ParseValue(short runtimeValue) -> HotChocolate.Language.IntValueNode!
override HotChocolate.Types.StreamDirectiveType.Configure(HotChocolate.Types.IDirectiveTypeDescriptor! descriptor) -> void
override HotChocolate.Types.StringType.ParseLiteral(HotChocolate.Language.StringValueNode! valueSyntax) -> string!
override HotChocolate.Types.StringType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.StringType.ParseValue(string! runtimeValue) -> HotChocolate.Language.StringValueNode!
override HotChocolate.Types.SubscribeAndResolveAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Types.SubscribeAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Types.TimeSpanType.ParseLiteral(HotChocolate.Language.StringValueNode! valueSyntax) -> System.TimeSpan
override HotChocolate.Types.TimeSpanType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.TimeSpanType.ParseValue(System.TimeSpan runtimeValue) -> HotChocolate.Language.StringValueNode!
override HotChocolate.Types.TimeSpanType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.TimeSpanType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.TypeSystemObjectBase<TDefinition>.ContextData.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object?>!
override HotChocolate.Types.UnionType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition!
override HotChocolate.Types.UnionType.IsAssignableFrom(HotChocolate.Types.INamedType! namedType) -> bool
override HotChocolate.Types.UnionType.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.UnionType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition! definition) -> void
override HotChocolate.Types.UnionType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition! definition) -> void
override HotChocolate.Types.UnionType<T>.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition!
override HotChocolate.Types.UnionType<T>.OnCompleteTypeSet(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition! definition, System.Collections.Generic.ISet<HotChocolate.Types.ObjectType!>! typeSet) -> void
override HotChocolate.Types.UnionTypeAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IUnionTypeDescriptor! descriptor, System.Type! type) -> void
override HotChocolate.Types.UnionTypeExtension.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition!
override HotChocolate.Types.UnionTypeExtension.Kind.get -> HotChocolate.Types.TypeKind
override HotChocolate.Types.UnionTypeExtension.Merge(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.INamedType! type) -> void
override HotChocolate.Types.UnionTypeExtension.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition! definition) -> void
override HotChocolate.Types.UrlType.IsInstanceOfType(HotChocolate.Language.StringValueNode! valueSyntax) -> bool
override HotChocolate.Types.UrlType.ParseLiteral(HotChocolate.Language.StringValueNode! valueSyntax) -> System.Uri!
override HotChocolate.Types.UrlType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.UrlType.ParseValue(System.Uri! runtimeValue) -> HotChocolate.Language.StringValueNode!
override HotChocolate.Types.UrlType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.UrlType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override HotChocolate.Types.UseDataLoaderAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Types.UuidType.IsInstanceOfType(HotChocolate.Language.StringValueNode! valueSyntax) -> bool
override HotChocolate.Types.UuidType.ParseLiteral(HotChocolate.Language.StringValueNode! valueSyntax) -> System.Guid
override HotChocolate.Types.UuidType.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override HotChocolate.Types.UuidType.ParseValue(System.Guid runtimeValue) -> HotChocolate.Language.StringValueNode!
override HotChocolate.Types.UuidType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override HotChocolate.Types.UuidType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override sealed HotChocolate.DataLoader.BatchDataLoader<TKey, TValue>.FetchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<GreenDonut.Result<TValue>>!>
override sealed HotChocolate.DataLoader.CacheDataLoader<TKey, TValue>.FetchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<GreenDonut.Result<TValue>>!>
override sealed HotChocolate.DataLoader.GroupedDataLoader<TKey, TValue>.FetchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<GreenDonut.Result<TValue[]!>>!>
override sealed HotChocolate.Types.ArgumentDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Types.Descriptors.Convention<TDefinition>.Initialize(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
override sealed HotChocolate.Types.DirectiveType<TDirective>.Configure(HotChocolate.Types.IDirectiveTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Types.EnumType<T>.Configure(HotChocolate.Types.IEnumTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Types.EnumTypeDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Types.EnumValueDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Types.FloatTypeBase<TRuntimeType>.IsInstanceOfType(object? runtimeValue) -> bool
override sealed HotChocolate.Types.FloatTypeBase<TRuntimeType>.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override sealed HotChocolate.Types.InputFieldDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Types.InputObjectType<T>.Configure(HotChocolate.Types.IInputObjectTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Types.InputObjectTypeDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Types.IntegerTypeBase<TRuntimeType>.ParseResult(object? resultValue) -> HotChocolate.Language.IValueNode!
override sealed HotChocolate.Types.InterfaceFieldDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Types.InterfaceType<T>.Configure(HotChocolate.Types.IInterfaceTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Types.InterfaceTypeDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Types.ListType.IsInstanceOfType(HotChocolate.Language.IValueNode! literal) -> bool
override sealed HotChocolate.Types.ListType.IsInstanceOfType(object? runtimeValue) -> bool
override sealed HotChocolate.Types.ListType.ParseLiteral(HotChocolate.Language.IValueNode! valueSyntax, bool withDefaults) -> object?
override sealed HotChocolate.Types.ListType.ParseValue(object? runtimeValue) -> HotChocolate.Language.IValueNode!
override sealed HotChocolate.Types.ListType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override sealed HotChocolate.Types.ListType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override sealed HotChocolate.Types.NonNullType.IsInstanceOfType(HotChocolate.Language.IValueNode! literal) -> bool
override sealed HotChocolate.Types.NonNullType.IsInstanceOfType(object? runtimeValue) -> bool
override sealed HotChocolate.Types.NonNullType.ParseLiteral(HotChocolate.Language.IValueNode! literal, bool withDefaults) -> object?
override sealed HotChocolate.Types.NonNullType.ParseValue(object? runtimeValue) -> HotChocolate.Language.IValueNode!
override sealed HotChocolate.Types.NonNullType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
override sealed HotChocolate.Types.NonNullType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
override sealed HotChocolate.Types.ObjectFieldDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Types.ObjectType<T>.Configure(HotChocolate.Types.IObjectTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Types.ObjectTypeDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override sealed HotChocolate.Types.ObjectTypeExtension<T>.Configure(HotChocolate.Types.IObjectTypeDescriptor! descriptor) -> void
override sealed HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.Definition.get -> HotChocolate.Types.Relay.Descriptors.NodeDefinition!
override sealed HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.Definition.set -> void
override sealed HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.IsInstanceOfType(HotChocolate.Language.IValueNode! valueSyntax) -> bool
override sealed HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.IsInstanceOfType(object? runtimeValue) -> bool
override sealed HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.ParseLiteral(HotChocolate.Language.IValueNode! valueSyntax, bool withDefaults = true) -> object?
override sealed HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.ParseValue(object? runtimeValue) -> HotChocolate.Language.IValueNode!
override sealed HotChocolate.Types.ScalarType<TRuntimeType>.RuntimeType.get -> System.Type!
override sealed HotChocolate.Types.UnionTypeDescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
static HotChocolate.DirectiveTypeExtensions.AddCostDirectiveType(this HotChocolate.ISchemaBuilder! builder) -> HotChocolate.ISchemaBuilder!
static HotChocolate.Internal.ExtendedTypeExtensions.IsAssignableFrom(this System.Type! type, HotChocolate.Internal.IExtendedType! extendedType) -> bool
static HotChocolate.ResolverContextExtensions.GetEventMessage<T>(this HotChocolate.Resolvers.IResolverContext! context) -> T
static HotChocolate.ResolverContextExtensions.GetGlobalValue<T>(this HotChocolate.Resolvers.IResolverContext! context, string! name) -> T
static HotChocolate.ResolverContextExtensions.GetLocalValue<T>(this HotChocolate.Resolvers.IResolverContext! context, string! name) -> T
static HotChocolate.ResolverContextExtensions.GetOrAddGlobalValue<T>(this HotChocolate.Resolvers.IResolverContext! context, string! name, System.Func<string!, T>! createValue) -> T
static HotChocolate.ResolverContextExtensions.GetOrAddLocalValue<T>(this HotChocolate.Resolvers.IResolverContext! context, string! name, System.Func<string!, T>! createValue) -> T
static HotChocolate.ResolverContextExtensions.GetOrAddScopedValue<T>(this HotChocolate.Resolvers.IResolverContext! context, string! name, System.Func<string!, T>! createValue) -> T
static HotChocolate.ResolverContextExtensions.GetScopedValue<T>(this HotChocolate.Resolvers.IResolverContext! context, string! name) -> T
static HotChocolate.ResolverContextExtensions.RemoveGlobalValue(this HotChocolate.Resolvers.IResolverContext! context, string! name) -> void
static HotChocolate.ResolverContextExtensions.RemoveLocalValue(this HotChocolate.Resolvers.IResolverContext! context, string! name) -> void
static HotChocolate.ResolverContextExtensions.RemoveScopedValue(this HotChocolate.Resolvers.IResolverContext! context, string! name) -> void
static HotChocolate.ResolverContextExtensions.SetGlobalValue<T>(this HotChocolate.Resolvers.IResolverContext! context, string! name, T value) -> void
static HotChocolate.ResolverContextExtensions.SetLocalValue<T>(this HotChocolate.Resolvers.IResolverContext! context, string! name, T value) -> void
static HotChocolate.ResolverContextExtensions.SetScopedValue<T>(this HotChocolate.Resolvers.IResolverContext! context, string! name, T value) -> void
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.BatchDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, HotChocolate.DataLoader.FetchBatch<TKey, TValue>! fetch, string? key = null) -> GreenDonut.IDataLoader<TKey, TValue>!
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.BatchDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, string! key, HotChocolate.DataLoader.FetchBatch<TKey, TValue>! fetch) -> GreenDonut.IDataLoader<TKey, TValue>!
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.CacheDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, HotChocolate.DataLoader.FetchCacheCt<TKey, TValue>! fetch, string? key = null, int cacheSize = 100) -> GreenDonut.IDataLoader<TKey, TValue>!
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.CacheDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, string! key, HotChocolate.DataLoader.FetchCacheCt<TKey, TValue>! fetch, int cacheSize = 100) -> GreenDonut.IDataLoader<TKey, TValue>!
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.DataLoader<T>(this HotChocolate.Resolvers.IResolverContext! context, string! key) -> T
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.DataLoader<T>(this HotChocolate.Resolvers.IResolverContext! context) -> T
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.FetchOnceAsync<TValue>(this HotChocolate.Resolvers.IResolverContext! context, string! key, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TValue>!>! fetch) -> System.Threading.Tasks.Task<TValue>!
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.FetchOnceAsync<TValue>(this HotChocolate.Resolvers.IResolverContext! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TValue>!>! fetch, string? key = null) -> System.Threading.Tasks.Task<TValue>!
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.GroupDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, HotChocolate.DataLoader.FetchGroup<TKey, TValue>! fetch, string? key = null) -> GreenDonut.IDataLoader<TKey, TValue[]!>!
static HotChocolate.Resolvers.DataLoaderResolverContextExtensions.GroupDataLoader<TKey, TValue>(this HotChocolate.Resolvers.IResolverContext! context, string! key, HotChocolate.DataLoader.FetchGroup<TKey, TValue>! fetch) -> GreenDonut.IDataLoader<TKey, TValue[]!>!
static HotChocolate.Schema.DefaultName.get -> HotChocolate.NameString
static HotChocolate.SchemaBuilderExtensions.AddConvention(this HotChocolate.ISchemaBuilder! builder, System.Type! convention, HotChocolate.CreateConvention! conventionFactory, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddConvention(this HotChocolate.ISchemaBuilder! builder, System.Type! convention, HotChocolate.Types.Descriptors.IConvention! concreteConvention, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddConvention(this HotChocolate.ISchemaBuilder! builder, System.Type! convention, System.Type! concreteConvention, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddConvention<T>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.CreateConvention! conventionFactory, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddConvention<T>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.Types.Descriptors.IConvention! convention, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddConvention<T>(this HotChocolate.ISchemaBuilder! builder, System.Type! type, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddConvention<TConvetion, TConcreteConvention>(this HotChocolate.ISchemaBuilder! builder, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, object? constantResult) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, object?>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, object?>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.ValueTask<object?>>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<object?>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<System.Threading.Tasks.ValueTask<object?>>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver<TResult>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver<TResult>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, TResult>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver<TResult>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.ValueTask<TResult>>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver<TResult>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, TResult>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver<TResult>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<System.Threading.Tasks.ValueTask<TResult>>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver<TResult>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<TResult>! resolver) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.AddResolver<TResult>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, TResult constantResult) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.BindComplexType<T>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.Types.BindingBehavior bindingBehavior, System.Action<HotChocolate.Configuration.Bindings.IBindType<T!>!>? configure) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.BindComplexType<T>(this HotChocolate.ISchemaBuilder! builder, System.Action<HotChocolate.Configuration.Bindings.IBindType<T!>!>? configure = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.BindEnumType(this HotChocolate.ISchemaBuilder! builder, System.Type! runtimeType, System.Action<HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor!>? configure = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.BindEnumType<T>(this HotChocolate.ISchemaBuilder! builder, System.Action<HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor!>? configure = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.BindResolver<TResolver>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.Types.BindingBehavior bindingBehavior, System.Action<HotChocolate.Configuration.Bindings.IBindResolver<TResolver!>!>? configure) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.BindResolver<TResolver>(this HotChocolate.ISchemaBuilder! builder, System.Action<HotChocolate.Configuration.Bindings.IBindResolver<TResolver!>!>? configure = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.TryAddConvention(this HotChocolate.ISchemaBuilder! builder, System.Type! convention, HotChocolate.CreateConvention! conventionFactory, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.TryAddConvention(this HotChocolate.ISchemaBuilder! builder, System.Type! convention, HotChocolate.Types.Descriptors.IConvention! concreteConvention, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.TryAddConvention(this HotChocolate.ISchemaBuilder! builder, System.Type! convention, System.Type! concreteConvention, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.TryAddConvention<T>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.CreateConvention! conventionFactory, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.TryAddConvention<T>(this HotChocolate.ISchemaBuilder! builder, HotChocolate.Types.Descriptors.IConvention! convention, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.TryAddConvention<T>(this HotChocolate.ISchemaBuilder! builder, System.Type! type, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.SchemaBuilderExtensions.TryAddConvention<TConvention, TConcreteConvention>(this HotChocolate.ISchemaBuilder! builder, string? scope = null) -> HotChocolate.ISchemaBuilder!
static HotChocolate.Types.DataLoaderObjectFieldExtensions.UseDataloader(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type! dataLoaderType) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.DataLoaderObjectFieldExtensions.UseDataloader<TDataLoader>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.Descriptors.Definitions.TypeDependency.FromSchemaType(HotChocolate.Internal.IExtendedType! type, HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind kind = HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Default) -> HotChocolate.Types.Descriptors.Definitions.TypeDependency!
static HotChocolate.Types.Descriptors.DescriptorContextConventionExtensions.GetConventionOrDefault<T>(this HotChocolate.Types.Descriptors.IDescriptorContext! context, string? scope, T! defaultConvention) -> T!
static HotChocolate.Types.Descriptors.DescriptorContextConventionExtensions.GetConventionOrDefault<T>(this HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Func<T!>! defaultConvention) -> T!
static HotChocolate.Types.Descriptors.DescriptorContextConventionExtensions.GetConventionOrDefault<T>(this HotChocolate.Types.Descriptors.IDescriptorContext! context, T! defaultConvention) -> T!
static HotChocolate.Types.Descriptors.FieldDescriptorUtilities.AddExplicitFields<TMember, TField>(System.Collections.Generic.IEnumerable<TField!>! fieldDefinitions, System.Func<TField!, TMember?>! resolveMember, System.Collections.Generic.IDictionary<HotChocolate.NameString, TField!>! fields, System.Collections.Generic.ISet<TMember!>! handledMembers) -> void
static HotChocolate.Types.Descriptors.FieldDescriptorUtilities.AddImplicitFields<TDescriptor, TMember, TField>(TDescriptor descriptor, System.Func<TMember!, TField!>! createdFieldDefinition, System.Collections.Generic.IDictionary<HotChocolate.NameString, TField!>! fields, System.Collections.Generic.ISet<TMember!>! handledMembers) -> void
static HotChocolate.Types.Descriptors.FieldDescriptorUtilities.AddImplicitFields<TDescriptor, TMember, TField>(TDescriptor descriptor, System.Type! fieldBindingType, System.Func<TMember!, TField!>! createdFieldDefinition, System.Collections.Generic.IDictionary<HotChocolate.NameString, TField!>! fields, System.Collections.Generic.ISet<TMember!>! handledMembers, System.Func<System.Collections.Generic.IReadOnlyList<TMember!>!, TMember!, bool>? include = null, bool includeIgnoredMembers = false) -> void
static HotChocolate.Types.Descriptors.FieldDescriptorUtilities.DiscoverArguments(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Collections.Generic.ICollection<HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition!>! arguments, System.Reflection.MemberInfo? member) -> void
static HotChocolate.Types.Descriptors.ObjectFieldDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition! definition) -> HotChocolate.Types.Descriptors.ObjectFieldDescriptor!
static HotChocolate.Types.Descriptors.ObjectFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.NameString fieldName) -> HotChocolate.Types.Descriptors.ObjectFieldDescriptor!
static HotChocolate.Types.Descriptors.ObjectFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Linq.Expressions.LambdaExpression! expression, System.Type! sourceType, System.Type! resolverType) -> HotChocolate.Types.Descriptors.ObjectFieldDescriptor!
static HotChocolate.Types.Descriptors.ObjectFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.MemberInfo! member, System.Type! sourceType, System.Type! resolverType) -> HotChocolate.Types.Descriptors.ObjectFieldDescriptor!
static HotChocolate.Types.Descriptors.ObjectFieldDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Reflection.MemberInfo! member, System.Type! sourceType) -> HotChocolate.Types.Descriptors.ObjectFieldDescriptor!
static HotChocolate.Types.Descriptors.ObjectTypeDescriptor.From(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition! definition) -> HotChocolate.Types.Descriptors.ObjectTypeDescriptor!
static HotChocolate.Types.Descriptors.ObjectTypeDescriptor.From<T>(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition! definition) -> HotChocolate.Types.Descriptors.ObjectTypeDescriptor<T>!
static HotChocolate.Types.Descriptors.ObjectTypeDescriptor.FromSchemaType(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! schemaType) -> HotChocolate.Types.Descriptors.ObjectTypeDescriptor!
static HotChocolate.Types.Descriptors.ObjectTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Type! clrType) -> HotChocolate.Types.Descriptors.ObjectTypeDescriptor!
static HotChocolate.Types.Descriptors.ObjectTypeDescriptor.New(HotChocolate.Types.Descriptors.IDescriptorContext! context) -> HotChocolate.Types.Descriptors.ObjectTypeDescriptor!
static HotChocolate.Types.Descriptors.ObjectTypeDescriptor.New<T>(HotChocolate.Types.Descriptors.IDescriptorContext! context) -> HotChocolate.Types.Descriptors.ObjectTypeDescriptor<T>!
static HotChocolate.Types.Descriptors.ObjectTypeDescriptor.NewExtension<T>(HotChocolate.Types.Descriptors.IDescriptorContext! context) -> HotChocolate.Types.Descriptors.ObjectTypeExtensionDescriptor<T>!
static HotChocolate.Types.Descriptors.TypeReference.Create(HotChocolate.Internal.IExtendedType! type, HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None, string? scope = null) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
static HotChocolate.Types.Descriptors.TypeReference.Create(HotChocolate.Language.ITypeNode! type, HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None, string? scope = null) -> HotChocolate.Types.Descriptors.SyntaxTypeReference!
static HotChocolate.Types.Descriptors.TypeReference.Create(HotChocolate.NameString typeName, HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None, string? scope = null) -> HotChocolate.Types.Descriptors.SyntaxTypeReference!
static HotChocolate.Types.Descriptors.TypeReference.Create(HotChocolate.Types.ITypeSystemMember! type, string? scope = null) -> HotChocolate.Types.Descriptors.SchemaTypeReference!
static HotChocolate.Types.Descriptors.TypeReferenceExtensions.With(this HotChocolate.Types.Descriptors.ITypeReference! typeReference, HotChocolate.Optional<HotChocolate.Types.TypeContext> context = default(HotChocolate.Optional<HotChocolate.Types.TypeContext>), HotChocolate.Optional<string?> scope = default(HotChocolate.Optional<string?>)) -> HotChocolate.Types.Descriptors.ITypeReference!
static HotChocolate.Types.Directive.FromAstNode(HotChocolate.ISchema! schema, HotChocolate.Language.ISyntaxNode! source, HotChocolate.Language.DirectiveNode! directiveNode) -> HotChocolate.Types.Directive!
static HotChocolate.Types.Directive.FromDescription(HotChocolate.Types.DirectiveType! directiveType, HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition! definition, object! source) -> HotChocolate.Types.Directive!
static HotChocolate.Types.DirectiveCollection.CreateAndComplete(HotChocolate.Configuration.ITypeCompletionContext! context, object! source, System.Collections.Generic.IEnumerable<HotChocolate.Types.Descriptors.Definitions.DirectiveDefinition!>! directiveDefinitions) -> HotChocolate.Types.IDirectiveCollection!
static HotChocolate.Types.Directives.IsBuiltIn(HotChocolate.NameString typeName) -> bool
static HotChocolate.Types.FieldCollection<T>.Empty.get -> HotChocolate.Types.FieldCollection<T!>!
static HotChocolate.Types.FieldCollection<T>.From(System.Collections.Generic.IEnumerable<T!>! fields, bool sortByName = false) -> HotChocolate.Types.FieldCollection<T!>!
static HotChocolate.Types.FieldCollectionExtensions.TryGetField<T>(this HotChocolate.Types.IFieldCollection<T!>! collection, HotChocolate.NameString fieldName, out T? field) -> bool
static HotChocolate.Types.Introspection.IntrospectionFields.Schema.get -> HotChocolate.NameString
static HotChocolate.Types.Introspection.IntrospectionFields.Type.get -> HotChocolate.NameString
static HotChocolate.Types.Introspection.IntrospectionFields.TypeName.get -> HotChocolate.NameString
static HotChocolate.Types.Introspection.IntrospectionTypes.IsIntrospectionType(HotChocolate.NameString typeName) -> bool
static HotChocolate.Types.MultiplierPathString.IsValidPath(System.ReadOnlySpan<byte> name) -> bool
static HotChocolate.Types.MultiplierPathString.operator !=(HotChocolate.Types.MultiplierPathString left, HotChocolate.Types.MultiplierPathString right) -> bool
static HotChocolate.Types.MultiplierPathString.operator +(HotChocolate.Types.MultiplierPathString left, HotChocolate.Types.MultiplierPathString right) -> HotChocolate.Types.MultiplierPathString
static HotChocolate.Types.MultiplierPathString.operator ==(HotChocolate.Types.MultiplierPathString left, HotChocolate.Types.MultiplierPathString right) -> bool
static HotChocolate.Types.Pagination.PagingHelper.GetSchemaType(HotChocolate.Types.Descriptors.ITypeInspector! typeInspector, System.Reflection.MemberInfo? member, System.Type? type) -> HotChocolate.Internal.IExtendedType!
static HotChocolate.Types.Pagination.PagingHelper.GetSettings(this HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Pagination.PagingOptions options) -> HotChocolate.Types.Pagination.PagingOptions
static HotChocolate.Types.Pagination.PagingHelper.GetSettings(this HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.Pagination.PagingOptions options) -> HotChocolate.Types.Pagination.PagingOptions
static HotChocolate.Types.Pagination.PagingHelper.UsePaging(HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type? type, System.Type? entityType = null, HotChocolate.Types.Pagination.GetPagingProvider? resolvePagingProvider = null, HotChocolate.Types.Pagination.PagingOptions options = default(HotChocolate.Types.Pagination.PagingOptions)) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.MiddlewareHelper.TryAdd(HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.Relay.NodeType.Names.Id.get -> HotChocolate.NameString
static HotChocolate.Types.Relay.NodeType.Names.Node.get -> HotChocolate.NameString
static HotChocolate.Types.RelayIdFieldExtensions.ID(this HotChocolate.Types.IArgumentDescriptor! descriptor, HotChocolate.NameString typeName = default(HotChocolate.NameString)) -> HotChocolate.Types.IArgumentDescriptor!
static HotChocolate.Types.RelayIdFieldExtensions.ID(this HotChocolate.Types.IInputFieldDescriptor! descriptor, HotChocolate.NameString typeName = default(HotChocolate.NameString)) -> HotChocolate.Types.IInputFieldDescriptor!
static HotChocolate.Types.RelayIdFieldExtensions.ID(this HotChocolate.Types.IInterfaceFieldDescriptor! descriptor) -> HotChocolate.Types.IInterfaceFieldDescriptor!
static HotChocolate.Types.RelayIdFieldExtensions.ID(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, HotChocolate.NameString typeName = default(HotChocolate.NameString)) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, object! constantResult) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, object?>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, object?>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.Task<object?>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<object?>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<System.Threading.Tasks.Task<object?>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, TResult>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.Task<TResult>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, TResult>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<System.Threading.Tasks.Task<TResult>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<TResult>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, TResult constantResult) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, object! constantResult) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, object?>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, object?>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.Task<object?>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<object?>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<System.Threading.Tasks.Task<object?>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, TResult>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.Task<TResult>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, TResult>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<System.Threading.Tasks.Task<TResult>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<TResult>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolverObjectFieldDescriptorExtensions.Resolver<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, TResult constantResult) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.Scalars.IsBuiltIn(HotChocolate.NameString typeName) -> bool
static HotChocolate.Types.Scalars.TryGetKind(object? value, out HotChocolate.Types.ValueKind kind) -> bool
static HotChocolate.Types.ScopedServiceObjectFieldDescriptorExtensions.UseScopedService<TService>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<System.IServiceProvider!, TService>! create, System.Action<System.IServiceProvider!, TService>? dispose = null, System.Func<System.IServiceProvider!, TService, System.Threading.Tasks.ValueTask>? disposeAsync = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Utilities.DefaultTypeConverter.Default.get -> HotChocolate.Utilities.DefaultTypeConverter!
virtual HotChocolate.Configuration.SchemaInterceptor.OnAfterCreate(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.ISchema! schema) -> void
virtual HotChocolate.Configuration.SchemaInterceptor.OnBeforeCreate(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.ISchemaBuilder! schemaBuilder) -> void
virtual HotChocolate.Configuration.SchemaInterceptor.OnError(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Exception! exception) -> void
virtual HotChocolate.Configuration.TypeInterceptor.CanHandle(HotChocolate.Configuration.ITypeSystemObjectContext! context) -> bool
virtual HotChocolate.Configuration.TypeInterceptor.OnAfterCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnAfterCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnAfterCompleteTypeNames() -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnAfterCompleteTypes() -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnAfterDiscoverTypes() -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnAfterInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnAfterMergeTypeExtensions() -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnAfterRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnBeforeCompleteName(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnBeforeCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnBeforeCompleteTypeNames() -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnBeforeCompleteTypes() -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnBeforeDiscoverTypes() -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnBeforeInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnBeforeMergeTypeExtensions() -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnBeforeRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnTypeRegistered(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnTypesCompleted(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeCompletionContext!>! completionContexts) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnTypesCompletedName(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeCompletionContext!>! completionContexts) -> void
virtual HotChocolate.Configuration.TypeInterceptor.OnTypesInitialized(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Configuration.ITypeDiscoveryContext!>! discoveryContexts) -> void
virtual HotChocolate.Configuration.TypeInterceptor.TriggerAggregations.get -> bool
virtual HotChocolate.Configuration.TypeInterceptor.TryCreateScope(HotChocolate.Configuration.ITypeDiscoveryContext! discoveryContext, out System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Descriptors.Definitions.TypeDependency!>? typeDependencies) -> bool
virtual HotChocolate.Types.Descriptors.Convention.Complete(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
virtual HotChocolate.Types.Descriptors.Convention.Initialize(HotChocolate.Types.Descriptors.IConventionContext! context) -> void
virtual HotChocolate.Types.Descriptors.Convention<TDefinition>.Definition.get -> TDefinition?
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.GetArgumentDescription(System.Reflection.ParameterInfo! parameter) -> string?
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.GetArgumentName(System.Reflection.ParameterInfo! parameter) -> HotChocolate.NameString
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.GetEnumValueDescription(object! value) -> string?
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.GetEnumValueName(object! value) -> HotChocolate.NameString
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.GetMemberDescription(System.Reflection.MemberInfo! member, HotChocolate.Types.MemberKind kind) -> string?
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.GetMemberName(System.Reflection.MemberInfo! member, HotChocolate.Types.MemberKind kind) -> HotChocolate.NameString
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.GetTypeDescription(System.Type! type, HotChocolate.Types.TypeKind kind) -> string?
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.GetTypeName(System.Type! type, HotChocolate.Types.TypeKind kind) -> HotChocolate.NameString
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.GetTypeName(System.Type! type) -> HotChocolate.NameString
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.IsDeprecated(object! value, out string? reason) -> bool
virtual HotChocolate.Types.Descriptors.DefaultNamingConventions.IsDeprecated(System.Reflection.MemberInfo! member, out string! reason) -> bool
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.GetEnumValues(System.Type! enumType) -> System.Collections.Generic.IEnumerable<object!>!
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.GetMembers(System.Type! type, bool includeIgnored) -> System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>!
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.GetMembers(System.Type! type) -> System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>!
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.GetNodeIdMember(System.Type! type) -> System.Reflection.MemberInfo?
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.GetNodeResolverMethod(System.Type! nodeType, System.Type? resolverType = null) -> System.Reflection.MethodInfo?
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.GetResolverTypes(System.Type! type) -> System.Collections.Generic.IEnumerable<System.Type!>!
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.GetReturnType(System.Reflection.MemberInfo! member, bool ignoreAttributes = false) -> HotChocolate.Internal.IExtendedType!
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.GetReturnTypeRef(System.Reflection.MemberInfo! member, HotChocolate.Types.TypeContext context = HotChocolate.Types.TypeContext.None, string? scope = null, bool ignoreAttributes = false) -> HotChocolate.Types.Descriptors.ExtendedTypeReference!
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.IsMemberIgnored(System.Reflection.MemberInfo! member) -> bool
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.TryGetDefaultValue(System.Reflection.ParameterInfo! parameter, out object? defaultValue) -> bool
virtual HotChocolate.Types.Descriptors.DefaultTypeInspector.TryGetDefaultValue(System.Reflection.PropertyInfo! property, out object? defaultValue) -> bool
virtual HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>.RuntimeType.get -> System.Type!
virtual HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase<T>.RuntimeType.set -> void
virtual HotChocolate.Types.Descriptors.DescriptorBase<T>.OnCreateDefinition(T! definition) -> void
virtual HotChocolate.Types.Descriptors.ObjectTypeDescriptor.OnCompleteFields(System.Collections.Generic.IDictionary<HotChocolate.NameString, HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition!>! fields, System.Collections.Generic.ISet<System.Reflection.MemberInfo!>! handledMembers) -> void
virtual HotChocolate.Types.DirectiveType.Configure(HotChocolate.Types.IDirectiveTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.DirectiveType<TDirective>.Configure(HotChocolate.Types.IDirectiveTypeDescriptor<TDirective!>! descriptor) -> void
virtual HotChocolate.Types.EnumType.Configure(HotChocolate.Types.IEnumTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.EnumType.TryCreateEnumValue(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition! definition, out HotChocolate.Types.IEnumValue? enumValue) -> bool
virtual HotChocolate.Types.EnumType<T>.Configure(HotChocolate.Types.IEnumTypeDescriptor<T>! descriptor) -> void
virtual HotChocolate.Types.EnumTypeExtension.Configure(HotChocolate.Types.IEnumTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.FieldBase<TType, TDefinition>.OnCompleteField(HotChocolate.Configuration.ITypeCompletionContext! context, TDefinition! definition) -> void
virtual HotChocolate.Types.FieldBase<TType, TDefinition>.RuntimeType.get -> System.Type!
virtual HotChocolate.Types.FloatTypeBase<TRuntimeType>.CreateParseLiteralError(HotChocolate.Language.IValueNode! valueSyntax) -> HotChocolate.Types.SerializationException!
virtual HotChocolate.Types.FloatTypeBase<TRuntimeType>.CreateParseResultError(object! runtimeValue) -> HotChocolate.Types.SerializationException!
virtual HotChocolate.Types.FloatTypeBase<TRuntimeType>.CreateParseValueError(object! runtimeValue) -> HotChocolate.Types.SerializationException!
virtual HotChocolate.Types.FloatTypeBase<TRuntimeType>.IsInstanceOfType(HotChocolate.Language.IFloatValueLiteral! valueSyntax) -> bool
virtual HotChocolate.Types.FloatTypeBase<TRuntimeType>.IsInstanceOfType(TRuntimeType value) -> bool
virtual HotChocolate.Types.InputObjectType.Configure(HotChocolate.Types.IInputObjectTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.InputObjectType.IsInstanceOfType(HotChocolate.Language.IValueNode! literal) -> bool
virtual HotChocolate.Types.InputObjectType.IsInstanceOfType(object? value) -> bool
virtual HotChocolate.Types.InputObjectType.OnCompleteFields(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition! definition, System.Collections.Generic.ICollection<HotChocolate.Types.InputField!>! fields) -> void
virtual HotChocolate.Types.InputObjectType.ParseLiteral(HotChocolate.Language.IValueNode! valueSyntax, bool withDefaults = true) -> object?
virtual HotChocolate.Types.InputObjectType.ParseValue(object? runtimeValue) -> HotChocolate.Language.IValueNode!
virtual HotChocolate.Types.InputObjectType.TryDeserialize(object? resultValue, out object? runtimeValue) -> bool
virtual HotChocolate.Types.InputObjectType.TrySerialize(object? runtimeValue, out object? resultValue) -> bool
virtual HotChocolate.Types.InputObjectType<T>.Configure(HotChocolate.Types.IInputObjectTypeDescriptor<T>! descriptor) -> void
virtual HotChocolate.Types.InputObjectTypeExtension.Configure(HotChocolate.Types.IInputObjectTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.IntegerTypeBase<TRuntimeType>.CreateParseResultError(object! runtimeValue) -> HotChocolate.Types.SerializationException!
virtual HotChocolate.Types.InterfaceType.Configure(HotChocolate.Types.IInterfaceTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.InterfaceType<T>.Configure(HotChocolate.Types.IInterfaceTypeDescriptor<T>! descriptor) -> void
virtual HotChocolate.Types.InterfaceTypeExtension.Configure(HotChocolate.Types.IInterfaceTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.NamedTypeBase<TDefinition>.IsAssignableFrom(HotChocolate.Types.INamedType! type) -> bool
virtual HotChocolate.Types.ObjectType.Configure(HotChocolate.Types.IObjectTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.ObjectType<T>.Configure(HotChocolate.Types.IObjectTypeDescriptor<T>! descriptor) -> void
virtual HotChocolate.Types.ObjectTypeExtension.Configure(HotChocolate.Types.IObjectTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.ObjectTypeExtension<T>.Configure(HotChocolate.Types.IObjectTypeDescriptor<T>! descriptor) -> void
virtual HotChocolate.Types.OutputFieldBase<TDefinition>.IsIntrospectionField.get -> bool
virtual HotChocolate.Types.Relay.Descriptors.NodeDescriptorBase.ResolveNode(HotChocolate.Resolvers.FieldResolverDelegate! fieldResolver) -> HotChocolate.Types.IObjectFieldDescriptor!
virtual HotChocolate.Types.ScalarType.Deserialize(object? resultValue) -> object?
virtual HotChocolate.Types.ScalarType.IsInstanceOfType(object? runtimeValue) -> bool
virtual HotChocolate.Types.ScalarType.OnCompleteName(HotChocolate.Configuration.ITypeCompletionContext! context, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.ScalarType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.ScalarType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.ScalarType.Serialize(object? runtimeValue) -> object?
virtual HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.CreateParseLiteralError(HotChocolate.Language.IValueNode! valueSyntax) -> HotChocolate.Types.SerializationException!
virtual HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.CreateParseValueError(object! runtimeValue) -> HotChocolate.Types.SerializationException!
virtual HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.IsInstanceOfType(TLiteral valueSyntax) -> bool
virtual HotChocolate.Types.ScalarType<TRuntimeType, TLiteral>.IsInstanceOfType(TRuntimeType runtimeValue) -> bool
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnAfterCompleteName(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnAfterCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnAfterInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnAfterRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnBeforeCompleteName(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnBeforeCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnBeforeInitialize(HotChocolate.Configuration.ITypeDiscoveryContext! context) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnBeforeRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, HotChocolate.Types.Descriptors.Definitions.DefinitionBase! definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnCompleteName(HotChocolate.Configuration.ITypeCompletionContext! context, TDefinition! definition) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext! context, TDefinition! definition) -> void
virtual HotChocolate.Types.TypeSystemObjectBase<TDefinition>.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext! context, TDefinition! definition) -> void
virtual HotChocolate.Types.UnionType.Configure(HotChocolate.Types.IUnionTypeDescriptor! descriptor) -> void
virtual HotChocolate.Types.UnionType.OnCompleteTypeSet(HotChocolate.Configuration.ITypeCompletionContext! context, HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition! definition, System.Collections.Generic.ISet<HotChocolate.Types.ObjectType!>! typeSet) -> void
virtual HotChocolate.Types.UnionTypeExtension.Configure(HotChocolate.Types.IUnionTypeDescriptor! descriptor) -> void
