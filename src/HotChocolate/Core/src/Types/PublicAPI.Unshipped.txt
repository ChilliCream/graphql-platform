HotChocolate.Configuration.IReadOnlySchemaOptions.AllowInlining.get -> bool
HotChocolate.Configuration.IReadOnlySchemaOptions.DefaultResolverStrategy.get -> HotChocolate.Execution.ExecutionStrategy
HotChocolate.Configuration.ISchemaOptions.AllowInlining.get -> bool
HotChocolate.Configuration.ISchemaOptions.AllowInlining.set -> void
HotChocolate.Configuration.ISchemaOptions.DefaultResolverStrategy.get -> HotChocolate.Execution.ExecutionStrategy
HotChocolate.Configuration.ISchemaOptions.DefaultResolverStrategy.set -> void
HotChocolate.Configuration.ITypeCompletionContext.GetResolver(HotChocolate.NameString fieldName) -> HotChocolate.Resolvers.FieldResolver?
HotChocolate.Configuration.ReadOnlySchemaOptions.AllowInlining.get -> bool
HotChocolate.Configuration.ReadOnlySchemaOptions.DefaultResolverStrategy.get -> HotChocolate.Execution.ExecutionStrategy
HotChocolate.Configuration.SchemaOptions.AllowInlining.get -> bool
HotChocolate.Configuration.SchemaOptions.AllowInlining.set -> void
HotChocolate.Configuration.SchemaOptions.DefaultResolverStrategy.get -> HotChocolate.Execution.ExecutionStrategy
HotChocolate.Configuration.SchemaOptions.DefaultResolverStrategy.set -> void
HotChocolate.Resolvers.FieldResolver.FieldResolver(HotChocolate.NameString typeName, HotChocolate.NameString fieldName, HotChocolate.Resolvers.FieldResolverDelegate! resolver, HotChocolate.Resolvers.PureFieldResolverDelegate? pureResolver = null) -> void
HotChocolate.Resolvers.FieldResolver.PureResolver.get -> HotChocolate.Resolvers.PureFieldResolverDelegate?
HotChocolate.Resolvers.InlineFieldDelegate
HotChocolate.Resolvers.IResolverContext.Services.set -> void
HotChocolate.Resolvers.PureFieldDelegate
HotChocolate.Resolvers.PureFieldResolverDelegate
HotChocolate.Schema.TryGetRuntimeType(HotChocolate.NameString typeName, out System.Type? runtimeType) -> bool
HotChocolate.Types.CostDirective.DefaultMultiplier.get -> int?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.CustomSettings.get -> System.Collections.Generic.IList<object!>!
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.InlineResolver.get -> HotChocolate.Resolvers.InlineFieldDelegate?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.InlineResolver.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.IsParallelExecutable.get -> bool
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.IsParallelExecutable.set -> void
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.PureResolver.get -> HotChocolate.Resolvers.PureFieldResolverDelegate?
HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.PureResolver.set -> void
HotChocolate.Types.EnumTypeAttribute.Inherited.get -> bool
HotChocolate.Types.EnumTypeAttribute.Inherited.set -> void
HotChocolate.Types.ExtendObjectTypeAttribute.Inherited.get -> bool
HotChocolate.Types.ExtendObjectTypeAttribute.Inherited.set -> void
HotChocolate.Types.ICostSettings
HotChocolate.Types.ICostSettings.ApplyDefaults.get -> bool
HotChocolate.Types.ICostSettings.DefaultComplexity.get -> int
HotChocolate.Types.ICostSettings.DefaultResolverComplexity.get -> int
HotChocolate.Types.ICostSettings.Enable.get -> bool
HotChocolate.Types.IDescriptorExtension<T>.Definition.get -> T!
HotChocolate.Types.InputObjectTypeAttribute.Inherited.get -> bool
HotChocolate.Types.InputObjectTypeAttribute.Inherited.set -> void
HotChocolate.Types.InterfaceTypeAttribute.Inherited.get -> bool
HotChocolate.Types.InterfaceTypeAttribute.Inherited.set -> void
HotChocolate.Types.IObjectField.InlineResolver.get -> HotChocolate.Resolvers.InlineFieldDelegate?
HotChocolate.Types.IObjectField.IsParallelExecutable.get -> bool
HotChocolate.Types.IObjectField.PureResolver.get -> HotChocolate.Resolvers.PureFieldDelegate?
HotChocolate.Types.IObjectField.Resolver.get -> HotChocolate.Resolvers.FieldResolverDelegate?
HotChocolate.Types.IObjectTypeDescriptor.Field<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object?>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.BindFieldsExplicitly() -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.BindFieldsImplicitly() -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Description(string? value) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Directive<TDirective>() -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.ExtendsType(System.Type! extendsType) -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.ExtendsType<TExtendsType>() -> HotChocolate.Types.IObjectTypeDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Field(HotChocolate.NameString name) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Field(System.Linq.Expressions.Expression<System.Func<TRuntimeType, object?>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Field(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Field<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object?>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Field<TValue>(System.Linq.Expressions.Expression<System.Func<TRuntimeType, TValue?>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Implements(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Implements<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Implements<TInterface>(TInterface! type) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Include<TResolver>() -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Interface(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Interface<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Interface<TInterface>(TInterface! type) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.IsOfType(HotChocolate.Types.IsOfType! isOfType) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IObjectTypeDescriptor<TRuntimeType>!
HotChocolate.Types.ObjectField.InlineResolver.get -> HotChocolate.Resolvers.InlineFieldDelegate?
HotChocolate.Types.ObjectField.IsParallelExecutable.get -> bool
HotChocolate.Types.ObjectField.PureResolver.get -> HotChocolate.Resolvers.PureFieldDelegate?
HotChocolate.Types.ObjectField.Resolver.get -> HotChocolate.Resolvers.FieldResolverDelegate?
HotChocolate.Types.ObjectFieldDescriptorExtensions
HotChocolate.Types.ObjectTypeAttribute.Inherited.get -> bool
HotChocolate.Types.ObjectTypeAttribute.Inherited.set -> void
HotChocolate.Types.ParallelAttribute
HotChocolate.Types.ParallelAttribute.ParallelAttribute() -> void
HotChocolate.Types.SerialAttribute
HotChocolate.Types.SerialAttribute.SerialAttribute() -> void
HotChocolate.Types.UnionTypeAttribute.Inherited.get -> bool
HotChocolate.Types.UnionTypeAttribute.Inherited.set -> void
override HotChocolate.Types.ParallelAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override HotChocolate.Types.SerialAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
static HotChocolate.ResolverContextExtensions.GetUser(this HotChocolate.Resolvers.IResolverContext! context) -> System.Security.Claims.ClaimsPrincipal?
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>?>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.Task<TResult>?>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<System.Threading.Tasks.Task<TResult>?>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
~const HotChocolate.Types.ScalarNames.URL = "URL" -> string
~const HotChocolate.Types.ScalarNames.UUID = "UUID" -> string
~HotChocolate.Types.CostDirective.CostDirective(int complexity, int defaultMultiplier, params HotChocolate.Types.MultiplierPathString[] multipliers) -> void
~static HotChocolate.Types.Introspection.IntrospectionTypes.IsIntrospectionType(HotChocolate.Types.INamedType type) -> bool
~static HotChocolate.Types.ObjectFieldDescriptorExtensions.Parallel(this HotChocolate.Types.IObjectFieldDescriptor descriptor) -> HotChocolate.Types.IObjectFieldDescriptor
~static HotChocolate.Types.ObjectFieldDescriptorExtensions.Serial(this HotChocolate.Types.IObjectFieldDescriptor descriptor) -> HotChocolate.Types.IObjectFieldDescriptor
*REMOVED*static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<System.Threading.Tasks.Task<TResult>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
*REMOVED*static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.Task<TResult>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
*REMOVED*HotChocolate.Types.ObjectField.Resolver.get -> HotChocolate.Resolvers.FieldResolverDelegate!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Interface(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Field(System.Linq.Expressions.Expression<System.Func<T, object!>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.BindFieldsExplicitly() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.BindFieldsImplicitly() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*~HotChocolate.Resolvers.FieldResolver.FieldResolver(HotChocolate.NameString typeName, HotChocolate.NameString fieldName, HotChocolate.Resolvers.FieldResolverDelegate resolver) -> void
*REMOVED*static HotChocolate.Types.ResolveObjectFieldDescriptorExtensions.Resolve<TResult>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! resolver) -> HotChocolate.Types.IObjectFieldDescriptor!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Name(HotChocolate.NameString value) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.IsOfType(HotChocolate.Types.IsOfType! isOfType) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Implements<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Interface<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Implements<TInterface>() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Field<TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Field(System.Reflection.MemberInfo! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Field(HotChocolate.NameString name) -> HotChocolate.Types.IObjectFieldDescriptor!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.ExtendsType<TExtendsType>() -> HotChocolate.Types.IObjectTypeDescriptor!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.ExtendsType(System.Type! extendsType) -> HotChocolate.Types.IObjectTypeDescriptor!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.ExtendsType(System.Type! extendsType) -> HotChocolate.Types.IObjectTypeDescriptor!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Directive<TDirective>() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Directive<TDirective>(TDirective! directiveInstance) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Directive(HotChocolate.NameString name, params HotChocolate.Language.ArgumentNode![]! arguments) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Description(string? value) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.BindFields(HotChocolate.Types.BindingBehavior behavior) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor.Field<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object!>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
*REMOVED*HotChocolate.Types.IObjectField.Resolver.get -> HotChocolate.Resolvers.FieldResolverDelegate!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Include<TResolver>() -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Implements<TInterface>(TInterface! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Interface<TInterface>(TInterface! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Implements(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Field<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object!>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
*REMOVED*HotChocolate.Schema.TryGetRuntimeType(HotChocolate.NameString typeName, out System.Type? clrType) -> bool
*REMOVED*~const HotChocolate.Types.ScalarNames.Uuid = "Uuid" -> string
*REMOVED*~const HotChocolate.Types.ScalarNames.Url = "Url" -> string
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Interface<TInterface>(TInterface! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Implements<TInterface>(TInterface! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Implements(HotChocolate.Language.NamedTypeNode! type) -> HotChocolate.Types.IObjectTypeDescriptor<T>!
*REMOVED*HotChocolate.Schema.TryGetRuntimeType(HotChocolate.NameString typeName, out System.Type? clrType) -> bool
*REMOVED*HotChocolate.Configuration.ITypeCompletionContext.GetResolver(HotChocolate.NameString fieldName) -> HotChocolate.Resolvers.FieldResolver!
*REMOVED*HotChocolate.Types.IObjectTypeDescriptor<T>.Field<TResolver>(System.Linq.Expressions.Expression<System.Func<TResolver, object!>!>! propertyOrMethod) -> HotChocolate.Types.IObjectFieldDescriptor!
~HotChocolate.Types.Relay.MutationPayloadOptions
~HotChocolate.Types.Relay.MutationPayloadOptions.QueryFieldName.get -> HotChocolate.NameString?
~HotChocolate.Types.Relay.MutationPayloadOptions.QueryFieldName.set -> void
~HotChocolate.Types.Relay.MutationPayloadOptions.MutationPayloadPredicate.get -> System.Func<HotChocolate.Types.INamedType, bool>
~HotChocolate.Types.Relay.MutationPayloadOptions.MutationPayloadPredicate.set -> void