HotChocolate.ErrorSchemaBuilderExtensions
HotChocolate.Types.ErrorAttribute
HotChocolate.Types.ErrorObjectFieldDescriptorExtensions
HotChocolate.Types.InputAttribute
HotChocolate.Types.InputAttribute.ArgumentName.get -> string!
HotChocolate.Types.InputAttribute.ArgumentName.set -> void
HotChocolate.Types.InputAttribute.InputAttribute() -> void
HotChocolate.Types.InputAttribute.InputAttribute(string! argumentName) -> void
HotChocolate.Types.InputAttribute.TypeName.get -> string?
HotChocolate.Types.InputAttribute.TypeName.set -> void
HotChocolate.Types.InputDescriptorExtensions
HotChocolate.Types.PayloadAttribute
HotChocolate.Types.PayloadAttribute.FieldName.get -> string?
HotChocolate.Types.PayloadAttribute.FieldName.set -> void
HotChocolate.Types.PayloadAttribute.PayloadAttribute() -> void
HotChocolate.Types.PayloadAttribute.PayloadAttribute(string! fieldName) -> void
HotChocolate.Types.PayloadAttribute.TypeName.get -> string?
HotChocolate.Types.PayloadAttribute.TypeName.set -> void
HotChocolate.Types.PayloadObjectFieldDescriptorExtension
override HotChocolate.Types.InputAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IDescriptor! descriptor, System.Reflection.ICustomAttributeProvider! element) -> void
override HotChocolate.Types.PayloadAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
static HotChocolate.Types.ErrorObjectFieldDescriptorExtensions.Error(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type! errorType) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.ErrorObjectFieldDescriptorExtensions.Error<TError>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.InputDescriptorExtensions.Input(this HotChocolate.Types.IArgumentDescriptor! descriptor, string! argumentName = "input", string? typeName = null) -> HotChocolate.Types.IArgumentDescriptor!
static HotChocolate.Types.InputDescriptorExtensions.Input(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, string! argumentName = "input", string? typeName = null) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.PayloadObjectFieldDescriptorExtension.Payload(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, string? fieldName = null, string? typeName = null) -> HotChocolate.Types.IObjectFieldDescriptor!
~HotChocolate.Types.Descriptors.ArgumentDescriptor.ConfigureContextData(System.Action<HotChocolate.ExtensionData> configure) -> HotChocolate.Types.IArgumentDescriptor
~HotChocolate.Types.ErrorAttribute.ErrorAttribute(System.Type errorType) -> void
~HotChocolate.Types.ErrorAttribute.ErrorType.get -> System.Type
~HotChocolate.Types.Errors.IPayloadErrorFactory<TError, TException>
~HotChocolate.Types.Errors.IPayloadErrorFactory<TError, TException>.CreateErrorFrom(TException exception) -> TError
~HotChocolate.Types.IArgumentDescriptor.ConfigureContextData(System.Action<HotChocolate.ExtensionData> configure) -> HotChocolate.Types.IArgumentDescriptor
~override HotChocolate.Types.ErrorAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext context, HotChocolate.Types.IObjectFieldDescriptor descriptor, System.Reflection.MemberInfo member) -> void
~static HotChocolate.ErrorSchemaBuilderExtensions.AddErrorInterfaceType(this HotChocolate.ISchemaBuilder schemaBuilder, System.Type type) -> HotChocolate.ISchemaBuilder
~static HotChocolate.ErrorSchemaBuilderExtensions.AddErrorInterfaceType<T>(this HotChocolate.ISchemaBuilder schemaBuilder) -> HotChocolate.ISchemaBuilder
~static HotChocolate.Utilities.ReflectionUtils.ExtractMember<T>(this System.Linq.Expressions.Expression<System.Action<T>> memberExpression) -> System.Reflection.MemberInfo
~static HotChocolate.Utilities.ReflectionUtils.ExtractMethod<T>(this System.Linq.Expressions.Expression<System.Action<T>> memberExpression) -> System.Reflection.MethodInfo
