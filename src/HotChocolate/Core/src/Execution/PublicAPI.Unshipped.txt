HotChocolate.Execution.Configuration.IResolverCompilerBuilder
HotChocolate.Execution.Configuration.IResolverCompilerBuilder.RequestExecutorBuilder.get -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
HotChocolate.Execution.Configuration.ITypeModule
HotChocolate.Execution.Configuration.ITypeModule.CreateTypesAsync(HotChocolate.Types.Descriptors.IDescriptorContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.INamedType!>!>
HotChocolate.Execution.Configuration.ITypeModule.TypesChanged -> System.EventHandler<System.EventArgs!>!
HotChocolate.Execution.Configuration.RequestExecutorSetup.TypeModules.get -> System.Collections.Generic.IList<HotChocolate.Execution.Configuration.ITypeModule!>!
HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener
HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecutionDiagnosticEventListener() -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEventListener
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEventListener.EnableResolveFieldValue.get -> bool
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.AddedDocumentToCache(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.AddedOperationToCache(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.DispatchBatch(HotChocolate.Execution.IRequestContext! context) -> System.IDisposable!
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecuteRequest(HotChocolate.Execution.IRequestContext! context) -> System.IDisposable!
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecuteSubscription(HotChocolate.Execution.Processing.ISubscription! subscription) -> System.IDisposable!
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecutorCreated(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecutorEvicted(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.OnSubscriptionEvent(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context) -> System.IDisposable!
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ParseDocument(HotChocolate.Execution.IRequestContext! context) -> System.IDisposable!
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RequestError(HotChocolate.Execution.IRequestContext! context, System.Exception! exception) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ResolveFieldValue(HotChocolate.Resolvers.IMiddlewareContext! context) -> System.IDisposable!
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ResolverError(HotChocolate.Resolvers.IMiddlewareContext! context, HotChocolate.IError! error) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RetrievedDocumentFromCache(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RetrievedDocumentFromStorage(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RetrievedOperationFromCache(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RunTask(HotChocolate.Execution.IExecutionTask! task) -> System.IDisposable!
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.StartProcessing(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.StopProcessing(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.SubscriptionEventError(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, System.Exception! exception) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.SubscriptionEventResult(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, HotChocolate.Execution.IQueryResult! result) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.SubscriptionTransportError(HotChocolate.Execution.Processing.ISubscription! subscription, System.Exception! exception) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.SyntaxError(HotChocolate.Execution.IRequestContext! context, HotChocolate.IError! error) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.TaskError(HotChocolate.Execution.IExecutionTask! task, HotChocolate.IError! error) -> void
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ValidateDocument(HotChocolate.Execution.IRequestContext! context) -> System.IDisposable!
HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ValidationErrors(HotChocolate.Execution.IRequestContext! context, System.Collections.Generic.IReadOnlyList<HotChocolate.IError!>! errors) -> void
HotChocolate.Execution.IRequestContext.Clone() -> HotChocolate.Execution.IRequestContext!
HotChocolate.Execution.IRequestContext.DiagnosticEvents.get -> HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents!
HotChocolate.Execution.IRequestContext.IsValidDocument.get -> bool
HotChocolate.Execution.Options.ComplexityAnalyzerSettings
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.ApplyDefaults.get -> bool
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.ApplyDefaults.set -> void
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.Calculation.get -> HotChocolate.Execution.Pipeline.Complexity.ComplexityCalculation!
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.Calculation.set -> void
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.ComplexityAnalyzerSettings() -> void
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.ContextDataKey.get -> string!
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.ContextDataKey.set -> void
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.DefaultComplexity.get -> int
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.DefaultComplexity.set -> void
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.DefaultResolverComplexity.get -> int
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.DefaultResolverComplexity.set -> void
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.Enable.get -> bool
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.Enable.set -> void
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.MaximumAllowed.get -> int
HotChocolate.Execution.Options.ComplexityAnalyzerSettings.MaximumAllowed.set -> void
HotChocolate.Execution.Options.IComplexityAnalyzerOptionsAccessor
HotChocolate.Execution.Options.IComplexityAnalyzerOptionsAccessor.Complexity.get -> HotChocolate.Execution.Options.ComplexityAnalyzerSettings!
HotChocolate.Execution.Options.RequestExecutorOptions.Complexity.get -> HotChocolate.Execution.Options.ComplexityAnalyzerSettings!
HotChocolate.Execution.Pipeline.Complexity.ComplexityCalculation
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.ChildComplexity.get -> int
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.Complexity.get -> int
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.ComplexityContext() -> void
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.ComplexityContext(HotChocolate.Types.IOutputField! field, HotChocolate.Language.FieldNode! selection, HotChocolate.Types.CostDirective? cost, int fieldDepth, int nodeDepth, int childComplexity, int defaultComplexity, HotChocolate.Execution.IVariableValueCollection! valueCollection, HotChocolate.Types.InputParser! inputParser) -> void
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.DefaultMultiplier.get -> int?
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.Field.get -> HotChocolate.Types.IOutputField!
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.FieldDepth.get -> int
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.Multipliers.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Types.MultiplierPathString>!
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.NodeDepth.get -> int
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.Selection.get -> HotChocolate.Language.FieldNode!
HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.TryGetArgumentValue<T>(string! name, out T? value) -> bool
HotChocolate.Execution.Processing.Fragment.Fragment(int fragmentId, HotChocolate.Types.IObjectType! typeCondition, HotChocolate.Language.FragmentSpreadNode! fragmentSpread, HotChocolate.Language.FragmentDefinitionNode! fragmentDefinition, HotChocolate.Execution.Processing.ISelectionSet! selectionSet, bool internalFragment, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition) -> void
HotChocolate.Execution.Processing.Fragment.Fragment(int fragmentId, HotChocolate.Types.IObjectType! typeCondition, HotChocolate.Language.InlineFragmentNode! inlineFragment, HotChocolate.Execution.Processing.ISelectionSet! selectionSet, bool internalFragment, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition) -> void
HotChocolate.Execution.Processing.Fragment.Id.get -> int
HotChocolate.Execution.Processing.IArgumentMap.IsFinalNoErrors.get -> bool
HotChocolate.Execution.Processing.IFragment.Id.get -> int
HotChocolate.Execution.Processing.ISelection.Id.get -> int
HotChocolate.Execution.Processing.ISelection.PureResolver.get -> HotChocolate.Resolvers.PureFieldDelegate?
HotChocolate.Execution.Processing.ISelection.ResolverPipeline.get -> HotChocolate.Resolvers.FieldDelegate?
HotChocolate.Execution.Processing.ISelection.Strategy.get -> HotChocolate.Execution.Processing.SelectionExecutionStrategy
HotChocolate.Execution.Processing.Selection.Id.get -> int
HotChocolate.Execution.Processing.Selection.PureResolver.get -> HotChocolate.Resolvers.PureFieldDelegate?
HotChocolate.Execution.Processing.Selection.ResolverPipeline.get -> HotChocolate.Resolvers.FieldDelegate?
HotChocolate.Execution.Processing.Selection.Selection(int id, HotChocolate.Types.IObjectType! declaringType, HotChocolate.Types.IObjectField! field, HotChocolate.Language.FieldNode! selection, HotChocolate.Resolvers.FieldDelegate? resolverPipeline, HotChocolate.Resolvers.PureFieldDelegate? pureResolver = null, HotChocolate.NameString? responseName = null, System.Collections.Generic.IReadOnlyDictionary<HotChocolate.NameString, HotChocolate.Execution.Processing.ArgumentValue!>? arguments = null, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition = null, bool internalSelection = false, HotChocolate.Execution.Processing.SelectionExecutionStrategy? strategy = null) -> void
HotChocolate.Execution.Processing.Selection.Strategy.get -> HotChocolate.Execution.Processing.SelectionExecutionStrategy
HotChocolate.Execution.Processing.Selection.Type.get -> HotChocolate.Types.IType!
HotChocolate.Execution.Processing.Selection.TypeKind.get -> HotChocolate.Types.TypeKind
HotChocolate.Execution.Processing.SelectionExecutionStrategy
HotChocolate.Execution.Processing.SelectionExecutionStrategy.Default = 0 -> HotChocolate.Execution.Processing.SelectionExecutionStrategy
HotChocolate.Execution.Processing.SelectionExecutionStrategy.Pure = 2 -> HotChocolate.Execution.Processing.SelectionExecutionStrategy
HotChocolate.Execution.Processing.SelectionExecutionStrategy.Serial = 1 -> HotChocolate.Execution.Processing.SelectionExecutionStrategy
HotChocolate.Execution.Processing.SelectionOptimizerContext.GetNextId() -> int
Microsoft.Extensions.DependencyInjection.ResolverCompilerBuilderExtensions
static HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.EmptyScope.get -> System.IDisposable!
static HotChocolate.Execution.Options.ComplexityAnalyzerSettings.DefaultCalculation(HotChocolate.Execution.Pipeline.Complexity.ComplexityContext context) -> int
static HotChocolate.Execution.Processing.ArgumentCoercionHelper.TryCoerceArguments(this HotChocolate.Execution.Processing.IArgumentMap! arguments, HotChocolate.Resolvers.IResolverContext! resolverContext, out System.Collections.Generic.IReadOnlyDictionary<HotChocolate.NameString, HotChocolate.Execution.Processing.ArgumentValue!>? coercedArgs) -> bool
static HotChocolate.Execution.Processing.OperationCompiler.Compile(string! operationId, HotChocolate.Language.DocumentNode! document, HotChocolate.Language.OperationDefinitionNode! operation, HotChocolate.ISchema! schema, HotChocolate.Types.ObjectType! rootType, HotChocolate.Types.InputParser! inputParser, System.Collections.Generic.IEnumerable<HotChocolate.Execution.Processing.ISelectionOptimizer!>? optimizers = null) -> HotChocolate.Execution.Processing.IPreparedOperation!
static HotChocolate.Execution.Processing.VariableRewriter.Rewrite(HotChocolate.Language.IValueNode! node, HotChocolate.Types.IType! type, HotChocolate.Language.IValueNode? defaultValue, HotChocolate.Execution.IVariableValueCollection! variableValues) -> HotChocolate.Language.IValueNode!
static Microsoft.Extensions.DependencyInjection.InternalSchemaServiceCollectionExtensions.GetCombinedServices(this System.IServiceProvider! services) -> System.IServiceProvider!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddDiagnosticEventListener<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T!>! diagnosticEventListener) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationVisitor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, bool isCacheable = true) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationVisitor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Validation.Options.ValidationOptions!, T!>! factory, bool isCacheable = true) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureResolverCompiler(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Execution.Configuration.IResolverCompilerBuilder!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseOperationComplexityAnalyzer(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.ResolverCompilerBuilderExtensions.AddParameter<T>(this HotChocolate.Execution.Configuration.IResolverCompilerBuilder! builder, System.Linq.Expressions.Expression<System.Func<HotChocolate.Resolvers.IResolverContext!, T>!>! expression, System.Func<System.Reflection.ParameterInfo!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IResolverCompilerBuilder!
static Microsoft.Extensions.DependencyInjection.ResolverCompilerBuilderExtensions.AddService<TService>(this HotChocolate.Execution.Configuration.IResolverCompilerBuilder! builder) -> HotChocolate.Execution.Configuration.IResolverCompilerBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddConvention<TConvention, TConcreteConvention>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddGlobalObjectIdentification(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryFieldToMutationPayloads(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.Relay.MutationPayloadOptions!>? configureOptions = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, object? constantResult) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! resolverType, HotChocolate.NameString? typeName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResolver>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString? typeName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResult>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, TResult constantResult) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<HotChocolate.Types.INamedType!>! namedTypeFactory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Types.INamedType!>! namedTypeFactory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindRuntimeType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! runtimeType, HotChocolate.NameString? typeName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindRuntimeType<TRuntimeType>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString? typeName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.ModifyOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.ISchemaOptions!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.IReadOnlySchemaOptions! options) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*HotChocolate.Execution.IRequestMiddleware
*REMOVED*HotChocolate.Execution.IRequestMiddleware.InvokeAsync(HotChocolate.Execution.IRequestContext! context, HotChocolate.Execution.RequestDelegate! next) -> System.Threading.Tasks.Task!
*REMOVED*HotChocolate.Execution.Processing.CompileResolverPipeline
*REMOVED*HotChocolate.Execution.Processing.Fragment.Fragment(HotChocolate.Types.IObjectType! typeCondition, HotChocolate.Language.FragmentSpreadNode! fragmentSpread, HotChocolate.Language.FragmentDefinitionNode! fragmentDefinition, HotChocolate.Execution.Processing.ISelectionSet! selectionSet, bool internalFragment, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition) -> void
*REMOVED*HotChocolate.Execution.Processing.Fragment.Fragment(HotChocolate.Types.IObjectType! typeCondition, HotChocolate.Language.InlineFragmentNode! inlineFragment, HotChocolate.Execution.Processing.ISelectionSet! selectionSet, bool internalFragment, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition) -> void
*REMOVED*HotChocolate.Execution.Processing.ISelection.ResolverPipeline.get -> HotChocolate.Resolvers.FieldDelegate!
*REMOVED*HotChocolate.Execution.Processing.Selection.ResolverPipeline.get -> HotChocolate.Resolvers.FieldDelegate!
*REMOVED*HotChocolate.Execution.Processing.Selection.Selection(HotChocolate.Types.IObjectType! declaringType, HotChocolate.Types.IObjectField! field, HotChocolate.Language.FieldNode! selection, HotChocolate.Resolvers.FieldDelegate! resolverPipeline, HotChocolate.NameString? responseName = null, System.Collections.Generic.IReadOnlyDictionary<HotChocolate.NameString, HotChocolate.Execution.Processing.ArgumentValue!>? arguments = null, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition = null, bool internalSelection = false) -> void
*REMOVED*HotChocolate.Execution.Processing.SelectionOptimizerContext.SelectionOptimizerContext(HotChocolate.ISchema! schema, System.Collections.Immutable.IImmutableStack<HotChocolate.Types.IObjectField!>! path, HotChocolate.Types.IObjectType! type, HotChocolate.Language.SelectionSetNode! selectionSet, System.Collections.Generic.IDictionary<string!, HotChocolate.Execution.Processing.Selection!>! fields, HotChocolate.Execution.Processing.CompileResolverPipeline! compileResolverPipeline) -> void
*REMOVED*static HotChocolate.Execution.Processing.ArgumentCoercionHelper.TryCoerceArguments(this HotChocolate.Execution.Processing.IArgumentMap! arguments, HotChocolate.Execution.IVariableValueCollection! variables, System.Action<HotChocolate.IError!>! reportError, out System.Collections.Generic.IReadOnlyDictionary<HotChocolate.NameString, HotChocolate.Execution.Processing.ArgumentValue!>? coercedArgs) -> bool
*REMOVED*static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddMaxComplexityRule(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, int maxAllowedComplexity) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*HotChocolate.Execution.Processing.IPreparedOperation.ProposedTaskCount.get -> int
*REMOVED*static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationVisitor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Validation.Options.ValidationOptions!, T!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationVisitor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindComplexType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Configuration.Bindings.IBindType<T!>!>? configure = null, HotChocolate.Types.BindingBehavior bindingBehavior = HotChocolate.Types.BindingBehavior.Implicit) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindEnumType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! runtimeType, System.Action<HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor!>? configure = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindEnumType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor!>? configure = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindResolver<TResolver>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Configuration.Bindings.IBindResolver<TResolver!>!>? configure = null, HotChocolate.Types.BindingBehavior bindingBehavior = HotChocolate.Types.BindingBehavior.Implicit) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, object? constantValue) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, object? constantValue) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.BatchDispatched(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.BatchDispatched(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResult>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, TResult constantValue) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.ModifyOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Configuration.ISchemaOptions!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.IReadOnlySchemaOptions! options) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Resolvers.FieldResolver! fieldResolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static HotChocolate.Execution.Processing.OperationCompiler.Compile(string! operationId, HotChocolate.Language.DocumentNode! document, HotChocolate.Language.OperationDefinitionNode! operation, HotChocolate.ISchema! schema, HotChocolate.Types.ObjectType! rootType, System.Collections.Generic.IEnumerable<HotChocolate.Execution.Processing.ISelectionOptimizer!>? optimizers = null) -> HotChocolate.Execution.Processing.IPreparedOperation!
*REMOVED*static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddConvention<TConvetion, TConcreteConvention>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
*REMOVED*static HotChocolate.Execution.Processing.VariableRewriter.Rewrite(HotChocolate.Language.IValueNode! node, HotChocolate.Execution.IVariableValueCollection! variableValues) -> HotChocolate.Language.IValueNode!
*REMOVED*HotChocolate.Execution.Instrumentation.IActivityScope
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEventListener.EnableResolveFieldValue.get -> bool
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.AddedDocumentToCache(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.AddedOperationToCache(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.BatchDispatched(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ExecuteRequest(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ExecuteSubscription(HotChocolate.Execution.Processing.ISubscription! subscription) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ExecutorCreated(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ExecutorEvicted(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.OnSubscriptionEvent(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ParseDocument(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RequestError(HotChocolate.Execution.IRequestContext! context, System.Exception! exception) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ResolveFieldValue(HotChocolate.Resolvers.IMiddlewareContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ResolverError(HotChocolate.Resolvers.IMiddlewareContext! context, HotChocolate.IError! error) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RetrievedDocumentFromCache(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RetrievedDocumentFromStorage(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RetrievedOperationFromCache(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RunTask(HotChocolate.Execution.IExecutionTask! task) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.SubscriptionEventError(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, System.Exception! exception) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.SubscriptionEventResult(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, HotChocolate.Execution.IQueryResult! result) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.SubscriptionTransportError(HotChocolate.Execution.Processing.ISubscription! subscription, System.Exception! exception) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.SyntaxError(HotChocolate.Execution.IRequestContext! context, HotChocolate.IError! error) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.TaskError(HotChocolate.Execution.IExecutionTask! task, HotChocolate.IError! error) -> void
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ValidateDocument(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ValidationErrors(HotChocolate.Execution.IRequestContext! context, System.Collections.Generic.IReadOnlyList<HotChocolate.IError!>! errors) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.AddedDocumentToCache(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.AddedOperationToCache(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.BatchDispatched(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.EnableResolveFieldValue.get -> bool
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ExecuteRequest(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ExecuteSubscription(HotChocolate.Execution.Processing.ISubscription! subscription) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ExecutorCreated(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ExecutorEvicted(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.OnSubscriptionEvent(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ParseDocument(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RequestError(HotChocolate.Execution.IRequestContext! context, System.Exception! exception) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ResolveFieldValue(HotChocolate.Resolvers.IMiddlewareContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ResolverError(HotChocolate.Resolvers.IMiddlewareContext! context, HotChocolate.IError! error) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RetrievedDocumentFromCache(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RetrievedDocumentFromStorage(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RetrievedOperationFromCache(HotChocolate.Execution.IRequestContext! context) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RunTask(HotChocolate.Execution.IExecutionTask! task) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.SubscriptionEventError(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, System.Exception! exception) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.SubscriptionEventResult(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, HotChocolate.Execution.IQueryResult! result) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.SubscriptionTransportError(HotChocolate.Execution.Processing.ISubscription! subscription, System.Exception! exception) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.SyntaxError(HotChocolate.Execution.IRequestContext! context, HotChocolate.IError! error) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.TaskError(HotChocolate.Execution.IExecutionTask! task, HotChocolate.IError! error) -> void
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ValidateDocument(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
*REMOVED*virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ValidationErrors(HotChocolate.Execution.IRequestContext! context, System.Collections.Generic.IReadOnlyList<HotChocolate.IError!>! errors) -> void
*REMOVED*HotChocolate.Execution.IRequestContext.DiagnosticEvents.get -> HotChocolate.Execution.Instrumentation.IDiagnosticEvents!
*REMOVED*static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddDiagnosticEventListener<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T>! diagnosticEventListener) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.AddedDocumentToCache(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.AddedOperationToCache(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.DispatchBatch(HotChocolate.Execution.IRequestContext! context) -> System.IDisposable!
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.EnableResolveFieldValue.get -> bool
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecuteRequest(HotChocolate.Execution.IRequestContext! context) -> System.IDisposable!
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecuteSubscription(HotChocolate.Execution.Processing.ISubscription! subscription) -> System.IDisposable!
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecutorCreated(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecutorEvicted(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.OnSubscriptionEvent(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context) -> System.IDisposable!
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ParseDocument(HotChocolate.Execution.IRequestContext! context) -> System.IDisposable!
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RequestError(HotChocolate.Execution.IRequestContext! context, System.Exception! exception) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ResolveFieldValue(HotChocolate.Resolvers.IMiddlewareContext! context) -> System.IDisposable!
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ResolverError(HotChocolate.Resolvers.IMiddlewareContext! context, HotChocolate.IError! error) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RetrievedDocumentFromCache(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RetrievedDocumentFromStorage(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RetrievedOperationFromCache(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RunTask(HotChocolate.Execution.IExecutionTask! task) -> System.IDisposable!
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.StartProcessing(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.StopProcessing(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.SubscriptionEventError(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, System.Exception! exception) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.SubscriptionEventResult(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, HotChocolate.Execution.IQueryResult! result) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.SubscriptionTransportError(HotChocolate.Execution.Processing.ISubscription! subscription, System.Exception! exception) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.SyntaxError(HotChocolate.Execution.IRequestContext! context, HotChocolate.IError! error) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.TaskError(HotChocolate.Execution.IExecutionTask! task, HotChocolate.IError! error) -> void
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ValidateDocument(HotChocolate.Execution.IRequestContext! context) -> System.IDisposable!
virtual HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ValidationErrors(HotChocolate.Execution.IRequestContext! context, System.Collections.Generic.IReadOnlyList<HotChocolate.IError!>! errors) -> void
*REMOVED*HotChocolate.Execution.Processing.ResultMap.Complete() -> void