#nullable enable
HotChocolate.Execution.AutoUpdateRequestExecutorProxy
HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Dispose() -> void
HotChocolate.Execution.AutoUpdateRequestExecutorProxy.ExecuteAsync(HotChocolate.Execution.IQueryRequest! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
HotChocolate.Execution.AutoUpdateRequestExecutorProxy.ExecuteBatchAsync(System.Collections.Generic.IEnumerable<HotChocolate.Execution.IQueryRequest!>! requestBatch, bool allowParallelExecution = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IBatchQueryResult!>!
HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Schema.get -> HotChocolate.ISchema!
HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Services.get -> System.IServiceProvider!
HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Version.get -> ulong
HotChocolate.Execution.Batching.CollectVariablesVisitationMap
HotChocolate.Execution.Batching.CollectVariablesVisitationMap.CollectVariablesVisitationMap() -> void
HotChocolate.Execution.Batching.CollectVariablesVisitationMap.Initialize(System.Collections.Generic.IReadOnlyDictionary<string!, HotChocolate.Language.FragmentDefinitionNode!>! fragments) -> void
HotChocolate.Execution.Batching.ExportDirective
HotChocolate.Execution.Batching.ExportDirective.As.get -> string?
HotChocolate.Execution.Batching.ExportDirective.As.set -> void
HotChocolate.Execution.Batching.ExportDirective.ExportDirective() -> void
HotChocolate.Execution.Batching.ExportDirectiveType
HotChocolate.Execution.Batching.ExportDirectiveType.ExportDirectiveType() -> void
HotChocolate.Execution.Batching.ExportedVariable
HotChocolate.Execution.Batching.ExportedVariable.ExportedVariable(string! name, HotChocolate.Types.IType! type, object? value) -> void
HotChocolate.Execution.Batching.ExportedVariable.Name.get -> string!
HotChocolate.Execution.Batching.ExportedVariable.Type.get -> HotChocolate.Types.IType!
HotChocolate.Execution.Batching.ExportedVariable.Value.get -> object?
HotChocolate.Execution.Caching.IPreparedOperationCache
HotChocolate.Execution.Caching.IPreparedOperationCache.Capacity.get -> int
HotChocolate.Execution.Caching.IPreparedOperationCache.Clear() -> void
HotChocolate.Execution.Caching.IPreparedOperationCache.Count.get -> int
HotChocolate.Execution.Caching.IPreparedOperationCache.TryAddOperation(string! operationId, HotChocolate.Execution.Processing.IPreparedOperation! operation) -> void
HotChocolate.Execution.Caching.IPreparedOperationCache.TryGetOperation(string! operationId, out HotChocolate.Execution.Processing.IPreparedOperation? operation) -> bool
HotChocolate.Execution.Configuration.ConfigureRequestExecutorSetup
HotChocolate.Execution.Configuration.ConfigureRequestExecutorSetup.Configure(HotChocolate.Execution.Configuration.RequestExecutorSetup! options) -> void
HotChocolate.Execution.Configuration.ConfigureRequestExecutorSetup.ConfigureRequestExecutorSetup(HotChocolate.NameString schemaName, HotChocolate.Execution.Configuration.RequestExecutorSetup! options) -> void
HotChocolate.Execution.Configuration.ConfigureRequestExecutorSetup.ConfigureRequestExecutorSetup(HotChocolate.NameString schemaName, System.Action<HotChocolate.Execution.Configuration.RequestExecutorSetup!>! configure) -> void
HotChocolate.Execution.Configuration.ConfigureRequestExecutorSetup.SchemaName.get -> HotChocolate.NameString
HotChocolate.Execution.Configuration.IApplicationServiceProvider
HotChocolate.Execution.Configuration.IConfigureRequestExecutorSetup
HotChocolate.Execution.Configuration.IConfigureRequestExecutorSetup.SchemaName.get -> HotChocolate.NameString
HotChocolate.Execution.Configuration.IRequestExecutorBuilder
HotChocolate.Execution.Configuration.IRequestExecutorBuilder.Name.get -> HotChocolate.NameString
HotChocolate.Execution.Configuration.IRequestExecutorBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
HotChocolate.Execution.Configuration.IRequestExecutorOptionsMonitor
HotChocolate.Execution.Configuration.IRequestExecutorOptionsMonitor.GetAsync(HotChocolate.NameString schemaName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.Configuration.RequestExecutorSetup!>
HotChocolate.Execution.Configuration.IRequestExecutorOptionsMonitor.OnChange(System.Action<HotChocolate.NameString>! listener) -> System.IDisposable!
HotChocolate.Execution.Configuration.IRequestExecutorOptionsProvider
HotChocolate.Execution.Configuration.IRequestExecutorOptionsProvider.GetOptionsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<HotChocolate.Execution.Configuration.IConfigureRequestExecutorSetup!>!>
HotChocolate.Execution.Configuration.IRequestExecutorOptionsProvider.OnChange(System.Action<HotChocolate.Execution.Configuration.IConfigureRequestExecutorSetup!>! listener) -> System.IDisposable!
HotChocolate.Execution.Configuration.OnRequestExecutorCreatedAction
HotChocolate.Execution.Configuration.OnRequestExecutorCreatedAction.Action.get -> System.Action<HotChocolate.Execution.IRequestExecutor!>?
HotChocolate.Execution.Configuration.OnRequestExecutorCreatedAction.AsyncAction.get -> System.Func<HotChocolate.Execution.IRequestExecutor!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>?
HotChocolate.Execution.Configuration.OnRequestExecutorCreatedAction.OnRequestExecutorCreatedAction() -> void
HotChocolate.Execution.Configuration.OnRequestExecutorCreatedAction.OnRequestExecutorCreatedAction(System.Action<HotChocolate.Execution.IRequestExecutor!>! action) -> void
HotChocolate.Execution.Configuration.OnRequestExecutorCreatedAction.OnRequestExecutorCreatedAction(System.Func<HotChocolate.Execution.IRequestExecutor!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! asyncAction) -> void
HotChocolate.Execution.Configuration.OnRequestExecutorEvictedAction
HotChocolate.Execution.Configuration.OnRequestExecutorEvictedAction.Action.get -> System.Action<HotChocolate.Execution.IRequestExecutor!>?
HotChocolate.Execution.Configuration.OnRequestExecutorEvictedAction.AsyncAction.get -> System.Func<HotChocolate.Execution.IRequestExecutor!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>?
HotChocolate.Execution.Configuration.OnRequestExecutorEvictedAction.OnRequestExecutorEvictedAction() -> void
HotChocolate.Execution.Configuration.OnRequestExecutorEvictedAction.OnRequestExecutorEvictedAction(System.Action<HotChocolate.Execution.IRequestExecutor!>! action) -> void
HotChocolate.Execution.Configuration.OnRequestExecutorEvictedAction.OnRequestExecutorEvictedAction(System.Func<HotChocolate.Execution.IRequestExecutor!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! asyncAction) -> void
HotChocolate.Execution.Configuration.RequestExecutorBuilderLegacyHelper
HotChocolate.Execution.Configuration.RequestExecutorOptionsAction
HotChocolate.Execution.Configuration.RequestExecutorOptionsAction.Action.get -> System.Action<HotChocolate.Execution.Options.RequestExecutorOptions!>?
HotChocolate.Execution.Configuration.RequestExecutorOptionsAction.AsyncAction.get -> System.Func<HotChocolate.Execution.Options.RequestExecutorOptions!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>?
HotChocolate.Execution.Configuration.RequestExecutorOptionsAction.RequestExecutorOptionsAction() -> void
HotChocolate.Execution.Configuration.RequestExecutorOptionsAction.RequestExecutorOptionsAction(System.Action<HotChocolate.Execution.Options.RequestExecutorOptions!>! action) -> void
HotChocolate.Execution.Configuration.RequestExecutorOptionsAction.RequestExecutorOptionsAction(System.Func<HotChocolate.Execution.Options.RequestExecutorOptions!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! asyncAction) -> void
HotChocolate.Execution.Configuration.RequestExecutorSetup
HotChocolate.Execution.Configuration.RequestExecutorSetup.CopyTo(HotChocolate.Execution.Configuration.RequestExecutorSetup! options) -> void
HotChocolate.Execution.Configuration.RequestExecutorSetup.OnRequestExecutorCreated.get -> System.Collections.Generic.IList<HotChocolate.Execution.Configuration.OnRequestExecutorCreatedAction>!
HotChocolate.Execution.Configuration.RequestExecutorSetup.OnRequestExecutorEvicted.get -> System.Collections.Generic.IList<HotChocolate.Execution.Configuration.OnRequestExecutorEvictedAction>!
HotChocolate.Execution.Configuration.RequestExecutorSetup.Pipeline.get -> System.Collections.Generic.IList<HotChocolate.Execution.RequestCoreMiddleware!>!
HotChocolate.Execution.Configuration.RequestExecutorSetup.RequestExecutorOptions.get -> HotChocolate.Execution.Options.RequestExecutorOptions?
HotChocolate.Execution.Configuration.RequestExecutorSetup.RequestExecutorOptions.set -> void
HotChocolate.Execution.Configuration.RequestExecutorSetup.RequestExecutorOptionsActions.get -> System.Collections.Generic.IList<HotChocolate.Execution.Configuration.RequestExecutorOptionsAction>!
HotChocolate.Execution.Configuration.RequestExecutorSetup.RequestExecutorSetup() -> void
HotChocolate.Execution.Configuration.RequestExecutorSetup.Schema.get -> HotChocolate.ISchema?
HotChocolate.Execution.Configuration.RequestExecutorSetup.Schema.set -> void
HotChocolate.Execution.Configuration.RequestExecutorSetup.SchemaBuilder.get -> HotChocolate.ISchemaBuilder?
HotChocolate.Execution.Configuration.RequestExecutorSetup.SchemaBuilder.set -> void
HotChocolate.Execution.Configuration.RequestExecutorSetup.SchemaBuilderActions.get -> System.Collections.Generic.IList<HotChocolate.Execution.Configuration.SchemaBuilderAction>!
HotChocolate.Execution.Configuration.RequestExecutorSetup.SchemaServices.get -> System.Collections.Generic.IList<System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection!>!>!
HotChocolate.Execution.Configuration.SchemaBuilderAction
HotChocolate.Execution.Configuration.SchemaBuilderAction.Action.get -> System.Action<System.IServiceProvider!, HotChocolate.ISchemaBuilder!>?
HotChocolate.Execution.Configuration.SchemaBuilderAction.AsyncAction.get -> System.Func<System.IServiceProvider!, HotChocolate.ISchemaBuilder!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>?
HotChocolate.Execution.Configuration.SchemaBuilderAction.SchemaBuilderAction() -> void
HotChocolate.Execution.Configuration.SchemaBuilderAction.SchemaBuilderAction(System.Action<System.IServiceProvider!, HotChocolate.ISchemaBuilder!>! action) -> void
HotChocolate.Execution.Configuration.SchemaBuilderAction.SchemaBuilderAction(System.Func<System.IServiceProvider!, HotChocolate.ISchemaBuilder!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! asyncAction) -> void
HotChocolate.Execution.ExecutionObjectFieldDescriptorExtensions
HotChocolate.Execution.ExecutionRequestExecutorExtensions
HotChocolate.Execution.Instrumentation.DefaultTimestampProvider
HotChocolate.Execution.Instrumentation.DefaultTimestampProvider.DefaultTimestampProvider() -> void
HotChocolate.Execution.Instrumentation.DefaultTimestampProvider.NowInNanoseconds() -> long
HotChocolate.Execution.Instrumentation.DefaultTimestampProvider.UtcNow() -> System.DateTime
HotChocolate.Execution.Instrumentation.DiagnosticEventListener
HotChocolate.Execution.Instrumentation.DiagnosticEventListener.DiagnosticEventListener() -> void
HotChocolate.Execution.Instrumentation.DiagnosticEventListener.EmptyScope.get -> HotChocolate.Execution.Instrumentation.IActivityScope!
HotChocolate.Execution.Instrumentation.IActivityScope
HotChocolate.Execution.Instrumentation.IDiagnosticEventListener
HotChocolate.Execution.Instrumentation.IDiagnosticEventListener.EnableResolveFieldValue.get -> bool
HotChocolate.Execution.Instrumentation.IDiagnosticEvents
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.AddedDocumentToCache(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.AddedOperationToCache(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.BatchDispatched(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ExecuteRequest(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ExecuteSubscription(HotChocolate.Execution.Processing.ISubscription! subscription) -> HotChocolate.Execution.Instrumentation.IActivityScope!
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ExecutorCreated(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ExecutorEvicted(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.OnSubscriptionEvent(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ParseDocument(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RequestError(HotChocolate.Execution.IRequestContext! context, System.Exception! exception) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ResolveFieldValue(HotChocolate.Resolvers.IMiddlewareContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ResolverError(HotChocolate.Resolvers.IMiddlewareContext! context, HotChocolate.IError! error) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RetrievedDocumentFromCache(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RetrievedDocumentFromStorage(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RetrievedOperationFromCache(HotChocolate.Execution.IRequestContext! context) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.RunTask(HotChocolate.Execution.IExecutionTask! task) -> HotChocolate.Execution.Instrumentation.IActivityScope!
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.SubscriptionEventError(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, System.Exception! exception) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.SubscriptionEventResult(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, HotChocolate.Execution.IQueryResult! result) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.SubscriptionTransportError(HotChocolate.Execution.Processing.ISubscription! subscription, System.Exception! exception) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.SyntaxError(HotChocolate.Execution.IRequestContext! context, HotChocolate.IError! error) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.TaskError(HotChocolate.Execution.IExecutionTask! task, HotChocolate.IError! error) -> void
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ValidateDocument(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
HotChocolate.Execution.Instrumentation.IDiagnosticEvents.ValidationErrors(HotChocolate.Execution.IRequestContext! context, System.Collections.Generic.IReadOnlyList<HotChocolate.IError!>! errors) -> void
HotChocolate.Execution.Instrumentation.ITimestampProvider
HotChocolate.Execution.Instrumentation.ITimestampProvider.NowInNanoseconds() -> long
HotChocolate.Execution.Instrumentation.ITimestampProvider.UtcNow() -> System.DateTime
HotChocolate.Execution.Instrumentation.SubscriptionEventContext
HotChocolate.Execution.Instrumentation.SubscriptionEventContext.Payload.get -> object!
HotChocolate.Execution.Instrumentation.SubscriptionEventContext.Subscription.get -> HotChocolate.Execution.Processing.ISubscription!
HotChocolate.Execution.Instrumentation.SubscriptionEventContext.SubscriptionEventContext() -> void
HotChocolate.Execution.Instrumentation.SubscriptionEventContext.SubscriptionEventContext(HotChocolate.Execution.Processing.ISubscription! subscription, object! payload) -> void
HotChocolate.Execution.Internal.IInternalRequestExecutorResolver
HotChocolate.Execution.Internal.IInternalRequestExecutorResolver.GetRequestExecutorNoLockAsync(HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.IRequestExecutor!>
HotChocolate.Execution.IRequestContext
HotChocolate.Execution.IRequestContext.Activator.get -> HotChocolate.Execution.Processing.IActivator!
HotChocolate.Execution.IRequestContext.Converter.get -> HotChocolate.Utilities.ITypeConverter!
HotChocolate.Execution.IRequestContext.DiagnosticEvents.get -> HotChocolate.Execution.Instrumentation.IDiagnosticEvents!
HotChocolate.Execution.IRequestContext.Document.get -> HotChocolate.Language.DocumentNode?
HotChocolate.Execution.IRequestContext.Document.set -> void
HotChocolate.Execution.IRequestContext.DocumentHash.get -> string?
HotChocolate.Execution.IRequestContext.DocumentHash.set -> void
HotChocolate.Execution.IRequestContext.DocumentId.get -> string?
HotChocolate.Execution.IRequestContext.DocumentId.set -> void
HotChocolate.Execution.IRequestContext.ErrorHandler.get -> HotChocolate.IErrorHandler!
HotChocolate.Execution.IRequestContext.Exception.get -> System.Exception?
HotChocolate.Execution.IRequestContext.Exception.set -> void
HotChocolate.Execution.IRequestContext.ExecutorVersion.get -> ulong
HotChocolate.Execution.IRequestContext.IsCachedDocument.get -> bool
HotChocolate.Execution.IRequestContext.IsCachedDocument.set -> void
HotChocolate.Execution.IRequestContext.IsPersistedDocument.get -> bool
HotChocolate.Execution.IRequestContext.IsPersistedDocument.set -> void
HotChocolate.Execution.IRequestContext.Operation.get -> HotChocolate.Execution.Processing.IPreparedOperation?
HotChocolate.Execution.IRequestContext.Operation.set -> void
HotChocolate.Execution.IRequestContext.OperationId.get -> string?
HotChocolate.Execution.IRequestContext.OperationId.set -> void
HotChocolate.Execution.IRequestContext.Request.get -> HotChocolate.Execution.IQueryRequest!
HotChocolate.Execution.IRequestContext.RequestAborted.get -> System.Threading.CancellationToken
HotChocolate.Execution.IRequestContext.RequestAborted.set -> void
HotChocolate.Execution.IRequestContext.Result.get -> HotChocolate.Execution.IExecutionResult?
HotChocolate.Execution.IRequestContext.Result.set -> void
HotChocolate.Execution.IRequestContext.Schema.get -> HotChocolate.ISchema!
HotChocolate.Execution.IRequestContext.Services.get -> System.IServiceProvider!
HotChocolate.Execution.IRequestContext.ValidationResult.get -> HotChocolate.Validation.DocumentValidatorResult?
HotChocolate.Execution.IRequestContext.ValidationResult.set -> void
HotChocolate.Execution.IRequestContext.Variables.get -> HotChocolate.Execution.IVariableValueCollection?
HotChocolate.Execution.IRequestContext.Variables.set -> void
HotChocolate.Execution.IRequestContextAccessor
HotChocolate.Execution.IRequestContextAccessor.RequestContext.get -> HotChocolate.Execution.IRequestContext!
HotChocolate.Execution.IRequestCoreMiddlewareContext
HotChocolate.Execution.IRequestCoreMiddlewareContext.Options.get -> HotChocolate.Execution.Options.IRequestExecutorOptionsAccessor!
HotChocolate.Execution.IRequestCoreMiddlewareContext.SchemaName.get -> HotChocolate.NameString
HotChocolate.Execution.IRequestCoreMiddlewareContext.SchemaServices.get -> System.IServiceProvider!
HotChocolate.Execution.IRequestCoreMiddlewareContext.Services.get -> System.IServiceProvider!
HotChocolate.Execution.IRequestExecutor
HotChocolate.Execution.IRequestExecutor.ExecuteAsync(HotChocolate.Execution.IQueryRequest! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
HotChocolate.Execution.IRequestExecutor.ExecuteBatchAsync(System.Collections.Generic.IEnumerable<HotChocolate.Execution.IQueryRequest!>! requestBatch, bool allowParallelExecution = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IBatchQueryResult!>!
HotChocolate.Execution.IRequestExecutor.Schema.get -> HotChocolate.ISchema!
HotChocolate.Execution.IRequestExecutor.Services.get -> System.IServiceProvider!
HotChocolate.Execution.IRequestExecutor.Version.get -> ulong
HotChocolate.Execution.IRequestExecutorResolver
HotChocolate.Execution.IRequestExecutorResolver.EvictRequestExecutor(HotChocolate.NameString schemaName = default(HotChocolate.NameString)) -> void
HotChocolate.Execution.IRequestExecutorResolver.GetRequestExecutorAsync(HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.IRequestExecutor!>
HotChocolate.Execution.IRequestExecutorResolver.RequestExecutorEvicted -> System.EventHandler<HotChocolate.Execution.RequestExecutorEvictedEventArgs!>?
HotChocolate.Execution.IRequestMiddleware
HotChocolate.Execution.IRequestMiddleware.InvokeAsync(HotChocolate.Execution.IRequestContext! context, HotChocolate.Execution.RequestDelegate! next) -> System.Threading.Tasks.Task!
HotChocolate.Execution.Options.IDocumentCacheSizeOptionsAccessor
HotChocolate.Execution.Options.IDocumentCacheSizeOptionsAccessor.QueryCacheSize.get -> int
HotChocolate.Execution.Options.IErrorHandlerOptionsAccessor
HotChocolate.Execution.Options.IErrorHandlerOptionsAccessor.IncludeExceptionDetails.get -> bool
HotChocolate.Execution.Options.IInstrumentationOptionsAccessor
HotChocolate.Execution.Options.IInstrumentationOptionsAccessor.TracingPreference.get -> HotChocolate.Execution.Options.TracingPreference
HotChocolate.Execution.Options.IRequestExecutorOptionsAccessor
HotChocolate.Execution.Options.IRequestTimeoutOptionsAccessor
HotChocolate.Execution.Options.IRequestTimeoutOptionsAccessor.ExecutionTimeout.get -> System.TimeSpan
HotChocolate.Execution.Options.RequestExecutorOptions
HotChocolate.Execution.Options.RequestExecutorOptions.ExecutionTimeout.get -> System.TimeSpan
HotChocolate.Execution.Options.RequestExecutorOptions.ExecutionTimeout.set -> void
HotChocolate.Execution.Options.RequestExecutorOptions.IncludeExceptionDetails.get -> bool
HotChocolate.Execution.Options.RequestExecutorOptions.IncludeExceptionDetails.set -> void
HotChocolate.Execution.Options.RequestExecutorOptions.QueryCacheSize.get -> int
HotChocolate.Execution.Options.RequestExecutorOptions.QueryCacheSize.set -> void
HotChocolate.Execution.Options.RequestExecutorOptions.RequestExecutorOptions() -> void
HotChocolate.Execution.Options.RequestExecutorOptions.TracingPreference.get -> HotChocolate.Execution.Options.TracingPreference
HotChocolate.Execution.Options.RequestExecutorOptions.TracingPreference.set -> void
HotChocolate.Execution.Options.RequestExecutorOptions.UseComplexityMultipliers.get -> bool?
HotChocolate.Execution.Options.RequestExecutorOptions.UseComplexityMultipliers.set -> void
HotChocolate.Execution.Options.TracingPreference
HotChocolate.Execution.Options.TracingPreference.Always = 2 -> HotChocolate.Execution.Options.TracingPreference
HotChocolate.Execution.Options.TracingPreference.Never = 0 -> HotChocolate.Execution.Options.TracingPreference
HotChocolate.Execution.Options.TracingPreference.OnDemand = 1 -> HotChocolate.Execution.Options.TracingPreference
HotChocolate.Execution.Processing.ArgumentCoercionHelper
HotChocolate.Execution.Processing.ArgumentValue
HotChocolate.Execution.Processing.ArgumentValue.Argument.get -> HotChocolate.Types.IInputField!
HotChocolate.Execution.Processing.ArgumentValue.ArgumentValue(HotChocolate.Types.IInputField! argument, HotChocolate.IError! error) -> void
HotChocolate.Execution.Processing.ArgumentValue.ArgumentValue(HotChocolate.Types.IInputField! argument, HotChocolate.Types.ValueKind kind, bool isFinal, bool isImplicit, object? value, HotChocolate.Language.IValueNode! valueLiteral) -> void
HotChocolate.Execution.Processing.ArgumentValue.Error.get -> HotChocolate.IError?
HotChocolate.Execution.Processing.ArgumentValue.Formatter.get -> HotChocolate.Types.IInputValueFormatter?
HotChocolate.Execution.Processing.ArgumentValue.HasError.get -> bool
HotChocolate.Execution.Processing.ArgumentValue.IsFinal.get -> bool
HotChocolate.Execution.Processing.ArgumentValue.IsImplicit.get -> bool
HotChocolate.Execution.Processing.ArgumentValue.Kind.get -> HotChocolate.Types.ValueKind?
HotChocolate.Execution.Processing.ArgumentValue.Type.get -> HotChocolate.Types.IInputType!
HotChocolate.Execution.Processing.ArgumentValue.Value.get -> object?
HotChocolate.Execution.Processing.ArgumentValue.ValueLiteral.get -> HotChocolate.Language.IValueNode?
HotChocolate.Execution.Processing.CompileResolverPipeline
HotChocolate.Execution.Processing.DefaultTransactionScope
HotChocolate.Execution.Processing.DefaultTransactionScope.Complete() -> void
HotChocolate.Execution.Processing.DefaultTransactionScope.Context.get -> HotChocolate.Execution.IRequestContext!
HotChocolate.Execution.Processing.DefaultTransactionScope.DefaultTransactionScope(HotChocolate.Execution.IRequestContext! context, System.Transactions.TransactionScope! transaction) -> void
HotChocolate.Execution.Processing.DefaultTransactionScope.Dispose() -> void
HotChocolate.Execution.Processing.DefaultTransactionScope.Transaction.get -> System.Transactions.TransactionScope!
HotChocolate.Execution.Processing.DefaultTransactionScopeHandler
HotChocolate.Execution.Processing.DefaultTransactionScopeHandler.DefaultTransactionScopeHandler() -> void
HotChocolate.Execution.Processing.Fragment
HotChocolate.Execution.Processing.Fragment.Directives.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.DirectiveNode!>!
HotChocolate.Execution.Processing.Fragment.Fragment(HotChocolate.Types.IObjectType! typeCondition, HotChocolate.Language.FragmentSpreadNode! fragmentSpread, HotChocolate.Language.FragmentDefinitionNode! fragmentDefinition, HotChocolate.Execution.Processing.ISelectionSet! selectionSet, bool internalFragment, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition) -> void
HotChocolate.Execution.Processing.Fragment.Fragment(HotChocolate.Types.IObjectType! typeCondition, HotChocolate.Language.InlineFragmentNode! inlineFragment, HotChocolate.Execution.Processing.ISelectionSet! selectionSet, bool internalFragment, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition) -> void
HotChocolate.Execution.Processing.Fragment.GetLabel(HotChocolate.Execution.IVariableValueCollection! variables) -> string?
HotChocolate.Execution.Processing.Fragment.InclusionKind.get -> HotChocolate.Execution.Processing.SelectionInclusionKind
HotChocolate.Execution.Processing.Fragment.IsConditional.get -> bool
HotChocolate.Execution.Processing.Fragment.IsIncluded(HotChocolate.Execution.IVariableValueCollection! variableValues, bool allowInternals = false) -> bool
HotChocolate.Execution.Processing.Fragment.IsInternal.get -> bool
HotChocolate.Execution.Processing.Fragment.SelectionSet.get -> HotChocolate.Execution.Processing.ISelectionSet!
HotChocolate.Execution.Processing.Fragment.SyntaxNode.get -> HotChocolate.Language.ISyntaxNode!
HotChocolate.Execution.Processing.Fragment.TypeCondition.get -> HotChocolate.Types.IObjectType!
HotChocolate.Execution.Processing.IActivator
HotChocolate.Execution.Processing.IActivator.CreateInstance(System.Type! type, System.IServiceProvider! services) -> object?
HotChocolate.Execution.Processing.IActivator.CreateInstance<T>(System.IServiceProvider! services) -> T
HotChocolate.Execution.Processing.IActivator.GetOrCreate(System.Type! type, System.IServiceProvider! services) -> object?
HotChocolate.Execution.Processing.IActivator.GetOrCreate<T>(System.IServiceProvider! services) -> T
HotChocolate.Execution.Processing.IArgumentMap
HotChocolate.Execution.Processing.IArgumentMap.HasErrors.get -> bool
HotChocolate.Execution.Processing.IArgumentMap.IsFinal.get -> bool
HotChocolate.Execution.Processing.IFragment
HotChocolate.Execution.Processing.IFragment.Directives.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.DirectiveNode!>!
HotChocolate.Execution.Processing.IFragment.GetLabel(HotChocolate.Execution.IVariableValueCollection! variables) -> string?
HotChocolate.Execution.Processing.IFragment.SelectionSet.get -> HotChocolate.Execution.Processing.ISelectionSet!
HotChocolate.Execution.Processing.IFragment.SyntaxNode.get -> HotChocolate.Language.ISyntaxNode!
HotChocolate.Execution.Processing.IFragment.TypeCondition.get -> HotChocolate.Types.IObjectType!
HotChocolate.Execution.Processing.IOptionalSelection
HotChocolate.Execution.Processing.IOptionalSelection.InclusionKind.get -> HotChocolate.Execution.Processing.SelectionInclusionKind
HotChocolate.Execution.Processing.IOptionalSelection.IsConditional.get -> bool
HotChocolate.Execution.Processing.IOptionalSelection.IsIncluded(HotChocolate.Execution.IVariableValueCollection! variableValues, bool allowInternals = false) -> bool
HotChocolate.Execution.Processing.IOptionalSelection.IsInternal.get -> bool
HotChocolate.Execution.Processing.IPreparedOperation
HotChocolate.Execution.Processing.IPreparedOperation.GetPossibleTypes(HotChocolate.Language.SelectionSetNode! selectionSet) -> System.Collections.Generic.IEnumerable<HotChocolate.Types.IObjectType!>!
HotChocolate.Execution.Processing.IPreparedOperation.GetRootSelectionSet() -> HotChocolate.Execution.Processing.ISelectionSet!
HotChocolate.Execution.Processing.IPreparedOperation.GetSelectionSet(HotChocolate.Language.SelectionSetNode! selectionSet, HotChocolate.Types.IObjectType! typeContext) -> HotChocolate.Execution.Processing.ISelectionSet!
HotChocolate.Execution.Processing.IPreparedOperation.Id.get -> string!
HotChocolate.Execution.Processing.IPreparedOperation.Print() -> string!
HotChocolate.Execution.Processing.IPreparedOperation.ProposedTaskCount.get -> int
HotChocolate.Execution.Processing.IPreparedOperation.SelectionVariants.get -> System.Collections.Generic.IEnumerable<HotChocolate.Execution.Processing.ISelectionVariants!>!
HotChocolate.Execution.Processing.ISelection
HotChocolate.Execution.Processing.ISelection.Arguments.get -> HotChocolate.Execution.Processing.IArgumentMap!
HotChocolate.Execution.Processing.ISelection.DeclaringType.get -> HotChocolate.Types.IObjectType!
HotChocolate.Execution.Processing.ISelection.ResolverPipeline.get -> HotChocolate.Resolvers.FieldDelegate!
HotChocolate.Execution.Processing.ISelection.SelectionSet.get -> HotChocolate.Language.SelectionSetNode?
HotChocolate.Execution.Processing.ISelectionOptimizer
HotChocolate.Execution.Processing.ISelectionOptimizer.AllowFragmentDeferral(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Language.FragmentSpreadNode! fragmentSpread, HotChocolate.Language.FragmentDefinitionNode! fragmentDefinition) -> bool
HotChocolate.Execution.Processing.ISelectionOptimizer.AllowFragmentDeferral(HotChocolate.Execution.Processing.SelectionOptimizerContext context, HotChocolate.Language.InlineFragmentNode! fragment) -> bool
HotChocolate.Execution.Processing.ISelectionOptimizer.OptimizeSelectionSet(HotChocolate.Execution.Processing.SelectionOptimizerContext context) -> void
HotChocolate.Execution.Processing.ISelectionSet
HotChocolate.Execution.Processing.ISelectionSet.Fragments.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Execution.Processing.IFragment!>!
HotChocolate.Execution.Processing.ISelectionSet.IsConditional.get -> bool
HotChocolate.Execution.Processing.ISelectionSet.Selections.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Execution.Processing.ISelection!>!
HotChocolate.Execution.Processing.ISelectionVariants
HotChocolate.Execution.Processing.ISelectionVariants.GetPossibleTypes() -> System.Collections.Generic.IEnumerable<HotChocolate.Types.IObjectType!>!
HotChocolate.Execution.Processing.ISelectionVariants.GetSelectionSet(HotChocolate.Types.IObjectType! typeContext) -> HotChocolate.Execution.Processing.ISelectionSet!
HotChocolate.Execution.Processing.ISelectionVariants.SelectionSet.get -> HotChocolate.Language.SelectionSetNode!
HotChocolate.Execution.Processing.ISubscription
HotChocolate.Execution.Processing.ISubscription.Id.get -> ulong
HotChocolate.Execution.Processing.ISubscription.Operation.get -> HotChocolate.Execution.Processing.IPreparedOperation!
HotChocolate.Execution.Processing.ITransactionScope
HotChocolate.Execution.Processing.ITransactionScope.Complete() -> void
HotChocolate.Execution.Processing.ITransactionScopeHandler
HotChocolate.Execution.Processing.ITransactionScopeHandler.Create(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Processing.ITransactionScope!
HotChocolate.Execution.Processing.OperationCompiler
HotChocolate.Execution.Processing.OperationCompiler.SelectionPath
HotChocolate.Execution.Processing.OperationCompiler.SelectionPath.Append(string! segment) -> HotChocolate.Execution.Processing.OperationCompiler.SelectionPath
HotChocolate.Execution.Processing.OperationCompiler.SelectionPath.Equals(HotChocolate.Execution.Processing.OperationCompiler.SelectionPath other) -> bool
HotChocolate.Execution.Processing.OperationCompiler.SelectionPath.SelectionPath() -> void
HotChocolate.Execution.Processing.OperationCompiler.SelectionReference
HotChocolate.Execution.Processing.OperationCompiler.SelectionReference.Equals(HotChocolate.Execution.Processing.OperationCompiler.SelectionReference other) -> bool
HotChocolate.Execution.Processing.OperationCompiler.SelectionReference.Path.get -> HotChocolate.Execution.Processing.OperationCompiler.SelectionPath
HotChocolate.Execution.Processing.OperationCompiler.SelectionReference.Selection.get -> HotChocolate.Language.ISelectionNode!
HotChocolate.Execution.Processing.OperationCompiler.SelectionReference.SelectionReference() -> void
HotChocolate.Execution.Processing.OperationCompiler.SelectionReference.SelectionReference(HotChocolate.Execution.Processing.OperationCompiler.SelectionPath path, HotChocolate.Language.ISelectionNode! selection) -> void
HotChocolate.Execution.Processing.OperationCompiler.SpreadReference
HotChocolate.Execution.Processing.OperationCompiler.SpreadReference.Equals(HotChocolate.Execution.Processing.OperationCompiler.SelectionReference other) -> bool
HotChocolate.Execution.Processing.OperationCompiler.SpreadReference.Path.get -> HotChocolate.Execution.Processing.OperationCompiler.SelectionPath
HotChocolate.Execution.Processing.OperationCompiler.SpreadReference.Spread.get -> HotChocolate.Language.ISelectionNode!
HotChocolate.Execution.Processing.OperationCompiler.SpreadReference.SpreadReference() -> void
HotChocolate.Execution.Processing.OperationCompiler.SpreadReference.SpreadReference(HotChocolate.Execution.Processing.OperationCompiler.SelectionPath path, HotChocolate.Language.ISelectionNode! spread) -> void
HotChocolate.Execution.Processing.ResultList
HotChocolate.Execution.Processing.ResultList.IsNullable.get -> bool
HotChocolate.Execution.Processing.ResultList.IsNullable.set -> void
HotChocolate.Execution.Processing.ResultList.Parent.get -> HotChocolate.Execution.IResultData?
HotChocolate.Execution.Processing.ResultList.Parent.set -> void
HotChocolate.Execution.Processing.ResultList.ResultList() -> void
HotChocolate.Execution.Processing.ResultMap
HotChocolate.Execution.Processing.ResultMap.Clear() -> void
HotChocolate.Execution.Processing.ResultMap.Complete() -> void
HotChocolate.Execution.Processing.ResultMap.Count.get -> int
HotChocolate.Execution.Processing.ResultMap.EnsureCapacity(int capacity) -> void
HotChocolate.Execution.Processing.ResultMap.GetEnumerator() -> System.Collections.Generic.IEnumerator<HotChocolate.Execution.ResultValue>!
HotChocolate.Execution.Processing.ResultMap.GetValue(string! name, out int index) -> HotChocolate.Execution.ResultValue
HotChocolate.Execution.Processing.ResultMap.Parent.get -> HotChocolate.Execution.IResultData?
HotChocolate.Execution.Processing.ResultMap.Parent.set -> void
HotChocolate.Execution.Processing.ResultMap.RemoveValue(int index) -> void
HotChocolate.Execution.Processing.ResultMap.ResultMap() -> void
HotChocolate.Execution.Processing.ResultMap.SetValue(int index, string! name, object? value, bool isNullable = true) -> void
HotChocolate.Execution.Processing.ResultMap.this[int index].get -> HotChocolate.Execution.ResultValue
HotChocolate.Execution.Processing.ResultMapList
HotChocolate.Execution.Processing.ResultMapList.IsNullable.get -> bool
HotChocolate.Execution.Processing.ResultMapList.IsNullable.set -> void
HotChocolate.Execution.Processing.ResultMapList.Parent.get -> HotChocolate.Execution.IResultData?
HotChocolate.Execution.Processing.ResultMapList.Parent.set -> void
HotChocolate.Execution.Processing.ResultMapList.ResultMapList() -> void
HotChocolate.Execution.Processing.Selection
HotChocolate.Execution.Processing.Selection.AddSelection(HotChocolate.Language.FieldNode! field, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition) -> void
HotChocolate.Execution.Processing.Selection.Arguments.get -> HotChocolate.Execution.Processing.IArgumentMap!
HotChocolate.Execution.Processing.Selection.DeclaringType.get -> HotChocolate.Types.IObjectType!
HotChocolate.Execution.Processing.Selection.Field.get -> HotChocolate.Types.IObjectField!
HotChocolate.Execution.Processing.Selection.InclusionKind.get -> HotChocolate.Execution.Processing.SelectionInclusionKind
HotChocolate.Execution.Processing.Selection.IsConditional.get -> bool
HotChocolate.Execution.Processing.Selection.IsIncluded(HotChocolate.Execution.IVariableValueCollection! variableValues, bool allowInternals = false) -> bool
HotChocolate.Execution.Processing.Selection.IsInternal.get -> bool
HotChocolate.Execution.Processing.Selection.ResolverPipeline.get -> HotChocolate.Resolvers.FieldDelegate!
HotChocolate.Execution.Processing.Selection.ResponseName.get -> HotChocolate.NameString
HotChocolate.Execution.Processing.Selection.Selection(HotChocolate.Execution.Processing.Selection! selection) -> void
HotChocolate.Execution.Processing.Selection.Selection(HotChocolate.Types.IObjectType! declaringType, HotChocolate.Types.IObjectField! field, HotChocolate.Language.FieldNode! selection, HotChocolate.Resolvers.FieldDelegate! resolverPipeline, HotChocolate.NameString? responseName = null, System.Collections.Generic.IReadOnlyDictionary<HotChocolate.NameString, HotChocolate.Execution.Processing.ArgumentValue!>? arguments = null, HotChocolate.Execution.Processing.SelectionIncludeCondition? includeCondition = null, bool internalSelection = false) -> void
HotChocolate.Execution.Processing.Selection.SelectionSet.get -> HotChocolate.Language.SelectionSetNode?
HotChocolate.Execution.Processing.Selection.SyntaxNode.get -> HotChocolate.Language.FieldNode!
HotChocolate.Execution.Processing.Selection.SyntaxNodes.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.FieldNode!>!
HotChocolate.Execution.Processing.SelectionIncludeCondition
HotChocolate.Execution.Processing.SelectionIncludeCondition.Equals(HotChocolate.Execution.Processing.SelectionIncludeCondition! visibility) -> bool
HotChocolate.Execution.Processing.SelectionIncludeCondition.Equals(HotChocolate.Language.IValueNode? skip, HotChocolate.Language.IValueNode? include) -> bool
HotChocolate.Execution.Processing.SelectionIncludeCondition.Include.get -> HotChocolate.Language.IValueNode?
HotChocolate.Execution.Processing.SelectionIncludeCondition.IsTrue(HotChocolate.Execution.IVariableValueCollection! variables) -> bool
HotChocolate.Execution.Processing.SelectionIncludeCondition.Parent.get -> HotChocolate.Execution.Processing.SelectionIncludeCondition?
HotChocolate.Execution.Processing.SelectionIncludeCondition.SelectionIncludeCondition(HotChocolate.Language.IValueNode? skip = null, HotChocolate.Language.IValueNode? include = null, HotChocolate.Execution.Processing.SelectionIncludeCondition? parent = null) -> void
HotChocolate.Execution.Processing.SelectionIncludeCondition.Skip.get -> HotChocolate.Language.IValueNode?
HotChocolate.Execution.Processing.SelectionInclusionKind
HotChocolate.Execution.Processing.SelectionInclusionKind.Always = 0 -> HotChocolate.Execution.Processing.SelectionInclusionKind
HotChocolate.Execution.Processing.SelectionInclusionKind.Conditional = 1 -> HotChocolate.Execution.Processing.SelectionInclusionKind
HotChocolate.Execution.Processing.SelectionInclusionKind.Internal = 2 -> HotChocolate.Execution.Processing.SelectionInclusionKind
HotChocolate.Execution.Processing.SelectionInclusionKind.InternalConditional = 3 -> HotChocolate.Execution.Processing.SelectionInclusionKind
HotChocolate.Execution.Processing.SelectionOptimizerContext
HotChocolate.Execution.Processing.SelectionOptimizerContext.CompileResolverPipeline(HotChocolate.Types.IObjectField! field, HotChocolate.Language.FieldNode! selection) -> HotChocolate.Resolvers.FieldDelegate!
HotChocolate.Execution.Processing.SelectionOptimizerContext.Fields.get -> System.Collections.Generic.IDictionary<string!, HotChocolate.Execution.Processing.Selection!>!
HotChocolate.Execution.Processing.SelectionOptimizerContext.Path.get -> System.Collections.Immutable.IImmutableStack<HotChocolate.Types.IObjectField!>!
HotChocolate.Execution.Processing.SelectionOptimizerContext.Schema.get -> HotChocolate.ISchema!
HotChocolate.Execution.Processing.SelectionOptimizerContext.SelectionOptimizerContext() -> void
HotChocolate.Execution.Processing.SelectionOptimizerContext.SelectionOptimizerContext(HotChocolate.ISchema! schema, System.Collections.Immutable.IImmutableStack<HotChocolate.Types.IObjectField!>! path, HotChocolate.Types.IObjectType! type, HotChocolate.Language.SelectionSetNode! selectionSet, System.Collections.Generic.IDictionary<string!, HotChocolate.Execution.Processing.Selection!>! fields, HotChocolate.Execution.Processing.CompileResolverPipeline! compileResolverPipeline) -> void
HotChocolate.Execution.Processing.SelectionOptimizerContext.SelectionSet.get -> HotChocolate.Language.SelectionSetNode!
HotChocolate.Execution.Processing.SelectionOptimizerContext.Type.get -> HotChocolate.Types.IObjectType!
HotChocolate.Execution.Processing.SelectionOptimizerHelper
HotChocolate.Execution.Processing.VariableRewriter
HotChocolate.Execution.RequestCoreMiddleware
HotChocolate.Execution.RequestDelegate
HotChocolate.Execution.RequestExecutorEvictedEventArgs
HotChocolate.Execution.RequestExecutorEvictedEventArgs.EvictedExecutor.get -> HotChocolate.Execution.IRequestExecutor!
HotChocolate.Execution.RequestExecutorEvictedEventArgs.Name.get -> string!
HotChocolate.Execution.RequestExecutorEvictedEventArgs.RequestExecutorEvictedEventArgs(string! name, HotChocolate.Execution.IRequestExecutor! evictedExecutor) -> void
HotChocolate.Execution.RequestExecutorProxy
HotChocolate.Execution.RequestExecutorProxy.Dispose() -> void
HotChocolate.Execution.RequestExecutorProxy.ExecuteAsync(HotChocolate.Execution.IQueryRequest! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
HotChocolate.Execution.RequestExecutorProxy.ExecuteBatchAsync(System.Collections.Generic.IEnumerable<HotChocolate.Execution.IQueryRequest!>! requestBatch, bool allowParallelExecution = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IBatchQueryResult!>!
HotChocolate.Execution.RequestExecutorProxy.ExecutorEvicted -> System.EventHandler?
HotChocolate.Execution.RequestExecutorProxy.ExecutorUpdated -> System.EventHandler<HotChocolate.Execution.RequestExecutorUpdatedEventArgs!>?
HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.IRequestExecutor!>
HotChocolate.Execution.RequestExecutorProxy.GetSchemaAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.ISchema!>
HotChocolate.Execution.RequestExecutorProxy.RequestExecutorProxy(HotChocolate.Execution.IRequestExecutorResolver! executorResolver, HotChocolate.NameString schemaName) -> void
HotChocolate.Execution.RequestExecutorServiceProviderExtensions
HotChocolate.Execution.RequestExecutorUpdatedEventArgs
HotChocolate.Execution.RequestExecutorUpdatedEventArgs.Executor.get -> HotChocolate.Execution.IRequestExecutor!
HotChocolate.Execution.RequestExecutorUpdatedEventArgs.RequestExecutorUpdatedEventArgs(HotChocolate.Execution.IRequestExecutor! executor) -> void
HotChocolate.Execution.RequestMiddleware
HotChocolate.Execution.Serialization.JsonArrayResponseStreamSerializer
HotChocolate.Execution.Serialization.JsonArrayResponseStreamSerializer.JsonArrayResponseStreamSerializer(bool indented = false) -> void
HotChocolate.Execution.Serialization.JsonArrayResponseStreamSerializer.SerializeAsync(HotChocolate.Execution.IResponseStream! responseStream, System.IO.Stream! outputStream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
HotChocolate.Execution.Serialization.JsonQueryResultSerializer
HotChocolate.Execution.Serialization.JsonQueryResultSerializer.JsonQueryResultSerializer(bool indented = false) -> void
HotChocolate.Execution.Serialization.JsonQueryResultSerializer.Serialize(HotChocolate.Execution.IQueryResult! result) -> string!
HotChocolate.Execution.Serialization.JsonQueryResultSerializer.SerializeAsync(HotChocolate.Execution.IQueryResult! result, System.IO.Stream! stream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
HotChocolate.Execution.Serialization.MultiPartResponseStreamSerializer
HotChocolate.Execution.Serialization.MultiPartResponseStreamSerializer.MultiPartResponseStreamSerializer(bool indented = false) -> void
HotChocolate.Execution.Serialization.MultiPartResponseStreamSerializer.SerializeAsync(HotChocolate.Execution.IResponseStream! responseStream, System.IO.Stream! outputStream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
HotChocolate.Execution.Serialization.MultiPartResponseStreamSerializer.WriteResponseStreamAsync(HotChocolate.Execution.IResponseStream! responseStream, System.IO.Stream! outputStream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
HotChocolate.ExecutionResultExtensions
HotChocolate.ExecutionSchemaExtensions
Microsoft.Extensions.DependencyInjection.InternalSchemaServiceCollectionExtensions
Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions
Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions
Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions
override HotChocolate.Execution.Processing.OperationCompiler.SelectionPath.Equals(object? obj) -> bool
override HotChocolate.Execution.Processing.OperationCompiler.SelectionPath.GetHashCode() -> int
override HotChocolate.Execution.Processing.OperationCompiler.SelectionPath.ToString() -> string!
override HotChocolate.Execution.Processing.OperationCompiler.SelectionReference.Equals(object? obj) -> bool
override HotChocolate.Execution.Processing.OperationCompiler.SelectionReference.GetHashCode() -> int
override HotChocolate.Execution.Processing.OperationCompiler.SelectionReference.ToString() -> string!
override HotChocolate.Execution.Processing.OperationCompiler.SpreadReference.Equals(object? obj) -> bool
override HotChocolate.Execution.Processing.OperationCompiler.SpreadReference.GetHashCode() -> int
override HotChocolate.Execution.Processing.OperationCompiler.SpreadReference.ToString() -> string!
static HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Create(HotChocolate.Execution.RequestExecutorProxy! requestExecutorProxy, HotChocolate.Execution.IRequestExecutor! initialExecutor) -> HotChocolate.Execution.AutoUpdateRequestExecutorProxy!
static HotChocolate.Execution.AutoUpdateRequestExecutorProxy.CreateAsync(HotChocolate.Execution.RequestExecutorProxy! requestExecutorProxy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.AutoUpdateRequestExecutorProxy!>
static HotChocolate.Execution.Configuration.RequestExecutorBuilderLegacyHelper.SetSchema(HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.ISchema! schema) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static HotChocolate.Execution.Configuration.RequestExecutorBuilderLegacyHelper.SetSchema(HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.ISchema!>! schemaFactory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static HotChocolate.Execution.Configuration.RequestExecutorBuilderLegacyHelper.SetSchemaBuilder(HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.ISchemaBuilder! schemaBuilder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static HotChocolate.Execution.ExecutionObjectFieldDescriptorExtensions.UseOptimizer(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, HotChocolate.Execution.Processing.ISelectionOptimizer! optimizer) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.Execute(this HotChocolate.Execution.IRequestExecutor! executor, HotChocolate.Execution.IReadOnlyQueryRequest! request) -> HotChocolate.Execution.IExecutionResult!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.Execute(this HotChocolate.Execution.IRequestExecutor! executor, string! query, System.Collections.Generic.IReadOnlyDictionary<string!, object?>! variableValues) -> HotChocolate.Execution.IExecutionResult!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.Execute(this HotChocolate.Execution.IRequestExecutor! executor, string! query) -> HotChocolate.Execution.IExecutionResult!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.ExecuteAsync(this HotChocolate.Execution.IRequestExecutor! executor, HotChocolate.Execution.IReadOnlyQueryRequest! request) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.ExecuteAsync(this HotChocolate.Execution.IRequestExecutor! executor, string! query, System.Collections.Generic.IReadOnlyDictionary<string!, object?>! variableValues, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.ExecuteAsync(this HotChocolate.Execution.IRequestExecutor! executor, string! query, System.Collections.Generic.IReadOnlyDictionary<string!, object?>! variableValues) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.ExecuteAsync(this HotChocolate.Execution.IRequestExecutor! executor, string! query, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.ExecuteAsync(this HotChocolate.Execution.IRequestExecutor! executor, string! query) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.ExecuteAsync(this HotChocolate.Execution.IRequestExecutor! executor, System.Action<HotChocolate.Execution.IQueryRequestBuilder!>! buildRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.ExecutionRequestExecutorExtensions.ExecuteAsync(this HotChocolate.Execution.IRequestExecutor! executor, System.Action<HotChocolate.Execution.IQueryRequestBuilder!>! buildRequest) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.Processing.ArgumentCoercionHelper.TryCoerceArguments(this HotChocolate.Execution.Processing.IArgumentMap! arguments, HotChocolate.Execution.IVariableValueCollection! variables, System.Action<HotChocolate.IError!>! reportError, out System.Collections.Generic.IReadOnlyDictionary<HotChocolate.NameString, HotChocolate.Execution.Processing.ArgumentValue!>? coercedArgs) -> bool
static HotChocolate.Execution.Processing.OperationCompiler.Compile(string! operationId, HotChocolate.Language.DocumentNode! document, HotChocolate.Language.OperationDefinitionNode! operation, HotChocolate.ISchema! schema, HotChocolate.Types.ObjectType! rootType, System.Collections.Generic.IEnumerable<HotChocolate.Execution.Processing.ISelectionOptimizer!>? optimizers = null) -> HotChocolate.Execution.Processing.IPreparedOperation!
static HotChocolate.Execution.Processing.SelectionOptimizerHelper.RegisterOptimizer(System.Collections.Generic.IDictionary<string!, object?>! contextData, HotChocolate.Execution.Processing.ISelectionOptimizer! optimizer) -> void
static HotChocolate.Execution.Processing.SelectionOptimizerHelper.TryGetOptimizers(System.Collections.Generic.IReadOnlyDictionary<string!, object?>! contextData, out System.Collections.Generic.IReadOnlyList<HotChocolate.Execution.Processing.ISelectionOptimizer!>? optimizers) -> bool
static HotChocolate.Execution.Processing.VariableRewriter.Rewrite(HotChocolate.Language.IValueNode! node, HotChocolate.Execution.IVariableValueCollection! variableValues) -> HotChocolate.Language.IValueNode!
static HotChocolate.Execution.RequestExecutorServiceProviderExtensions.BuildRequestExecutorAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.IRequestExecutor!>
static HotChocolate.Execution.RequestExecutorServiceProviderExtensions.BuildSchemaAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.ISchema!>
static HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteBatchRequestAsync(this System.IServiceProvider! services, System.Collections.Generic.IEnumerable<HotChocolate.Execution.IQueryRequest!>! requestBatch, bool allowParallelExecution = false, HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IBatchQueryResult!>!
static HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteRequestAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Execution.IQueryRequest! request, HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteRequestAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string! query, HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteRequestAsync(this System.IServiceProvider! services, HotChocolate.Execution.IQueryRequest! request, HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteRequestAsync(this System.IServiceProvider! services, string! query, HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
static HotChocolate.Execution.RequestExecutorServiceProviderExtensions.GetRequestExecutorAsync(this System.IServiceProvider! services, HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.IRequestExecutor!>
static HotChocolate.Execution.RequestExecutorServiceProviderExtensions.GetSchemaAsync(this System.IServiceProvider! services, HotChocolate.NameString schemaName = default(HotChocolate.NameString), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.ISchema!>
static HotChocolate.ExecutionResultExtensions.ToJson(this HotChocolate.Execution.IExecutionResult! result, bool withIndentations = true) -> string!
static HotChocolate.ExecutionResultExtensions.ToJsonAsync(this HotChocolate.Execution.IExecutionResult! result, bool withIndentations = true) -> System.Threading.Tasks.ValueTask<string!>
static HotChocolate.ExecutionSchemaExtensions.IsRootType(this HotChocolate.ISchema! schema, HotChocolate.Types.IType! type) -> bool
static HotChocolate.ExecutionSchemaExtensions.MakeExecutable(this HotChocolate.ISchema! schema, HotChocolate.Execution.Options.RequestExecutorOptions! options) -> HotChocolate.Execution.IRequestExecutor!
static HotChocolate.ExecutionSchemaExtensions.MakeExecutable(this HotChocolate.ISchema! schema) -> HotChocolate.Execution.IRequestExecutor!
static Microsoft.Extensions.DependencyInjection.InternalSchemaServiceCollectionExtensions.GetApplicationService<T>(this System.IServiceProvider! services) -> T
static Microsoft.Extensions.DependencyInjection.InternalSchemaServiceCollectionExtensions.GetApplicationServices(this System.IServiceProvider! services) -> System.IServiceProvider!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddApolloTracing(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Execution.Options.TracingPreference tracingPreference = HotChocolate.Execution.Options.TracingPreference.OnDemand, HotChocolate.Execution.Instrumentation.ITimestampProvider? timestampProvider = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddDataLoader<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddDataLoader<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddDataLoader<TService, TImplementation>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddDefaultTransactionScopeHandler(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddDiagnosticEventListener<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T>! diagnosticEventListener) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddDiagnosticEventListener<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddErrorFilter(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<HotChocolate.IError!, HotChocolate.IError!>! errorFilter) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddErrorFilter(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<HotChocolate.IError!, HotChocolate.IError!>! errorFilter) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddErrorFilter(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<System.IServiceProvider!, HotChocolate.IErrorFilter!>! factory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddErrorFilter<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddErrorFilter<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddErrorFilter<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddIdSerializer(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, bool includeSchemaName = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddIdSerializer(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Types.Relay.IIdSerializer!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddIdSerializer(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, bool includeSchemaName = false) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddIdSerializer(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<System.IServiceProvider!, HotChocolate.Types.Relay.IIdSerializer!>! factory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddIdSerializer<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddIdSerializer<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddIntrospectionAllowedRule(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddMaxComplexityRule(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, int maxAllowedComplexity) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddMaxExecutionDepthRule(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, int maxAllowedExecutionDepth) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddSelectionSetOptimizer<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddSelectionSetOptimizer<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTransactionScopeHandler(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Execution.Processing.ITransactionScopeHandler!>! create) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTransactionScopeHandler<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTypeConverter(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Utilities.ChangeTypeProvider! changeType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTypeConverter(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.Utilities.ChangeTypeProvider! changeType) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTypeConverter<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, T!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTypeConverter<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTypeConverter<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<System.IServiceProvider!, T!>! factory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTypeConverter<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTypeConverter<TSource, TTarget>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Utilities.ChangeType<TSource, TTarget>! changeType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTypeConverter<TSource, TTarget>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.Utilities.ChangeType<TSource, TTarget>! changeType) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationRule<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Validation.Options.ValidationOptions!, T!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationRule<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationVisitor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Validation.Options.ValidationOptions!, T!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationVisitor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureOnRequestExecutorCreated(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Execution.IRequestExecutor!>! action) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureOnRequestExecutorCreated(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<System.IServiceProvider!, HotChocolate.Execution.IRequestExecutor!>! action) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureOnRequestExecutorCreatedAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<HotChocolate.Execution.IRequestExecutor!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! asyncAction) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureOnRequestExecutorCreatedAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Execution.IRequestExecutor!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! asyncAction) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureSchema(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.ISchemaBuilder!>! configureSchema) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureSchema(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<System.IServiceProvider!, HotChocolate.ISchemaBuilder!>! configureSchema) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureSchemaAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<HotChocolate.ISchemaBuilder!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! configureSchema) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureSchemaAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.ISchemaBuilder!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! configureSchema) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureSchemaServices(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection!>! configureServices) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ModifyRequestOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Execution.Options.RequestExecutorOptions!>! modify) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ModifyRequestOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<System.IServiceProvider!, HotChocolate.Execution.Options.RequestExecutorOptions!>! modify) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ModifyRequestOptionsAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<HotChocolate.Execution.Options.RequestExecutorOptions!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! modify) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ModifyRequestOptionsAsync(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Execution.Options.RequestExecutorOptions!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! modify) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.SetRequestOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<HotChocolate.Execution.Options.RequestExecutorOptions!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.SetRequestOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Execution.Options.RequestExecutorOptions!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseActivePersistedQueryPipeline(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseAutomaticPersistedQueryPipeline(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseDefaultPipeline(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseDocumentCache(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseDocumentParser(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseDocumentValidation(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseExceptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseInstrumentations(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseOperationCache(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseOperationExecution(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseOperationResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseOperationVariableCoercion(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UsePersistedQueryPipeline(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseReadPersistedQuery(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseRequest(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Execution.RequestCoreMiddleware! middleware) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseRequest(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Execution.RequestMiddleware! middleware) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseRequest<TMiddleware>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseTimeout(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseWritePersistedQuery(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddBatchDispatcher<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddBatchScheduler<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddDefaultBatchDispatcher(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddDocumentCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, int capacity = 100) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddGraphQL(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString schemaName = default(HotChocolate.NameString)) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddGraphQL(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.NameString schemaName = default(HotChocolate.NameString)) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddGraphQLCore(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddMD5DocumentHashProvider(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.Language.HashFormat format = HotChocolate.Language.HashFormat.Base64) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddOperationCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, int capacity = 100) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddSha1DocumentHashProvider(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.Language.HashFormat format = HotChocolate.Language.HashFormat.Base64) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddSha256DocumentHashProvider(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, HotChocolate.Language.HashFormat format = HotChocolate.Language.HashFormat.Base64) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddConvention(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! convention, HotChocolate.CreateConvention! factory, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddConvention(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! convention, HotChocolate.Types.Descriptors.IConvention! concreteConvention, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddConvention(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! convention, System.Type! concreteConvention, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddConvention<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.CreateConvention! conventionFactory, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddConvention<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.Descriptors.IConvention! convention, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddConvention<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! type, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddConvention<TConvetion, TConcreteConvention>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddDirectiveType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.DirectiveType! directiveType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddDirectiveType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! directiveType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddDirectiveType<TDirective>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddDocument(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Language.DocumentNode! document) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddDocument(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.LoadDocumentAsync! loadDocumentAsync) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddDocumentFromFile(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string! filePath) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddDocumentFromString(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string! sdl) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddEnumType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IEnumTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddEnumType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IEnumTypeDescriptor<T>!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddEnumType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddExportDirectiveType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInputObjectType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IInputObjectTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInputObjectType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IInputObjectTypeDescriptor<T>!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInputObjectType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInterfaceType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IInterfaceTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInterfaceType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IInterfaceTypeDescriptor<T>!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInterfaceType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.ObjectType! mutationType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! mutationType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType<TMutation>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddObjectType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddObjectType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddObjectType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.ObjectType! queryType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! queryType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType<TQuery>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, object? constantValue) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, object?>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, object?>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.ValueTask<object?>>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<object?>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<System.Threading.Tasks.ValueTask<object?>>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Resolvers.FieldResolver! fieldResolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResult>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResult>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.CancellationToken, TResult>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResult>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, System.Threading.Tasks.ValueTask<TResult>>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResult>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<HotChocolate.Resolvers.IResolverContext!, TResult>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResult>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<System.Threading.Tasks.ValueTask<TResult>>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResult>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, System.Func<TResult>! resolver) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver<TResult>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, TResult constantValue) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddRootType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.ObjectType! rootType, HotChocolate.Language.OperationType operation) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddRootType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! rootType, HotChocolate.Language.OperationType operation) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.ObjectType! subscriptionType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! subscriptionType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IObjectTypeDescriptor<T>!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType<TSubscription>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.INamedType! namedType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! type) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddTypeExtension(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.INamedTypeExtension! typeExtension) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddTypeExtension(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! typeExtension) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddTypeExtension<TExtension>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddTypes(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, params HotChocolate.Types.INamedType![]! types) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddTypes(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, params System.Type![]! types) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddUnionType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IUnionTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddUnionType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.IUnionTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddUnionType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindClrType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! runtimeType, System.Type! schemaType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindClrType<TRuntimeType, TSchemaType>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindComplexType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Configuration.Bindings.IBindType<T!>!>? configure = null, HotChocolate.Types.BindingBehavior bindingBehavior = HotChocolate.Types.BindingBehavior.Implicit) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindEnumType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! runtimeType, System.Action<HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor!>? configure = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindEnumType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Configuration.Bindings.IEnumTypeBindingDescriptor!>? configure = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindResolver<TResolver>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Configuration.Bindings.IBindResolver<TResolver!>!>? configure = null, HotChocolate.Types.BindingBehavior bindingBehavior = HotChocolate.Types.BindingBehavior.Implicit) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindRuntimeType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! runtimeType, System.Type! schemaType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.BindRuntimeType<TRuntimeType, TSchemaType>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.EnableRelaySupport(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.Relay.RelayOptions? options = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.MapField(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Resolvers.FieldReference! fieldReference, HotChocolate.Resolvers.FieldMiddleware! middleware) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.MapField<TMiddleware>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Resolvers.FieldReference! fieldReference, System.Func<System.IServiceProvider!, HotChocolate.Resolvers.FieldDelegate!, TMiddleware!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.MapField<TMiddleware>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Resolvers.FieldReference! fieldReference) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.ModifyOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Configuration.ISchemaOptions!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnAfterCompleteName(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnCompleteType! onAfterCompleteName, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnAfterCompleteName<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnCompleteType<T!>! onAfterCompleteName, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnAfterCompleteType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnCompleteType! onAfterCompleteType, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnAfterCompleteType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnCompleteType<T!>! onAfterCompleteType, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnAfterRegisterDependencies(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnInitializeType! onAfterRegisterDependencies, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnAfterRegisterDependencies<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnInitializeType<T!>! onAfterRegisterDependencies, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnAfterSchemaCreate(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnAfterSchemaCreate! onAfterCreate) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnBeforeCompleteName(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnCompleteType! onBeforeCompleteName, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnBeforeCompleteName<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnCompleteType<T!>! onBeforeCompleteName, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnBeforeCompleteType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnCompleteType! onBeforeCompleteType, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnBeforeCompleteType<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnCompleteType<T!>! onBeforeCompleteType, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnBeforeRegisterDependencies(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnInitializeType! onBeforeRegisterDependencies, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnBeforeRegisterDependencies<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnInitializeType<T!>! onBeforeRegisterDependencies, System.Func<HotChocolate.Configuration.ITypeSystemObjectContext!, bool>? canHandle = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnBeforeSchemaCreate(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnBeforeSchemaCreate! onBeforeCreate) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.OnSchemaError(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.OnSchemaError! onError) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetContextData(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string! key, object? value) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.IReadOnlySchemaOptions! options) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetPagingOptions(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.Pagination.PagingOptions options) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetSchema(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.ISchema! schema) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetSchema(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Types.ISchemaTypeDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetSchema(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! schemaType) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetSchema<TSchema>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TrimTypes(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, bool trim = true) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddConvention(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! convention, HotChocolate.CreateConvention! factory, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddConvention(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! convention, HotChocolate.Types.Descriptors.IConvention! concreteConvention, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddConvention(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! convention, System.Type! concreteConvention, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddConvention<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.CreateConvention! conventionFactory, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddConvention<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Types.Descriptors.IConvention! convention, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddConvention<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! type, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddConvention<TConvention, TConcreteConvention>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? scope = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddSchemaInterceptor(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.ISchemaInterceptor! typeInterceptor) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddSchemaInterceptor(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! typeInterceptor) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddSchemaInterceptor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddTypeInterceptor(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Configuration.ITypeInitializationInterceptor! typeInterceptor) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddTypeInterceptor(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Type! typeInterceptor) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TryAddTypeInterceptor<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.UseField(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Resolvers.FieldMiddleware! middleware) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.UseField<TMiddleware>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, HotChocolate.Resolvers.FieldDelegate!, TMiddleware!>! factory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.UseField<TMiddleware>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.AddedDocumentToCache(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.AddedOperationToCache(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.BatchDispatched(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.EnableResolveFieldValue.get -> bool
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ExecuteRequest(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ExecuteSubscription(HotChocolate.Execution.Processing.ISubscription! subscription) -> HotChocolate.Execution.Instrumentation.IActivityScope!
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ExecutorCreated(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ExecutorEvicted(string! name, HotChocolate.Execution.IRequestExecutor! executor) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.OnSubscriptionEvent(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ParseDocument(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RequestError(HotChocolate.Execution.IRequestContext! context, System.Exception! exception) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ResolveFieldValue(HotChocolate.Resolvers.IMiddlewareContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ResolverError(HotChocolate.Resolvers.IMiddlewareContext! context, HotChocolate.IError! error) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RetrievedDocumentFromCache(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RetrievedDocumentFromStorage(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RetrievedOperationFromCache(HotChocolate.Execution.IRequestContext! context) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.RunTask(HotChocolate.Execution.IExecutionTask! task) -> HotChocolate.Execution.Instrumentation.IActivityScope!
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.SubscriptionEventError(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, System.Exception! exception) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.SubscriptionEventResult(HotChocolate.Execution.Instrumentation.SubscriptionEventContext context, HotChocolate.Execution.IQueryResult! result) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.SubscriptionTransportError(HotChocolate.Execution.Processing.ISubscription! subscription, System.Exception! exception) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.SyntaxError(HotChocolate.Execution.IRequestContext! context, HotChocolate.IError! error) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.TaskError(HotChocolate.Execution.IExecutionTask! task, HotChocolate.IError! error) -> void
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ValidateDocument(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Instrumentation.IActivityScope!
virtual HotChocolate.Execution.Instrumentation.DiagnosticEventListener.ValidationErrors(HotChocolate.Execution.IRequestContext! context, System.Collections.Generic.IReadOnlyList<HotChocolate.IError!>! errors) -> void
virtual HotChocolate.Execution.Processing.DefaultTransactionScopeHandler.Create(HotChocolate.Execution.IRequestContext! context) -> HotChocolate.Execution.Processing.ITransactionScope!
virtual HotChocolate.Execution.RequestExecutorProxy.Dispose(bool disposing) -> void
