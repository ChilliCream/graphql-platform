abstract HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ApplySkip(TQuery query, int skip) -> TQuery
abstract HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ApplyTake(TQuery query, int take) -> TQuery
abstract HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.CountAsync(TQuery query, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<int>
abstract HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ExecuteAsync(TQuery query, int offset, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Pagination.Edge<TEntity>!>!>
HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>
HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ApplyPaginationAsync(TQuery query, HotChocolate.Types.Pagination.CursorPagingArguments arguments, int? totalCount, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ApplyPaginationAsync(TQuery query, HotChocolate.Types.Pagination.CursorPagingArguments arguments, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.CursorPaginationAlgorithm() -> void
HotChocolate.Types.Pagination.CursorPagingHandler.AllowBackwardPagination.get -> bool
HotChocolate.Types.Pagination.CursorPagingHandler.IncludeTotalCount.get -> bool
HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions
static HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions.ApplyCursorPaginationAsync<TEntity>(this System.Collections.Generic.IEnumerable<TEntity>! enumerable, HotChocolate.Resolvers.IResolverContext! context, int? defaultPageSize = null, int? totalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
static HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions.ApplyCursorPaginationAsync<TEntity>(this System.Linq.IQueryable<TEntity>! query, HotChocolate.Resolvers.IResolverContext! context, int? defaultPageSize = null, int? totalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
static HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions.ApplyCursorPaginationAsync<TEntity>(this System.Linq.IQueryable<TEntity>! query, HotChocolate.Types.Pagination.CursorPagingArguments arguments, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
static HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions.ApplyCursorPaginationAsync<TEntity>(this System.Linq.IQueryable<TEntity>! query, int? first = null, int? last = null, string? after = null, string? before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.AddPagingArguments(this HotChocolate.Types.IInterfaceFieldDescriptor! descriptor) -> HotChocolate.Types.IInterfaceFieldDescriptor!
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.AddPagingArguments(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!