#nullable enable
abstract HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ApplySkip(TQuery query, int skip) -> TQuery
abstract HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ApplyTake(TQuery query, int take) -> TQuery
abstract HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.CountAsync(TQuery query, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<int>
abstract HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ExecuteAsync(TQuery query, int offset, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<HotChocolate.Types.Pagination.Edge<TEntity>!>!>
abstract HotChocolate.Types.Pagination.CursorPagingHandler.SliceAsync(HotChocolate.Resolvers.IResolverContext! context, object! source, HotChocolate.Types.Pagination.CursorPagingArguments arguments) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection!>
abstract HotChocolate.Types.Pagination.CursorPagingProvider.CanHandle(HotChocolate.Internal.IExtendedType! source) -> bool
abstract HotChocolate.Types.Pagination.CursorPagingProvider.CreateHandler(HotChocolate.Internal.IExtendedType! source, HotChocolate.Types.Pagination.PagingOptions options) -> HotChocolate.Types.Pagination.CursorPagingHandler!
HotChocolate.Types.GetCursorPagingProvider
HotChocolate.Types.Pagination.Connection
HotChocolate.Types.Pagination.Connection.Connection(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.Pagination.IEdge!>! edges, HotChocolate.Types.Pagination.ConnectionPageInfo! info, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<int>>! getTotalCount) -> void
HotChocolate.Types.Pagination.Connection.Edges.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.Pagination.IEdge!>!
HotChocolate.Types.Pagination.Connection.GetTotalCountAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<int>
HotChocolate.Types.Pagination.Connection.Info.get -> HotChocolate.Types.Pagination.ConnectionPageInfo!
HotChocolate.Types.Pagination.Connection<T>
HotChocolate.Types.Pagination.Connection<T>.Connection(System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.Pagination.Edge<T>!>! edges, HotChocolate.Types.Pagination.ConnectionPageInfo! info, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<int>>! getTotalCount) -> void
HotChocolate.Types.Pagination.Connection<T>.Edges.get -> System.Collections.Generic.IReadOnlyCollection<HotChocolate.Types.Pagination.Edge<T>!>!
HotChocolate.Types.Pagination.ConnectionPageInfo
HotChocolate.Types.Pagination.ConnectionPageInfo.ConnectionPageInfo(bool hasNextPage, bool hasPreviousPage, string? startCursor, string? endCursor, int? totalCount = null) -> void
HotChocolate.Types.Pagination.ConnectionPageInfo.EndCursor.get -> string?
HotChocolate.Types.Pagination.ConnectionPageInfo.HasNextPage.get -> bool
HotChocolate.Types.Pagination.ConnectionPageInfo.HasPreviousPage.get -> bool
HotChocolate.Types.Pagination.ConnectionPageInfo.StartCursor.get -> string?
HotChocolate.Types.Pagination.ConnectionPageInfo.TotalCount.get -> int?
HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>
HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ApplyPaginationAsync(TQuery query, HotChocolate.Types.Pagination.CursorPagingArguments arguments, int? totalCount, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.ApplyPaginationAsync(TQuery query, HotChocolate.Types.Pagination.CursorPagingArguments arguments, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
HotChocolate.Types.Pagination.CursorPaginationAlgorithm<TQuery, TEntity>.CursorPaginationAlgorithm() -> void
HotChocolate.Types.Pagination.CursorPagingArguments
HotChocolate.Types.Pagination.CursorPagingArguments.After.get -> string?
HotChocolate.Types.Pagination.CursorPagingArguments.Before.get -> string?
HotChocolate.Types.Pagination.CursorPagingArguments.CursorPagingArguments() -> void
HotChocolate.Types.Pagination.CursorPagingArguments.CursorPagingArguments(int? first = null, int? last = null, string? after = null, string? before = null) -> void
HotChocolate.Types.Pagination.CursorPagingArguments.First.get -> int?
HotChocolate.Types.Pagination.CursorPagingArguments.Last.get -> int?
HotChocolate.Types.Pagination.CursorPagingHandler
HotChocolate.Types.Pagination.CursorPagingHandler.AllowBackwardPagination.get -> bool
HotChocolate.Types.Pagination.CursorPagingHandler.CursorPagingHandler(HotChocolate.Types.Pagination.PagingOptions options) -> void
HotChocolate.Types.Pagination.CursorPagingHandler.DefaultPageSize.get -> int
HotChocolate.Types.Pagination.CursorPagingHandler.IncludeTotalCount.get -> bool
HotChocolate.Types.Pagination.CursorPagingHandler.MaxPageSize.get -> int
HotChocolate.Types.Pagination.CursorPagingHandler.RequirePagingBoundaries.get -> bool
HotChocolate.Types.Pagination.CursorPagingHandler.ValidateContext(HotChocolate.Resolvers.IResolverContext! context) -> void
HotChocolate.Types.Pagination.CursorPagingProvider
HotChocolate.Types.Pagination.CursorPagingProvider.CursorPagingProvider() -> void
HotChocolate.Types.Pagination.Edge<T>
HotChocolate.Types.Pagination.Edge<T>.Cursor.get -> string!
HotChocolate.Types.Pagination.Edge<T>.Edge(T node, string! cursor) -> void
HotChocolate.Types.Pagination.Edge<T>.Node.get -> T
HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions
HotChocolate.Types.Pagination.IConnectionType
HotChocolate.Types.Pagination.IConnectionType.ConnectionName.get -> HotChocolate.NameString
HotChocolate.Types.Pagination.IConnectionType.EdgeType.get -> HotChocolate.Types.Pagination.IEdgeType!
HotChocolate.Types.Pagination.IEdge
HotChocolate.Types.Pagination.IEdge.Cursor.get -> string!
HotChocolate.Types.Pagination.IEdge.Node.get -> object?
HotChocolate.Types.Pagination.IEdgeType
HotChocolate.Types.Pagination.IEdgeType.ConnectionName.get -> HotChocolate.NameString
HotChocolate.Types.Pagination.IEdgeType.EntityType.get -> HotChocolate.Types.IOutputType!
HotChocolate.Types.Pagination.IEdgeType.NodeType.get -> HotChocolate.Types.IOutputType!
HotChocolate.Types.Pagination.IndexEdge<T>
HotChocolate.Types.Pagination.IndexEdge<T>.Index.get -> int
HotChocolate.Types.Pagination.PageInfoType
HotChocolate.Types.Pagination.PageInfoType.PageInfoType() -> void
HotChocolate.Types.Pagination.QueryableCursorPagingProvider
HotChocolate.Types.Pagination.QueryableCursorPagingProvider.QueryableCursorPagingProvider() -> void
HotChocolate.Types.PagingObjectFieldDescriptorExtensions
HotChocolate.Types.UsePagingAttribute
HotChocolate.Types.UsePagingAttribute.AllowBackwardPagination.get -> bool
HotChocolate.Types.UsePagingAttribute.AllowBackwardPagination.set -> void
HotChocolate.Types.UsePagingAttribute.ConnectionName.get -> string?
HotChocolate.Types.UsePagingAttribute.ConnectionName.set -> void
HotChocolate.Types.UsePagingAttribute.DefaultPageSize.get -> int
HotChocolate.Types.UsePagingAttribute.DefaultPageSize.set -> void
HotChocolate.Types.UsePagingAttribute.IncludeTotalCount.get -> bool
HotChocolate.Types.UsePagingAttribute.IncludeTotalCount.set -> void
HotChocolate.Types.UsePagingAttribute.InferConnectionNameFromField.get -> bool
HotChocolate.Types.UsePagingAttribute.InferConnectionNameFromField.set -> void
HotChocolate.Types.UsePagingAttribute.MaxPageSize.get -> int
HotChocolate.Types.UsePagingAttribute.MaxPageSize.set -> void
HotChocolate.Types.UsePagingAttribute.ProviderName.get -> string?
HotChocolate.Types.UsePagingAttribute.ProviderName.set -> void
HotChocolate.Types.UsePagingAttribute.RequirePagingBoundaries.get -> bool
HotChocolate.Types.UsePagingAttribute.RequirePagingBoundaries.set -> void
HotChocolate.Types.UsePagingAttribute.SchemaType.get -> System.Type?
HotChocolate.Types.UsePagingAttribute.SchemaType.set -> void
HotChocolate.Types.UsePagingAttribute.Type.get -> System.Type?
HotChocolate.Types.UsePagingAttribute.UsePagingAttribute(System.Type? type = null, int order = 0) -> void
Microsoft.Extensions.DependencyInjection.CursorPagingRequestExecutorBuilderExtension
override HotChocolate.Types.Pagination.PageInfoType.Configure(HotChocolate.Types.IObjectTypeDescriptor<HotChocolate.Types.Pagination.ConnectionPageInfo!>! descriptor) -> void
override HotChocolate.Types.Pagination.QueryableCursorPagingProvider.CanHandle(HotChocolate.Internal.IExtendedType! source) -> bool
override HotChocolate.Types.Pagination.QueryableCursorPagingProvider.CreateHandler(HotChocolate.Internal.IExtendedType! source, HotChocolate.Types.Pagination.PagingOptions options) -> HotChocolate.Types.Pagination.CursorPagingHandler!
static HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions.ApplyCursorPaginationAsync<TEntity>(this System.Collections.Generic.IEnumerable<TEntity>! enumerable, HotChocolate.Resolvers.IResolverContext! context, int? defaultPageSize = null, int? totalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
static HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions.ApplyCursorPaginationAsync<TEntity>(this System.Linq.IQueryable<TEntity>! query, HotChocolate.Resolvers.IResolverContext! context, int? defaultPageSize = null, int? totalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
static HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions.ApplyCursorPaginationAsync<TEntity>(this System.Linq.IQueryable<TEntity>! query, HotChocolate.Types.Pagination.CursorPagingArguments arguments, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
static HotChocolate.Types.Pagination.Extensions.CursorPagingQueryableExtensions.ApplyCursorPaginationAsync<TEntity>(this System.Linq.IQueryable<TEntity>! query, int? first = null, int? last = null, string? after = null, string? before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Types.Pagination.Connection<TEntity>!>
static HotChocolate.Types.Pagination.IndexEdge<T>.Create(T node, int index) -> HotChocolate.Types.Pagination.IndexEdge<T>!
static HotChocolate.Types.Pagination.IndexEdge<T>.DeserializeCursor(string! cursor) -> int
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.AddPagingArguments(this HotChocolate.Types.IInterfaceFieldDescriptor! descriptor, bool allowBackwardPagination) -> HotChocolate.Types.IInterfaceFieldDescriptor!
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.AddPagingArguments(this HotChocolate.Types.IInterfaceFieldDescriptor! descriptor) -> HotChocolate.Types.IInterfaceFieldDescriptor!
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.AddPagingArguments(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, bool allowBackwardPagination) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.AddPagingArguments(this HotChocolate.Types.IObjectFieldDescriptor! descriptor) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.UsePaging(this HotChocolate.Types.IInterfaceFieldDescriptor! descriptor, System.Type? nodeType = null, HotChocolate.NameString? connectionName = null, HotChocolate.Types.Pagination.PagingOptions options = default(HotChocolate.Types.Pagination.PagingOptions)) -> HotChocolate.Types.IInterfaceFieldDescriptor!
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.UsePaging(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type? nodeType = null, System.Type? entityType = null, HotChocolate.Types.GetCursorPagingProvider? resolvePagingProvider = null, HotChocolate.NameString? connectionName = null, HotChocolate.Types.Pagination.PagingOptions options = default(HotChocolate.Types.Pagination.PagingOptions)) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.UsePaging<TNodeType, TEntity>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, HotChocolate.Types.GetCursorPagingProvider? resolvePagingProvider = null, HotChocolate.NameString? connectionName = null, HotChocolate.Types.Pagination.PagingOptions options = default(HotChocolate.Types.Pagination.PagingOptions)) -> HotChocolate.Types.IObjectFieldDescriptor!
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.UsePaging<TNodeType>(this HotChocolate.Types.IInterfaceFieldDescriptor! descriptor, HotChocolate.NameString? connectionName = null, HotChocolate.Types.Pagination.PagingOptions options = default(HotChocolate.Types.Pagination.PagingOptions)) -> HotChocolate.Types.IInterfaceFieldDescriptor!
static HotChocolate.Types.PagingObjectFieldDescriptorExtensions.UsePaging<TNodeType>(this HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Type? entityType = null, HotChocolate.Types.GetCursorPagingProvider? resolvePagingProvider = null, HotChocolate.NameString? connectionName = null, HotChocolate.Types.Pagination.PagingOptions options = default(HotChocolate.Types.Pagination.PagingOptions)) -> HotChocolate.Types.IObjectFieldDescriptor!
static Microsoft.Extensions.DependencyInjection.CursorPagingRequestExecutorBuilderExtension.AddCursorPagingProvider<TProvider>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? providerName = null, bool defaultProvider = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.CursorPagingRequestExecutorBuilderExtension.AddCursorPagingProvider<TProvider>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<System.IServiceProvider!, TProvider!>! factory, string? providerName = null, bool defaultProvider = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.CursorPagingRequestExecutorBuilderExtension.AddQueryableCursorPagingProvider(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string? providerName = null, bool defaultProvider = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
