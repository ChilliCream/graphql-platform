schema {
  query: Query
}

type Query {
  citites(where: CityFilter): City
  parcels: [CadastralParcel]
  person(id: String!): Person
}

input CityFilter {
  shape: GeometryFilter
}

input IntersectionInput {
  of: GeoJsonFitlerInput
  is: GeometryFilter
}

input UnionInput {
  of: GeoJsonFitlerInput
  is: GeometryFilter
}

input DifferenceInput {
  of: GeoJsonFitlerInput
  is: GeometryFilter
}

input GeoJsonFitlerInput {
  buffer: Float
  data: GeoJsonInput
}

input GeoJsonInput {
  buffer: Float
}

input DistanceInput {
  from: GeoJsonFitlerInput!
  is: Float
  is_gt: Float
  is_gte: Float
  is_lt: Float
  is_lte: Float
  is_in: Float
  is_not: Float
  is_not_gt: Float
  is_not_gte: Float
}

input CoordinateFilter {
  toBeDefined: String
}

enum Dimension {
  POINT
  CURVE
  SURFACE
  FALSE
  TRUE
  DONTCARE
}

type City {
  shape: GeoJSONObject
  name: String
}

input GeometryFilter {
  area: Float
  area_gt: Float
  area_gte: Float
  area_lt: Float
  area_lte: Float
  area_in: [Float]
  area_not: Float
  area_not_gt: Float
  area_not_gte: Float
  area_not_lt: Float
  area_not_lte: Float
  area_not_in: [Float]
  boundary: GeometryFilter
  boundaryDimension: Dimension
  boundaryDimension_gt: Dimension
  boundaryDimension_gte: Dimension
  boundaryDimension_lt: Dimension
  boundaryDimension_lte: Dimension
  boundaryDimension_in: [Dimension]
  boundaryDimension_not: Dimension
  boundaryDimension_not_gt: Dimension
  boundaryDimension_not_gte: Dimension
  boundaryDimension_not_lt: Dimension
  boundaryDimension_not_lte: Dimension
  boundaryDimension_not_in: [Dimension]
  centroid: PointFilter
  coordinate: CoordinateFilter
  coordinates_any: Boolean
  coordinates_some: CoordinateFilter
  coordinates_all: CoordinateFilter
  coordinates_none: CoordinateFilter
  dimension: Dimension
  dimension_gt: Dimension
  dimension_gte: Dimension
  dimension_lt: Dimension
  dimension_lte: Dimension
  dimension_in: [Dimension!]
  dimension_not: Dimension
  dimension_not_gt: Dimension
  dimension_not_gte: Dimension
  dimension_not_lt: Dimension
  dimension_not_lte: Dimension
  dimension_not_in: [Dimension!]
  envelope: GeometryFilter
  geometryType: String
  geometryType_startWith: String
  geometryType_endsWith: String
  geometryType_contains: String
  geometryType_in: [String!]
  geometryType_not: String
  geometryType_not_startWith: String
  geometryType_not_endsWith: String
  geometryType_not_contains: String
  geometryType_not_in: [String!]
  interiorPoint: PointFilter
  isEmpty: Boolean
  isEmpty_not: Boolean
  isGeometryCollection: Boolean
  isGeometryCollection_not: Boolean
  isRectangle: Boolean
  isRectangle_not: Boolean
  isSimple: Boolean
  isSimple_not: Boolean
  isValid: Boolean
  isValid_not: Boolean
  length: Float
  length_gt: Float
  length_gte: Float
  length_lt: Float
  length_lte: Float
  length_in: [Float!]
  length_not: Float
  length_not_gt: Float
  length_not_gte: Float
  length_not_lt: Float
  length_not_lte: Float
  length_not_in: [Float!]
  numGeometries: Int
  numGeometries_gt: Int
  numGeometries_gte: Int
  numGeometries_lt: Int
  numGeometries_lte: Int
  numGeometries_in: [Int!]
  numGeometries_not: Int
  numGeometries_not_gt: Int
  numGeometries_not_gte: Int
  numGeometries_not_lt: Int
  numGeometries_not_lte: Int
  numGeometries_not_in: [Int!]
  numPoints: Int
  numPoints_gt: Int
  numPoints_gte: Int
  numPoints_lt: Int
  numPoints_lte: Int
  numPoints_in: [Int!]
  numPoints_not: Int
  numPoints_not_gt: Int
  numPoints_not_gte: Int
  numPoints_not_lt: Int
  numPoints_not_lte: Int
  numPoints_not_in: [Int!]
  srid: Int
  srid_gt: Int
  srid_gte: Int
  srid_lt: Int
  srid_lte: Int
  srid_in: [Int!]
  srid_not: Int
  srid_not_gt: Int
  srid_not_gte: Int
  srid_not_lt: Int
  srid_not_lte: Int
  srid_not_in: [Int!]
  convexHull: GeometryFilter
  normalized: GeometryFilter
  reverse: GeometryFilter
  contains: GeoJsonFitlerInput
  contains_not: GeoJsonFitlerInput
  within: GeoJsonFitlerInput
  within_not: GeoJsonFitlerInput
  covers: GeoJsonFitlerInput
  covers_not: GeoJsonFitlerInput
  coveredBy: GeoJsonFitlerInput
  coveredBy_not: GeoJsonFitlerInput
  crosses: GeoJsonFitlerInput
  crosses_not: GeoJsonFitlerInput
  disjoint: GeoJsonFitlerInput
  disjoint_not: GeoJsonFitlerInput
  equals: GeoJsonFitlerInput
  equals_not: GeoJsonFitlerInput
  equalsExact: GeoJsonFitlerInput
  equalsExact_not: GeoJsonFitlerInput
  equalsTopologically: GeoJsonFitlerInput
  equalsTopologically_not: GeoJsonFitlerInput
  distance: DistanceInput
  intersection: IntersectionInput
  intersects: GeoJsonFitlerInput
  intersects_not: GeoJsonFitlerInput
  overlaps: GeoJsonFitlerInput
  overlaps_not: GeoJsonFitlerInput
  touches: GeoJsonFitlerInput
  touches_not: GeoJsonFitlerInput
  intersection: UnionInput
  difference: DifferenceInput
}

input PointFilter {
  area: Float
  area_gt: Float
  area_gte: Float
  area_lt: Float
  area_lte: Float
  area_in: [Float]
  area_not: Float
  area_not_gt: Float
  area_not_gte: Float
  area_not_lt: Float
  area_not_lte: Float
  area_not_in: [Float]
  boundary: GeometryFilter
  boundaryDimension: Dimension
  boundaryDimension_gt: Dimension
  boundaryDimension_gte: Dimension
  boundaryDimension_lt: Dimension
  boundaryDimension_lte: Dimension
  boundaryDimension_in: [Dimension]
  boundaryDimension_not: Dimension
  boundaryDimension_not_gt: Dimension
  boundaryDimension_not_gte: Dimension
  boundaryDimension_not_lt: Dimension
  boundaryDimension_not_lte: Dimension
  boundaryDimension_not_in: [Dimension]
  centroid: PointFilter
  coordinate: CoordinateFilter
  coordinates_any: Boolean
  coordinates_some: CoordinateFilter
  coordinates_all: CoordinateFilter
  coordinates_none: CoordinateFilter
  dimension: Dimension
  dimension_gt: Dimension
  dimension_gte: Dimension
  dimension_lt: Dimension
  dimension_lte: Dimension
  dimension_in: [Dimension!]
  dimension_not: Dimension
  dimension_not_gt: Dimension
  dimension_not_gte: Dimension
  dimension_not_lt: Dimension
  dimension_not_lte: Dimension
  dimension_not_in: [Dimension!]
  envelope: GeometryFilter
  geometryType: String
  geometryType_startWith: String
  geometryType_endsWith: String
  geometryType_contains: String
  geometryType_in: [String!]
  geometryType_not: String
  geometryType_not_startWith: String
  geometryType_not_endsWith: String
  geometryType_not_contains: String
  geometryType_not_in: [String!]
  interiorPoint: PointFilter
  isEmpty: Boolean
  isEmpty_not: Boolean
  isGeometryCollection: Boolean
  isGeometryCollection_not: Boolean
  isRectangle: Boolean
  isRectangle_not: Boolean
  isSimple: Boolean
  isSimple_not: Boolean
  isValid: Boolean
  isValid_not: Boolean
  length: Float
  length_gt: Float
  length_gte: Float
  length_lt: Float
  length_lte: Float
  length_in: [Float!]
  length_not: Float
  length_not_gt: Float
  length_not_gte: Float
  length_not_lt: Float
  length_not_lte: Float
  length_not_in: [Float!]
  numGeometries: Int
  numGeometries_gt: Int
  numGeometries_gte: Int
  numGeometries_lt: Int
  numGeometries_lte: Int
  numGeometries_in: [Int!]
  numGeometries_not: Int
  numGeometries_not_gt: Int
  numGeometries_not_gte: Int
  numGeometries_not_lt: Int
  numGeometries_not_lte: Int
  numGeometries_not_in: [Int!]
  numPoints: Int
  numPoints_gt: Int
  numPoints_gte: Int
  numPoints_lt: Int
  numPoints_lte: Int
  numPoints_in: [Int!]
  numPoints_not: Int
  numPoints_not_gt: Int
  numPoints_not_gte: Int
  numPoints_not_lt: Int
  numPoints_not_lte: Int
  numPoints_not_in: [Int!]
  srid: Int
  srid_gt: Int
  srid_gte: Int
  srid_lt: Int
  srid_lte: Int
  srid_in: [Int!]
  srid_not: Int
  srid_not_gt: Int
  srid_not_gte: Int
  srid_not_lt: Int
  srid_not_lte: Int
  srid_not_in: [Int!]
  convexHull: GeometryFilter
  normalized: GeometryFilter
  reverse: GeometryFilter
  contains: GeoJsonFitlerInput
  contains_not: GeoJsonFitlerInput
  within: GeoJsonFitlerInput
  within_not: GeoJsonFitlerInput
  covers: GeoJsonFitlerInput
  covers_not: GeoJsonFitlerInput
  coveredBy: GeoJsonFitlerInput
  coveredBy_not: GeoJsonFitlerInput
  crosses: GeoJsonFitlerInput
  crosses_not: GeoJsonFitlerInput
  disjoint: GeoJsonFitlerInput
  disjoint_not: GeoJsonFitlerInput
  equals: GeoJsonFitlerInput
  equals_not: GeoJsonFitlerInput
  equalsExact: GeoJsonFitlerInput
  equalsExact_not: GeoJsonFitlerInput
  equalsTopologically: GeoJsonFitlerInput
  equalsTopologically_not: GeoJsonFitlerInput
  distance: DistanceInput
  intersection: IntersectionInput
  intersects: GeoJsonFitlerInput
  intersects_not: GeoJsonFitlerInput
  overlaps: GeoJsonFitlerInput
  overlaps_not: GeoJsonFitlerInput
  touches: GeoJsonFitlerInput
  touches_not: GeoJsonFitlerInput
  intersection: UnionInput
  difference: DifferenceInput
}

interface GeoJSONObject {
  id: ID!
  type: GeoJSONType!
}

enum GeoJSONType {
  Point
  MultiPoint
  LineString
  MultiLineString
  Polygon
  MultiPolygon
  GeometryCollection
  Feature
  FeatureCollection
}

type Person implements GeoJSONObject {
  id: ID!
  type: GeoJSONType!
  properties: PersonProperties
}

type PersonProperties {
  firstName: String
  lastName: String
  partOf: [Record]
}

type Record implements GeoJSONObject {
  id: ID!
  type: GeoJSONType!
  properties: RecordProperties
}

type RecordProperties {
  right: RightType
  relatedTo: [CadastralParcel]!
}

enum RightType {
  SomeRight
  AnotherRight
  YetAnotherRight
}

type CadastralParcel implements GeoJSONObject {
  id: ID!
  type: GeoJSONType!
  geometry: GeoJSONMultiSurface
  properties: CadastralParcelProperties
}

type GeoJSONMultiSurface {
  type: GeoJSONType!
  #coordinates: [[[[Float]]]]
}

type CadastralParcelProperties {
  parcelNumber: String
  area(unit: AreaUnit = m2): Float
  records: [Record]
}

enum AreaUnit {
  m2
  ft2
}
