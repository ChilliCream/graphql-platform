abstract HotChocolate.Execution.ParallelExecutionTask.Context.get -> HotChocolate.Execution.IExecutionTaskContext!
abstract HotChocolate.Execution.ParallelExecutionTask.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
abstract HotChocolate.Execution.PureExecutionTask.Context.get -> HotChocolate.Execution.IExecutionTaskContext!
abstract HotChocolate.Execution.PureExecutionTask.Execute(System.Threading.CancellationToken cancellationToken) -> void
abstract HotChocolate.Execution.SerialExecutionTask.Context.get -> HotChocolate.Execution.IExecutionTaskContext!
abstract HotChocolate.Execution.SerialExecutionTask.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
HotChocolate.Execution.ExecutionStrategy
HotChocolate.Execution.ExecutionStrategy.Parallel = 1 -> HotChocolate.Execution.ExecutionStrategy
HotChocolate.Execution.ExecutionStrategy.Serial = 0 -> HotChocolate.Execution.ExecutionStrategy
HotChocolate.Execution.ExecutionTaskKind
HotChocolate.Execution.ExecutionTaskKind.Parallel = 0 -> HotChocolate.Execution.ExecutionTaskKind
HotChocolate.Execution.ExecutionTaskKind.Pure = 2 -> HotChocolate.Execution.ExecutionTaskKind
HotChocolate.Execution.ExecutionTaskKind.Serial = 1 -> HotChocolate.Execution.ExecutionTaskKind
HotChocolate.Execution.IExecutionTask.IsSerial.get -> bool
HotChocolate.Execution.IExecutionTask.IsSerial.set -> void
HotChocolate.Execution.IExecutionTask.Kind.get -> HotChocolate.Execution.ExecutionTaskKind
HotChocolate.Execution.IExecutionTask.Next.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.IExecutionTask.Next.set -> void
HotChocolate.Execution.IExecutionTask.Parent.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.IExecutionTask.Parent.set -> void
HotChocolate.Execution.IExecutionTask.Previous.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.IExecutionTask.Previous.set -> void
HotChocolate.Execution.IExecutionTask.State.get -> object?
HotChocolate.Execution.IExecutionTask.State.set -> void
HotChocolate.Execution.IExecutionTask.WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.Execution.IExecutionTaskContext.Completed(HotChocolate.Execution.IExecutionTask! task) -> void
HotChocolate.Execution.IExecutionTaskDefinition
HotChocolate.Execution.IQuery
HotChocolate.Execution.IQuery.AsSpan() -> System.ReadOnlySpan<byte>
HotChocolate.Execution.ParallelExecutionTask
HotChocolate.Execution.ParallelExecutionTask.BeginExecute(System.Threading.CancellationToken cancellationToken) -> void
HotChocolate.Execution.ParallelExecutionTask.IsCompleted.get -> bool
HotChocolate.Execution.ParallelExecutionTask.IsSerial.get -> bool
HotChocolate.Execution.ParallelExecutionTask.IsSerial.set -> void
HotChocolate.Execution.ParallelExecutionTask.Kind.get -> HotChocolate.Execution.ExecutionTaskKind
HotChocolate.Execution.ParallelExecutionTask.Next.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.ParallelExecutionTask.Next.set -> void
HotChocolate.Execution.ParallelExecutionTask.ParallelExecutionTask() -> void
HotChocolate.Execution.ParallelExecutionTask.Parent.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.ParallelExecutionTask.Parent.set -> void
HotChocolate.Execution.ParallelExecutionTask.Previous.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.ParallelExecutionTask.Previous.set -> void
HotChocolate.Execution.ParallelExecutionTask.State.get -> object?
HotChocolate.Execution.ParallelExecutionTask.State.set -> void
HotChocolate.Execution.ParallelExecutionTask.WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.Execution.PureExecutionTask
HotChocolate.Execution.PureExecutionTask.BeginExecute(System.Threading.CancellationToken cancellationToken) -> void
HotChocolate.Execution.PureExecutionTask.IsCompleted.get -> bool
HotChocolate.Execution.PureExecutionTask.IsSerial.get -> bool
HotChocolate.Execution.PureExecutionTask.IsSerial.set -> void
HotChocolate.Execution.PureExecutionTask.Kind.get -> HotChocolate.Execution.ExecutionTaskKind
HotChocolate.Execution.PureExecutionTask.Next.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.PureExecutionTask.Next.set -> void
HotChocolate.Execution.PureExecutionTask.Parent.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.PureExecutionTask.Parent.set -> void
HotChocolate.Execution.PureExecutionTask.Previous.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.PureExecutionTask.Previous.set -> void
HotChocolate.Execution.PureExecutionTask.PureExecutionTask() -> void
HotChocolate.Execution.PureExecutionTask.State.get -> object?
HotChocolate.Execution.PureExecutionTask.State.set -> void
HotChocolate.Execution.PureExecutionTask.WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.Execution.QueryRequestBuilderExtensions
HotChocolate.Execution.SerialExecutionTask
HotChocolate.Execution.SerialExecutionTask.BeginExecute(System.Threading.CancellationToken cancellationToken) -> void
HotChocolate.Execution.SerialExecutionTask.IsCompleted.get -> bool
HotChocolate.Execution.SerialExecutionTask.IsSerial.get -> bool
HotChocolate.Execution.SerialExecutionTask.IsSerial.set -> void
HotChocolate.Execution.SerialExecutionTask.Kind.get -> HotChocolate.Execution.ExecutionTaskKind
HotChocolate.Execution.SerialExecutionTask.Next.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.SerialExecutionTask.Next.set -> void
HotChocolate.Execution.SerialExecutionTask.Parent.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.SerialExecutionTask.Parent.set -> void
HotChocolate.Execution.SerialExecutionTask.Previous.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.SerialExecutionTask.Previous.set -> void
HotChocolate.Execution.SerialExecutionTask.SerialExecutionTask() -> void
HotChocolate.Execution.SerialExecutionTask.State.get -> object?
HotChocolate.Execution.SerialExecutionTask.State.set -> void
HotChocolate.Execution.SerialExecutionTask.WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
~const HotChocolate.ErrorCodes.Execution.ComplexityExceeded = "HC0047" -> string
~const HotChocolate.ErrorCodes.Execution.ComplexityStateInvalid = "HC0048" -> string
~const HotChocolate.WellKnownContextData.IncludeQueryPlan = "HotChocolate.Execution.EmitQueryPlan" -> string
~const HotChocolate.WellKnownContextData.MaximumAllowedComplexity = "HotChocolate.Execution.AllowedComplexity" -> string
~const HotChocolate.WellKnownContextData.OperationComplexity = "HotChocolate.Execution.OperationComplexity" -> string
~const HotChocolate.WellKnownContextData.SkipComplexityAnalysis = "HotChocolate.Execution.NoComplexityAnalysis" -> string
~static HotChocolate.Execution.QueryRequestBuilderExtensions.AllowIntrospection(this HotChocolate.Execution.IQueryRequestBuilder builder) -> HotChocolate.Execution.IQueryRequestBuilder
~static HotChocolate.Execution.QueryRequestBuilderExtensions.SetIntrospectionNotAllowedMessage(this HotChocolate.Execution.IQueryRequestBuilder builder, string message) -> HotChocolate.Execution.IQueryRequestBuilder
~static HotChocolate.Execution.QueryRequestBuilderExtensions.SetIntrospectionNotAllowedMessage(this HotChocolate.Execution.IQueryRequestBuilder builder, System.Func<string> messageFactory) -> HotChocolate.Execution.IQueryRequestBuilder
~static HotChocolate.Execution.QueryRequestBuilderExtensions.SetMaximumAllowedComplexity(this HotChocolate.Execution.IQueryRequestBuilder builder, int maximumAllowedComplexity) -> HotChocolate.Execution.IQueryRequestBuilder
~static HotChocolate.Execution.QueryRequestBuilderExtensions.SkipComplexityAnalysis(this HotChocolate.Execution.IQueryRequestBuilder builder) -> HotChocolate.Execution.IQueryRequestBuilder
