abstract HotChocolate.Execution.ExecutionTask.Context.get -> HotChocolate.Execution.IExecutionTaskContext!
abstract HotChocolate.Execution.ExecutionTask.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
const HotChocolate.ErrorCodes.Execution.Canceled = "HC0049" -> string!
const HotChocolate.ErrorCodes.Paging.MaxPaginationItems = "HC0051" -> string!
const HotChocolate.ErrorCodes.Paging.NodeTypeUnknown = "HC0031" -> string!
const HotChocolate.ErrorCodes.Paging.NoPagingBoundaries = "HC0052" -> string!
const HotChocolate.ErrorCodes.Paging.SchemaTypeInvalid = "HC0032" -> string!
const HotChocolate.ErrorCodes.Schema.MiddlewareOrderInvalid = "HC0050" -> string!
const HotChocolate.ErrorCodes.Schema.NoSchemaTypesAllowedAsRuntimeType = "HC0051" -> string!
const HotChocolate.WellKnownContextData.ResolverConfigs = "HotChocolate.Types.ResolverConfigs" -> string!
const HotChocolate.WellKnownContextData.ResolverTypes = "HotChocolate.Types.ResolverTypes" -> string!
const HotChocolate.WellKnownContextData.RootInstance = "HotChocolate.Types.RootInstance" -> string!
const HotChocolate.WellKnownContextData.RuntimeTypes = "HotChocolate.Types.RuntimeTypes" -> string!
const HotChocolate.WellKnownDirectives.DeprecationDefaultReason = "No longer supported." -> string!
const HotChocolate.WellKnownDirectives.InitialCount = "initialCount" -> string!
const HotChocolate.WellKnownMiddleware.DataLoader = "HotChocolate.Fetching.DataLoader" -> string!
const HotChocolate.WellKnownMiddleware.DbContext = "HotChocolate.Data.EF.UseDbContext" -> string!
const HotChocolate.WellKnownMiddleware.Filtering = "HotChocolate.Data.Filtering" -> string!
const HotChocolate.WellKnownMiddleware.GlobalId = "HotChocolate.Types.GlobalId" -> string!
const HotChocolate.WellKnownMiddleware.Paging = "HotChocolate.Types.Paging" -> string!
const HotChocolate.WellKnownMiddleware.Projection = "HotChocolate.Data.Projection" -> string!
const HotChocolate.WellKnownMiddleware.SingleOrDefault = "HotChocolate.Data.SingleOrDefault" -> string!
const HotChocolate.WellKnownMiddleware.Sorting = "HotChocolate.Data.Sorting" -> string!
const HotChocolate.WellKnownMiddleware.ToList = "HotChocolate.Data.EF.ToList" -> string!
HotChocolate.AggregateError
HotChocolate.AggregateError.AggregateError(params HotChocolate.IError![]! errors) -> void
HotChocolate.AggregateError.AggregateError(System.Collections.Generic.IEnumerable<HotChocolate.IError!>! errors) -> void
HotChocolate.AggregateError.Errors.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.IError!>!
HotChocolate.ArgumentAttribute
HotChocolate.ArgumentAttribute.ArgumentAttribute(string? name = null) -> void
HotChocolate.ArgumentAttribute.Name.get -> string?
HotChocolate.ErrorCodes.Paging
HotChocolate.Execution.BatchQueryResult.Dispose() -> void
HotChocolate.Execution.DeferredQueryResult.Dispose() -> void
HotChocolate.Execution.ExecutionTask
HotChocolate.Execution.ExecutionTask.BeginExecute(System.Threading.CancellationToken cancellationToken) -> void
HotChocolate.Execution.ExecutionTask.ExecutionTask() -> void
HotChocolate.Execution.ExecutionTask.Faulted() -> void
HotChocolate.Execution.ExecutionTask.IsRegistered.get -> bool
HotChocolate.Execution.ExecutionTask.IsRegistered.set -> void
HotChocolate.Execution.ExecutionTask.IsSerial.get -> bool
HotChocolate.Execution.ExecutionTask.IsSerial.set -> void
HotChocolate.Execution.ExecutionTask.Next.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.ExecutionTask.Next.set -> void
HotChocolate.Execution.ExecutionTask.Previous.get -> HotChocolate.Execution.IExecutionTask?
HotChocolate.Execution.ExecutionTask.Previous.set -> void
HotChocolate.Execution.ExecutionTask.Reset() -> void
HotChocolate.Execution.ExecutionTask.State.get -> object?
HotChocolate.Execution.ExecutionTask.State.set -> void
HotChocolate.Execution.ExecutionTask.Status.get -> HotChocolate.Execution.ExecutionTaskStatus
HotChocolate.Execution.ExecutionTask.WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
HotChocolate.Execution.ExecutionTaskExtensions
HotChocolate.Execution.ExecutionTaskStatus
HotChocolate.Execution.ExecutionTaskStatus.Completed = 2 -> HotChocolate.Execution.ExecutionTaskStatus
HotChocolate.Execution.ExecutionTaskStatus.Faulted = 3 -> HotChocolate.Execution.ExecutionTaskStatus
HotChocolate.Execution.ExecutionTaskStatus.Running = 1 -> HotChocolate.Execution.ExecutionTaskStatus
HotChocolate.Execution.ExecutionTaskStatus.WaitingToRun = 0 -> HotChocolate.Execution.ExecutionTaskStatus
HotChocolate.Execution.IExecutionTask.IsRegistered.get -> bool
HotChocolate.Execution.IExecutionTask.IsRegistered.set -> void
HotChocolate.Execution.IExecutionTask.Status.get -> HotChocolate.Execution.ExecutionTaskStatus
HotChocolate.Execution.IExecutionTaskContext.Register(HotChocolate.Execution.IExecutionTask! task) -> void
HotChocolate.Execution.ResultValue.Equals(HotChocolate.Execution.ResultValue other) -> bool
HotChocolate.Execution.ResultValue.IsInitialized.get -> bool
HotChocolate.Execution.ResultValue.ResultValue(string! name, object? value, bool isNullable = true) -> void
HotChocolate.Execution.SubscriptionResult.Dispose() -> void
HotChocolate.GraphQLTypeAttribute.GraphQLTypeAttribute(string! typeSyntax) -> void
HotChocolate.GraphQLTypeAttribute.TypeSyntax.get -> HotChocolate.Language.ITypeNode?
HotChocolate.WellKnownMiddleware
override HotChocolate.Optional<T>.ToString() -> string!
static HotChocolate.Execution.ExecutionTaskExtensions.IsCompleted(this HotChocolate.Execution.IExecutionTask! task) -> bool
static HotChocolate.FieldCoordinate.implicit operator HotChocolate.FieldCoordinate(string! s) -> HotChocolate.FieldCoordinate
static HotChocolate.NameString.implicit operator HotChocolate.Path!(HotChocolate.NameString name) -> HotChocolate.Path!
static HotChocolate.Optional<T>.From(HotChocolate.IOptional! optional) -> HotChocolate.Optional<T>
virtual HotChocolate.Execution.ExecutionTask.Kind.get -> HotChocolate.Execution.ExecutionTaskKind