//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotChocolate.Types.NodaTime.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class NodaTimeResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal NodaTimeResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HotChocolate.Types.NodaTime.Properties.NodaTimeResources", typeof(NodaTimeResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Represents a time zone - a mapping between UTC and local time.
        ///A time zone maps UTC instants to local times - or, equivalently, to the offset from UTC at any particular instant.
        ///
        ///Example: `Europe/Zurich`.
        /// </summary>
        internal static string DateTimeZoneType_Description {
            get {
                return ResourceManager.GetString("DateTimeZoneType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Represents a fixed (and calendar-independent) length of time..
        /// </summary>
        internal static string DurationType_Description {
            get {
                return ResourceManager.GetString("DurationType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Represents a fixed (and calendar-independent) length of time.
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string DurationType_Description_Extended {
            get {
                return ResourceManager.GetString("DurationType_Description_Extended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Represents an instant on the global timeline, with nanosecond resolution..
        /// </summary>
        internal static string InstantType_Description {
            get {
                return ResourceManager.GetString("InstantType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Represents an instant on the global timeline, with nanosecond resolution.
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string InstantType_Description_Extended {
            get {
                return ResourceManager.GetString("InstantType_Description_Extended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to deserialize integer to {0}.
        /// </summary>
        internal static string IntToStructBaseType_ParseLiteral_UnableToDeserializeInt {
            get {
                return ResourceManager.GetString("IntToStructBaseType_ParseLiteral_UnableToDeserializeInt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equates the days of the week with their numerical value according to ISO-8601.
        /// Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6, Sunday = 7..
        /// </summary>
        internal static string IsoDayOfWeekType_Description {
            get {
                return ResourceManager.GetString("IsoDayOfWeekType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A date and time in a particular calendar system..
        /// </summary>
        internal static string LocalDateTimeType_Description {
            get {
                return ResourceManager.GetString("LocalDateTimeType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A date and time in a particular calendar system.
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string LocalDateTimeType_Description_Extended {
            get {
                return ResourceManager.GetString("LocalDateTimeType_Description_Extended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LocalDate represents a date within the calendar, with no reference to a particular time zone or time of day..
        /// </summary>
        internal static string LocalDateType_Description {
            get {
                return ResourceManager.GetString("LocalDateType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LocalDate represents a date within the calendar, with no reference to a particular time zone or time of day.
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string LocalDateType_Description_Extended {
            get {
                return ResourceManager.GetString("LocalDateType_Description_Extended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LocalTime represents a time of day, with no reference to a particular calendar, time zone, or date..
        /// </summary>
        internal static string LocalTimeType_Description {
            get {
                return ResourceManager.GetString("LocalTimeType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LocalTime represents a time of day, with no reference to a particular calendar, time zone, or date.
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string LocalTimeType_Description_Extended {
            get {
                return ResourceManager.GetString("LocalTimeType_Description_Extended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided patterns are empty. You must provide at least one pattern for type {0}..
        /// </summary>
        internal static string NodaTime_NoPatternProvided {
            get {
                return ResourceManager.GetString("NodaTime_NoPatternProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A local date and time in a particular calendar system, combined with an offset from UTC..
        /// </summary>
        internal static string OffsetDateTimeType_Description {
            get {
                return ResourceManager.GetString("OffsetDateTimeType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A local date and time in a particular calendar system, combined with an offset from UTC.
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string OffsetDateTimeType_Description_Extended {
            get {
                return ResourceManager.GetString("OffsetDateTimeType_Description_Extended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A combination of a LocalDate and an Offset, to represent a date at a specific offset from UTC but without any time-of-day information..
        /// </summary>
        internal static string OffsetDateType_Description {
            get {
                return ResourceManager.GetString("OffsetDateType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A combination of a LocalDate and an Offset, to represent a date at a specific offset from UTC but without any time-of-day information.
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string OffsetDateType_Description_Extended {
            get {
                return ResourceManager.GetString("OffsetDateType_Description_Extended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A combination of a LocalTime and an Offset, to represent a time-of-day at a specific offset from UTC but without any date information..
        /// </summary>
        internal static string OffsetTimeType_Description {
            get {
                return ResourceManager.GetString("OffsetTimeType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A combination of a LocalTime and an Offset, to represent a time-of-day at a specific offset from UTC but without any date information.
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string OffsetTimeType_Description_Extended {
            get {
                return ResourceManager.GetString("OffsetTimeType_Description_Extended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An offset from UTC in seconds.
        /// A positive value means that the local time is ahead of UTC (e.g. for Europe); a negative value means that the local time is behind UTC (e.g. for America)..
        /// </summary>
        internal static string OffsetType_Description {
            get {
                return ResourceManager.GetString("OffsetType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An offset from UTC in seconds.
        /// A positive value means that the local time is ahead of UTC (e.g. for Europe); a negative value means that the local time is behind UTC (e.g. for America).
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string OffsetType_Description_Extended {
            get {
                return ResourceManager.GetString("OffsetType_Description_Extended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Represents a period of time expressed in human chronological terms: hours, days, weeks, months and so on.
        ///
        ///Pattern: `PnYnMnDTnHnMnS`
        ///Example: `P3Y6M4DT12H30M5S`.
        /// </summary>
        internal static string PeriodType_Description {
            get {
                return ResourceManager.GetString("PeriodType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to deserialize string to {0}.
        /// </summary>
        internal static string StringToClassBaseType_ParseLiteral_UnableToDeserializeString {
            get {
                return ResourceManager.GetString("StringToClassBaseType_ParseLiteral_UnableToDeserializeString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to deserialize string to {0}.
        /// </summary>
        internal static string StringToStructBaseType_ParseLiteral_UnableToDeserializeString {
            get {
                return ResourceManager.GetString("StringToStructBaseType_ParseLiteral_UnableToDeserializeString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A LocalDateTime in a specific time zone and with a particular offset to distinguish between otherwise-ambiguous instants.
        ///A ZonedDateTime is global, in that it maps to a single Instant..
        /// </summary>
        internal static string ZonedDateTimeType_Description {
            get {
                return ResourceManager.GetString("ZonedDateTimeType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A LocalDateTime in a specific time zone and with a particular offset to distinguish between otherwise-ambiguous instants.
        ///A ZonedDateTime is global, in that it maps to a single Instant.
        ///
        ///Allowed patterns:
        ///{0}
        ///
        ///Examples:
        ///{1}.
        /// </summary>
        internal static string ZonedDateTimeType_Description_Extended {
            get {
                return ResourceManager.GetString("ZonedDateTimeType_Description_Extended", resourceCulture);
            }
        }
    }
}
