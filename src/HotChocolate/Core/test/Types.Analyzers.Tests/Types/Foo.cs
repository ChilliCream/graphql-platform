// <auto-generated/>

#nullable enable
#pragma warning disable

using System;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using HotChocolate;
using HotChocolate.Types;
using HotChocolate.Execution.Configuration;
using Microsoft.Extensions.DependencyInjection;
using HotChocolate.Internal;
using HotChocolate.Types.Descriptors;
using HotChocolate.Types.Descriptors.Configurations;
using HotChocolate.Types.Helpers;

namespace HotChocolate.Types
{
    public static partial class BookNode1
    {
        internal static void Initialize(global::HotChocolate.Types.IObjectTypeDescriptor<global::HotChocolate.Types.Book> descriptor)
        {
            var thisType = typeof(global::HotChocolate.Types.BookNode);
            var extension = descriptor.Extend();
            var bindingResolver = extension.Context.ParameterBindingResolver;
            var configuration = extension.Configuration;
            var resolvers = new __Resolvers(bindingResolver);

            // configuration.AttributeBindingTypes = configuration.AttributeBindingTypes.Add(thisType);

            if(configuration.Description

            descriptor
                .ImplementsNode()
                .ResolveNode(resolvers.GetBookByIdAsync().Resolver!);

            var naming = extension.Context.Naming;
            var ignoredFields = new global::System.Collections.Generic.HashSet<string>();
            ignoredFields.Add(naming.GetMemberName("AuthorId", global::HotChocolate.Types.MemberKind.ObjectField));

            foreach(var ignoredField in ignoredFields)
            {
                descriptor.Field(ignoredField).Ignore();
            }

            descriptor
                .Field(naming.GetMemberName("GetAuthorAsync", global::HotChocolate.Types.MemberKind.ObjectField))
                .ExtendWith(static (field, context) =>
                {
                    var configuration = field.Configuration;
                    var naming = field.Context.Naming;

                    if (context.Resolvers.GetAuthorAsyncArguments.Length > 0)
                    {
                        foreach (var (parameter, kind) in context.Resolvers.GetAuthorAsyncArguments)
                        {
                            configuration.Arguments.Add(new ArgumentConfiguration(
                                name: naming.GetMemberName("foo", global::HotChocolate.Types.MemberKind.Argument),


                                ));

                        }
                    }

                    // configuration.Member = member;
                    configuration.Description = null;
                    configuration.DeprecationReason = reason;
                    configuration.Type =  context.TypeInspector.GetTypeRef(typeof(String), TypeContext.Output);
                    configuration.ResultType = typeof(String);
                    configuration.SourceType = context.ThisType;
                    configuration.ResolverType = context.ThisType;
                    configuration.SetSourceGeneratorFlags();
                    configuration.Resolvers = context.Resolvers.GetChapterAsync();
                },
                (Resolvers: resolvers, ThisType: thisType));

            descriptor
                .Field(thisType.GetMember("GetAuthorAsync", global::HotChocolate.Utilities.ReflectionUtils.StaticMemberFlags)[0])
                .ExtendWith(static (c, r) =>
                {
                    c.Configuration.SetSourceGeneratorFlags();
                    c.Configuration.Resolvers = r.GetAuthorAsync();
                },
                resolvers);

            descriptor
                .Field(thisType.GetMember("GetChapterAsync", global::HotChocolate.Utilities.ReflectionUtils.StaticMemberFlags)[0])
                .ExtendWith(static (c, r) =>
                {
                    c.Configuration.SetSourceGeneratorFlags();
                    c.Configuration.Resolvers = r.GetChapterAsync();
                },
                resolvers);

            descriptor
                .Field(thisType.GetMember("IdAndTitle", global::HotChocolate.Utilities.ReflectionUtils.StaticMemberFlags)[0])
                .ExtendWith(static (c, r) =>
                {
                    c.Configuration.SetSourceGeneratorFlags();
                    c.Configuration.Resolvers = r.IdAndTitle();
                },
                resolvers);

            descriptor
                .Field(thisType.GetMember("GetBookUri", global::HotChocolate.Utilities.ReflectionUtils.StaticMemberFlags)[0])
                .ExtendWith(static (c, r) =>
                {
                    c.Configuration.SetSourceGeneratorFlags();
                    c.Configuration.Resolvers = r.GetBookUri();
                },
                resolvers);

            Configure(descriptor);
        }

        static partial void Configure(global::HotChocolate.Types.IObjectTypeDescriptor<global::HotChocolate.Types.Book> descriptor);

        private sealed class __Resolvers
        {
            private readonly global::HotChocolate.Internal.IParameterBinding[] _args_GetAuthorAsync = new global::HotChocolate.Internal.IParameterBinding[1];
            private readonly global::HotChocolate.Internal.IParameterBinding[] _args_GetChapterAsync = new global::HotChocolate.Internal.IParameterBinding[1];
            private readonly global::HotChocolate.Internal.IParameterBinding[] _args_GetBookByIdAsync = new global::HotChocolate.Internal.IParameterBinding[1];

            public __Resolvers(global::HotChocolate.Internal.IParameterBindingResolver bindingResolver)
            {
                var type = typeof(global::HotChocolate.Types.BookNode);
                global::System.Reflection.MethodInfo resolver = default!;
                global::System.Reflection.ParameterInfo[] parameters = default!;

                resolver = type.GetMethod(
                    "GetAuthorAsync",
                    global::HotChocolate.Utilities.ReflectionUtils.StaticMemberFlags,
                    new global::System.Type[]
                    {
                        typeof(global::HotChocolate.Types.Book),
                        typeof(global::HotChocolate.Types.AuthorRepository),
                        typeof(global::System.Threading.CancellationToken)
                    })!;

                parameters = resolver.GetParameters();
                _args_GetAuthorAsync[0] = bindingResolver.GetBinding(parameters[1]);

                resolver = type.GetMethod(
                    "GetChapterAsync",
                    global::HotChocolate.Utilities.ReflectionUtils.StaticMemberFlags,
                    new global::System.Type[]
                    {
                        typeof(global::HotChocolate.Types.Book),
                        typeof(global::HotChocolate.Types.ChapterRepository),
                        typeof(global::System.Threading.CancellationToken)
                    })!;

                parameters = resolver.GetParameters();
                _args_GetChapterAsync[0] = bindingResolver.GetBinding(parameters[1]);

                resolver = type.GetMethod(
                    "GetBookByIdAsync",
                    global::HotChocolate.Utilities.ReflectionUtils.StaticMemberFlags,
                    new global::System.Type[]
                    {
                        typeof(int),
                        typeof(global::HotChocolate.Types.BookRepository),
                        typeof(global::System.Threading.CancellationToken)
                    })!;

                parameters = resolver.GetParameters();
                _args_GetBookByIdAsync[0] = bindingResolver.GetBinding(parameters[1]);
            }

            private readonly ImmutableArray<(ParameterDescriptor Parameter, ArgumentKind Kind)> _GetAuthorAsyncArguments = [];

            public ImmutableArray<(ParameterDescriptor Parameter, ArgumentKind Kind)> GetAuthorAsyncArguments => _GetAuthorAsyncArguments;

            public HotChocolate.Resolvers.FieldResolverDelegates GetAuthorAsync()
                => new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: GetAuthorAsync);

            private async global::System.Threading.Tasks.ValueTask<global::System.Object?> GetAuthorAsync(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var args0 = context.Parent<global::HotChocolate.Types.Book>();
                var args1 = _args_GetAuthorAsync[0].Execute<global::HotChocolate.Types.AuthorRepository>(context);
                var args2 = context.RequestAborted;
                var result = await global::HotChocolate.Types.BookNode.GetAuthorAsync(args0, args1, args2);
                return result;
            }

            public HotChocolate.Resolvers.FieldResolverDelegates GetChapterAsync()
                => new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: GetChapterAsync);

            private async global::System.Threading.Tasks.ValueTask<global::System.Object?> GetChapterAsync(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var args0 = context.Parent<global::HotChocolate.Types.Book>();
                var args1 = _args_GetChapterAsync[0].Execute<global::HotChocolate.Types.ChapterRepository>(context);
                var args2 = context.RequestAborted;
                var result = await global::HotChocolate.Types.BookNode.GetChapterAsync(args0, args1, args2);
                return result;
            }

            public HotChocolate.Resolvers.FieldResolverDelegates IdAndTitle()
            {
                return new global::HotChocolate.Resolvers.FieldResolverDelegates(pureResolver: IdAndTitle);
            }

            private global::System.Object? IdAndTitle(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var args0 = context.Parent<global::HotChocolate.Types.Book>();
                var result = global::HotChocolate.Types.BookNode.IdAndTitle(args0);
                return result;
            }

            public HotChocolate.Resolvers.FieldResolverDelegates GetBookUri()
            {
                return new global::HotChocolate.Resolvers.FieldResolverDelegates(pureResolver: GetBookUri);
            }

            private global::System.Object? GetBookUri(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var args0 = context.Parent<global::HotChocolate.Types.Book>();
                var args1 = context.GetGlobalState<global::Microsoft.AspNetCore.Http.HttpContext>(nameof(global::Microsoft.AspNetCore.Http.HttpContext))!;
                var args2 = context.GetLocalStateOrDefault<string?>("foo", default);
                var result = global::HotChocolate.Types.BookNode.GetBookUri(args0, args1, args2);
                return result;
            }

            public HotChocolate.Resolvers.FieldResolverDelegates GetBookByIdAsync()
                => new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: GetBookByIdAsync);

            private async global::System.Threading.Tasks.ValueTask<global::System.Object?> GetBookByIdAsync(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var args0 = context.GetLocalState<int>(global::HotChocolate.WellKnownContextData.InternalId);
                var args1 = _args_GetBookByIdAsync[0].Execute<global::HotChocolate.Types.BookRepository>(context);
                var args2 = context.RequestAborted;
                var result = await global::HotChocolate.Types.BookNode.GetBookByIdAsync(args0, args1, args2);
                return result;
            }
        }
    }
}

