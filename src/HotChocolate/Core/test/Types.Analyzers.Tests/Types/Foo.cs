// <auto-generated/>

#nullable enable
#pragma warning disable

using System;
using System.Runtime.CompilerServices;
using HotChocolate;
using HotChocolate.Types;
using HotChocolate.Execution.Configuration;
using Microsoft.Extensions.DependencyInjection;
using HotChocolate.Internal;
using HotChocolate.Types.Descriptors;

namespace HotChocolate.Types
{
    public static partial class AuthorNode1
    {
        internal static void Initialize(global::HotChocolate.Types.IObjectTypeDescriptor<global::HotChocolate.Types.Author> descriptor)
        {
            var extension = descriptor.Extend();
            var configuration = extension.Configuration;
            var thisType = typeof(global::HotChocolate.Types.AuthorNode);
            var bindingResolver = extension.Context.ParameterBindingResolver;
            var resolvers = new __Resolvers(bindingResolver);

            var naming = descriptor.Extend().Context.Naming;

            descriptor
                .Field(naming.GetMemberName("GetBooksAsync", global::HotChocolate.Types.MemberKind.ObjectField))
                .ExtendWith(static (field, context) =>
                {
                    var configuration = field.Configuration;
                    var typeInspector = field.Context.TypeInspector;
                    var bindingResolver = field.Context.ParameterBindingResolver;
                    var naming = field.Context.Naming;
                    
                    configuration.Type = typeInspector.GetTypeRef(typeof(global::HotChocolate.Types.NonNullType<global::HotChocolate.Types.ListType<global::HotChocolate.Types.NonNullType<global::HotChocolate.Internal.NamedRuntimeType<global::HotChocolate.Types.Book>>>>), HotChocolate.Types.TypeContext.Output);
                    configuration.ResultType = typeof(global::System.Collections.Generic.IEnumerable<global::HotChocolate.Types.Book>);

                    configuration.SetSourceGeneratorFlags();

                    var bindingInfo = field.Context.ParameterBindingResolver;
                    var parameter = context.Resolvers.CreateParameterDescriptor_GetBooksAsync_repository();
                    var parameterInfo = bindingInfo.GetBindingInfo(parameter);

                    if(parameterInfo.Kind is global::HotChocolate.Internal.ArgumentKind.Argument)
                    {
                        var argumentConfiguration = new global::HotChocolate.Types.Descriptors.Configurations.ArgumentConfiguration
                        {
                            Name = naming.GetMemberName("repository", global::HotChocolate.Types.MemberKind.Argument),
                            Type = typeInspector.GetTypeRef(typeof(global::HotChocolate.Types.BookRepository), HotChocolate.Types.TypeContext.Input)
                        };

                        configuration.Arguments.Add(argumentConfiguration);
                    }
                    configuration.Resolvers = context.Resolvers.GetBooksAsync();
                },
                (Resolvers: resolvers, ThisType: thisType));

            descriptor
                .Field(naming.GetMemberName("GetSomeInfo", global::HotChocolate.Types.MemberKind.ObjectField))
                .ExtendWith(static (field, context) =>
                {
                    var configuration = field.Configuration;
                    var typeInspector = field.Context.TypeInspector;
                    var bindingResolver = field.Context.ParameterBindingResolver;
                    var naming = field.Context.Naming;

                    configuration.Description = "This is some information.";
                    configuration.Type = typeInspector.GetTypeRef(typeof(global::HotChocolate.Internal.NamedRuntimeType<string>), HotChocolate.Types.TypeContext.Output);
                    configuration.ResultType = typeof(string);

                    configuration.SetSourceGeneratorFlags();

                    var bindingInfo = field.Context.ParameterBindingResolver;
                    var parameter = context.Resolvers.CreateParameterDescriptor_GetSomeInfo_dataLoader();
                    var parameterInfo = bindingInfo.GetBindingInfo(parameter);

                    if(parameterInfo.Kind is global::HotChocolate.Internal.ArgumentKind.Argument)
                    {
                        var argumentConfiguration = new global::HotChocolate.Types.Descriptors.Configurations.ArgumentConfiguration
                        {
                            Name = naming.GetMemberName("dataLoader", global::HotChocolate.Types.MemberKind.Argument),
                            Type = typeInspector.GetTypeRef(typeof(ISomeInfoByIdDataLoader), HotChocolate.Types.TypeContext.Input)
                        };

                        configuration.Arguments.Add(argumentConfiguration);
                    }
                    configuration.Resolvers = context.Resolvers.GetSomeInfo();
                },
                (Resolvers: resolvers, ThisType: thisType));

            descriptor
                .Field(naming.GetMemberName("GetAdditionalInfo", global::HotChocolate.Types.MemberKind.ObjectField))
                .ExtendWith(static (field, context) =>
                {
                    var configuration = field.Configuration;
                    var typeInspector = field.Context.TypeInspector;
                    var bindingResolver = field.Context.ParameterBindingResolver;
                    var naming = field.Context.Naming;

                    configuration.Description = "Gets the additional info.";
                    configuration.Type = typeInspector.GetTypeRef(typeof(global::HotChocolate.Types.NonNullType<global::HotChocolate.Internal.NamedRuntimeType<string>>), HotChocolate.Types.TypeContext.Output);
                    configuration.ResultType = typeof(string);

                    configuration.SetSourceGeneratorFlags();

                    var bindingInfo = field.Context.ParameterBindingResolver;
                    var parameter = context.Resolvers.CreateParameterDescriptor_GetAdditionalInfo_someArg();
                    var parameterInfo = bindingInfo.GetBindingInfo(parameter);

                    if(parameterInfo.Kind is global::HotChocolate.Internal.ArgumentKind.Argument)
                    {
                        var argumentConfiguration = new global::HotChocolate.Types.Descriptors.Configurations.ArgumentConfiguration
                        {
                            Name = naming.GetMemberName("someArg", global::HotChocolate.Types.MemberKind.Argument),
                            Description = "Some argument",
                            Type = typeInspector.GetTypeRef(typeof(string), HotChocolate.Types.TypeContext.Input)
                        };

                        configuration.Arguments.Add(argumentConfiguration);
                    }
                    configuration.Resolvers = context.Resolvers.GetAdditionalInfo();
                },
                (Resolvers: resolvers, ThisType: thisType));

            descriptor
                .Field(naming.GetMemberName("GetAdditionalInfo1", global::HotChocolate.Types.MemberKind.ObjectField))
                .ExtendWith(static (field, context) =>
                {
                    var configuration = field.Configuration;
                    var typeInspector = field.Context.TypeInspector;
                    var bindingResolver = field.Context.ParameterBindingResolver;
                    var naming = field.Context.Naming;

                    configuration.Type = typeInspector.GetTypeRef(typeof(global::HotChocolate.Types.NonNullType<global::HotChocolate.Internal.NamedRuntimeType<string>>), HotChocolate.Types.TypeContext.Output);
                    configuration.ResultType = typeof(string);

                    configuration.SetSourceGeneratorFlags();

                    var bindingInfo = field.Context.ParameterBindingResolver;
                    var parameter = context.Resolvers.CreateParameterDescriptor_GetAdditionalInfo1_someArg1();
                    var parameterInfo = bindingInfo.GetBindingInfo(parameter);

                    if(parameterInfo.Kind is global::HotChocolate.Internal.ArgumentKind.Argument)
                    {
                        var argumentConfiguration = new global::HotChocolate.Types.Descriptors.Configurations.ArgumentConfiguration
                        {
                            Name = naming.GetMemberName("someArg1", global::HotChocolate.Types.MemberKind.Argument),
                            Type = typeInspector.GetTypeRef(typeof(string), HotChocolate.Types.TypeContext.Input)
                        };

                        configuration.Arguments.Add(argumentConfiguration);
                    }

                    parameter = context.Resolvers.CreateParameterDescriptor_GetAdditionalInfo1_someArg2();
                    parameterInfo = bindingInfo.GetBindingInfo(parameter);

                    if(parameterInfo.Kind is global::HotChocolate.Internal.ArgumentKind.Argument)
                    {
                        var argumentConfiguration = new global::HotChocolate.Types.Descriptors.Configurations.ArgumentConfiguration
                        {
                            Name = naming.GetMemberName("someArg2", global::HotChocolate.Types.MemberKind.Argument),
                            Type = typeInspector.GetTypeRef(typeof(string), HotChocolate.Types.TypeContext.Input)
                        };

                        configuration.Arguments.Add(argumentConfiguration);
                    }
                    configuration.Resolvers = context.Resolvers.GetAdditionalInfo1();
                },
                (Resolvers: resolvers, ThisType: thisType));

            descriptor
                .Field(naming.GetMemberName("GetAuthorsPure", global::HotChocolate.Types.MemberKind.ObjectField))
                .ExtendWith(static (field, context) =>
                {
                    var configuration = field.Configuration;
                    var typeInspector = field.Context.TypeInspector;
                    var bindingResolver = field.Context.ParameterBindingResolver;
                    var naming = field.Context.Naming;

                    configuration.Type = typeInspector.GetTypeRef(typeof(global::HotChocolate.Types.NonNullType<global::HotChocolate.Types.ListType<global::HotChocolate.Types.NonNullType<global::HotChocolate.Internal.NamedRuntimeType<global::HotChocolate.Types.Author>>>>), HotChocolate.Types.TypeContext.Output);
                    configuration.ResultType = typeof(global::System.Collections.Generic.IEnumerable<global::HotChocolate.Types.Author>);

                    configuration.SetSourceGeneratorFlags();
                    configuration.Resolvers = context.Resolvers.GetAuthorsPure();
                },
                (Resolvers: resolvers, ThisType: thisType));

            descriptor
                .Field(naming.GetMemberName("GetAuthorsQuery", global::HotChocolate.Types.MemberKind.ObjectField))
                .ExtendWith(static (field, context) =>
                {
                    var configuration = field.Configuration;
                    var typeInspector = field.Context.TypeInspector;
                    var bindingResolver = field.Context.ParameterBindingResolver;
                    var naming = field.Context.Naming;

                    configuration.Type = typeInspector.GetTypeRef(typeof(global::HotChocolate.Types.NonNullType<global::HotChocolate.Types.ListType<global::HotChocolate.Types.NonNullType<global::HotChocolate.Internal.NamedRuntimeType<global::HotChocolate.Types.Author>>>>), HotChocolate.Types.TypeContext.Output);
                    configuration.ResultType = typeof(global::System.Linq.IQueryable<global::HotChocolate.Types.Author>);

                    configuration.SetSourceGeneratorFlags();
                    configuration.Resolvers = context.Resolvers.GetAuthorsQuery();
                    configuration.ResultPostProcessor = global::HotChocolate.Execution.ListPostProcessor<global::HotChocolate.Types.Author>.Default;
                },
                (Resolvers: resolvers, ThisType: thisType));

            descriptor
                .Field(naming.GetMemberName("GetAuthorsNeedsPostProcessor", global::HotChocolate.Types.MemberKind.ObjectField))
                .ExtendWith(static (field, context) =>
                {
                    var configuration = field.Configuration;
                    var typeInspector = field.Context.TypeInspector;
                    var bindingResolver = field.Context.ParameterBindingResolver;
                    var naming = field.Context.Naming;

                    configuration.Type = typeInspector.GetTypeRef(typeof(global::HotChocolate.Types.NonNullType<global::HotChocolate.Types.ListType<global::HotChocolate.Types.NonNullType<global::HotChocolate.Internal.NamedRuntimeType<global::HotChocolate.Types.Author>>>>), HotChocolate.Types.TypeContext.Output);
                    configuration.ResultType = typeof(global::System.Collections.Generic.IEnumerable<global::HotChocolate.Types.Author>);

                    configuration.SetSourceGeneratorFlags();
                    configuration.Resolvers = context.Resolvers.GetAuthorsNeedsPostProcessor();
                    configuration.ResultPostProcessor = global::HotChocolate.Execution.ListPostProcessor<global::HotChocolate.Types.Author>.Default;
                },
                (Resolvers: resolvers, ThisType: thisType));

            descriptor
                .Field(naming.GetMemberName("GetAuthorsHasPostProcessor", global::HotChocolate.Types.MemberKind.ObjectField))
                .ExtendWith(static (field, context) =>
                {
                    var configuration = field.Configuration;
                    var typeInspector = field.Context.TypeInspector;
                    var bindingResolver = field.Context.ParameterBindingResolver;
                    var naming = field.Context.Naming;

                    configuration.Type = typeInspector.GetTypeRef(typeof(global::HotChocolate.Types.NonNullType<global::HotChocolate.Types.ListType<global::HotChocolate.Types.NonNullType<global::HotChocolate.Internal.NamedRuntimeType<global::HotChocolate.Types.Author>>>>), HotChocolate.Types.TypeContext.Output);
                    configuration.ResultType = typeof(global::System.Collections.Generic.IEnumerable<global::HotChocolate.Types.Author>);

                    configuration.SetSourceGeneratorFlags();
                    configuration.Resolvers = context.Resolvers.GetAuthorsHasPostProcessor();
                },
                (Resolvers: resolvers, ThisType: thisType));

            Configure(descriptor);
        }

        static partial void Configure(global::HotChocolate.Types.IObjectTypeDescriptor<global::HotChocolate.Types.Author> descriptor);

        private sealed class __Resolvers
        {
            private readonly global::HotChocolate.Internal.IParameterBinding _binding_GetBooksAsync_repository;
            private readonly global::HotChocolate.Internal.IParameterBinding _binding_GetSomeInfo_dataLoader;
            private readonly global::HotChocolate.Internal.IParameterBinding _binding_GetAdditionalInfo_someArg;
            private readonly global::HotChocolate.Internal.IParameterBinding _binding_GetAdditionalInfo1_someArg1;
            private readonly global::HotChocolate.Internal.IParameterBinding _binding_GetAdditionalInfo1_someArg2;

            public __Resolvers(global::HotChocolate.Resolvers.ParameterBindingResolver bindingResolver)
            {
                _binding_GetBooksAsync_repository = bindingResolver.GetBinding(CreateParameterDescriptor_GetBooksAsync_repository());
                _binding_GetSomeInfo_dataLoader = bindingResolver.GetBinding(CreateParameterDescriptor_GetSomeInfo_dataLoader());
                _binding_GetAdditionalInfo_someArg = bindingResolver.GetBinding(CreateParameterDescriptor_GetAdditionalInfo_someArg());
                _binding_GetAdditionalInfo1_someArg1 = bindingResolver.GetBinding(CreateParameterDescriptor_GetAdditionalInfo1_someArg1());
                _binding_GetAdditionalInfo1_someArg2 = bindingResolver.GetBinding(CreateParameterDescriptor_GetAdditionalInfo1_someArg2());
            }

            public global::HotChocolate.Internal.ParameterDescriptor CreateParameterDescriptor_GetBooksAsync_repository()
                => new HotChocolate.Internal.ParameterDescriptor(
                    "repository",
                    typeof(global::HotChocolate.Types.BookRepository),
                    isNullable: false,
                    []);

            public HotChocolate.Resolvers.FieldResolverDelegates GetBooksAsync()
                => new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: GetBooksAsync);

            private async global::System.Threading.Tasks.ValueTask<global::System.Object?> GetBooksAsync(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var args0 = context.Parent<global::HotChocolate.Types.Author>();
                var args1 = _binding_GetBooksAsync_repository.Execute<global::HotChocolate.Types.BookRepository>(context);
                var args2 = context.RequestAborted;
                var result = await global::HotChocolate.Types.AuthorNode.GetBooksAsync(args0, args1, args2);
                return result;
            }

            public global::HotChocolate.Internal.ParameterDescriptor CreateParameterDescriptor_GetSomeInfo_dataLoader()
                => new HotChocolate.Internal.ParameterDescriptor(
                    "dataLoader",
                    typeof(ISomeInfoByIdDataLoader),
                    isNullable: false,
                    []);

            public HotChocolate.Resolvers.FieldResolverDelegates GetSomeInfo()
                => new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: GetSomeInfo);

            private async global::System.Threading.Tasks.ValueTask<global::System.Object?> GetSomeInfo(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var args0 = context.Parent<global::HotChocolate.Types.Author>();
                var args1 = _binding_GetSomeInfo_dataLoader.Execute<global::HotChocolate.Types.ISomeInfoByIdDataLoader>(context);
                var args2 = context.RequestAborted;
                var result = await global::HotChocolate.Types.AuthorNode.GetSomeInfo(args0, args1, args2);
                return result;
            }

            public global::HotChocolate.Internal.ParameterDescriptor CreateParameterDescriptor_GetAdditionalInfo_someArg()
                => new HotChocolate.Internal.ParameterDescriptor(
                    "someArg",
                    typeof(string),
                    isNullable: false,
                    []);

            public HotChocolate.Resolvers.FieldResolverDelegates GetAdditionalInfo()
            {
                var isPureResolver = _binding_GetAdditionalInfo_someArg.IsPure;

                return isPureResolver
                    ? new global::HotChocolate.Resolvers.FieldResolverDelegates(pureResolver: GetAdditionalInfo)
                    : new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: c => new(GetAdditionalInfo(c)));
            }

            private global::System.Object? GetAdditionalInfo(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var args0 = context.Parent<global::HotChocolate.Types.Author>();
                var args1 = _binding_GetAdditionalInfo_someArg.Execute<string>(context);
                var result = global::HotChocolate.Types.AuthorNode.GetAdditionalInfo(args0, args1);
                return result;
            }

            public global::HotChocolate.Internal.ParameterDescriptor CreateParameterDescriptor_GetAdditionalInfo1_someArg1()
                => new HotChocolate.Internal.ParameterDescriptor(
                    "someArg1",
                    typeof(string),
                    isNullable: false,
                    []);
            public global::HotChocolate.Internal.ParameterDescriptor CreateParameterDescriptor_GetAdditionalInfo1_someArg2()
                => new HotChocolate.Internal.ParameterDescriptor(
                    "someArg2",
                    typeof(string),
                    isNullable: false,
                    []);

            public HotChocolate.Resolvers.FieldResolverDelegates GetAdditionalInfo1()
            {
                var isPureResolver = _binding_GetAdditionalInfo1_someArg1.IsPure && _binding_GetAdditionalInfo1_someArg2.IsPure;

                return isPureResolver
                    ? new global::HotChocolate.Resolvers.FieldResolverDelegates(pureResolver: GetAdditionalInfo1)
                    : new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: c => new(GetAdditionalInfo1(c)));
            }

            private global::System.Object? GetAdditionalInfo1(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var args0 = context.Parent<global::HotChocolate.Types.Author>();
                var args1 = _binding_GetAdditionalInfo1_someArg1.Execute<string>(context);
                var args2 = _binding_GetAdditionalInfo1_someArg2.Execute<string>(context);
                var result = global::HotChocolate.Types.AuthorNode.GetAdditionalInfo1(args0, args1, args2);
                return result;
            }

            public HotChocolate.Resolvers.FieldResolverDelegates GetAuthorsPure()
            {
                return new global::HotChocolate.Resolvers.FieldResolverDelegates(pureResolver: GetAuthorsPure);
            }

            private global::System.Object? GetAuthorsPure(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var result = global::HotChocolate.Types.AuthorNode.GetAuthorsPure();
                return result;
            }

            public HotChocolate.Resolvers.FieldResolverDelegates GetAuthorsQuery()
                => new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: GetAuthorsQuery);

            private global::System.Threading.Tasks.ValueTask<global::System.Object?> GetAuthorsQuery(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var result = global::HotChocolate.Types.AuthorNode.GetAuthorsQuery();
                return new global::System.Threading.Tasks.ValueTask<global::System.Object?>(result);
            }

            public HotChocolate.Resolvers.FieldResolverDelegates GetAuthorsNeedsPostProcessor()
                => new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: GetAuthorsNeedsPostProcessor);

            private async global::System.Threading.Tasks.ValueTask<global::System.Object?> GetAuthorsNeedsPostProcessor(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var result = await global::HotChocolate.Types.AuthorNode.GetAuthorsNeedsPostProcessor();
                return result;
            }

            public HotChocolate.Resolvers.FieldResolverDelegates GetAuthorsHasPostProcessor()
                => new global::HotChocolate.Resolvers.FieldResolverDelegates(resolver: GetAuthorsHasPostProcessor);

            private async global::System.Threading.Tasks.ValueTask<global::System.Object?> GetAuthorsHasPostProcessor(global::HotChocolate.Resolvers.IResolverContext context)
            {
                var result = await global::HotChocolate.Types.AuthorNode.GetAuthorsHasPostProcessor();
                return result;
            }
        }
    }
}

