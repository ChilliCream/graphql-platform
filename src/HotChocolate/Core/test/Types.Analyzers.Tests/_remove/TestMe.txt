// <auto-generated/>

#nullable enable

using System;
using System.Runtime.CompilerServices;
using HotChocolate;
using HotChocolate.Types;
using HotChocolate.Execution.Configuration;
using System.Reflection;
using System.Linq;
using HotChocolate.Internal;

namespace HotChocolate.Types
{
    internal static class AuthorNodeResolvers2
    {
        private readonly static global::HotChocolate.Internal.IParameterBinding[] _args_PersonLastName_GetAddressAsync = new global::HotChocolate.Internal.IParameterBinding[3];
        private static bool _bindingsInitialized;

        public static void InitializeBindings(global::HotChocolate.Internal.IParameterBindingResolver bindingResolver)
        {
            if (_bindingsInitialized)
            {
                return;
            }
            _bindingsInitialized = true;


            var bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static;
            var type = typeof(global::HotChocolate.Types.BookNode);

            var resolver_PersonLastName_GetAddressAsync = type.GetMethod("Address", bindingFlags)!;
            var parameters_PersonLastName_GetAddressAsync = method.GetParameters();
            _args_PersonLastName_GetAddressAsync[0] = bindingResolver.GetBinding(parameters[0]);
            _args_PersonLastName_GetAddressAsync[1] = bindingResolver.GetBinding(parameters[1]);
            _args_PersonLastName_GetAddressAsync[2] = bindingResolver.GetBinding(parameters[2]);
        }

        public static System.Object? AuthorNode_Address(global::HotChocolate.Resolvers.IPureResolverContext context)
        {
            var args0 = context.Parent<global::HotChocolate.Types.Author>();
            var result = global::HotChocolate.Types.AuthorNode.Address(args0);
            return result;
        }

        public static System.Object? PublisherNode_Company(global::HotChocolate.Resolvers.IPureResolverContext context)
        {
            var args0 = context.Parent<global::HotChocolate.Types.Publisher>();
            var result = global::HotChocolate.Types.PublisherNode.Company(args0);
            return result;
        }

        public static System.Object? PersonLastName_LastName(global::HotChocolate.Resolvers.IPureResolverContext context)
        {
            var result = global::HotChocolate.Types.PersonLastName.LastName;
            return result;
        }

        public static async global::System.Threading.Tasks.ValueTask<System.Object?> PersonLastName_GetAddressAsync(global::HotChocolate.Resolvers.IResolverContext context)
        {
            var args = global::System.Runtime.InteropServices.MemoryMarshal.GetReference(_args_PersonLastName_GetAddressAsync.AsSpan());
            var args0 = context.Parent<global::HotChocolate.Types.Person>();
            var args1 = global::System.Runtime.CompilerServices.Unsafe.Add(ref args, 1).Execute<global::System.Security.Claims.ClaimsPrincipal>(context);
            var args2 = global::System.Runtime.CompilerServices.Unsafe.Add(ref args, 2).Execute<int>(context);
            var result = await global::HotChocolate.Types.PersonLastName.GetAddressAsync(args0, args1, args2);
            return result;
        }
    }
}

