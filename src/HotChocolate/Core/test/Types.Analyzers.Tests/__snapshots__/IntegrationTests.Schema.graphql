schema {
  query: Query
  mutation: Mutation
}

interface Entity {
  idString: String!
  id: ID!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Address {
  id: Int!
  authorId: Int!
  authorName: String!
  street: String!
  city: String!
}

type Author implements Entity & Node {
  books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): BooksConnection
  someInfo: String
  additionalInfo(someArg: String!): String!
  additionalInfo1(someArg1: String! someArg2: String!): String!
  authorsPure: [Author!]!
  authorsQuery: [Author!]!
  authorsNeedsPostProcessor: [Author!]!
  authorsHasPostProcessor: [Author!]!
  id: ID!
  name: String!
  address: Address
  idString: String!
}

"A connection to a list of items."
type AuthorsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AuthorsEdge!]
  "A flattened list of the nodes."
  nodes: [Author!]
}

"An edge in a connection."
type AuthorsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Author!
}

type Book implements Node & Entity {
  id: ID!
  author: Author
  chapter("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ChapterConnection
  idAndTitle: String!
  bookUri: String!
  title: String!
  genre: BookGenre!
  idString: String!
}

"A connection to a list of items."
type BooksConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BooksEdge!]
  "A flattened list of the nodes."
  nodes: [Book!]
}

"An edge in a connection."
type BooksEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Book!
}

type Chapter implements Node {
  id: ID!
  fooBar: String!
  book: Book
  number: Int!
  title: String!
  bookId: Int!
}

"A connection to a list of items."
type ChapterConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ChapterEdge!]
  "A flattened list of the nodes."
  nodes: [Chapter!]
}

"An edge in a connection."
type ChapterEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Chapter!
}

type CreateBookPayload {
  book: Book
}

type Mutation {
  createBook(input: CreateBookInput!): CreateBookPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  addressById(id: Int!): Address
  queryFieldCollocatedWithAuthor: String!
  books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): BooksConnection
  bookById(id: Int!): Book
  authors("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AuthorsConnection
  authorById(id: ID!): Author
  staticField: String!
}

input CreateBookInput {
  title: String!
  authorId: Int!
  genre: BookGenre!
}

enum BookGenre {
  FICTION
  NON_FICTION
}
