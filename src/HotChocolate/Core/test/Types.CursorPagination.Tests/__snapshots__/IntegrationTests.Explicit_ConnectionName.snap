schema {
  query: ExplicitConnectionName
}

"A connection to a list of items."
type Connection1Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Connection1Edge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type Connection1Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"A connection to a list of items."
type Connection2Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Connection2Edge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type Connection2Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

type ExplicitConnectionName {
  abc("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): Connection1Connection
  def("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): Connection2Connection
  ghi("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): GhiConnection
}

"A connection to a list of items."
type GhiConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [GhiEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type GhiEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}
