schema {
  query: Query
}

"A connection to a list of items."
type ExplicitTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ExplicitTypeEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type ExplicitTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

type Foo {
  bar: String!
}

"A connection to a list of items."
type LettersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [LettersEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type LettersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"A connection to a list of items."
type NestedObjectListConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [NestedObjectListEdge!]
  "A flattened list of the nodes."
  nodes: [[Foo!]!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type NestedObjectListEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: [Foo!]!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  letters("Returns the first _n_ elements from the list." first: PaginationAmount "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: PaginationAmount "Returns the elements in the list that come before the specified cursor." before: String): LettersConnection
  explicitType("Returns the first _n_ elements from the list." first: PaginationAmount "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: PaginationAmount "Returns the elements in the list that come before the specified cursor." before: String): ExplicitTypeConnection
  nestedObjectList("Returns the first _n_ elements from the list." first: PaginationAmount "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: PaginationAmount "Returns the elements in the list that come before the specified cursor." before: String): NestedObjectListConnection
}

"The @tag directive is used to apply arbitrary string\nmetadata to a schema location. Custom tooling can use\nthis metadata during any step of the schema delivery flow,\nincluding composition, static analysis, and documentation.\n            \n\ninterface Book {\n  id: ID! @tag(name: \"your-value\")\n  title: String!\n  author: String!\n}"
directive @tag("The name of the tag." name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

scalar PaginationAmount
