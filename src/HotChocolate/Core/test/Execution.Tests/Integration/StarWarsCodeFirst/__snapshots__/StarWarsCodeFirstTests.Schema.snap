schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Character {
  id: ID!
  name: String!
  friends("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): FriendsConnection
  appearsIn: [Episode]
  traits: JSON
  height(unit: Unit): Float
}

type Droid implements Character {
  id: ID!
  name: String!
  appearsIn: [Episode]
  friends("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): FriendsConnection
  height(unit: Unit): Float
  primaryFunction: String
  traits: JSON
}

"A connection to a list of items."
type FriendsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FriendsEdge!]
  "A flattened list of the nodes."
  nodes: [Character]
}

"An edge in a connection."
type FriendsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Character
}

type Human implements Character {
  id: ID!
  name: String!
  appearsIn: [Episode]
  friends("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): FriendsConnection
  otherHuman: Human
  height(unit: Unit): Float
  homePlanet: String
  traits: JSON
}

type Mutation {
  createReview(episode: Episode! review: ReviewInput!): Review!
  complete(episode: Episode!): Boolean!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  hero(episode: Episode! = NEW_HOPE): Character
  heroByTraits(traits: JSON!): Character
  heroes(episodes: [Episode!]): [Character!]
  character(characterIds: [String]): [Character!]!
  search(text: String): [SearchResult]
  human(id: String): Human
  droid(id: String): Droid
}

type Review {
  commentary: String
  stars: Int!
}

type Starship {
  id: ID!
  name: String!
  length(unit: Unit): Float!
}

type Subscription {
  onReview(episode: Episode!): Review!
}

union SearchResult = Starship | Human | Droid

input ReviewInput {
  stars: Int!
  commentary: String
}

enum Episode {
  NEW_HOPE
  EMPIRE
  JEDI
}

enum Unit {
  FOOT
  METERS
}

scalar JSON
