schema {
  query: Query
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Person {
  name: String
}

"A connection to a list of items."
type PersonsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PersonsEdge!]
  "A flattened list of the nodes."
  nodes: [Person]
}

"An edge in a connection."
type PersonsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Person
}

type Query {
  persons("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): PersonsConnection @cost(complexity: 5, multipliers: [ "first", "last" ], defaultMultiplier: 10)
  person: Person @cost(complexity: 5)
  sayHello: String
}

"The cost directives is used to express the complexity of a field."
directive @cost("Defines the complexity of the field." complexity: Int! = 1 "Defines field arguments that act as complexity multipliers." multipliers: [MultiplierPath!] defaultMultiplier: Int) on FIELD_DEFINITION

"The multiplier path scalar represents a valid GraphQL multiplier path string."
scalar MultiplierPath
