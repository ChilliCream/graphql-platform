query getHero {
  a: hero(episode: NEW_HOPE) {
    ...Hero
  }
  b: hero(episode: EMPIRE) {
    ...Hero
  }
  c: hero(episode: JEDI) {
    ...Hero
  }
  search(text: "") {
    __typename
    ... Hero
    ... on Starship {
      shipId: id
      length
      name
    }
  }
  __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        args {
          ...InputValue
        }
        onOperation
        onFragment
        onField
      }
    }
}

fragment Hero on Character {
  id
  ...Human
  ...Droid
  appearsIn
  height
}

fragment Human on Human {
  ...HasName
  ...HasFriends
  height
}

fragment Droid on Droid {
  ...HasName
  ...HasFriends
  height
}

fragment Friend on CharacterConnection {
  nodes {
    ...HasName
    friends {
      nodes {
        friends {
          nodes {
            id
            name
            appearsIn
            height
            ... on Human {
              homePlanet
            }
            ... on Droid {
              primaryFunction
            }
          }
        }
      }
    }
  }
}

fragment HasName on Character {
  name
}

fragment HasFriends on Character {
  friends {
    ...Friend
  }
}

fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
        }
      }
    }
  }
