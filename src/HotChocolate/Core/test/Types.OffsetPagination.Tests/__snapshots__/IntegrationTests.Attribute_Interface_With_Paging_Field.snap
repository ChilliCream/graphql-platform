schema {
  query: QueryAttr
}

interface ISome2 {
  explicitType(skip: Int take: Int): ExplicitTypeCollectionSegment
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

"A segment of a collection."
type ExplicitTypeCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [String!]
}

type Foo {
  bar: String!
}

"A segment of a collection."
type LettersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [String!]
}

"A segment of a collection."
type NestedObjectListCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [[Foo!]!]
  totalCount: Int!
}

type QueryAttr {
  nestedObjectList(skip: Int take: Int): NestedObjectListCollectionSegment
  letters(skip: Int take: Int): LettersCollectionSegment
  explicitType(skip: Int take: Int): ExplicitTypeCollectionSegment
}

"The @tag directive is used to apply arbitrary string\nmetadata to a schema location. Custom tooling can use\nthis metadata during any step of the schema delivery flow,\nincluding composition, static analysis, and documentation.\n            \n\ninterface Book {\n  id: ID! @tag(name: \"your-value\")\n  title: String!\n  author: String!\n}"
directive @tag("The name of the tag." name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
