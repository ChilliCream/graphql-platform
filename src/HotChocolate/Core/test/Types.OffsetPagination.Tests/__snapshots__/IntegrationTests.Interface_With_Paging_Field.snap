schema {
  query: QueryAttr
}

interface ISome {
  explicitType(skip: Int take: Int): StringCollectionSegment
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type Foo {
  bar: String!
}

type FooCollectionSegment {
  items: [[Foo!]!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type QueryAttr {
  nestedObjectList(skip: Int take: Int): FooCollectionSegment
  letters(skip: Int take: Int): StringCollectionSegment
  explicitType(skip: Int take: Int): StringCollectionSegment
}

type StringCollectionSegment {
  items: [String!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
}

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
