schema {
  query: Query
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

"A segment of a collection."
type ExplicitTypeCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [String!]
}

type Foo {
  bar: String!
}

"A segment of a collection."
type LettersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [String!]
}

"A segment of a collection."
type NestedObjectListCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [[Foo!]!]
  totalCount: Int!
}

type Query {
  letters(skip: Int take: Int): LettersCollectionSegment
  explicitType(skip: Int take: Int): ExplicitTypeCollectionSegment
  nestedObjectList(skip: Int take: Int): NestedObjectListCollectionSegment
}

directive @tag(name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
