"Single line comment" schema { query: Query } "Single line comment" interface OtherInterface { field: String } """
Multi line
comment
""" interface SomeInterface { "Single line comment" field: String """
  Multi line
  comment
  """ fieldMulti: String fieldWithArgs("Single line comment" arg1: String """
  Multi line
  comment
  """ arg2: String): String } """
Multi line
comment
""" type OtherObjectType implements SomeInterface & OtherInterface { field: String fieldMulti: String fieldWithArgs(arg1: String arg2: String): String } """
Multi line
comment
""" type Query { "Single line comment" outputFieldSingle: String """
  Multi line
  comment
  """ outputFieldMulti: String outputFieldWithArgs("Single line comment" arg1: SomeInput """
  Multi line
  comment
  """ arg2: OtherInput): String } "Single line comment" union OtherUnion = OtherObjectType """
Multi line
comment
""" union SomeUnion = OtherObjectType "Single line comment" input OtherInput { "Single line comment" field: String """
  Multi line
  comment
  """ fieldMulti: String } """
Multi line
comment
""" input SomeInput { "Single line comment" field: String """
  Multi line
  comment
  """ fieldMulti: String } """
Multi line
comment
""" enum OtherEnum { "Single line comment" VALUE1 """
  Multi line
  comment
  """ VALUE2 } "Single line comment" enum SomeEnum { "Single line comment" VALUE1 """
  Multi line
  comment
  """ VALUE2 } """
The `@oneOf` directive is used within the type system definition language
 to indicate:

 - an Input Object is a Oneof Input Object, or
 - an Object Type's Field is a Oneof Field.
""" directive @oneOf on INPUT_OBJECT "Single line comment" directive @other("Single line comment" arg1: String """
Multi line
comment
""" arg2: String) on FIELD """
Multi line
comment
""" directive @some("Single line comment" arg1: String """
Multi line
comment
""" arg2: String) on FIELD """
Multi line
comment
""" scalar Other "Single line comment" scalar Some
