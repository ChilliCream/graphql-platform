schema {
  query: Query
}

interface IFooPayload {
  someId: ID!
  someNullableId: ID
  someIds: [ID!]!
  someNullableIds: [ID]
  interceptedId: Int
  interceptedIds: [Int!]
  raw: String!
}

type FooPayload implements IFooPayload {
  someId: ID!
  someIds: [ID!]!
  someNullableId: ID
  someNullableIds: [ID]
  interceptedId: Int
  interceptedIds: [Int!]
  raw: String!
}

type Query {
  intId(id: ID!): String!
  intIdList(id: [ID!]!): String!
  nullableIntId(id: ID): String!
  nullableIntIdList(id: [ID]!): String!
  stringId(id: ID!): String!
  stringIdList(id: [ID!]!): String!
  nullableStringId(id: ID): String!
  nullableStringIdList(id: [ID]!): String!
  guidId(id: ID!): String!
  guidIdList(id: [ID!]!): String!
  nullableGuidId(id: ID): String!
  nullableGuidIdList(id: [ID]!): String!
  interceptedId(id: ID!): String!
  interceptedIds(id: [ID!]!): String!
  foo(input: FooInput!): IFooPayload!
}

input FooInput {
  someId: ID!
  someNullableId: ID
  someIds: [ID!]!
  someNullableIds: [ID]
  interceptedId: ID
  interceptedIds: [ID!]
}

"The @tag directive is used to apply arbitrary string\nmetadata to a schema location. Custom tooling can use\nthis metadata during any step of the schema delivery flow,\nincluding composition, static analysis, and documentation.\n            \n\ninterface Book {\n  id: ID! @tag(name: \"your-value\")\n  title: String!\n  author: String!\n}"
directive @tag("The name of the tag." name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
