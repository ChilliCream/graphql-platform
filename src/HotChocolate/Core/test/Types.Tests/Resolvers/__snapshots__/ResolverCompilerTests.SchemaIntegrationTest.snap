schema {
  query: Resolvers
}

type Resolvers {
  claimsPrincipal: Boolean!
  globalState: String!
  globalStateNullable: String!
  globalStateWithDefault: String
  globalStateWithDefaultAbc: String!
  globalStateWithKey: String!
  localState: String!
  localStateWithDefault: String
  localStateWithDefaultAbc: String!
  localStateWithKey: String!
  nullableClaimsPrincipal: Boolean!
  optionalStringResolverWithArg(a: String!): String
  path: Boolean!
  resolverWithCancellationToken: String!
  resolverWithDocument: Boolean!
  resolverWithFieldSelection: Boolean!
  resolverWithFieldSyntax: Boolean!
  resolverWithObjectField: Boolean!
  resolverWithObjectType: Boolean!
  resolverWithOperationDefinition: Boolean!
  resolverWithOutputField: Boolean!
  resolverWithResolverContext: Boolean!
  resolverWithSchema: Boolean!
  resolverWithSelection: Boolean!
  resolverWithService: Boolean!
  scopedState: String!
  scopedStateNullable: String!
  scopedStateWithDefault: String
  scopedStateWithDefaultAbc: String!
  scopedStateWithKey: String!
  setGlobalState: String!
  setGlobalStateGeneric: String!
  setLocalState: String!
  setLocalStateGeneric: String!
  setScopedState: String!
  setScopedStateGeneric: String!
  stringProp: String!
  stringResolver: String!
  stringResolverWithArg(a: String!): String!
  stringTaskResolver: String!
  stringTaskResolverProp: String!
  stringTaskResolverWithArg(a: String!): String!
}

"The @tag directive is used to apply arbitrary string\nmetadata to a schema location. Custom tooling can use\nthis metadata during any step of the schema delivery flow,\nincluding composition, static analysis, and documentation.\n            \n\ninterface Book {\n  id: ID! @tag(name: \"your-value\")\n  title: String!\n  author: String!\n}"
directive @tag("The name of the tag." name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
