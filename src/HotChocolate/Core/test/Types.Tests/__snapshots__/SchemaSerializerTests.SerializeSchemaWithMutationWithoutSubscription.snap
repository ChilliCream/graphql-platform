schema {
  query: Query
  mutation: Mutation
}

interface Bar {
  id: ID!
}

type Baz {
  name("some comment" baz: BazInput): String
}

type Foo implements Bar {
  id: ID!
}

type Mutation {
  mutate: String
}

type Query {
  foo: Foo
}

union FooOrBaz = Foo | Baz

input BazInput {
  name: String
}

directive @tag(name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
