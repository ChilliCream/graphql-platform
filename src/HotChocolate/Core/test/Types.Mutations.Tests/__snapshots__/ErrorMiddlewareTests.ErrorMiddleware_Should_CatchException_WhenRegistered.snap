result:
---------------
{
  "data": {
    "throw": {
      "errors": [
        {
          "__typename": "InvalidOperationError",
          "message": "Operation is not valid due to the current state of the object."
        }
      ]
    }
  }
}
---------------

schema:
---------------
schema {
  mutation: Mutation
}

interface Error {
  message: String!
}

type InvalidOperationError implements Error {
  message: String!
}

type Mutation {
  throw: ThrowPayload!
}

type Payload {
  foo: String!
}

type ThrowPayload {
  payload: Payload
  errors: [ThrowError!]
}

union ThrowError = InvalidOperationError

"The @tag directive is used to apply arbitrary string\nmetadata to a schema location. Custom tooling can use\nthis metadata during any step of the schema delivery flow,\nincluding composition, static analysis, and documentation.\n            \n\ninterface Book {\n  id: ID! @tag(name: \"your-value\")\n  title: String!\n  author: String!\n}"
directive @tag("The name of the tag." name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
---------------
