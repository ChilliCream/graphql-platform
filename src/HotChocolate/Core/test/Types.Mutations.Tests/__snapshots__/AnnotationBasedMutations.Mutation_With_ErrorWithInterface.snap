schema {
  query: Query
  mutation: MutationWithInterfaces
}

interface Error {
  message: String!
}

interface IInterfaceError {
  name: String!
}

interface IInterfaceError2 {
  name: String!
}

type DoSomethingPayload {
  boolean: Boolean
  errors: [DoSomethingError!]
}

type ErrorWithInterface implements Error & IInterfaceError & IInterfaceError2 {
  name: String!
  message: String!
}

type MutationWithInterfaces {
  doSomething(input: DoSomethingInput!): DoSomethingPayload!
}

type Query {
  abc: String
}

union DoSomethingError = ErrorWithInterface

input DoSomethingInput {
  something: String!
}

"The @tag directive is used to apply arbitrary string\nmetadata to a schema location. Custom tooling can use\nthis metadata during any step of the schema delivery flow,\nincluding composition, static analysis, and documentation.\n            \n\ninterface Book {\n  id: ID! @tag(name: \"your-value\")\n  title: String!\n  author: String!\n}"
directive @tag("The name of the tag." name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION