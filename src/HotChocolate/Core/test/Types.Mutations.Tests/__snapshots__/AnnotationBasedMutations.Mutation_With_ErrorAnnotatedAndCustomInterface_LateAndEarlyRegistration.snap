schema {
  query: Query
  mutation: MutationWithErrorInterface2
}

interface IErrorInterface {
  message: String!
}

interface IInterfaceError {
  name: String!
}

interface IInterfaceError2 {
  name: String!
}

type AnnotatedPayload {
  boolean: Boolean
  errors: [AnnotatedError!]
}

type ErrorAnnotated implements IErrorInterface & IInterfaceError {
  message: String!
  name: String!
}

type ErrorAnnotatedAndNot implements IErrorInterface & IInterfaceError2 {
  message: String!
  name: String!
}

type ErrorNotAnnotated implements IErrorInterface {
  message: String!
}

type ExampleResult {
  notAnnotated(something: String!): ErrorNotAnnotated!
  both(something: String!): ErrorAnnotatedAndNot!
}

type ExampleResultPayload {
  exampleResult: ExampleResult
}

type MutationWithErrorInterface2 {
  annotated(input: AnnotatedInput!): AnnotatedPayload!
  exampleResult(input: ExampleResultInput!): ExampleResultPayload!
}

type Query {
  abc: String
}

union AnnotatedError = ErrorAnnotated | ErrorAnnotatedAndNot

input AnnotatedInput {
  something: String!
}

input ExampleResultInput {
  something: String!
}
