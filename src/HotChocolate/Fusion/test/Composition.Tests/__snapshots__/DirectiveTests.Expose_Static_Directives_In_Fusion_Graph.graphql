schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  enumField: TestEnum
  objectField(input: TestInput): TestOutput
  scalarField: Test @test
}

type Mutation {
  mutationField: String
}

type Subscription {
  subscriptionField: String
}

type TestOutput implements TestInterface @test {
  field: Int @test
}

interface TestInterface @test {
  field: Int @test
}

union TestUnion @test = TestOutput

input TestInput @test {
  inputField: Int @test
}

enum TestEnum @test {
  ENUM_VALUE @test
}

scalar Test @test

"A test directive"
directive @test repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
