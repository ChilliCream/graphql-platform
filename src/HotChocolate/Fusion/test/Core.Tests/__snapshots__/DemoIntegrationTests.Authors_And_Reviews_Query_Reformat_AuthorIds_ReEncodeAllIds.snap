User Request
---------------
query ReformatIds {
  reviews {
    author {
      id
    }
  }
}
---------------

QueryPlan
---------------
{
  "document": "query ReformatIds { reviews { author { id } } }",
  "operation": "ReformatIds",
  "rootNode": {
    "type": "Serial",
    "nodes": [
      {
        "type": "Resolver",
        "subgraph": "Reviews",
        "document": "query ReformatIds_1 { reviews { author { id } } }",
        "selectionSetId": 0
      },
      {
        "type": "Composition",
        "selectionSetIds": [
          0
        ]
      }
    ]
  }
}
---------------

Result
---------------
{
  "data": {
    "reviews": [
      {
        "author": {
          "id": "QXV0aG9yCmkx"
        }
      },
      {
        "author": {
          "id": "QXV0aG9yCmky"
        }
      },
      {
        "author": {
          "id": "QXV0aG9yCmkx"
        }
      },
      {
        "author": {
          "id": "QXV0aG9yCmky"
        }
      }
    ]
  }
}
---------------

Fusion Graph
---------------
schema @fusion(version: 1) @httpClient(subgraph: "Reviews", baseAddress: "http:\/\/localhost:5000\/graphql") @webSocketClient(subgraph: "Reviews", baseAddress: "ws:\/\/localhost:5000\/graphql") @httpClient(subgraph: "Accounts", baseAddress: "http:\/\/localhost:5000\/graphql") @webSocketClient(subgraph: "Accounts", baseAddress: "ws:\/\/localhost:5000\/graphql") {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  productById(id: ID!): Product @variable(subgraph: "Reviews", name: "id", argument: "id") @resolver(subgraph: "Reviews", select: "{ productById(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
  reviewById(id: ID!): Review @variable(subgraph: "Reviews", name: "id", argument: "id") @resolver(subgraph: "Reviews", select: "{ reviewById(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
  reviewOrAuthor: ReviewOrAuthor! @resolver(subgraph: "Reviews", select: "{ reviewOrAuthor }")
  reviews: [Review!]! @resolver(subgraph: "Reviews", select: "{ reviews }")
  userById(id: ID!): User @variable(subgraph: "Reviews", name: "id", argument: "id") @resolver(subgraph: "Reviews", select: "{ authorById(id: $id) }", arguments: [ { name: "id", type: "ID!" } ]) @variable(subgraph: "Accounts", name: "id", argument: "id") @resolver(subgraph: "Accounts", select: "{ userById(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
  users: [User!]! @resolver(subgraph: "Accounts", select: "{ users }")
  usersById(ids: [ID!]!): [User!]! @variable(subgraph: "Accounts", name: "ids", argument: "ids") @resolver(subgraph: "Accounts", select: "{ usersById(ids: $ids) }", arguments: [ { name: "ids", type: "[ID!]!" } ])
}

type Mutation {
  addReview(input: AddReviewInput!): AddReviewPayload! @variable(subgraph: "Reviews", name: "input", argument: "input") @resolver(subgraph: "Reviews", select: "{ addReview(input: $input) }", arguments: [ { name: "input", type: "AddReviewInput!" } ])
  addUser(input: AddUserInput!): AddUserPayload! @variable(subgraph: "Accounts", name: "input", argument: "input") @resolver(subgraph: "Accounts", select: "{ addUser(input: $input) }", arguments: [ { name: "input", type: "AddUserInput!" } ])
}

type Subscription {
  onNewReview: Review! @resolver(subgraph: "Reviews", select: "{ onNewReview }", kind: "SUBSCRIPTION")
}

type AddReviewPayload {
  review: Review @source(subgraph: "Reviews")
}

type AddUserPayload {
  user: User @source(subgraph: "Accounts")
}

type Product @variable(subgraph: "Reviews", name: "Product_id", select: "id") @resolver(subgraph: "Reviews", select: "{ productById(id: $Product_id) }", arguments: [ { name: "Product_id", type: "ID!" } ]) {
  reviews: [Review!]! @source(subgraph: "Reviews")
  upc: Int! @source(subgraph: "Reviews")
}

type Review implements Node {
  author: User! @source(subgraph: "Reviews")
  body: String! @source(subgraph: "Reviews")
  id: ID! @source(subgraph: "Reviews")
  product: Product! @source(subgraph: "Reviews")
}

type User implements Node @source(subgraph: "Reviews", name: "Author") @variable(subgraph: "Reviews", name: "User_id", select: "id") @variable(subgraph: "Accounts", name: "User_id", select: "id") @resolver(subgraph: "Reviews", select: "{ authorById(id: $User_id) }", arguments: [ { name: "User_id", type: "ID!" } ]) @resolver(subgraph: "Accounts", select: "{ userById(id: $User_id) }", arguments: [ { name: "User_id", type: "ID!" } ]) @resolver(subgraph: "Accounts", select: "{ usersById(ids: $User_id) }", arguments: [ { name: "User_id", type: "[ID!]!" } ], kind: "BATCH_BY_KEY") {
  birthdate: DateTime! @source(subgraph: "Accounts")
  id: ID! @source(subgraph: "Reviews") @source(subgraph: "Accounts")
  name: String! @source(subgraph: "Reviews") @source(subgraph: "Accounts")
  reviews: [Review!]! @source(subgraph: "Reviews")
  username: String! @source(subgraph: "Accounts")
}

interface Node {
  id: ID!
}

union ReviewOrAuthor = User | Review

input AddReviewInput {
  authorId: Int!
  body: String!
  upc: Int!
}

input AddUserInput {
  birthdate: DateTime!
  name: String!
  username: String!
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime
---------------
