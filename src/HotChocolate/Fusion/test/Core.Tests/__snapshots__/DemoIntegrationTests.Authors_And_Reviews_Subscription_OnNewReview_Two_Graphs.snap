User Request
---------------
subscription OnNewReview {
  onNewReview {
    body
    author {
      name
      birthdate
    }
  }
}
---------------

QueryPlan
---------------
{
  "document": "subscription OnNewReview { onNewReview { body author { name birthdate } } }",
  "operation": "OnNewReview",
  "rootNode": {
    "type": "Subscription",
    "nodes": [
      {
        "type": "Composition",
        "selectionSetIds": [
          0
        ]
      },
      {
        "type": "Resolver",
        "schemaName": "Accounts",
        "document": "query OnNewReview_2($__fusion_exports__1: Int!) { userById(id: $__fusion_exports__1) { birthdate } }",
        "selectionSetId": 2,
        "path": [
          "userById"
        ],
        "requires": [
          {
            "variable": "__fusion_exports__1"
          }
        ]
      },
      {
        "type": "Composition",
        "selectionSetIds": [
          2
        ]
      }
    ]
  }
}
---------------

Result 1
---------------
{
  "data": {
    "onNewReview": {
      "body": "__1) {\\n",
      "author": {
        "name": "}\u0022,\n",
        "birthdate": "1815-12-10T00:00:00.000\u002B00:35"
      }
    }
  }
}
---------------

Result 2
---------------
{
  "data": {
    "onNewReview": {
      "body": "__1) {\\n    bi",
      "author": {
        "name": "\u0022variable",
        "birthdate": "1912-06-23T00:00:00.000\u002B01:00"
      }
    }
  }
}
---------------

Result 3
---------------
{
  "data": {
    "onNewReview": {
      "body": "Could be better.",
      "author": {
        "name": "@ada",
        "birthdate": "1815-12-10T00:00:00.000\u002B00:35"
      }
    }
  }
}
---------------

Result 4
---------------
{
  "data": {
    "onNewReview": {
      "body": "Prefer something else.",
      "author": {
        "name": "@complete",
        "birthdate": "1912-06-23T00:00:00.000\u002B01:00"
      }
    }
  }
}
---------------

Fusion Graph
---------------
schema @fusion(version: 1) @httpClient(subgraph: "Reviews", baseAddress: "http:\/\/localhost:5000\/graphql") @webSocketClient(subgraph: "Reviews", baseAddress: "ws:\/\/localhost:5000\/graphql") @httpClient(subgraph: "Accounts", baseAddress: "http:\/\/localhost:5000\/graphql") @webSocketClient(subgraph: "Accounts", baseAddress: "ws:\/\/localhost:5000\/graphql") {
  query: Query
  subscription: Subscription
}

type Query {
  productById(upc: Int!): Product! @variable(subgraph: "Reviews", name: "upc", argument: "upc") @resolver(subgraph: "Reviews", select: "{ productById(upc: $upc) }", arguments: [ { name: "upc", type: "Int!" } ])
  reviews: [Review!]! @resolver(subgraph: "Reviews", select: "{ reviews }")
  userById(id: Int!): User! @variable(subgraph: "Reviews", name: "id", argument: "id") @resolver(subgraph: "Reviews", select: "{ authorById(id: $id) }", arguments: [ { name: "id", type: "Int!" } ]) @variable(subgraph: "Accounts", name: "id", argument: "id") @resolver(subgraph: "Accounts", select: "{ userById(id: $id) }", arguments: [ { name: "id", type: "Int!" } ])
  users: [User!]! @resolver(subgraph: "Accounts", select: "{ users }")
  usersById(ids: [Int!]!): [User!]! @variable(subgraph: "Accounts", name: "ids", argument: "ids") @resolver(subgraph: "Accounts", select: "{ usersById(ids: $ids) }", arguments: [ { name: "ids", type: "[Int!]!" } ])
}

type Subscription {
  onNewReview: Review! @resolver(subgraph: "Reviews", select: "{ onNewReview }", kind: "SUBSCRIPTION")
}

type Product @variable(subgraph: "Reviews", name: "Product_upc", select: "upc") @resolver(subgraph: "Reviews", select: "{ productById(upc: $Product_upc) }", arguments: [ { name: "Product_upc", type: "Int!" } ]) {
  reviews: [Review!]! @source(subgraph: "Reviews")
  upc: Int! @source(subgraph: "Reviews")
}

type Review {
  author: User! @source(subgraph: "Reviews")
  body: String! @source(subgraph: "Reviews")
  id: Int! @source(subgraph: "Reviews")
  product: Product! @source(subgraph: "Reviews")
}

type User @source(subgraph: "Reviews", name: "Author") @variable(subgraph: "Reviews", name: "User_id", select: "id") @variable(subgraph: "Accounts", name: "User_id", select: "id") @resolver(subgraph: "Reviews", select: "{ authorById(id: $User_id) }", arguments: [ { name: "User_id", type: "Int!" } ]) @resolver(subgraph: "Accounts", select: "{ userById(id: $User_id) }", arguments: [ { name: "User_id", type: "Int!" } ]) @resolver(subgraph: "Accounts", select: "{ usersById(ids: $User_id) }", arguments: [ { name: "User_id", type: "[Int!]!" } ], kind: "BATCH_BY_KEY") {
  birthdate: DateTime! @source(subgraph: "Accounts")
  id: Int! @source(subgraph: "Reviews") @source(subgraph: "Accounts")
  name: String! @source(subgraph: "Reviews") @source(subgraph: "Accounts")
  reviews: [Review!]! @source(subgraph: "Reviews")
  username: String! @source(subgraph: "Accounts")
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime
---------------
