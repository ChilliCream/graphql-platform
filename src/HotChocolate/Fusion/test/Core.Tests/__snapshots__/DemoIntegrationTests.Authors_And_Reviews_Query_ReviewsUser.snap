User Request
---------------
query GetUser {
  a: reviews {
    body
    author {
      name
    }
  }
  b: reviews {
    body
    author {
      name
    }
  }
  users {
    name
    reviews {
      body
      author {
        name
      }
    }
  }
}
---------------

QueryPlan
---------------
{
  "document": "query GetUser { a: reviews { body author { name } } b: reviews { body author { name } } users { name reviews { body author { name } } } }",
  "operation": "GetUser",
  "rootNode": {
    "type": "Serial",
    "nodes": [
      {
        "type": "Parallel",
        "nodes": [
          {
            "type": "Resolver",
            "schemaName": "Reviews",
            "document": "query GetUser_1 { a: reviews { body author { name } } b: reviews { body author { name } } }",
            "selectionSetId": 0
          },
          {
            "type": "Resolver",
            "schemaName": "Accounts",
            "document": "query GetUser_2 { users { name __fusion_exports__1: id } }",
            "selectionSetId": 0
          }
        ]
      },
      {
        "type": "Composition",
        "selectionSetIds": [
          0
        ]
      },
      {
        "type": "Resolver",
        "schemaName": "Reviews",
        "document": "query GetUser_3($__fusion_exports__1: Int!) { authorById(id: $__fusion_exports__1) { reviews { body author { name } } } }",
        "selectionSetId": 1,
        "path": [
          "authorById"
        ],
        "requires": [
          {
            "variable": "__fusion_exports__1"
          }
        ]
      },
      {
        "type": "Composition",
        "selectionSetIds": [
          1
        ]
      }
    ]
  }
}
---------------

Result
---------------
{
  "data": {
    "a": [
      {
        "body": "Love it!",
        "author": {
          "name": "@ada"
        }
      },
      {
        "body": "Too expensive.",
        "author": {
          "name": "@complete"
        }
      },
      {
        "body": "Could be better.",
        "author": {
          "name": "@ada"
        }
      },
      {
        "body": "Prefer something else.",
        "author": {
          "name": "@complete"
        }
      }
    ],
    "b": [
      {
        "body": "Love it!",
        "author": {
          "name": "@ada"
        }
      },
      {
        "body": "Too expensive.",
        "author": {
          "name": "@complete"
        }
      },
      {
        "body": "Could be better.",
        "author": {
          "name": "@ada"
        }
      },
      {
        "body": "Prefer something else.",
        "author": {
          "name": "@complete"
        }
      }
    ],
    "users": [
      {
        "name": "Ada Lovelace",
        "reviews": [
          {
            "body": "Love it!",
            "author": {
              "name": "@ada"
            }
          },
          {
            "body": "Could be better.",
            "author": {
              "name": "@ada"
            }
          }
        ]
      },
      {
        "name": "Alan Turing",
        "reviews": [
          {
            "body": "Too expensive.",
            "author": {
              "name": "@complete"
            }
          },
          {
            "body": "Prefer something else.",
            "author": {
              "name": "@complete"
            }
          }
        ]
      }
    ]
  }
}
---------------

Service Configuration
---------------
"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

scalar Int

type Product @resolver(subGraph: "Reviews", select: "{ productById(upc: $Product_upc) }") @variable(subGraph: "Reviews", name: "Product_upc", select: "upc", type: "Int!") {
  reviews: [Review!]! @source(subGraph: "Reviews")
  upc: Int! @source(subGraph: "Reviews")
}

type Query {
  authorById(id: Int!): User! @resolver(subGraph: "Reviews", select: "{ authorById(id: $id) }")
  productById(upc: Int!): Product! @resolver(subGraph: "Reviews", select: "{ productById(upc: $upc) }")
  reviews: [Review!]! @resolver(subGraph: "Reviews", select: "{ reviews }")
  userById(id: Int!): User! @resolver(subGraph: "Accounts", select: "{ userById(id: $id) }")
  users: [User!]! @resolver(subGraph: "Accounts", select: "{ users }")
}

type Review {
  author: User! @source(subGraph: "Reviews")
  body: String! @source(subGraph: "Reviews")
  id: Int! @source(subGraph: "Reviews")
  product: Product! @source(subGraph: "Reviews")
}

scalar String

type User @resolver(subGraph: "Reviews", select: "{ authorById(id: $User_id) }") @variable(subGraph: "Reviews", name: "User_id", select: "id", type: "Int!") @resolver(subGraph: "Accounts", select: "{ userById(id: $User_id) }") @variable(subGraph: "Accounts", name: "User_id", select: "id", type: "Int!") {
  birthdate: DateTime! @source(subGraph: "Accounts")
  id: Int! @source(subGraph: "Reviews") @source(subGraph: "Accounts")
  name: String! @source(subGraph: "Reviews") @source(subGraph: "Accounts")
  reviews: [Review!]! @source(subGraph: "Reviews")
  username: String! @source(subGraph: "Accounts")
}

schema @httpClient(subGraph: "Reviews", baseAddress: "https:\/\/b\/graphql") @httpClient(subGraph: "Accounts", baseAddress: "https:\/\/b\/graphql") {
  query: Query
}
---------------
