type Query {
  me: User! 
    @fetch(select: "user(id: 1) { ... User }", schema: "accounts")
    @fetch(select: "authorById(id: 1) { ... User }", schema: "reviews")
    @source(schema: "accounts")
    @source(schema: "reviews")
}

type User 
  @source(schema: "reviews", name: "Author")
  @variable(name: "userId", select: "id", schema: "accounts", type: "Int!")
  @variable(name: "userId", select: "id", schema: "reviews", type: "Int!")
  @fetch(select: "user(id: $userId) { ... User }", schema: "accounts")
  @fetch(select: "authorById(id: $userId) { ... User }", schema: "reviews") {
  id: Int!
    @source(schema: "accounts")
    @source(schema: "reviews")
  name: String!
    @source(schema: "accounts")
  birthdate: DateTime!
    @source(schema: "accounts")
  username: String!
    @source(schema: "accounts")
    @source(schema: "reviews")
  reviews: [Review]
    @source(schema: "reviews")
}

type Review
  @variable(name: "reviewId", select: "id", schema: "reviews", type: "Int!")
  @fetch(select: "reviewById(id: $reviewId) { ... Review }", schema: "reviews") {
  id: Int!
    @source(schema: "reviews")
  body: String!
    @source(schema: "reviews")
  author: User!
    @source(schema: "reviews")
  product: Product!
    @source(schema: "reviews")
}

type Product 
  @variable(name: "productId", select: "upc", schema: "reviews", type: "Int!")
  @fetch(select: "productById(upc: $productId) { ... Product }", schema: "reviews") {
  upc: Int!
    @source(schema: "reviews")
  reviews: [Review!]!
    @source(schema: "reviews")
}


schema
  @httpClient(schema: "accounts", baseAddress: "http://localhost:5051")
  @httpClient(schema: "reviews", baseAddress: "http://localhost:5054") {
  query: Query
}
