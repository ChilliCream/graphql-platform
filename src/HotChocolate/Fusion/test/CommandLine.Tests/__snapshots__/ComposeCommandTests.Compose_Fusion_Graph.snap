Schema Document
---------------
schema {
  query: Query
  mutation: Mutation
}

type Query {
  userById(id: ID!): User
  users: [User!]!
  usersById(ids: [ID!]!): [User!]!
}

type Mutation {
  addUser(input: AddUserInput!): AddUserPayload!
}

type AddUserPayload {
  user: User
}

type User implements Node {
  birthdate: Date!
  id: ID!
  name: String!
  username: String!
}

interface Node {
  id: ID!
}

input AddUserInput {
  birthdate: DateTime!
  name: String!
  username: String!
}

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime
---------------

Fusion Graph Document
---------------
schema @fusion(version: 1) @httpClient(subgraph: "Accounts", baseAddress: "http:\/\/localhost:5000\/graphql") @webSocketClient(subgraph: "Accounts", baseAddress: "ws:\/\/localhost:5000\/graphql") {
  query: Query
  mutation: Mutation
}

type Query {
  userById(id: ID!): User @variable(subgraph: "Accounts", name: "id", argument: "id") @resolver(subgraph: "Accounts", select: "{ userById(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
  users: [User!]! @resolver(subgraph: "Accounts", select: "{ users }")
  usersById(ids: [ID!]!): [User!]! @variable(subgraph: "Accounts", name: "ids", argument: "ids") @resolver(subgraph: "Accounts", select: "{ usersById(ids: $ids) }", arguments: [ { name: "ids", type: "[ID!]!" } ])
}

type Mutation {
  addUser(input: AddUserInput!): AddUserPayload! @variable(subgraph: "Accounts", name: "input", argument: "input") @resolver(subgraph: "Accounts", select: "{ addUser(input: $input) }", arguments: [ { name: "input", type: "AddUserInput!" } ])
}

type AddUserPayload {
  user: User @source(subgraph: "Accounts")
}

type User implements Node @variable(subgraph: "Accounts", name: "User_id", select: "id") @resolver(subgraph: "Accounts", select: "{ userById(id: $User_id) }", arguments: [ { name: "User_id", type: "ID!" } ]) @resolver(subgraph: "Accounts", select: "{ usersById(ids: $User_id) }", arguments: [ { name: "User_id", type: "[ID!]!" } ], kind: "BATCH_BY_KEY") @resolver(subgraph: "Accounts", select: "{ node(id: $User_id) { ... on User { ... User } } }", arguments: [ { name: "User_id", type: "ID!" } ]) @resolver(subgraph: "Accounts", select: "{ nodes(ids: $User_id) { ... on User { ... User } } }", arguments: [ { name: "User_id", type: "[ID!]!" } ], kind: "BATCH_BY_KEY") {
  birthdate: Date! @source(subgraph: "Accounts")
  id: ID! @source(subgraph: "Accounts")
  name: String! @source(subgraph: "Accounts")
  username: String! @source(subgraph: "Accounts")
}

interface Node {
  id: ID!
}

input AddUserInput {
  birthdate: DateTime!
  name: String!
  username: String!
}

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime
---------------

Accounts Subgraph Configuration
---------------
{
  "Name": "Accounts",
  "Schema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\n\"The node interface is implemented by entities that have a global unique identifier.\"\ninterface Node {\n  id: ID!\n}\n\ntype Query {\n  \"Fetches an object given its ID.\"\n  node(\"ID of the object.\" id: ID!): Node\n  \"Lookup nodes by a list of IDs.\"\n  nodes(\"The list of node IDs.\" ids: [ID!]!): [Node]!\n  users: [User!]!\n  userById(id: ID!): User\n  usersById(ids: [ID!]!): [User!]!\n}\n\ntype Mutation {\n  addUser(input: AddUserInput!): AddUserPayload!\n}\n\ntype User implements Node {\n  id: ID!\n  name: String!\n  birthdate: Date!\n  username: String!\n}\n\n\"The `DateTime` scalar represents an ISO-8601 compliant date time type.\"\nscalar DateTime\n\n\"The `Date` scalar represents an ISO-8601 compliant date type.\"\nscalar Date\n\ninput AddUserInput {\n  name: String!\n  username: String!\n  birthdate: DateTime!\n}\n\ntype AddUserPayload {\n  user: User\n}",
  "Extensions": [
    "extend type Query {\n  userById(id: ID! @is(field: \"id\")): User!\n  usersById(ids: [ID!]! @is(field: \"id\")): [User!]!\n}"
  ],
  "Clients": [
    {
      "ClientName": null,
      "BaseAddress": "http://localhost:5000/graphql"
    },
    {
      "ClientName": null,
      "BaseAddress": "ws://localhost:5000/graphql"
    }
  ]
}
---------------
