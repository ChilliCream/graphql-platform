{
  "Name": "Accounts",
  "Schema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\n\"The node interface is implemented by entities that have a global unique identifier.\"\ninterface Node {\n  id: ID!\n}\n\ntype Query {\n  \"Fetches an object given its ID.\"\n  node(\"ID of the object.\" id: ID!): Node\n  \"Lookup nodes by a list of IDs.\"\n  nodes(\"The list of node IDs.\" ids: [ID!]!): [Node]!\n  users: [User!]!\n  userById(id: ID!): User\n  usersById(ids: [ID!]!): [User!]!\n  viewer: Viewer!\n}\n\ntype Mutation {\n  addUser(input: AddUserInput!): AddUserPayload!\n}\n\ntype User implements Node {\n  id: ID!\n  name: String!\n  birthdate: Date!\n  username: String!\n}\n\ntype Viewer {\n  user: User\n  data: SomeData!\n}\n\n\"The `DateTime` scalar represents an ISO-8601 compliant date time type.\"\nscalar DateTime\n\n\"The `Date` scalar represents an ISO-8601 compliant date type.\"\nscalar Date\n\ntype SomeData {\n  accountValue: String!\n}\n\ninput AddUserInput {\n  name: String!\n  username: String!\n  birthdate: DateTime!\n}\n\ntype AddUserPayload {\n  user: User\n}",
  "Extensions": [
    "extend type Query {\n  userById(id: ID!\n    @is(field: \"id\")): User!\n  usersById(ids: [ID!]!\n    @is(field: \"id\")): [User!]!\n}"
  ],
  "Clients": [
    {
      "ClientName": null,
      "BaseAddress": "http://localhost:5000/graphql"
    },
    {
      "ClientName": null,
      "BaseAddress": "ws://localhost:5000/graphql"
    }
  ]
}