Name
---------------
Accounts
---------------

Schema
---------------
schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  users: [User!]!
  userById(id: ID!): User
  usersById(ids: [ID!]!): [User!]!
  errorField: String
  viewer: Viewer!
}

type Mutation {
  addUser(input: AddUserInput!): AddUserPayload!
}

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

type Viewer {
  user: User
  data: SomeData!
}

type User implements Node {
  errorField: String
  id: ID!
  name: String!
  birthdate: Date!
  username: String!
}

type SomeData {
  accountValue: String!
}

input AddUserInput {
  name: String!
  username: String!
  birthdate: Date!
}

type AddUserPayload {
  user: User
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION
---------------

Extensions
---------------
extend type Query {
  userById(id: ID!
    @is(field: "id")): User!
  usersById(ids: [ID!]!
    @is(field: "id")): [User!]!
}
---------------

Clients
---------------
{
  "ClientName": null,
  "BaseAddress": "http://localhost:5000/graphql"
}
---------------

Clients
---------------
{
  "ClientName": null,
  "BaseAddress": "ws://localhost:5000/graphql"
}
---------------
