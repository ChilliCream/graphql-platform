#nullable enable
abstract HotChocolate.Stitching.Merge.Handlers.TypeMergeHanlderBase<T>.CanBeMerged(T left, T right) -> bool
abstract HotChocolate.Stitching.Merge.Handlers.TypeMergeHanlderBase<T>.MergeTypes(HotChocolate.Stitching.Merge.ISchemaMergeContext! context, System.Collections.Generic.IReadOnlyList<T>! types, HotChocolate.NameString newTypeName) -> void
HotChocolate.Stitching.ComputedDirective
HotChocolate.Stitching.ComputedDirective.ComputedDirective() -> void
HotChocolate.Stitching.ComputedDirective.DependantOn.get -> HotChocolate.NameString[]!
HotChocolate.Stitching.ComputedDirective.DependantOn.set -> void
HotChocolate.Stitching.ComputedDirectiveType
HotChocolate.Stitching.ComputedDirectiveType.ComputedDirectiveType() -> void
HotChocolate.Stitching.DelegateDirective
HotChocolate.Stitching.DelegateDirective.DelegateDirective() -> void
HotChocolate.Stitching.DelegateDirective.Path.get -> string?
HotChocolate.Stitching.DelegateDirective.Path.set -> void
HotChocolate.Stitching.DelegateDirective.Schema.get -> HotChocolate.NameString
HotChocolate.Stitching.DelegateDirective.Schema.set -> void
HotChocolate.Stitching.DelegateDirectiveType
HotChocolate.Stitching.DelegateDirectiveType.DelegateDirectiveType() -> void
HotChocolate.Stitching.Delegation.DelegateToRemoteSchemaMiddleware
HotChocolate.Stitching.Delegation.DelegateToRemoteSchemaMiddleware.DelegateToRemoteSchemaMiddleware(HotChocolate.Resolvers.FieldDelegate! next) -> void
HotChocolate.Stitching.Delegation.DelegateToRemoteSchemaMiddleware.InvokeAsync(HotChocolate.Resolvers.IMiddlewareContext! context) -> System.Threading.Tasks.Task!
HotChocolate.Stitching.Delegation.DictionaryResultMiddleware
HotChocolate.Stitching.Delegation.DictionaryResultMiddleware.DictionaryResultMiddleware(HotChocolate.Resolvers.FieldDelegate! next) -> void
HotChocolate.Stitching.Delegation.DictionaryResultMiddleware.InvokeAsync(HotChocolate.Resolvers.IMiddlewareContext! context) -> System.Threading.Tasks.ValueTask
HotChocolate.Stitching.Delegation.ExtractedField
HotChocolate.Stitching.Delegation.ExtractedField.ExtractedField(System.Collections.Generic.IReadOnlyList<HotChocolate.Language.FieldNode!>! syntaxNodes, System.Collections.Generic.IReadOnlyList<HotChocolate.Language.VariableDefinitionNode!>! variables, System.Collections.Generic.IReadOnlyList<HotChocolate.Language.FragmentDefinitionNode!>! fragments) -> void
HotChocolate.Stitching.Delegation.ExtractedField.Fragments.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.FragmentDefinitionNode!>!
HotChocolate.Stitching.Delegation.ExtractedField.SyntaxNodes.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.FieldNode!>!
HotChocolate.Stitching.Delegation.ExtractedField.Variables.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.VariableDefinitionNode!>!
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.Clone() -> HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context!
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.Context(HotChocolate.NameString schema, HotChocolate.Types.INamedOutputType? typeContext, HotChocolate.Language.DocumentNode? document, HotChocolate.Language.OperationDefinitionNode? operation) -> void
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.Document.get -> HotChocolate.Language.DocumentNode?
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.FragmentPath.get -> System.Collections.Immutable.ImmutableHashSet<string!>!
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.FragmentPath.set -> void
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.Fragments.get -> System.Collections.Generic.IDictionary<string!, HotChocolate.Language.FragmentDefinitionNode!>!
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.InputField.get -> HotChocolate.Types.IInputField?
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.InputField.set -> void
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.InputType.get -> HotChocolate.Types.IInputType?
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.InputType.set -> void
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.Operation.get -> HotChocolate.Language.OperationDefinitionNode?
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.OutputField.get -> HotChocolate.Types.IOutputField?
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.OutputField.set -> void
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.Schema.get -> HotChocolate.NameString
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.TypeContext.get -> HotChocolate.Types.INamedOutputType?
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.TypeContext.set -> void
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context.Variables.get -> System.Collections.Generic.IDictionary<string!, HotChocolate.Language.VariableDefinitionNode!>!
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.ExtractField(HotChocolate.NameString sourceSchema, HotChocolate.Language.DocumentNode! document, HotChocolate.Language.OperationDefinitionNode! operation, HotChocolate.Resolvers.IFieldSelection! selection, HotChocolate.Types.INamedOutputType! declaringType) -> HotChocolate.Stitching.Delegation.ExtractedField!
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.ExtractFieldQuerySyntaxRewriter(HotChocolate.ISchema! schema, System.Collections.Generic.IEnumerable<HotChocolate.Stitching.Utilities.IQueryDelegationRewriter!>! rewriters) -> void
HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteValueNode(HotChocolate.NameString sourceSchema, HotChocolate.Types.IInputType! inputType, HotChocolate.Language.IValueNode! value) -> HotChocolate.Language.IValueNode!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.AddAdditionalField(HotChocolate.Language.FieldNode! field) -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.AddFragmentDefinitions(System.Collections.Generic.IEnumerable<HotChocolate.Language.FragmentDefinitionNode!>! fragments) -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.AddVariable(HotChocolate.Language.VariableDefinitionNode! variable) -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.AddVariable(HotChocolate.NameString name, HotChocolate.Language.ITypeNode! type, HotChocolate.Language.IValueNode? defaultValue) -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.AddVariable(HotChocolate.NameString name, HotChocolate.Language.ITypeNode! type) -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.AddVariables(System.Collections.Generic.IEnumerable<HotChocolate.Language.VariableDefinitionNode!>! variables) -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.Build(HotChocolate.NameString targetSchema, System.Collections.Generic.IReadOnlyDictionary<(HotChocolate.NameString Type, HotChocolate.NameString Schema), HotChocolate.NameString>! nameLookup) -> HotChocolate.Language.DocumentNode!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.RemoteQueryBuilder() -> void
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.SetOperation(HotChocolate.Language.NameNode? name, HotChocolate.Language.OperationType operation) -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.SetRequestField(HotChocolate.Language.FieldNode! field) -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
HotChocolate.Stitching.Delegation.RemoteQueryBuilder.SetSelectionPath(System.Collections.Immutable.IImmutableStack<HotChocolate.Stitching.SelectionPathComponent!>! selectionPath) -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
HotChocolate.Stitching.Delegation.ScopedVariables.ScopeNames
HotChocolate.Stitching.Delegation.SerializedData
HotChocolate.Stitching.Delegation.SerializedData.Data.get -> object?
HotChocolate.Stitching.Delegation.SerializedData.SerializedData(object? data) -> void
HotChocolate.Stitching.ErrorHelper
HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter
HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.AddExtensions(HotChocolate.Language.DocumentNode! schema, HotChocolate.Language.DocumentNode! extensions) -> HotChocolate.Language.DocumentNode!
HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.AddSchemaExtensionRewriter() -> void
HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.AddSchemaExtensionRewriter(System.Collections.Generic.IEnumerable<HotChocolate.Language.DirectiveDefinitionNode!>! globalDirectives) -> void
HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext
HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext.Directives.get -> System.Collections.Generic.IDictionary<string!, HotChocolate.Language.DirectiveDefinitionNode!>!
HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext.Extensions.get -> System.Collections.Generic.IDictionary<string!, HotChocolate.Language.ITypeExtensionNode!>!
HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext.MergeContext(HotChocolate.Language.DocumentNode! schema, HotChocolate.Language.DocumentNode! extensions) -> void
HotChocolate.Stitching.Merge.DirectiveTypeInfo
HotChocolate.Stitching.Merge.DirectiveTypeInfo.Definition.get -> HotChocolate.Language.DirectiveDefinitionNode!
HotChocolate.Stitching.Merge.DirectiveTypeInfo.DirectiveTypeInfo(HotChocolate.Language.DirectiveDefinitionNode! definition, HotChocolate.Stitching.Merge.ISchemaInfo! schema) -> void
HotChocolate.Stitching.Merge.DirectiveTypeInfo.Schema.get -> HotChocolate.Stitching.Merge.ISchemaInfo!
HotChocolate.Stitching.Merge.Handlers.TypeMergeHanlderBase<T>
HotChocolate.Stitching.Merge.Handlers.TypeMergeHanlderBase<T>.Merge(HotChocolate.Stitching.Merge.ISchemaMergeContext! context, System.Collections.Generic.IReadOnlyList<HotChocolate.Stitching.Merge.ITypeInfo!>! types) -> void
HotChocolate.Stitching.Merge.Handlers.TypeMergeHanlderBase<T>.TypeMergeHanlderBase(HotChocolate.Stitching.Merge.MergeTypeRuleDelegate! next) -> void
HotChocolate.Stitching.Merge.IDirectiveMergeHandler
HotChocolate.Stitching.Merge.IDirectiveMergeHandler.Merge(HotChocolate.Stitching.Merge.ISchemaMergeContext! context, System.Collections.Generic.IReadOnlyList<HotChocolate.Stitching.Merge.IDirectiveTypeInfo!>! directives) -> void
HotChocolate.Stitching.Merge.IDirectiveTypeInfo
HotChocolate.Stitching.Merge.IDirectiveTypeInfo.Definition.get -> HotChocolate.Language.DirectiveDefinitionNode!
HotChocolate.Stitching.Merge.IDirectiveTypeInfo.Schema.get -> HotChocolate.Stitching.Merge.ISchemaInfo!
HotChocolate.Stitching.Merge.ISchemaInfo
HotChocolate.Stitching.Merge.ISchemaInfo.Directives.get -> System.Collections.Generic.IReadOnlyDictionary<string!, HotChocolate.Language.DirectiveDefinitionNode!>!
HotChocolate.Stitching.Merge.ISchemaInfo.Document.get -> HotChocolate.Language.DocumentNode!
HotChocolate.Stitching.Merge.ISchemaInfo.IsRootType(HotChocolate.Language.ITypeDefinitionNode! typeDefinition) -> bool
HotChocolate.Stitching.Merge.ISchemaInfo.MutationType.get -> HotChocolate.Language.ObjectTypeDefinitionNode?
HotChocolate.Stitching.Merge.ISchemaInfo.Name.get -> HotChocolate.NameString
HotChocolate.Stitching.Merge.ISchemaInfo.QueryType.get -> HotChocolate.Language.ObjectTypeDefinitionNode!
HotChocolate.Stitching.Merge.ISchemaInfo.SubscriptionType.get -> HotChocolate.Language.ObjectTypeDefinitionNode?
HotChocolate.Stitching.Merge.ISchemaInfo.TryGetOperationType(HotChocolate.Language.ObjectTypeDefinitionNode! rootType, out HotChocolate.Language.OperationType operationType) -> bool
HotChocolate.Stitching.Merge.ISchemaInfo.Types.get -> System.Collections.Generic.IReadOnlyDictionary<string!, HotChocolate.Language.ITypeDefinitionNode!>!
HotChocolate.Stitching.Merge.ISchemaMergeContext
HotChocolate.Stitching.Merge.ISchemaMergeContext.AddDirective(HotChocolate.Language.DirectiveDefinitionNode! directive) -> void
HotChocolate.Stitching.Merge.ISchemaMergeContext.AddType(HotChocolate.Language.ITypeDefinitionNode! type) -> void
HotChocolate.Stitching.Merge.ISchemaMergeContext.ContainsDirective(HotChocolate.NameString directiveName) -> bool
HotChocolate.Stitching.Merge.ISchemaMergeContext.ContainsType(HotChocolate.NameString typeName) -> bool
HotChocolate.Stitching.Merge.ISchemaMerger
HotChocolate.Stitching.Merge.ISchemaMerger.AddDirectiveMergeRule(HotChocolate.Stitching.Merge.MergeDirectiveRuleFactory! factory) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.ISchemaMerger.AddDocumentRewriter(HotChocolate.Stitching.Merge.Rewriters.IDocumentRewriter! rewriter) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.ISchemaMerger.AddMergeRule(HotChocolate.Stitching.Merge.MergeTypeRuleFactory! factory) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.ISchemaMerger.AddSchema(HotChocolate.NameString name, HotChocolate.Language.DocumentNode! schema) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.ISchemaMerger.AddTypeMergeRule(HotChocolate.Stitching.Merge.MergeTypeRuleFactory! factory) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.ISchemaMerger.AddTypeRewriter(HotChocolate.Stitching.Merge.Rewriters.ITypeRewriter! rewriter) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.ISchemaMerger.Merge() -> HotChocolate.Language.DocumentNode!
HotChocolate.Stitching.Merge.ITypeInfo
HotChocolate.Stitching.Merge.ITypeInfo.Definition.get -> HotChocolate.Language.ITypeDefinitionNode!
HotChocolate.Stitching.Merge.ITypeInfo.IsRootType.get -> bool
HotChocolate.Stitching.Merge.ITypeInfo.Schema.get -> HotChocolate.Stitching.Merge.ISchemaInfo!
HotChocolate.Stitching.Merge.ITypeInfo<T>
HotChocolate.Stitching.Merge.ITypeInfo<T>.Definition.get -> T
HotChocolate.Stitching.Merge.ITypeMergeHandler
HotChocolate.Stitching.Merge.ITypeMergeHandler.Merge(HotChocolate.Stitching.Merge.ISchemaMergeContext! context, System.Collections.Generic.IReadOnlyList<HotChocolate.Stitching.Merge.ITypeInfo!>! types) -> void
HotChocolate.Stitching.Merge.MergeDirectiveRuleDelegate
HotChocolate.Stitching.Merge.MergeDirectiveRuleFactory
HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions
HotChocolate.Stitching.Merge.MergeTypeRuleDelegate
HotChocolate.Stitching.Merge.MergeTypeRuleFactory
HotChocolate.Stitching.Merge.Rewriters.IDocumentRewriter
HotChocolate.Stitching.Merge.Rewriters.IDocumentRewriter.Rewrite(HotChocolate.Stitching.Merge.ISchemaInfo! schema, HotChocolate.Language.DocumentNode! document) -> HotChocolate.Language.DocumentNode!
HotChocolate.Stitching.Merge.Rewriters.ITypeRewriter
HotChocolate.Stitching.Merge.Rewriters.ITypeRewriter.Rewrite(HotChocolate.Stitching.Merge.ISchemaInfo! schema, HotChocolate.Language.ITypeDefinitionNode! typeDefinition) -> HotChocolate.Language.ITypeDefinitionNode!
HotChocolate.Stitching.Merge.Rewriters.RewriteDocumentDelegate
HotChocolate.Stitching.Merge.Rewriters.RewriteTypeDefinitionDelegate
HotChocolate.Stitching.Merge.SchemaMergeContext
HotChocolate.Stitching.Merge.SchemaMergeContext.AddDirective(HotChocolate.Language.DirectiveDefinitionNode! directive) -> void
HotChocolate.Stitching.Merge.SchemaMergeContext.AddType(HotChocolate.Language.ITypeDefinitionNode! type) -> void
HotChocolate.Stitching.Merge.SchemaMergeContext.ContainsDirective(HotChocolate.NameString directiveName) -> bool
HotChocolate.Stitching.Merge.SchemaMergeContext.ContainsType(HotChocolate.NameString typeName) -> bool
HotChocolate.Stitching.Merge.SchemaMergeContext.CreateSchema() -> HotChocolate.Language.DocumentNode!
HotChocolate.Stitching.Merge.SchemaMergeContext.SchemaMergeContext() -> void
HotChocolate.Stitching.Merge.SchemaMergeException
HotChocolate.Stitching.Merge.SchemaMergeException.SchemaMergeException(HotChocolate.Language.ITypeDefinitionNode! typeDefinition, HotChocolate.Language.ITypeExtensionNode! typeExtension, string! message) -> void
HotChocolate.Stitching.Merge.SchemaMergeException.SchemaMergeException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
HotChocolate.Stitching.Merge.SchemaMergeException.TypeDefinition.get -> HotChocolate.Language.ITypeDefinitionNode!
HotChocolate.Stitching.Merge.SchemaMergeException.TypeExtension.get -> HotChocolate.Language.ITypeExtensionNode!
HotChocolate.Stitching.Merge.SchemaMerger
HotChocolate.Stitching.Merge.SchemaMerger.AddDirectiveMergeRule(HotChocolate.Stitching.Merge.MergeDirectiveRuleFactory! factory) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.SchemaMerger.AddDocumentRewriter(HotChocolate.Stitching.Merge.Rewriters.IDocumentRewriter! rewriter) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.SchemaMerger.AddMergeRule(HotChocolate.Stitching.Merge.MergeTypeRuleFactory! factory) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.SchemaMerger.AddSchema(HotChocolate.NameString name, HotChocolate.Language.DocumentNode! schema) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.SchemaMerger.AddTypeMergeRule(HotChocolate.Stitching.Merge.MergeTypeRuleFactory! factory) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.SchemaMerger.AddTypeRewriter(HotChocolate.Stitching.Merge.Rewriters.ITypeRewriter! rewriter) -> HotChocolate.Stitching.Merge.ISchemaMerger!
HotChocolate.Stitching.Merge.SchemaMerger.Merge() -> HotChocolate.Language.DocumentNode!
HotChocolate.Stitching.Merge.SchemaMerger.SchemaMerger() -> void
HotChocolate.Stitching.Merge.SchemaMergerExtensions
HotChocolate.Stitching.Merge.TypeInfoExtensions
HotChocolate.Stitching.Pipeline.HttpStitchingRequestInterceptor
HotChocolate.Stitching.Pipeline.HttpStitchingRequestInterceptor.HttpStitchingRequestInterceptor() -> void
HotChocolate.Stitching.Pipeline.HttpStitchingRequestInterceptor.OnReceivedResultAsync(HotChocolate.NameString targetSchema, HotChocolate.Execution.IQueryRequest! request, HotChocolate.Execution.IQueryResult! result, System.Net.Http.HttpResponseMessage! responseMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.IQueryResult!>
HotChocolate.Stitching.Pipeline.IHttpStitchingRequestInterceptor
HotChocolate.Stitching.Pipeline.IHttpStitchingRequestInterceptor.OnCreateRequestAsync(HotChocolate.NameString targetSchema, HotChocolate.Execution.IQueryRequest! request, System.Net.Http.HttpRequestMessage! requestMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
HotChocolate.Stitching.Pipeline.IHttpStitchingRequestInterceptor.OnReceivedResultAsync(HotChocolate.NameString targetSchema, HotChocolate.Execution.IQueryRequest! request, HotChocolate.Execution.IQueryResult! result, System.Net.Http.HttpResponseMessage! responseMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<HotChocolate.Execution.IQueryResult!>
HotChocolate.Stitching.Requests.IRemoteRequestExecutor
HotChocolate.Stitching.Requests.IRemoteRequestExecutor.ExecuteAsync(HotChocolate.Execution.IQueryRequest! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<HotChocolate.Execution.IExecutionResult!>!
HotChocolate.Stitching.Requests.IRemoteRequestExecutor.Schema.get -> HotChocolate.ISchema!
HotChocolate.Stitching.Requests.IRemoteRequestExecutor.Services.get -> System.IServiceProvider!
HotChocolate.Stitching.Requests.IStitchingContext
HotChocolate.Stitching.Requests.IStitchingContext.GetRemoteRequestExecutor(HotChocolate.NameString schemaName) -> HotChocolate.Stitching.Requests.IRemoteRequestExecutor!
HotChocolate.Stitching.Requests.IStitchingContext.GetRemoteSchema(HotChocolate.NameString schemaName) -> HotChocolate.ISchema!
HotChocolate.Stitching.Requests.StitchingContext
HotChocolate.Stitching.Requests.StitchingContext.GetRemoteRequestExecutor(HotChocolate.NameString schemaName) -> HotChocolate.Stitching.Requests.IRemoteRequestExecutor!
HotChocolate.Stitching.Requests.StitchingContext.GetRemoteSchema(HotChocolate.NameString schemaName) -> HotChocolate.ISchema!
HotChocolate.Stitching.Requests.StitchingContext.StitchingContext(GreenDonut.IBatchScheduler! batchScheduler, HotChocolate.Execution.IRequestContextAccessor! requestContextAccessor) -> void
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor.AddTypeExtensionsFromFile(string! fileName) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor.AddTypeExtensionsFromResource(System.Reflection.Assembly! assembly, string! key) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor.AddTypeExtensionsFromString(string! schemaSdl) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor.IgnoreRootTypes() -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor.IgnoreType(HotChocolate.NameString typeName) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor.RenameField(HotChocolate.NameString typeName, HotChocolate.NameString fieldName, HotChocolate.NameString newFieldName) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor.RenameType(HotChocolate.NameString typeName, HotChocolate.NameString newTypeName) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor.SetName(HotChocolate.NameString name) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor.SetSchemaDefinitionPublisher(System.Func<System.IServiceProvider!, HotChocolate.Stitching.SchemaDefinitions.ISchemaDefinitionPublisher!>! publisherFactory) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.ISchemaDefinitionPublisher
HotChocolate.Stitching.SchemaDefinitions.ISchemaDefinitionPublisher.PublishAsync(HotChocolate.Stitching.RemoteSchemaDefinition! schemaDefinition, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.AddTypeExtensionsFromFile(string! fileName) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.AddTypeExtensionsFromResource(System.Reflection.Assembly! assembly, string! key) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.AddTypeExtensionsFromString(string! schemaSdl) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.Build(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.ISchema! schema) -> HotChocolate.Stitching.RemoteSchemaDefinition!
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.HasPublisher.get -> bool
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.IgnoreRootTypes() -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.IgnoreType(HotChocolate.NameString typeName) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.PublishAsync(System.IServiceProvider! applicationServices, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.PublishSchemaDefinitionDescriptor(HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> void
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.RenameField(HotChocolate.NameString typeName, HotChocolate.NameString fieldName, HotChocolate.NameString newFieldName) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.RenameType(HotChocolate.NameString typeName, HotChocolate.NameString newTypeName) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.SetName(HotChocolate.NameString name) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.PublishSchemaDefinitionDescriptor.SetSchemaDefinitionPublisher(System.Func<System.IServiceProvider!, HotChocolate.Stitching.SchemaDefinitions.ISchemaDefinitionPublisher!>! publisherFactory) -> HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!
HotChocolate.Stitching.SchemaDefinitions.SchemaDefinitionType
HotChocolate.Stitching.SchemaDefinitions.SchemaDefinitionType.Names
HotChocolate.Stitching.SchemaDefinitions.SchemaDefinitionType.SchemaDefinitionType() -> void
HotChocolate.Stitching.ScopedVariableNode
HotChocolate.Stitching.ScopedVariableNode.Equals(HotChocolate.Language.IValueNode? other) -> bool
HotChocolate.Stitching.ScopedVariableNode.Equals(HotChocolate.Stitching.ScopedVariableNode? other) -> bool
HotChocolate.Stitching.ScopedVariableNode.GetNodes() -> System.Collections.Generic.IEnumerable<HotChocolate.Language.ISyntaxNode!>!
HotChocolate.Stitching.ScopedVariableNode.Kind.get -> HotChocolate.Language.SyntaxKind
HotChocolate.Stitching.ScopedVariableNode.Location.get -> HotChocolate.Language.Location?
HotChocolate.Stitching.ScopedVariableNode.Name.get -> HotChocolate.Language.NameNode!
HotChocolate.Stitching.ScopedVariableNode.Scope.get -> HotChocolate.Language.NameNode!
HotChocolate.Stitching.ScopedVariableNode.ScopedVariableNode(HotChocolate.Language.Location? location, HotChocolate.Language.NameNode! scope, HotChocolate.Language.NameNode! name) -> void
HotChocolate.Stitching.ScopedVariableNode.ScopedVariableNode(HotChocolate.Language.NameNode! scope, HotChocolate.Language.NameNode! name) -> void
HotChocolate.Stitching.ScopedVariableNode.ScopedVariableNode(string! scope, string! name) -> void
HotChocolate.Stitching.ScopedVariableNode.ToString(bool indented) -> string!
HotChocolate.Stitching.ScopedVariableNode.ToVariableName() -> string!
HotChocolate.Stitching.ScopedVariableNode.ToVariableNode() -> HotChocolate.Language.VariableNode!
HotChocolate.Stitching.ScopedVariableNode.Value.get -> string!
HotChocolate.Stitching.SelectionPathComponent
HotChocolate.Stitching.SelectionPathComponent.Arguments.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.ArgumentNode!>!
HotChocolate.Stitching.SelectionPathComponent.Name.get -> HotChocolate.Language.NameNode!
HotChocolate.Stitching.SelectionPathComponent.SelectionPathComponent(HotChocolate.Language.NameNode! name, System.Collections.Generic.IReadOnlyList<HotChocolate.Language.ArgumentNode!>! arguments) -> void
HotChocolate.Stitching.SourceDirective
HotChocolate.Stitching.SourceDirective.Name.get -> HotChocolate.NameString
HotChocolate.Stitching.SourceDirective.Name.set -> void
HotChocolate.Stitching.SourceDirective.Schema.get -> HotChocolate.NameString
HotChocolate.Stitching.SourceDirective.Schema.set -> void
HotChocolate.Stitching.SourceDirective.SourceDirective() -> void
HotChocolate.Stitching.SourceDirectiveType
HotChocolate.Stitching.SourceDirectiveType.SourceDirectiveType() -> void
HotChocolate.Stitching.Utilities.CopySchemaDefinitionTypeInterceptor
HotChocolate.Stitching.Utilities.CopySchemaDefinitionTypeInterceptor.CopySchemaDefinitionTypeInterceptor() -> void
HotChocolate.Stitching.Utilities.FieldDependency
HotChocolate.Stitching.Utilities.FieldDependency.Equals(HotChocolate.Stitching.Utilities.FieldDependency other) -> bool
HotChocolate.Stitching.Utilities.FieldDependency.FieldDependency() -> void
HotChocolate.Stitching.Utilities.FieldDependency.FieldDependency(HotChocolate.NameString typeName, HotChocolate.NameString fieldName) -> void
HotChocolate.Stitching.Utilities.FieldDependency.FieldName.get -> HotChocolate.NameString
HotChocolate.Stitching.Utilities.FieldDependency.TypeName.get -> HotChocolate.NameString
HotChocolate.Stitching.Utilities.FieldDependencyResolver
HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context
HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context.AddFragment(string! fragmentName) -> HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context!
HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context.Dependencies.get -> System.Collections.Generic.ISet<HotChocolate.Stitching.Utilities.FieldDependency>!
HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context.FragmentPath.get -> System.Collections.Immutable.ImmutableHashSet<string!>!
HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context.Fragments.get -> System.Collections.Generic.IDictionary<string!, HotChocolate.Language.FragmentDefinitionNode!>!
HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context.SetTypeContext(HotChocolate.Types.INamedOutputType! type) -> HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context!
HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context.TypeContext.get -> HotChocolate.Types.INamedOutputType!
HotChocolate.Stitching.Utilities.FieldDependencyResolver.FieldDependencyResolver(HotChocolate.ISchema! schema) -> void
HotChocolate.Stitching.Utilities.FieldDependencyResolver.GetFieldDependencies(HotChocolate.Language.DocumentNode! document, HotChocolate.Language.FieldNode! field, HotChocolate.Types.INamedOutputType! declaringType) -> System.Collections.Generic.ISet<HotChocolate.Stitching.Utilities.FieldDependency>!
HotChocolate.Stitching.Utilities.FieldDependencyResolver.GetFieldDependencies(HotChocolate.Language.DocumentNode! document, HotChocolate.Language.SelectionSetNode! selectionSet, HotChocolate.Types.INamedOutputType! declaringType) -> System.Collections.Generic.ISet<HotChocolate.Stitching.Utilities.FieldDependency>!
HotChocolate.Stitching.Utilities.IntrospectionHelper
HotChocolate.Stitching.Utilities.IntrospectionHelper.GetSchemaDefinitionAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<HotChocolate.Stitching.RemoteSchemaDefinition!>!
HotChocolate.Stitching.Utilities.IntrospectionHelper.IntrospectionHelper(System.Net.Http.HttpClient! httpClient, HotChocolate.NameString configuration) -> void
HotChocolate.Stitching.Utilities.IQueryDelegationRewriter
HotChocolate.Stitching.Utilities.IQueryDelegationRewriter.OnRewriteField(HotChocolate.NameString targetSchemaName, HotChocolate.Types.IOutputType! outputType, HotChocolate.Types.IOutputField! outputField, HotChocolate.Language.FieldNode! field) -> HotChocolate.Language.FieldNode!
HotChocolate.Stitching.Utilities.IQueryDelegationRewriter.OnRewriteSelectionSet(HotChocolate.NameString targetSchemaName, HotChocolate.Types.IOutputType! outputType, HotChocolate.Types.IOutputField! outputField, HotChocolate.Language.SelectionSetNode! selectionSet) -> HotChocolate.Language.SelectionSetNode!
HotChocolate.Stitching.Utilities.QueryDelegationRewriterBase
HotChocolate.Stitching.Utilities.QueryDelegationRewriterBase.QueryDelegationRewriterBase() -> void
HotChocolate.Stitching.Utilities.SchemaExtensionsRewriter
HotChocolate.Stitching.Utilities.SchemaExtensionsRewriter.SchemaActions.get -> System.Collections.Generic.IReadOnlyList<HotChocolate.Language.DirectiveNode!>!
HotChocolate.Stitching.Utilities.SchemaExtensionsRewriter.SchemaExtensionsRewriter() -> void
Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions
override HotChocolate.Stitching.ComputedDirectiveType.Configure(HotChocolate.Types.IDirectiveTypeDescriptor<HotChocolate.Stitching.ComputedDirective!>! descriptor) -> void
override HotChocolate.Stitching.DelegateDirectiveType.Configure(HotChocolate.Types.IDirectiveTypeDescriptor<HotChocolate.Stitching.DelegateDirective!>! descriptor) -> void
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteArgument(HotChocolate.Language.ArgumentNode! node, HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context! context) -> HotChocolate.Language.ArgumentNode!
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteDirective(HotChocolate.Language.DirectiveNode! node, HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context! context) -> HotChocolate.Language.DirectiveNode!
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteField(HotChocolate.Language.FieldNode! node, HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context! context) -> HotChocolate.Language.FieldNode!
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteFragmentDefinition(HotChocolate.Language.FragmentDefinitionNode! node, HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context! context) -> HotChocolate.Language.FragmentDefinitionNode!
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteFragmentSpread(HotChocolate.Language.FragmentSpreadNode! node, HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context! context) -> HotChocolate.Language.FragmentSpreadNode!
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteInlineFragment(HotChocolate.Language.InlineFragmentNode! node, HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context! context) -> HotChocolate.Language.InlineFragmentNode!
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteObjectField(HotChocolate.Language.ObjectFieldNode! node, HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context! context) -> HotChocolate.Language.ObjectFieldNode!
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteSelectionSet(HotChocolate.Language.SelectionSetNode! node, HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context! context) -> HotChocolate.Language.SelectionSetNode!
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.RewriteVariable(HotChocolate.Language.VariableNode! node, HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.Context! context) -> HotChocolate.Language.VariableNode!
override HotChocolate.Stitching.Delegation.ExtractFieldQuerySyntaxRewriter.VisitFragmentDefinitions.get -> bool
override HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.RewriteEnumTypeDefinition(HotChocolate.Language.EnumTypeDefinitionNode! node, HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext! context) -> HotChocolate.Language.EnumTypeDefinitionNode!
override HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.RewriteInputObjectTypeDefinition(HotChocolate.Language.InputObjectTypeDefinitionNode! node, HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext! context) -> HotChocolate.Language.InputObjectTypeDefinitionNode!
override HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.RewriteInterfaceTypeDefinition(HotChocolate.Language.InterfaceTypeDefinitionNode! node, HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext! context) -> HotChocolate.Language.InterfaceTypeDefinitionNode!
override HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.RewriteObjectTypeDefinition(HotChocolate.Language.ObjectTypeDefinitionNode! node, HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext! context) -> HotChocolate.Language.ObjectTypeDefinitionNode!
override HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.RewriteScalarTypeDefinition(HotChocolate.Language.ScalarTypeDefinitionNode! node, HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext! context) -> HotChocolate.Language.ScalarTypeDefinitionNode!
override HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.RewriteUnionTypeDefinition(HotChocolate.Language.UnionTypeDefinitionNode! node, HotChocolate.Stitching.Merge.AddSchemaExtensionRewriter.MergeContext! context) -> HotChocolate.Language.UnionTypeDefinitionNode!
override HotChocolate.Stitching.SchemaDefinitions.SchemaDefinitionType.Configure(HotChocolate.Types.IObjectTypeDescriptor<HotChocolate.Stitching.RemoteSchemaDefinition!>! descriptor) -> void
override HotChocolate.Stitching.ScopedVariableNode.Equals(object? obj) -> bool
override HotChocolate.Stitching.ScopedVariableNode.GetHashCode() -> int
override HotChocolate.Stitching.ScopedVariableNode.ToString() -> string!
override HotChocolate.Stitching.SelectionPathComponent.ToString() -> string!
override HotChocolate.Stitching.SourceDirectiveType.Configure(HotChocolate.Types.IDirectiveTypeDescriptor<HotChocolate.Stitching.SourceDirective!>! descriptor) -> void
override HotChocolate.Stitching.Utilities.CopySchemaDefinitionTypeInterceptor.OnAfterCompleteType(HotChocolate.Configuration.ITypeCompletionContext! completionContext, HotChocolate.Types.Descriptors.Definitions.DefinitionBase? definition, System.Collections.Generic.IDictionary<string!, object?>! contextData) -> void
override HotChocolate.Stitching.Utilities.FieldDependency.Equals(object? obj) -> bool
override HotChocolate.Stitching.Utilities.FieldDependency.GetHashCode() -> int
override HotChocolate.Stitching.Utilities.FieldDependencyResolver.VisitField(HotChocolate.Language.FieldNode! node, HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context! context) -> void
override HotChocolate.Stitching.Utilities.FieldDependencyResolver.VisitFragmentDefinition(HotChocolate.Language.FragmentDefinitionNode! node, HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context! context) -> void
override HotChocolate.Stitching.Utilities.FieldDependencyResolver.VisitFragmentDefinitions.get -> bool
override HotChocolate.Stitching.Utilities.FieldDependencyResolver.VisitFragmentSpread(HotChocolate.Language.FragmentSpreadNode! node, HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context! context) -> void
override HotChocolate.Stitching.Utilities.FieldDependencyResolver.VisitInlineFragment(HotChocolate.Language.InlineFragmentNode! node, HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context! context) -> void
override HotChocolate.Stitching.Utilities.SchemaExtensionsRewriter.RewriteDirective(HotChocolate.Language.DirectiveNode! node, string! context) -> HotChocolate.Language.DirectiveNode!
override HotChocolate.Stitching.Utilities.SchemaExtensionsRewriter.RewriteSchemaExtension(HotChocolate.Language.SchemaExtensionNode! node, string! context) -> HotChocolate.Language.SchemaExtensionNode!
static HotChocolate.Stitching.Delegation.RemoteQueryBuilder.New() -> HotChocolate.Stitching.Delegation.RemoteQueryBuilder!
static HotChocolate.Stitching.Delegation.ScopedVariables.ScopeNames.Arguments.get -> HotChocolate.NameString
static HotChocolate.Stitching.Delegation.ScopedVariables.ScopeNames.ContextData.get -> HotChocolate.NameString
static HotChocolate.Stitching.Delegation.ScopedVariables.ScopeNames.Fields.get -> HotChocolate.NameString
static HotChocolate.Stitching.Delegation.ScopedVariables.ScopeNames.ScopedContextData.get -> HotChocolate.NameString
static HotChocolate.Stitching.ErrorHelper.HttpRequestClient_HttpError(System.Net.HttpStatusCode statusCode, string? responseBody) -> HotChocolate.IError!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.AddDelegationPath(this HotChocolate.Language.FieldDefinitionNode! field, HotChocolate.NameString schemaName, bool overwrite) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.AddDelegationPath(this HotChocolate.Language.FieldDefinitionNode! field, HotChocolate.NameString schemaName, HotChocolate.Stitching.SelectionPathComponent! selectionPath, bool overwrite) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.AddDelegationPath(this HotChocolate.Language.FieldDefinitionNode! field, HotChocolate.NameString schemaName, HotChocolate.Stitching.SelectionPathComponent! selectionPath) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.AddDelegationPath(this HotChocolate.Language.FieldDefinitionNode! field, HotChocolate.NameString schemaName, string! delegationPath, bool overwrite) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.AddDelegationPath(this HotChocolate.Language.FieldDefinitionNode! field, HotChocolate.NameString schemaName, string! delegationPath) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.AddDelegationPath(this HotChocolate.Language.FieldDefinitionNode! field, HotChocolate.NameString schemaName, System.Collections.Generic.IReadOnlyCollection<HotChocolate.Stitching.SelectionPathComponent!>! selectionPath, bool overwrite) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.AddDelegationPath(this HotChocolate.Language.FieldDefinitionNode! field, HotChocolate.NameString schemaName, System.Collections.Generic.IReadOnlyCollection<HotChocolate.Stitching.SelectionPathComponent!>! selectionPath) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.AddDelegationPath(this HotChocolate.Language.FieldDefinitionNode! field, HotChocolate.NameString schemaName) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.GetOriginalName(this HotChocolate.Language.INamedSyntaxNode! typeDefinition, HotChocolate.NameString schemaName) -> HotChocolate.NameString
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.IsFromSchema(this HotChocolate.Language.INamedSyntaxNode! typeDefinition, HotChocolate.NameString schemaName) -> bool
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.DirectiveDefinitionNode! directiveDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> HotChocolate.Language.DirectiveDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.DirectiveDefinitionNode! directiveDefinition, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> HotChocolate.Language.DirectiveDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.EnumTypeDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> HotChocolate.Language.EnumTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.EnumTypeDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> HotChocolate.Language.EnumTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.FieldDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.FieldDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> HotChocolate.Language.FieldDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.InputObjectTypeDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> HotChocolate.Language.InputObjectTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.InputObjectTypeDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> HotChocolate.Language.InputObjectTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.InputValueDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> HotChocolate.Language.InputValueDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.InputValueDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> HotChocolate.Language.InputValueDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.InterfaceTypeDefinitionNode! interfaceTypeDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> HotChocolate.Language.InterfaceTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.InterfaceTypeDefinitionNode! interfaceTypeDefinition, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> HotChocolate.Language.InterfaceTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.ObjectTypeDefinitionNode! objectTypeDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> HotChocolate.Language.ObjectTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.ObjectTypeDefinitionNode! objectTypeDefinition, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> HotChocolate.Language.ObjectTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.ScalarTypeDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> HotChocolate.Language.ScalarTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.ScalarTypeDefinitionNode! enumTypeDefinition, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> HotChocolate.Language.ScalarTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.UnionTypeDefinitionNode! unionTypeDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> HotChocolate.Language.UnionTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename(this HotChocolate.Language.UnionTypeDefinitionNode! unionTypeDefinition, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> HotChocolate.Language.UnionTypeDefinitionNode!
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename<T>(this T enumTypeDefinition, HotChocolate.NameString newName, params HotChocolate.NameString[]! schemaNames) -> T
static HotChocolate.Stitching.Merge.MergeSyntaxNodeExtensions.Rename<T>(this T typeDefinitionNode, HotChocolate.NameString newName, System.Collections.Generic.IEnumerable<HotChocolate.NameString>! schemaNames) -> T
static HotChocolate.Stitching.Merge.SchemaMerger.New() -> HotChocolate.Stitching.Merge.SchemaMerger!
static HotChocolate.Stitching.Merge.SchemaMergerExtensions.AddDirectiveMergeHandler<T>(this HotChocolate.Stitching.Merge.ISchemaMerger! merger) -> HotChocolate.Stitching.Merge.ISchemaMerger!
static HotChocolate.Stitching.Merge.SchemaMergerExtensions.AddMergeHandler<T>(this HotChocolate.Stitching.Merge.ISchemaMerger! merger) -> HotChocolate.Stitching.Merge.ISchemaMerger!
static HotChocolate.Stitching.Merge.SchemaMergerExtensions.AddTypeMergeHandler<T>(this HotChocolate.Stitching.Merge.ISchemaMerger! merger) -> HotChocolate.Stitching.Merge.ISchemaMerger!
static HotChocolate.Stitching.Merge.SchemaMergerExtensions.IgnoreField(this HotChocolate.Stitching.Merge.ISchemaMerger! schemaMerger, HotChocolate.Resolvers.FieldReference! field, HotChocolate.NameString? schemaName = null) -> HotChocolate.Stitching.Merge.ISchemaMerger!
static HotChocolate.Stitching.Merge.SchemaMergerExtensions.IgnoreRootTypes(this HotChocolate.Stitching.Merge.ISchemaMerger! schemaMerger, HotChocolate.NameString? schemaName = null) -> HotChocolate.Stitching.Merge.ISchemaMerger!
static HotChocolate.Stitching.Merge.SchemaMergerExtensions.IgnoreType(this HotChocolate.Stitching.Merge.ISchemaMerger! schemaMerger, HotChocolate.NameString typeName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Stitching.Merge.ISchemaMerger!
static HotChocolate.Stitching.Merge.SchemaMergerExtensions.RenameField(this HotChocolate.Stitching.Merge.ISchemaMerger! schemaMerger, HotChocolate.Resolvers.FieldReference! field, HotChocolate.NameString newFieldName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Stitching.Merge.ISchemaMerger!
static HotChocolate.Stitching.Merge.SchemaMergerExtensions.RenameType(this HotChocolate.Stitching.Merge.ISchemaMerger! schemaMerger, HotChocolate.NameString originalTypeName, HotChocolate.NameString newTypeName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Stitching.Merge.ISchemaMerger!
static HotChocolate.Stitching.Merge.TypeInfoExtensions.IsMutationType(this HotChocolate.Stitching.Merge.ITypeInfo! typeInfo) -> bool
static HotChocolate.Stitching.Merge.TypeInfoExtensions.IsQueryType(this HotChocolate.Stitching.Merge.ITypeInfo! typeInfo) -> bool
static HotChocolate.Stitching.Merge.TypeInfoExtensions.IsSubscriptionType(this HotChocolate.Stitching.Merge.ITypeInfo! typeInfo) -> bool
static HotChocolate.Stitching.SchemaDefinitions.SchemaDefinitionType.Names.Document.get -> HotChocolate.NameString
static HotChocolate.Stitching.SchemaDefinitions.SchemaDefinitionType.Names.ExtensionDocuments.get -> HotChocolate.NameString
static HotChocolate.Stitching.SchemaDefinitions.SchemaDefinitionType.Names.Name.get -> HotChocolate.NameString
static HotChocolate.Stitching.SchemaDefinitions.SchemaDefinitionType.Names.SchemaDefinition.get -> HotChocolate.NameString
static HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context.New(HotChocolate.Types.INamedOutputType! typeContext, System.Collections.Generic.IDictionary<string!, HotChocolate.Language.FragmentDefinitionNode!>! fragments) -> HotChocolate.Stitching.Utilities.FieldDependencyResolver.Context!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddDirectiveMergeHandler<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddDirectiveMergeRule(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Stitching.Merge.MergeDirectiveRuleFactory! mergeRuleFactory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddDocumentRewriter(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Stitching.Merge.Rewriters.IDocumentRewriter! rewriter) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddDocumentRewriter(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Stitching.Merge.Rewriters.RewriteDocumentDelegate! rewrite) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddLocalSchema(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString schemaName, bool ignoreRootTypes = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddMergedDocumentRewriter(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Func<HotChocolate.Language.DocumentNode!, HotChocolate.Language.DocumentNode!>! rewrite) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddMergedDocVisitor(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Language.DocumentNode!>! visit) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddRemoteSchema(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString schemaName, bool ignoreRootTypes = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddRemoteSchema(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString schemaName, System.Func<System.IServiceProvider!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<HotChocolate.Stitching.RemoteSchemaDefinition!>>! loadSchema, bool ignoreRootTypes = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddRemoteSchemaFromFile(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString schemaName, string! fileName, bool ignoreRootTypes = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddRemoteSchemaFromString(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString schemaName, string! schemaSdl, bool ignoreRootTypes = false) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddTypeExtensionsFromFile(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string! fileName) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddTypeExtensionsFromResource(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Reflection.Assembly! assembly, string! key) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddTypeExtensionsFromString(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, string! schemaSdl) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddTypeMergeHandler<T>(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddTypeMergeRule(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Stitching.Merge.MergeTypeRuleFactory! mergeRuleFactory) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddTypeRewriter(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Stitching.Merge.Rewriters.ITypeRewriter! rewriter) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.AddTypeRewriter(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Stitching.Merge.Rewriters.RewriteTypeDefinitionDelegate! rewrite) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.IgnoreField(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.IgnoreField(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Resolvers.FieldReference! field, HotChocolate.NameString? schemaName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.IgnoreRootTypes(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString? schemaName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.IgnoreType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.PublishSchemaDefinition(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, System.Action<HotChocolate.Stitching.SchemaDefinitions.IPublishSchemaDefinitionDescriptor!>! configure) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.RenameField(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, HotChocolate.NameString argumentName, HotChocolate.NameString newArgumentName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.RenameField(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString typeName, HotChocolate.NameString fieldName, HotChocolate.NameString newFieldName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.RenameField(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Resolvers.FieldReference! field, HotChocolate.NameString argumentName, HotChocolate.NameString newArgumentName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.RenameField(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.Resolvers.FieldReference! field, HotChocolate.NameString newFieldName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.RenameType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString originalTypeName, HotChocolate.NameString newTypeName, HotChocolate.NameString? schemaName = null) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.RewriteType(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder, HotChocolate.NameString originalTypeName, HotChocolate.NameString newTypeName, HotChocolate.NameString schemaName) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.UseHttpRequestPipeline(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
static Microsoft.Extensions.DependencyInjection.HotChocolateStitchingRequestExecutorExtensions.UseHttpRequests(this HotChocolate.Execution.Configuration.IRequestExecutorBuilder! builder) -> HotChocolate.Execution.Configuration.IRequestExecutorBuilder!
virtual HotChocolate.Stitching.Pipeline.HttpStitchingRequestInterceptor.OnCreateRequestAsync(HotChocolate.NameString targetSchema, HotChocolate.Execution.IQueryRequest! request, System.Net.Http.HttpRequestMessage! requestMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
virtual HotChocolate.Stitching.Utilities.QueryDelegationRewriterBase.OnRewriteField(HotChocolate.NameString targetSchemaName, HotChocolate.Types.IOutputType! outputType, HotChocolate.Types.IOutputField! outputField, HotChocolate.Language.FieldNode! field) -> HotChocolate.Language.FieldNode!
virtual HotChocolate.Stitching.Utilities.QueryDelegationRewriterBase.OnRewriteSelectionSet(HotChocolate.NameString targetSchemaName, HotChocolate.Types.IOutputType! outputType, HotChocolate.Types.IOutputField! outputField, HotChocolate.Language.SelectionSetNode! selectionSet) -> HotChocolate.Language.SelectionSetNode!
