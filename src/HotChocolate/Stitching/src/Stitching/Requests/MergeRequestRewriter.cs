using HotChocolate.Language;
using HotChocolate.Language.Visitors;
using static HotChocolate.Stitching.Requests.MergeRequestRewriter;

namespace HotChocolate.Stitching.Requests;

internal class MergeRequestRewriter : SyntaxRewriter<Context>
{
    private static readonly NameNode _defaultName = new("exec_batch");

    private readonly List<FieldNode> _fields = new();
    private readonly Dictionary<string, VariableDefinitionNode> _variables = new();
    private readonly Dictionary<string, FragmentDefinitionNode> _fragments = new();

    private Dictionary<string, string>? _aliases;
    private string _requestPrefix = default!;
    private bool _rewriteFragments;
    private OperationType? _operationType;
    private NameNode? _operationName;

    public void SetOperationName(NameNode name) => _operationName = name;

    public IDictionary<string, string> AddQuery(
        BufferedRequest request,
        string requestPrefix,
        bool isAutoGenerated)
    {
        _requestPrefix = requestPrefix;
        _rewriteFragments = !isAutoGenerated;
        _operationType = request.Operation.Operation;
        _aliases = new Dictionary<string, string>();

        var rewritten = RewriteDocument(request.Document, new Context(true))!;

        var operation = BufferedRequest.ResolveOperation(rewritten, request.Request.OperationName);

        foreach (var variable in operation.VariableDefinitions)
        {
            if (!_variables.ContainsKey(variable.Variable.Name.Value))
            {
                _variables.Add(variable.Variable.Name.Value, variable);
            }
        }

        _fields.AddRange(operation.SelectionSet.Selections.OfType<FieldNode>());

        foreach (var fragment in rewritten.Definitions
            .OfType<FragmentDefinitionNode>())
        {
            if (!_fragments.ContainsKey(fragment.Name.Value))
            {
                _fragments.Add(fragment.Name.Value, fragment);
            }
        }

        return _aliases;
    }

    public DocumentNode Merge()
    {
        var definitions = new List<IDefinitionNode>
        {
            new OperationDefinitionNode(
                null,
                _operationName ?? _defaultName,
                _operationType ?? OperationType.Query,
                new List<VariableDefinitionNode>(_variables.Values),
                Array.Empty<DirectiveNode>(),
                new SelectionSetNode(null, new List<ISelectionNode>(_fields))
            )
        };

        definitions.AddRange(_fragments.Values);

        return new DocumentNode(null, definitions);
    }

    protected override VariableDefinitionNode RewriteVariableDefinition(
        VariableDefinitionNode node,
        Context context)
        => node.WithVariable(
            node.Variable.WithName(
                node.Variable.Name.CreateNewName(_requestPrefix)));

    protected override FieldNode? RewriteField(FieldNode node, Context context)
    {
        if (context.First)
        {
            var responseName = node.Alias ?? node.Name;
            var prefix = responseName.CreateNewName(_requestPrefix);
            _aliases![prefix.Value] = responseName.Value;
            node = node.WithAlias(prefix);
        }

        return base.RewriteField(node, new Context(false));
    }

    protected override FragmentSpreadNode RewriteFragmentSpread(
        FragmentSpreadNode node,
        Context context) =>
        _rewriteFragments
            ? node.WithName(node.Name.CreateNewName(_requestPrefix))
            : node;

    protected override FragmentDefinitionNode? RewriteFragmentDefinition(
        FragmentDefinitionNode node,
        Context context) =>
        _rewriteFragments
            ? base.RewriteFragmentDefinition(
                node.WithName(node.Name.CreateNewName(_requestPrefix)),
                new Context(false))
            : base.RewriteFragmentDefinition(node, new Context(false));

    protected override DirectiveNode RewriteDirective(
        DirectiveNode node,
        Context context)
    {
        if (node.Arguments.Count == 0)
        {
            return node;
        }

        var arguments = RewriteList(node.Arguments, context);

        if (!ReferenceEquals(node.Arguments, arguments))
        {
            return node.WithArguments(arguments);
        }

        return node;
    }

    protected override VariableNode RewriteVariable(
        VariableNode node,
        Context context) =>
        node.WithName(node.Name.CreateNewName(_requestPrefix));

    internal sealed class Context : ISyntaxVisitorContext
    {
        public Context(bool first)
        {
            First = first;
        }

        public bool First { get; }
    }
}
