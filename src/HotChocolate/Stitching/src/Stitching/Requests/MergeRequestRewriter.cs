using System;
using System.Collections.Generic;
using System.Linq;
using HotChocolate.Language;

namespace HotChocolate.Stitching.Requests
{
    internal class MergeRequestRewriter : QuerySyntaxRewriter<bool>
    {
        private static readonly NameNode _defaultName = new NameNode("exec_batch");

        private readonly List<FieldNode> _fields = new List<FieldNode>();
        private readonly Dictionary<string, VariableDefinitionNode> _variables =
            new Dictionary<string, VariableDefinitionNode>();
        private readonly Dictionary<string, FragmentDefinitionNode> _fragments =
            new Dictionary<string, FragmentDefinitionNode>();

        private Dictionary<string, string>? _aliases;
        private string _requestPrefix;
        private bool _rewriteFragments;
        private OperationType? _operationType;
        private NameNode? _operationName;

        public void SetOperationName(NameNode name) => _operationName = name;

        public IDictionary<string, string> AddQuery(
            BufferedRequest request,
            string requestPrefix,
            bool isAutoGenerated)
        {
            _requestPrefix = requestPrefix;
            _rewriteFragments = !isAutoGenerated;
            _operationType = request.Operation.Operation;
            _aliases = new Dictionary<string, string>();

            DocumentNode rewritten =
                RewriteDocument(request.Document, true);

            var operation =
                BufferedRequest.ResolveOperation(rewritten, request.Request.OperationName);

            foreach (var variable in operation.VariableDefinitions)
            {
                if (!_variables.ContainsKey(variable.Variable.Name.Value))
                {
                    _variables.Add(variable.Variable.Name.Value, variable);
                }
            }

            _fields.AddRange(operation.SelectionSet.Selections.OfType<FieldNode>());

            foreach (var fragment in rewritten.Definitions
                .OfType<FragmentDefinitionNode>())
            {
                if (!_fragments.ContainsKey(fragment.Name.Value))
                {
                    _fragments.Add(fragment.Name.Value, fragment);
                }
            }

            return _aliases;
        }

        public DocumentNode Merge()
        {
            var definitions = new List<IDefinitionNode>
            {
                new OperationDefinitionNode
                (
                    null,
                    _operationName ?? _defaultName,
                    _operationType ?? OperationType.Query,
                    new List<VariableDefinitionNode>(_variables.Values),
                    Array.Empty<DirectiveNode>(),
                    new SelectionSetNode(null, new List<ISelectionNode>(_fields))
                )
            };

            definitions.AddRange(_fragments.Values);

            return new DocumentNode(null, definitions);
        }

        protected override VariableDefinitionNode RewriteVariableDefinition(
            VariableDefinitionNode node, bool context) =>
            node.WithVariable(node.Variable.WithName(
                node.Variable.Name.CreateNewName(_requestPrefix)));

        protected override FieldNode RewriteField(FieldNode node, bool first)
        {
            var current = node;

            if (first)
            {
                var responseName = node.Alias ?? node.Name;
                var alias = responseName.CreateNewName(_requestPrefix);
                _aliases![alias.Value] = responseName.Value;
                current = current.WithAlias(alias);
            }

            current = Rewrite(current, node.Arguments, first,
                (p, c) => RewriteMany(p, c, RewriteArgument),
                current.WithArguments);

            current = Rewrite(current, node.Directives, first,
                (p, c) => RewriteMany(p, c, RewriteDirective),
                current.WithDirectives);

            if (node.SelectionSet != null)
            {
                current = Rewrite(current, node.SelectionSet, false,
                    RewriteSelectionSet, current.WithSelectionSet);
            }

            return current;
        }

        protected override FragmentSpreadNode RewriteFragmentSpread(
            FragmentSpreadNode node, bool first) =>
            _rewriteFragments
                ? node.WithName(node.Name.CreateNewName(_requestPrefix))
                : node;

        protected override FragmentDefinitionNode RewriteFragmentDefinition(
            FragmentDefinitionNode node, bool first) =>
            _rewriteFragments
                ? base.RewriteFragmentDefinition(
                    node.WithName(node.Name.CreateNewName(_requestPrefix)),
                    false)
                : base.RewriteFragmentDefinition(node, false);

        protected override DirectiveNode RewriteDirective(
            DirectiveNode node, bool first)
        {
            if (node.Arguments.Count == 0)
            {
                return node;
            }

            var current = node;

            current = Rewrite(current, current.Arguments, first,
                (p, c) => RewriteMany(p, c, RewriteArgument),
                current.WithArguments);

            return current;
        }

        protected override VariableNode RewriteVariable(
            VariableNode node, bool first) =>
            node.WithName(node.Name.CreateNewName(_requestPrefix));
    }
}
