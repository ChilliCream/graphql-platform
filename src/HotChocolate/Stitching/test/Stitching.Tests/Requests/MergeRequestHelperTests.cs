using Microsoft.Extensions.DependencyInjection;
using HotChocolate.Execution;
using HotChocolate.Language;
using HotChocolate.Stitching.Schemas.Customers;
using Snapshooter.Xunit;

namespace HotChocolate.Stitching.Requests;

public class MergeRequestHelperTests
{
    [Fact]
    public async Task Create_BufferedRequest()
    {
        // arrange
        var schema =
            await new ServiceCollection()
                .AddGraphQL()
                .AddCustomerSchema()
                .BuildSchemaAsync();

        var queryA = "query abc($id: ID) { customer(id: $id) { name } }";
        var queryB = "query abc($id: ID) { customer(id: $id) { id } }";

        var requestA =
            QueryRequestBuilder.New()
                .SetQuery(queryA)
                .SetVariableValue("id", "1")
                .Create();

        var requestB =
            QueryRequestBuilder.New()
                .SetQuery(queryB)
                .SetVariableValue("id", "1")
                .Create();

        var bufferedRequestA = BufferedRequest.Create(requestA, schema);
        var bufferedRequestB = BufferedRequest.Create(requestB, schema);

        // act
        var mergeResult =
            MergeRequestHelper.MergeRequests(
                new[] { bufferedRequestA, bufferedRequestB });

        // assert
        string.Join(Environment.NewLine + "-------" + Environment.NewLine,
                mergeResult
                    .Select(t => t.Item1)
                    .Select(t => Utf8GraphQLParser.Parse(t.Query!.AsSpan()).ToString(true)))
            .MatchSnapshot();
    }

    [Fact]
    public async Task Create_BufferedRequest_AutoGenerated()
    {
        // arrange
        var schema =
            await new ServiceCollection()
                .AddGraphQL()
                .AddCustomerSchema()
                .BuildSchemaAsync();

        var queryA = "query abc($id: ID) { customer(id: $id) { name } }";
        var queryB = "query abc($id: ID) { customer(id: $id) { id } }";

        var requestA =
            QueryRequestBuilder.New()
                .SetQuery(queryA)
                .SetVariableValue("id", "1")
                .SetGlobalState(WellKnownContextData.IsAutoGenerated, true)
                .Create();

        var requestB =
            QueryRequestBuilder.New()
                .SetQuery(queryB)
                .SetVariableValue("id", "1")
                .SetGlobalState(WellKnownContextData.IsAutoGenerated, true)
                .Create();

        var bufferedRequestA = BufferedRequest.Create(requestA, schema);
        var bufferedRequestB = BufferedRequest.Create(requestB, schema);

        // act
        var mergeResult =
            MergeRequestHelper.MergeRequests(
                new[] { bufferedRequestA, bufferedRequestB });

        // assert
        string.Join(Environment.NewLine + "-------" + Environment.NewLine,
                mergeResult
                    .Select(t => t.Item1)
                    .Select(t => Utf8GraphQLParser.Parse(t.Query!.AsSpan()).ToString(true)))
            .MatchSnapshot();
    }

    [Fact]
    public async Task Create_BufferedRequest_With_Mixed_Operations()
    {
        // arrange
        var schema =
            await new ServiceCollection()
                .AddGraphQL()
                .AddCustomerSchema()
                .BuildSchemaAsync();

        var queryA = "query abc($id: ID) { customer(id: $id) { name } }";
        var queryB = "query abc($id: ID) { customer(id: $id) { id } }";
        var queryC = "mutation { createCustomer(input: { name: \"a\" }) { customer { id } } }";

        var requestA =
            QueryRequestBuilder.New()
                .SetQuery(queryA)
                .SetVariableValue("id", "1")
                .Create();

        var requestB =
            QueryRequestBuilder.New()
                .SetQuery(queryB)
                .SetVariableValue("id", "1")
                .Create();

        var requestC =
            QueryRequestBuilder.New()
                .SetQuery(queryC)
                .Create();

        var bufferedRequestA = BufferedRequest.Create(requestA, schema);
        var bufferedRequestB = BufferedRequest.Create(requestB, schema);
        var bufferedRequestC = BufferedRequest.Create(requestC, schema);

        // act
        var mergeResult =
            MergeRequestHelper.MergeRequests(new[]
            {
                bufferedRequestA,
                bufferedRequestB,
                bufferedRequestC
            });

        // assert
        string.Join(Environment.NewLine + "-------" + Environment.NewLine,
                mergeResult
                    .Select(t => t.Item1)
                    .Select(t => Utf8GraphQLParser.Parse(t.Query!.AsSpan()).ToString(true)))
            .MatchSnapshot();
    }

    [Fact]
    public async Task Merge_Requests_With_Variables_On_Directives()
    {
        // arrange
        var schema =
            await new ServiceCollection()
                .AddGraphQL()
                .AddCustomerSchema()
                .BuildSchemaAsync();

        var queryA =
            @"query abc($id: ID $if: Boolean) {
                    customer(id: $id) {
                        name @include(id: $if)
                    }
                }";

        var queryB =
            @"query abc($id: ID  $if: Boolean) {
                    customer(id: $id) {
                        id @include(id: $if)
                    }
                }";

        var requestA =
            QueryRequestBuilder.New()
                .SetQuery(queryA)
                .SetVariableValue("id", "1")
                .SetVariableValue("if", true)
                .Create();

        var requestB =
            QueryRequestBuilder.New()
                .SetQuery(queryB)
                .SetVariableValue("id", "1")
                .SetVariableValue("if", true)
                .Create();

        var bufferedRequestA = BufferedRequest.Create(requestA, schema);
        var bufferedRequestB = BufferedRequest.Create(requestB, schema);

        // act
        var mergeResult =
            MergeRequestHelper.MergeRequests(new[] { bufferedRequestA, bufferedRequestB });

        // assert
        string.Join(Environment.NewLine + "-------" + Environment.NewLine,
                mergeResult
                    .Select(t => t.Item1)
                    .Select(t => Utf8GraphQLParser.Parse(t.Query!.AsSpan()).ToString(true)))
            .MatchSnapshot();
    }
}
