using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using HotChocolate.Execution;
using HotChocolate.Language;
using HotChocolate.Stitching.Schemas.Customers;
using Microsoft.Extensions.DependencyInjection;
using Snapshooter.Xunit;
using Xunit;

namespace HotChocolate.Stitching.Requests;

public class MergeRequestHelperTests
{
    [Fact]
    public async Task Create_BufferedRequest()
    {
        // arrange
        ISchema schema =
            await new ServiceCollection()
                .AddGraphQL()
                .AddCustomerSchema()
                .BuildSchemaAsync();

        const string queryA = "query abc($id: ID) { customer(id: $id) { name } }";
        const string queryB = "query abc($id: ID) { customer(id: $id) { id } }";

        IQueryRequest requestA =
            QueryRequestBuilder.New()
                .SetQuery(queryA)
                .SetVariableValue("id", "1")
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        IQueryRequest requestB =
            QueryRequestBuilder.New()
                .SetQuery(queryB)
                .SetVariableValue("id", "1")
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        var bufferedRequestA = BufferedRequest.Create(requestA, schema);
        var bufferedRequestB = BufferedRequest.Create(requestB, schema);

        // act
        IEnumerable<(IQueryRequest, IReadOnlyList<BufferedRequest>)> mergeResult =
            MergeRequestHelper.MergeRequests(new[] { bufferedRequestA, bufferedRequestB });

        // assert
        string.Join(Environment.NewLine + "-------" + Environment.NewLine,
            mergeResult
                .Select(t => t.Item1)
                .Select(t => Utf8GraphQLParser.Parse(t.Query!.AsSpan()).ToString(true)))
            .MatchSnapshot();
    }

    [Fact]
    public async Task Create_BufferedRequest_AutoGenerated()
    {
        // arrange
        ISchema schema =
            await new ServiceCollection()
                .AddGraphQL()
                .AddCustomerSchema()
                .BuildSchemaAsync();

        const string queryA = "query abc($id: ID) { customer(id: $id) { name } }";
        const string queryB = "query abc($id: ID) { customer(id: $id) { id } }";

        IQueryRequest requestA =
            QueryRequestBuilder.New()
                .SetQuery(queryA)
                .SetVariableValue("id", "1")
                .SetProperty(WellKnownContextData.IsAutoGenerated, true)
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        IQueryRequest requestB =
            QueryRequestBuilder.New()
                .SetQuery(queryB)
                .SetVariableValue("id", "1")
                .SetProperty(WellKnownContextData.IsAutoGenerated, true)
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        var bufferedRequestA = BufferedRequest.Create(requestA, schema);
        var bufferedRequestB = BufferedRequest.Create(requestB, schema);

        // act
        IEnumerable<(IQueryRequest, IReadOnlyList<BufferedRequest>)> mergeResult =
            MergeRequestHelper.MergeRequests(
                new[] { bufferedRequestA, bufferedRequestB });

        // assert
        string.Join(Environment.NewLine + "-------" + Environment.NewLine,
                mergeResult
                    .Select(t => t.Item1)
                    .Select(t => Utf8GraphQLParser.Parse(t.Query!.AsSpan()).ToString(true)))
            .MatchSnapshot();
    }

    [Fact]
    public async Task Create_BufferedRequest_With_Mixed_Operations()
    {
        // arrange
        ISchema schema =
            await new ServiceCollection()
                .AddGraphQL()
                .AddCustomerSchema()
                .BuildSchemaAsync();

        const string queryA = "query abc($id: ID) { customer(id: $id) { name } }";
        const string queryB = "query abc($id: ID) { customer(id: $id) { id } }";
        const string queryC = @"
            mutation {
                createCustomer(input: { name: ""a"" }) {
                    customer { id }
                }
            }";

        IQueryRequest requestA =
            QueryRequestBuilder.New()
                .SetQuery(queryA)
                .SetVariableValue("id", "1")
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        IQueryRequest requestB =
            QueryRequestBuilder.New()
                .SetQuery(queryB)
                .SetVariableValue("id", "1")
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        IQueryRequest requestC =
            QueryRequestBuilder.New()
                .SetQuery(queryC)
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        var bufferedRequestA = BufferedRequest.Create(requestA, schema);
        var bufferedRequestB = BufferedRequest.Create(requestB, schema);
        var bufferedRequestC = BufferedRequest.Create(requestC, schema);

        // act
        IEnumerable<(IQueryRequest, IReadOnlyList<BufferedRequest>)> mergeResult =
            MergeRequestHelper.MergeRequests(new[]
            {
                    bufferedRequestA,
                    bufferedRequestB,
                    bufferedRequestC
            });

        // assert
        string.Join(Environment.NewLine + "-------" + Environment.NewLine,
                mergeResult
                    .Select(t => t.Item1)
                    .Select(t => Utf8GraphQLParser.Parse(t.Query!.AsSpan()).ToString(true)))
            .MatchSnapshot();
    }

    [Fact]
    public async Task Merge_Requests_With_Variables_On_Directives()
    {
        // arrange
        ISchema schema =
            await new ServiceCollection()
                .AddGraphQL()
                .AddCustomerSchema()
                .BuildSchemaAsync();

        const string queryA =
            @"query abc($id: ID $if: Boolean) {
                customer(id: $id) {
                    name @include(id: $if)
                }
            }";

        const string queryB =
            @"query abc($id: ID  $if: Boolean) {
                customer(id: $id) {
                    id @include(id: $if)
                }
            }";

        IQueryRequest requestA =
            QueryRequestBuilder.New()
                .SetQuery(queryA)
                .SetVariableValue("id", "1")
                .SetVariableValue("if", true)
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        IQueryRequest requestB =
            QueryRequestBuilder.New()
                .SetQuery(queryB)
                .SetVariableValue("id", "1")
                .SetVariableValue("if", true)
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        var bufferedRequestA = BufferedRequest.Create(requestA, schema);
        var bufferedRequestB = BufferedRequest.Create(requestB, schema);

        // act
        IEnumerable<(IQueryRequest, IReadOnlyList<BufferedRequest>)> mergeResult =
            MergeRequestHelper.MergeRequests(new[] { bufferedRequestA, bufferedRequestB });

        // assert
        string.Join(Environment.NewLine + "-------" + Environment.NewLine,
            mergeResult
                .Select(t => t.Item1)
                .Select(t => Utf8GraphQLParser.Parse(t.Query!.AsSpan()).ToString(true)))
            .MatchSnapshot();
    }

    [Fact]
    public async Task Only_Merge_Batchable_Requests()
    {
        // arrange
        ISchema schema =
            await new ServiceCollection()
                .AddGraphQL()
                .AddCustomerSchema()
                .BuildSchemaAsync();

        const string queryA =
            @"query abc($id: ID $if: Boolean) {
                a: customer(id: $id) {
                    name @include(id: $if)
                }
            }";

        const string queryB =
            @"query def($id: ID  $if: Boolean) {
                b: customer(id: $id) {
                    id @include(id: $if)
                }
            }";

        const string queryC =
            @"query ghi($id: ID  $if: Boolean) {
                c: customer(id: $id) {
                    id @include(id: $if)
                }
            }";

        IQueryRequest requestA =
            QueryRequestBuilder.New()
                .SetQuery(queryA)
                .SetVariableValue("id", "1")
                .SetVariableValue("if", true)
                .Create();

        IQueryRequest requestB =
            QueryRequestBuilder.New()
                .SetQuery(queryB)
                .SetVariableValue("id", "1")
                .SetVariableValue("if", true)
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        IQueryRequest requestC =
            QueryRequestBuilder.New()
                .SetQuery(queryC)
                .SetVariableValue("id", "1")
                .SetVariableValue("if", true)
                .TryAddProperty(WellKnownContextData.IsBatchable, true)
                .Create();

        var bufferedRequestA = BufferedRequest.Create(requestA, schema);
        var bufferedRequestB = BufferedRequest.Create(requestB, schema);
        var bufferedRequestC = BufferedRequest.Create(requestC, schema);

        // act
        IEnumerable<(IQueryRequest, IReadOnlyList<BufferedRequest>)> mergeResult =
            MergeRequestHelper.MergeRequests(new[]
            {
                bufferedRequestA,
                bufferedRequestB,
                bufferedRequestC
            });

        // assert
        string.Join(Environment.NewLine + "-------" + Environment.NewLine,
                mergeResult
                    .Select(t => t.Item1)
                    .Select(t => Utf8GraphQLParser.Parse(t.Query!.AsSpan()).ToString(true)))
            .MatchSnapshot();
    }
}
