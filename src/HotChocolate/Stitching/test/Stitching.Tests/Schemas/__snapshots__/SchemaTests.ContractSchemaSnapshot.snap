schema {
  query: Query
}

interface Contract {
  id: ID!
  customerId: ID!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type LifeInsuranceContract implements Node & Contract {
  id: ID!
  customerId: ID!
  foo(bar: String): String
  error: String
  date_field: Date
  date_time_field: DateTime
  string_field: String
  id_field: ID
  byte_field: Byte
  int_field: Int
  long_field: Long
  float_field(f: Float): Float
  decimal_field: Decimal
  premium: Float!
}

type Query {
  node(id: ID!): Node
  contract(contractId: ID!): Contract
  contracts(customerId: ID!): [Contract!]
  extendedScalar(d: DateTime): DateTime
  int(i: Int!): Int!
  guid(guid: Uuid!): Uuid!
}

type SomeOtherContract implements Node & Contract {
  id: ID!
  customerId: ID!
  expiryDate: DateTime!
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http:\/\/en.wikipedia.org\/wiki\/IEEE_floating_point)."
scalar Float

"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
scalar ID

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

scalar Uuid
