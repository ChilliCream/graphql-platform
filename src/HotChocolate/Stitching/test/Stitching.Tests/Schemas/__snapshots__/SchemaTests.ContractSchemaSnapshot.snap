schema {
  query: Query
}

interface Contract implements Node {
  id: ID!
  customerId: ID!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type LifeInsuranceContract implements Node & Contract {
  id: ID!
  customerId: ID!
  foo(bar: String): String
  error: String
  date_field: Date
  date_time_field: DateTime
  string_field: String
  id_field: ID
  byte_field: Byte
  int_field: Int
  long_field: Long
  float_field(f: Float): Float
  decimal_field: Decimal
  premium: Float!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  contract(contractId: ID!): Contract
  contracts(customerId: ID!): [Contract!]
  extendedScalar(d: DateTime): DateTime
  int(i: Int!): Int!
  guid(guid: UUID!): UUID!
}

type SomeOtherContract implements Node & Contract {
  id: ID!
  customerId: ID!
  expiryDate: DateTime!
}

directive @custom(d: DateTime) on FIELD

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
