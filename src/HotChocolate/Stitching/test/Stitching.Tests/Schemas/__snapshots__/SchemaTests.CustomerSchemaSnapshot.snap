schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Consultant implements Node {
  id: ID!
  name: String!
  customers(first: Int after: String last: Int before: String): CustomerConnection
}

type CreateCustomerPayload {
  customer: Customer
}

type Customer implements Node {
  id: ID!
  name: String!
  street: String!
  consultant(customer: CustomerInput): Consultant
  say(input: SayInput!): String
  complexArg(arg: ComplexInputType): String
  someInt: Int!
  someGuid: UUID!
  kind: CustomerKind!
}

"A connection to a list of items."
type CustomerConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CustomerEdge!]
  "A flattened list of the nodes."
  nodes: [Customer]
}

"An edge in a connection."
type CustomerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Customer
}

type Mutation {
  createCustomer(input: CreateCustomerInput): CreateCustomerPayload
  createCustomers(inputs: [CreateCustomerInput]): [CreateCustomerPayload]
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  node(id: ID!): Node
  customer(id: ID!): Customer
  customers(ids: [ID!]!): [Customer]
  consultant(id: ID!): Consultant
  customerOrConsultant(id: ID!): CustomerOrConsultant
  customerByKind(kind: CustomerKind!): Customer
  allCustomers: [Customer]
}

union CustomerOrConsultant = Customer | Consultant

input ComplexInputType {
  value: String
  deeper: ComplexInputType
  valueArray: [String]
  deeperArray: [ComplexInputType]
}

input CreateCustomerInput {
  name: String
  street: String
  consultantId: String
}

input CustomerInput {
  id: String
  name: String
  street: String
  consultantId: String
  someInt: Int!
  someGuid: UUID!
  kind: CustomerKind!
}

input SayInput {
  words: [String]
}

enum CustomerKind {
  STANDARD
  PREMIUM
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
