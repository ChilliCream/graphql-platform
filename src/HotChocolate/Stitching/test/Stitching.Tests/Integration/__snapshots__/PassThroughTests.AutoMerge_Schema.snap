schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Error @source(name: "Error", schema: "CoinService") {
  message: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node @source(name: "Node", schema: "CoinService") {
  id: ID!
}

type AddAssetToWatchlistPayload @source(name: "AddAssetToWatchlistPayload", schema: "CoinService") {
  watchlist: Watchlist
  errors: [AddAssetToWatchlistError!]
}

type AddAssetsToWatchlistPayload @source(name: "AddAssetsToWatchlistPayload", schema: "CoinService") {
  watchlist: Watchlist
  errors: [AddAssetsToWatchlistError!]
}

type Asset implements Node @source(name: "Asset", schema: "CoinService") {
  id: ID!
  symbol: String!
  name: String!
  slug: String!
  description: String
  color: String!
  website: String
  whitePaper: String
  price: AssetPrice
  imageUrl: String
  isInWatchlist: Boolean
}

type AssetPrice implements Node @source(name: "AssetPrice", schema: "CoinService") {
  id: ID!
  currency: String!
  lastPrice: Float!
  marketCap: Float!
  tradableMarketCapRank: Int!
  volume24Hour: Float!
  volumePercentChange24Hour: Float!
  circulatingSupply: Float!
  maxSupply: Float!
  high24Hour: Float!
  low24Hour: Float!
  open24Hour: Float!
  tradingActivity: Float!
  change(span: ChangeSpan!): AssetPriceChange
  asset: Asset!
}

type AssetPriceChange implements Node @source(name: "AssetPriceChange", schema: "CoinService") {
  id: ID!
  percentageChange: Float!
  history("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): HistoryConnection
}

type AssetPriceHistory @source(name: "AssetPriceHistory", schema: "CoinService") {
  epoch: Int!
  price: Float!
}

"A connection to a list of items."
type AssetsConnection @source(name: "AssetsConnection", schema: "CoinService") {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AssetsEdge!]
  "A flattened list of the nodes."
  nodes: [Asset!]
}

"An edge in a connection."
type AssetsEdge @source(name: "AssetsEdge", schema: "CoinService") {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Asset!
}

type ChangeAssetPositionInWatchlistPayload @source(name: "ChangeAssetPositionInWatchlistPayload", schema: "CoinService") {
  watchlist: Watchlist
  errors: [ChangeAssetPositionInWatchlistError!]
}

type CreateAssetPayload @source(name: "CreateAssetPayload", schema: "CoinService") {
  asset: Asset
}

type EntityNotFoundError implements Error @source(name: "EntityNotFoundError", schema: "CoinService") {
  message: String!
  id: Int!
}

"A connection to a list of items."
type HistoryConnection @source(name: "HistoryConnection", schema: "CoinService") {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [AssetPriceHistory]
}

"An edge in a connection."
type HistoryEdge @source(name: "HistoryEdge", schema: "CoinService") {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AssetPriceHistory
}

type ImportAssetPayload @source(name: "ImportAssetPayload", schema: "CoinService") {
  asset: Asset
}

type ImportAssetsPayload @source(name: "ImportAssetsPayload", schema: "CoinService") {
  assets: [Asset!]
}

type IndexOutOfRangeError implements Error @source(name: "IndexOutOfRangeError", schema: "CoinService") {
  message: String!
}

type Mutation {
  createAsset(input: CreateAssetInput!): CreateAssetPayload! @delegate(schema: "CoinService")
  importAsset(input: ImportAssetInput!): ImportAssetPayload! @delegate(schema: "CoinService")
  importAssets(input: ImportAssetsInput!): ImportAssetsPayload! @delegate(schema: "CoinService")
  uploadAssetIcon(input: UploadAssetIconInput!): UploadAssetIconPayload! @delegate(schema: "CoinService")
  addAssetToWatchlist(input: AddAssetToWatchlistInput!): AddAssetToWatchlistPayload! @delegate(schema: "CoinService")
  addAssetsToWatchlist(input: AddAssetsToWatchlistInput!): AddAssetsToWatchlistPayload! @delegate(schema: "CoinService")
  removeAssetFromWatchlist(input: RemoveAssetFromWatchlistInput!): RemoveAssetFromWatchlistPayload! @delegate(schema: "CoinService")
  removeAssetsFromWatchlist(input: RemoveAssetsFromWatchlistInput!): RemoveAssetsFromWatchlistPayload! @delegate(schema: "CoinService")
  changeAssetPositionInWatchlist(input: ChangeAssetPositionInWatchlistInput!): ChangeAssetPositionInWatchlistPayload! @delegate(schema: "CoinService")
}

type NotAuthenticatedError implements Error @source(name: "NotAuthenticatedError", schema: "CoinService") {
  message: String!
}

"Information about pagination in a connection."
type PageInfo @source(name: "PageInfo", schema: "CoinService") {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node @delegate(schema: "CoinService")
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]! @delegate(schema: "CoinService")
  assets("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [AssetSortInput!]): AssetsConnection @delegate(schema: "CoinService")
  assetBySlug(slug: String!): Asset @delegate(schema: "CoinService")
  assetsBySlug(slugs: [String!]!): [Asset]! @delegate(schema: "CoinService")
  assetBySymbol(symbol: String!): Asset @delegate(schema: "CoinService")
  assetsBySymbol(symbols: [String!]!): [Asset]! @delegate(schema: "CoinService")
  assetById(id: ID!): Asset @delegate(schema: "CoinService")
  assetsById(ids: [ID!]!): [Asset]! @delegate(schema: "CoinService")
  me: User @delegate(schema: "CoinService")
}

type RemoveAssetFromWatchlistPayload @source(name: "RemoveAssetFromWatchlistPayload", schema: "CoinService") {
  watchlist: Watchlist
  errors: [RemoveAssetFromWatchlistError!]
}

type RemoveAssetsFromWatchlistPayload @source(name: "RemoveAssetsFromWatchlistPayload", schema: "CoinService") {
  watchlist: Watchlist
  errors: [RemoveAssetsFromWatchlistError!]
}

type Subscription {
  onPriceChange(symbols: [String!]!): [AssetPrice!] @delegate(schema: "CoinService")
}

type UnknownAssetError implements Error @source(name: "UnknownAssetError", schema: "CoinService") {
  message: String!
  symbols: [String!]!
}

type UnknownWatchlistError implements Error @source(name: "UnknownWatchlistError", schema: "CoinService") {
  message: String!
  username: String!
}

type UploadAssetIconPayload @source(name: "UploadAssetIconPayload", schema: "CoinService") {
  asset: Asset
  errors: [UploadAssetIconError!]
}

type User @source(name: "User", schema: "CoinService") {
  watchlist: Watchlist
  name: String!
}

type Watchlist implements Node @source(name: "Watchlist", schema: "CoinService") {
  id: ID!
  user: User!
  assets("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AssetsConnection
}

union AddAssetToWatchlistError @source(name: "AddAssetToWatchlistError", schema: "CoinService") = UnknownAssetError | NotAuthenticatedError

union AddAssetsToWatchlistError @source(name: "AddAssetsToWatchlistError", schema: "CoinService") = UnknownAssetError | NotAuthenticatedError

union ChangeAssetPositionInWatchlistError @source(name: "ChangeAssetPositionInWatchlistError", schema: "CoinService") = UnknownAssetError | NotAuthenticatedError | UnknownWatchlistError | IndexOutOfRangeError

union RemoveAssetFromWatchlistError @source(name: "RemoveAssetFromWatchlistError", schema: "CoinService") = UnknownAssetError | NotAuthenticatedError

union RemoveAssetsFromWatchlistError @source(name: "RemoveAssetsFromWatchlistError", schema: "CoinService") = UnknownAssetError | NotAuthenticatedError

union UploadAssetIconError @source(name: "UploadAssetIconError", schema: "CoinService") = EntityNotFoundError

input AddAssetToWatchlistInput @source(name: "AddAssetToWatchlistInput", schema: "CoinService") {
  symbol: String!
}

input AddAssetsToWatchlistInput @source(name: "AddAssetsToWatchlistInput", schema: "CoinService") {
  symbols: [String!]!
}

input AssetSortInput @source(name: "AssetSortInput", schema: "CoinService") {
  symbol: SortEnumType
  slug: SortEnumType
  name: SortEnumType
  tradableMarketCapRank: SortEnumType
  change24Hour: SortEnumType
}

input ChangeAssetPositionInWatchlistInput @source(name: "ChangeAssetPositionInWatchlistInput", schema: "CoinService") {
  symbol: String!
  index: Int!
}

input CreateAssetInput @source(name: "CreateAssetInput", schema: "CoinService") {
  symbol: String!
  name: String!
  description: String
  image: Upload
}

input ImportAssetInput @source(name: "ImportAssetInput", schema: "CoinService") {
  symbol: String!
}

input ImportAssetsInput @source(name: "ImportAssetsInput", schema: "CoinService") {
  symbols: [String!]!
}

input RemoveAssetFromWatchlistInput @source(name: "RemoveAssetFromWatchlistInput", schema: "CoinService") {
  symbol: String!
}

input RemoveAssetsFromWatchlistInput @source(name: "RemoveAssetsFromWatchlistInput", schema: "CoinService") {
  symbols: [String!]!
}

input UploadAssetIconInput @source(name: "UploadAssetIconInput", schema: "CoinService") {
  id: ID!
  image: Upload!
}

enum ChangeSpan @source(name: "ChangeSpan", schema: "CoinService") {
  ALL
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

enum SortEnumType @source(name: "SortEnumType", schema: "CoinService") {
  ASC
  DESC
}

directive @computed("Specifies the fields on which a computed field is dependent on." dependantOn: [Name!]) on FIELD_DEFINITION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"Delegates a resolver to a remote schema."
directive @delegate("The path to the field on the remote schema." path: String "The name of the schema to which this field shall be delegated to." schema: Name!) on FIELD_DEFINITION

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: Name! "The name of the schema to which this type belongs to." schema: Name!) repeatable on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD

"The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types."
scalar Name

"The `Upload` scalar type represents a file upload."
scalar Upload
