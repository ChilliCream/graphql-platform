schema {
  query: Query
}

type InventoryInfo @source(name: "InventoryInfo", schema: "inventory") {
  upc: Int!
  isInStock: Boolean!
}

type Product @source(name: "Product", schema: "products") {
  upc: Int!
  name: String
  price: Int!
  weight: Int!
  inStock: Boolean @delegate(path: "inventoryInfo(upc: $fields:upc).isInStock", schema: "inventory")
  shippingEstimate: Int @delegate(path: "shippingEstimate(price: $fields:price weight: $fields:weight)", schema: "inventory")
  reviews: [Review] @delegate(path: "reviewsByProduct(upc: $fields:upc)", schema: "reviews")
}

type Query {
  me: User! @delegate(path: "user(id: 1)", schema: "accounts")
  topProducts(first: Int = 5): [Product] @delegate(schema: "products")
}

type Review @source(name: "Review", schema: "reviews") {
  id: Int!
  authorId: Int!
  upc: Int!
  body: String
  author: User @delegate(path: "user(id: $fields:authorId)", schema: "accounts")
  product: Product @delegate(path: "product(upc: $fields:upc)", schema: "products")
}

type User @source(name: "User", schema: "accounts") {
  id: Int!
  name: String
  birthdate: DateTime!
  username: String
  reviews: [Review] @delegate(path: "reviewsByAuthor(authorId: $fields:id)", schema: "reviews")
}

directive @delegate(path: String "The name of the schema to which this field shall be delegated to." schema: Name!) on FIELD_DEFINITION

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: Name! "The name of the schema to which this type belongs to." schema: Name!) repeatable on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types."
scalar Name

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
