schema {
  query: Query
}

type InventoryInfo @source(name: "InventoryInfo", schema: "inventory") {
  upc: Int!
  isInStock: Boolean!
}

type Product @source(name: "Product", schema: "products") {
  upc: Int!
  name: String!
  price: Int!
  weight: Int!
  inStock: Boolean @delegate(path: "inventoryInfo(upc: $fields:upc).isInStock", schema: "inventory")
  shippingEstimate: Int @delegate(path: "shippingEstimate(price: $fields:price weight: $fields:weight)", schema: "inventory")
  reviews: [Review] @delegate(path: "reviewsByProduct(upc: $fields:upc)", schema: "reviews")
}

type Query {
  me: User! @delegate(path: "user(id: 1)", schema: "accounts")
  topProducts(first: Int = 5): [Product] @delegate(schema: "products")
}

type Review @source(name: "Review", schema: "reviews") {
  id: Int!
  authorId: Int!
  upc: Int!
  body: String!
  author: User @delegate(path: "user(id: $fields:authorId)", schema: "accounts")
  product: Product @delegate(path: "product(upc: $fields:upc)", schema: "products")
}

type User @source(name: "User", schema: "accounts") {
  id: Int!
  name: String!
  birthdate: DateTime!
  username: String!
  reviews: [Review] @delegate(path: "reviewsByAuthor(authorId: $fields:id)", schema: "reviews")
}

directive @computed("Specifies the fields on which a computed field is dependent on." dependantOn: [String!]) on FIELD_DEFINITION

"Delegates a resolver to a remote schema."
directive @delegate("The path to the field on the remote schema." path: String "The name of the schema to which this field shall be delegated to." schema: String!) on FIELD_DEFINITION

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: String! "The name of the schema to which this type belongs to." schema: String!) repeatable on OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")
