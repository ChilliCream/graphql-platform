schema {
  query: Query
  mutation: Mutation
}

interface Contract @source(name: "Contract", schema: "contract") {
  id: ID!
  customerId: ID!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node @source(name: "Node", schema: "contract") @source(name: "Node", schema: "customer") {
  id: ID!
}

type Consultant implements Node @source(name: "Consultant", schema: "customer") {
  id: ID!
  name: String!
  customers(first: Int after: String last: Int before: String): CustomerConnection
}

type CreateCustomerPayload @source(name: "CreateCustomerPayload", schema: "customer") {
  customer: Customer
}

type Customer implements Node @source(name: "Customer", schema: "customer") {
  id: ID!
  name: String!
  street: String!
  consultant(customer: CustomerInput): Consultant
  say(input: SayInput!): String
  complexArg(arg: ComplexInputType): String
  someInt: Int!
  someGuid: UUID!
  kind: CustomerKind!
}

"A connection to a list of items."
type CustomerConnection @source(name: "CustomerConnection", schema: "customer") {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CustomerEdge!]
  "A flattened list of the nodes."
  nodes: [Customer]
}

"An edge in a connection."
type CustomerEdge @source(name: "CustomerEdge", schema: "customer") {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Customer
}

type LifeInsuranceContract implements Node & Contract @source(name: "LifeInsuranceContract", schema: "contract") {
  id: ID!
  customerId: ID!
  foo(bar: String): String
  error: String
  date_field: Date
  date_time_field: DateTime
  string_field: String
  id_field: ID
  byte_field: Byte
  int_field: Int
  long_field: Long
  float_field(f: Float): Float
  decimal_field: Decimal
  premium: Float!
}

type Mutation {
  createCustomer(input: CreateCustomerInput): CreateCustomerPayload @delegate(schema: "customer")
  createCustomers(inputs: [CreateCustomerInput]): [CreateCustomerPayload] @delegate(schema: "customer")
}

"Information about pagination in a connection."
type PageInfo @source(name: "PageInfo", schema: "customer") {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  node(id: ID!): Node @delegate(schema: "contract")
  contract(contractId: ID!): Contract @delegate(schema: "contract")
  contracts(customerId: ID!): [Contract!] @delegate(schema: "contract")
  extendedScalar(d: DateTime): DateTime @delegate(schema: "contract")
  int(i: Int!): Int! @delegate(schema: "contract")
  guid(guid: UUID!): UUID! @delegate(schema: "contract")
  customer_node(id: ID!): Node @delegate(schema: "customer", path: "node(id: $arguments:id)")
  customer(id: ID!): Customer @delegate(schema: "customer")
  customers(ids: [ID!]!): [Customer] @delegate(schema: "customer")
  consultant(id: ID!): Consultant @delegate(schema: "customer")
  customerOrConsultant(id: ID!): CustomerOrConsultant @delegate(schema: "customer")
  customerByKind(kind: CustomerKind!): Customer @delegate(schema: "customer")
  allCustomers: [Customer] @delegate(schema: "customer")
}

type SomeOtherContract implements Node & Contract @source(name: "SomeOtherContract", schema: "contract") {
  id: ID!
  customerId: ID!
  expiryDate: DateTime!
}

union CustomerOrConsultant @source(name: "CustomerOrConsultant", schema: "customer") = Customer | Consultant

input ComplexInputType @source(name: "ComplexInputType", schema: "customer") {
  value: String
  deeper: ComplexInputType
  valueArray: [String]
  deeperArray: [ComplexInputType]
}

input CreateCustomerInput @source(name: "CreateCustomerInput", schema: "customer") {
  name: String
  street: String
  consultantId: String
}

input CustomerInput @source(name: "CustomerInput", schema: "customer") {
  id: String
  name: String
  street: String
  consultantId: String
  someInt: Int!
  someGuid: UUID!
  kind: CustomerKind!
}

input SayInput @source(name: "SayInput", schema: "customer") {
  words: [String]
}

enum CustomerKind @source(name: "CustomerKind", schema: "customer") {
  STANDARD
  PREMIUM
}

directive @computed("Specifies the fields on which a computed field is dependent on." dependantOn: [Name!]) on FIELD_DEFINITION

directive @custom(d: DateTime) on FIELD

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"Delegates a resolver to a remote schema."
directive @delegate("The path to the field on the remote schema." path: String "The name of the schema to which this field shall be delegated to." schema: Name!) on FIELD_DEFINITION

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: Name! "The name of the schema to which this type belongs to." schema: Name!) repeatable on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types."
scalar Name

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
