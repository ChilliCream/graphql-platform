schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Client implements Node {
  clientVersions: [ClientVersion!]!
  description: String
  id: ID!
  name: String!
  schemaId: ID!
}

"A connection to a list of items."
type ClientConnection {
  "A list of edges."
  edges: [ClientEdge!]
  "A flattened list of the nodes."
  nodes: [Client!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type ClientEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Client!
}

type ClientVersion {
  clientId: ID!
  externalId: String!
  id: ID!
  published: DateTime!
  queryDocuments: [QueryDocument!]!
  queryIds: [ID]!
  tags: [Tag!]!
}

type CreateClientPayload {
  client: Client!
  clientMutationId: String
  schema: Schema!
}

type CreateEnvironmentPayload {
  clientMutationId: String
  environment: Environment!
}

type CreateSchemaPayload {
  clientMutationId: String
  schema: Schema!
}

type DocumentHash {
  algorithm: String!
  equals: Boolean!
  format: HashFormat!
  hash: String!
}

type Environment implements Node {
  description: String
  id: ID!
  name: String!
}

"A connection to a list of items."
type EnvironmentConnection {
  "A list of edges."
  edges: [EnvironmentEdge!]
  "A flattened list of the nodes."
  nodes: [Environment!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type EnvironmentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Environment!
}

type Issue {
  code: String!
  file: String!
  id: ID!
  location: Location!
  message: String!
  resolution: ResolutionType!
  type: IssueType!
}

type Location {
  column: Int!
  end: Int!
  line: Int!
  start: Int!
}

type MarkClientPublishedPayload {
  clientMutationId: String
  clientVersion: ClientVersion!
  environment: Environment!
  schema: Schema!
}

type MarkSchemaPublishedPayload {
  clientMutationId: String
  environment: Environment!
  schema: Schema!
  schemaVersion: SchemaVersion!
}

type Mutation {
  createClient(input: CreateClientInput!): CreateClientPayload!
  createEnvironment(input: CreateEnvironmentInput!): CreateEnvironmentPayload
  createSchema(input: CreateSchemaInput!): CreateSchemaPayload!
  markClientPublished(input: MarkClientPublishedInput!): MarkClientPublishedPayload!
  markSchemaPublished(input: MarkSchemaPublishedInput!): MarkSchemaPublishedPayload!
  publishClient(input: PublishClientInput!): PublishClientPayload!
  publishSchema(input: PublishSchemaInput!): PublishSchemaPayload!
  updateEnvironment(input: UpdateEnvironmentInput!): UpdateEnvironmentPayload
  updateSchema(input: UpdateSchemaInput!): UpdateSchemaPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type PublishClientPayload {
  clientMutationId: String
  sessionId: String!
}

type PublishDocumentEvent {
  isCompleted: Boolean!
  issue: Issue
  sessionId: String!
}

type PublishSchemaPayload {
  clientMutationId: String
  sessionId: String!
}

type Query {
  clients(after: String before: String first: PaginationAmount last: PaginationAmount order_by: ClientSort where: ClientFilter): ClientConnection
  environmentById(id: ID!): Environment!
  environmentByName(name: String!): Environment!
  environments(after: String before: String first: PaginationAmount last: PaginationAmount order_by: EnvironmentSort where: EnvironmentFilter): EnvironmentConnection
  environmentsById(ids: [ID!]! order_by: EnvironmentSort): [Environment!]!
  environmentsByName(names: [String!]! order_by: EnvironmentSort): [Environment!]!
  queryDocumentByHash(environmentName: String! hash: String! schemaName: String!): QueryDocument
  schemaById(id: ID!): Schema!
  schemaByName(name: String!): Schema!
  schemas(after: String before: String first: PaginationAmount last: PaginationAmount order_by: SchemaSort where: SchemaFilter): SchemaConnection
  schemasById(ids: [ID!]! order_by: SchemaSort): [Schema!]!
  schemasByName(names: [String!]! order_by: SchemaSort): [Schema!]!
  schemaVersionByExternalId(externalId: String!): SchemaVersion
  schemaVersionById(id: ID!): SchemaVersion!
  schemaVersions(after: String before: String first: PaginationAmount last: PaginationAmount order_by: SchemaVersionSort where: SchemaVersionFilter): SchemaVersionConnection
  schemaVersionsById(ids: [ID!]! order_by: SchemaVersionSort): [SchemaVersion!]!
}

type QueryDocument {
  externalHashes: [DocumentHash]!
  hash: DocumentHash!
  id: ID!
  published: DateTime!
  schemaId: ID!
  sourceText: String!
}

type Schema implements Node {
  description: String
  id: ID!
  name: String!
  versions(after: String before: String first: PaginationAmount last: PaginationAmount order_by: SchemaVersionSort where: SchemaVersionFilter): SchemaVersionConnection
}

"A connection to a list of items."
type SchemaConnection {
  "A list of edges."
  edges: [SchemaEdge!]
  "A flattened list of the nodes."
  nodes: [Schema!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type SchemaEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Schema!
}

type SchemaPublishReport {
  environment: Environment!
  environmentId: ID!
  id: ID!
  issues: [Issue!]!
  published: DateTime!
  schemaVersion: SchemaVersion!
  schemaVersionId: ID!
  state: PublishState!
}

type SchemaVersion implements Node {
  externalId: String!
  hash: DocumentHash!
  id: ID!
  published: DateTime!
  publishReportByEnvironment(environmentName: String!): SchemaPublishReport
  publishReports: [SchemaPublishReport!]!
  schema: Schema!
  sourceText: String!
  tags: [Tag!]!
}

"A connection to a list of items."
type SchemaVersionConnection {
  "A list of edges."
  edges: [SchemaVersionEdge!]
  "A flattened list of the nodes."
  nodes: [SchemaVersion!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type SchemaVersionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SchemaVersion!
}

type Subscription {
  onPublishSchema(sessionId: String!): PublishDocumentEvent!
}

type Tag {
  equals: Boolean!
  key: String!
  published: DateTime!
  value: String!
}

type UpdateEnvironmentPayload {
  clientMutationId: String
  environment: Environment!
}

type UpdateSchemaPayload {
  clientMutationId: String
  schema: Schema!
}

input ClientFilter {
  AND: [ClientFilter!]
  description: String
  description_contains: String
  description_ends_with: String
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_gt: ID
  id_not_gte: ID
  id_not_in: [ID!]
  id_not_lt: ID
  id_not_lte: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_in: [String!]
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  OR: [ClientFilter!]
  schemaId: ID
  schemaId_gt: ID
  schemaId_gte: ID
  schemaId_in: [ID!]
  schemaId_lt: ID
  schemaId_lte: ID
  schemaId_not: ID
  schemaId_not_gt: ID
  schemaId_not_gte: ID
  schemaId_not_in: [ID!]
  schemaId_not_lt: ID
  schemaId_not_lte: ID
}

input ClientSort {
  description: SortOperationKind
  id: SortOperationKind
  name: SortOperationKind
  schemaId: SortOperationKind
}

input CreateClientInput {
  clientMutationId: String
  description: String
  name: String!
  schemaId: ID!
}

input CreateEnvironmentInput {
  clientMutationId: String
  description: String
  name: String!
}

input CreateSchemaInput {
  clientMutationId: String
  description: String
  name: String!
}

input DocumentHashFilter {
  algorithm: String
  algorithm_contains: String
  algorithm_ends_with: String
  algorithm_in: [String!]
  algorithm_not: String
  algorithm_not_contains: String
  algorithm_not_ends_with: String
  algorithm_not_in: [String!]
  algorithm_not_starts_with: String
  algorithm_starts_with: String
  AND: [DocumentHashFilter!]
  format: HashFormat
  format_gt: HashFormat
  format_gte: HashFormat
  format_in: [HashFormat!]
  format_lt: HashFormat
  format_lte: HashFormat
  format_not: HashFormat
  format_not_gt: HashFormat
  format_not_gte: HashFormat
  format_not_in: [HashFormat!]
  format_not_lt: HashFormat
  format_not_lte: HashFormat
  hash: String
  hash_contains: String
  hash_ends_with: String
  hash_in: [String!]
  hash_not: String
  hash_not_contains: String
  hash_not_ends_with: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_starts_with: String
  OR: [DocumentHashFilter!]
}

input DocumentHashSort {
  algorithm: SortOperationKind
  format: SortOperationKind
  hash: SortOperationKind
}

input EnvironmentFilter {
  AND: [EnvironmentFilter!]
  description: String
  description_contains: String
  description_ends_with: String
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_gt: ID
  id_not_gte: ID
  id_not_in: [ID!]
  id_not_lt: ID
  id_not_lte: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_in: [String!]
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  OR: [EnvironmentFilter!]
}

input EnvironmentSort {
  description: SortOperationKind
  id: SortOperationKind
  name: SortOperationKind
}

input MarkClientPublishedInput {
  clientMutationId: String
  environmentName: String!
  externalId: String!
  schemaName: String!
}

input MarkSchemaPublishedInput {
  clientMutationId: String
  environmentName: String!
  externalId: String!
  schemaName: String!
}

input PublishClientInput {
  clientMutationId: String
  clientName: String!
  environmentName: String!
  externalId: String
  files: [QueryFileInput!]!
  format: QueryFileFormat!
  schemaName: String!
  tags: [TagInput!]
}

input PublishSchemaInput {
  clientMutationId: String
  environmentName: String!
  externalId: String
  schemaName: String!
  sourceText: String
  tags: [TagInput!]
}

input QueryFileInput {
  name: String!
  sourceText: String!
}

input SchemaFilter {
  AND: [SchemaFilter!]
  description: String
  description_contains: String
  description_ends_with: String
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_gt: ID
  id_not_gte: ID
  id_not_in: [ID!]
  id_not_lt: ID
  id_not_lte: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_in: [String!]
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  OR: [SchemaFilter!]
}

input SchemaSort {
  description: SortOperationKind
  id: SortOperationKind
  name: SortOperationKind
}

input SchemaVersionFilter {
  AND: [SchemaVersionFilter!]
  externalId: String
  externalId_contains: String
  externalId_ends_with: String
  externalId_in: [String!]
  externalId_not: String
  externalId_not_contains: String
  externalId_not_ends_with: String
  externalId_not_in: [String!]
  externalId_not_starts_with: String
  externalId_starts_with: String
  hash: DocumentHashFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_gt: ID
  id_not_gte: ID
  id_not_in: [ID!]
  id_not_lt: ID
  id_not_lte: ID
  OR: [SchemaVersionFilter!]
  published: DateTime
  published_gt: DateTime
  published_gte: DateTime
  published_in: [DateTime!]
  published_lt: DateTime
  published_lte: DateTime
  published_not: DateTime
  published_not_gt: DateTime
  published_not_gte: DateTime
  published_not_in: [DateTime!]
  published_not_lt: DateTime
  published_not_lte: DateTime
  schemaId: ID
  schemaId_gt: ID
  schemaId_gte: ID
  schemaId_in: [ID!]
  schemaId_lt: ID
  schemaId_lte: ID
  schemaId_not: ID
  schemaId_not_gt: ID
  schemaId_not_gte: ID
  schemaId_not_in: [ID!]
  schemaId_not_lt: ID
  schemaId_not_lte: ID
  tags_all: TagFilter
  tags_any: Boolean
  tags_none: TagFilter
  tags_some: TagFilter
}

input SchemaVersionSort {
  externalId: SortOperationKind
  hash: DocumentHashSort
  id: SortOperationKind
  published: SortOperationKind
  schemaId: SortOperationKind
}

input TagFilter {
  AND: [TagFilter!]
  key: String
  key_contains: String
  key_ends_with: String
  key_in: [String!]
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  OR: [TagFilter!]
  published: DateTime
  published_gt: DateTime
  published_gte: DateTime
  published_in: [DateTime!]
  published_lt: DateTime
  published_lte: DateTime
  published_not: DateTime
  published_not_gt: DateTime
  published_not_gte: DateTime
  published_not_in: [DateTime!]
  published_not_lt: DateTime
  published_not_lte: DateTime
  value: String
  value_contains: String
  value_ends_with: String
  value_in: [String!]
  value_not: String
  value_not_contains: String
  value_not_ends_with: String
  value_not_in: [String!]
  value_not_starts_with: String
  value_starts_with: String
}

input TagInput {
  key: String!
  value: String!
}

input UpdateEnvironmentInput {
  clientMutationId: String
  description: String
  id: ID!
  name: String!
}

input UpdateSchemaInput {
  clientMutationId: String
  description: String
  id: ID!
  name: String!
}

enum HashFormat {
  BASE64
  HEX
}

enum IssueType {
  INFORMATION
  WARNING
  ERROR
}

enum PublishState {
  REJECTED
  PUBLISHED
}

enum QueryFileFormat {
  GRAPHQL
  RELAY
}

enum ResolutionType {
  NONE
  OPEN
  FIXED
  WONTFIXED
  CANNOTBEFIXED
}

enum SortOperationKind {
  ASC
  DESC
}

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
scalar ID

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

scalar PaginationAmount

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
