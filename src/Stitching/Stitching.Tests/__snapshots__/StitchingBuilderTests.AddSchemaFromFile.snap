type Query {
  contract(contractId: ID!): Contract @delegate(schema: "contract")
  contracts(customerId: ID!): [Contract!] @delegate(schema: "contract")
  customer(id: ID!): Customer @delegate(schema: "customer")
  consultant(id: ID!): Consultant @delegate(schema: "customer")
  customerOrConsultant(id: ID!): CustomerOrConsultant @delegate(schema: "customer")
}

interface Contract @source(name: "Contract", schema: "contract") {
  id: ID!
}

type LifeInsuranceContract implements Contract @source(name: "LifeInsuranceContract", schema: "contract") {
  id: ID!
  premium: Float
}

type SomeOtherContract implements Contract @source(name: "SomeOtherContract", schema: "contract") {
  id: ID!
  expiryDate: DateTime
}

type Customer @source(name: "Customer", schema: "customer") {
  id: ID!
  name: String!
  consultant: Consultant
}

type Consultant @source(name: "Consultant", schema: "customer") {
  id: ID!
  name: String!
}

union CustomerOrConsultant @source(name: "CustomerOrConsultant", schema: "customer") = Customer | Consultant
