schema {
  query: Query
}

"An enum describing what kind of type a given __Type is"
enum __TypeKind {
  "Indicates this type is a scalar."
  SCALAR
  "Indicates this type is an object. `fields` and `interfaces` are valid fields."
  OBJECT
  "Indicates this type is an interface. `fields` and `possibleTypes` are valid fields."
  INTERFACE
  "Indicates this type is a union. `possibleTypes` is a valid field."
  UNION
  "Indicates this type is an enum. `enumValues` is a valid field."
  ENUM
  "Indicates this type is an input object. `inputFields` is a valid field."
  INPUT_OBJECT
  "Indicates this type is a list. `ofType` is a valid field."
  LIST
  "Indicates this type is a non-null. `ofType` is a valid field."
  NON_NULL
}

type __Field {
  name: String!
  description: String
  args: [__InputValue!]!
  type: __Type!
  isDeprecated: Boolean!
  deprecationReason: String
}

type Query {
  Questions(skip: Int = 0 first: Int = 10): [Question]
}

"A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations."
type __Schema {
  "A list of all types supported by this server."
  types: [__Type!]!
  "The type that query operations will be rooted at."
  queryType: __Type!
  "If this server supports mutation, the type that mutation operations will be rooted at."
  mutationType: __Type
  "'A list of all directives supported by this server."
  directives: [__Directive!]!
  "'If this server support subscription, the type that subscription operations will be rooted at."
  subscriptionType: __Type
}

type __Type {
  kind: __TypeKind!
  name: String
  description: String
  fields(includeDeprecated: Boolean = false): [__Field!]
  interfaces: [__Type!]
  possibleTypes: [__Type!]
  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
  inputFields: [__InputValue!]
  ofType: __Type
}

type __EnumValue {
  name: String!
  description: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"An enum describing valid locations where a directive can be placed"
enum __DirectiveLocation {
  "Indicates the directive is valid on queries."
  QUERY
  "Indicates the directive is valid on mutations."
  MUTATION
  "Indicates the directive is valid on fields."
  FIELD
  "Indicates the directive is valid on fragment definitions."
  FRAGMENT_DEFINITION
  "Indicates the directive is valid on fragment spreads."
  FRAGMENT_SPREAD
  "Indicates the directive is valid on inline fragments."
  INLINE_FRAGMENT
  "Indicates the directive is valid on a schema SDL definition."
  SCHEMA
  "Indicates the directive is valid on a scalar SDL definition."
  SCALAR
  "Indicates the directive is valid on an object SDL definition."
  OBJECT
  "Indicates the directive is valid on a field SDL definition."
  FIELD_DEFINITION
  "Indicates the directive is valid on a field argument SDL definition."
  ARGUMENT_DEFINITION
  "Indicates the directive is valid on an interface SDL definition."
  INTERFACE
  "Indicates the directive is valid on an union SDL definition."
  UNION
  "Indicates the directive is valid on an enum SDL definition."
  ENUM
  "Indicates the directive is valid on an enum value SDL definition."
  ENUM_VALUE
  "Indicates the directive is valid on an input object SDL definition."
  INPUT_OBJECT
  "Indicates the directive is valid on an input object field SDL definition."
  INPUT_FIELD_DEFINITION
}

"Built-in String"
scalar String

"Built-in Int"
scalar Int

type Question {
  id: ID
  question: String
  userId: Int
}

"Built-in ID"
scalar ID

type __InputValue {
  name: String!
  description: String
  type: __Type!
  defaultValue: String
}

"Built-in Boolean"
scalar Boolean

type __Directive {
  name: String
  description: String
  locations: [__DirectiveLocation!]
  args: [__InputValue!]!
  onOperation: Boolean @deprecated(reason: "Use `locations`.")
  onFragment: Boolean @deprecated(reason: "Use `locations`.")
  onField: Boolean @deprecated(reason: "Use `locations`.")
}
