type Query {
  customer(id: ID!): Customer @schema(name: "customer") @delegate
  customerOrConsultant(id: ID!): CustomerOrConsultant
    @schema(name: "customer")
    @delegate
  contracts(id: ID!): [Contract!]
    @schema(name: "contract")
    @delegate(path: "contracts(customerId:$arguments:id)")
  consultantName: String!
    @schema(name: "customer")
    @delegate(path: "customer(id:\"Q3VzdG9tZXIteDE=\").consultant.name")
  consultant: Consultant
    @schema(name: "customer")
    @delegate(path: "customer(id:\"Q3VzdG9tZXIteDE=\").consultant")
}

type Customer {
  id: ID!
  name: String!
  consultant: Consultant
  contracts: [Contract!]
    @schema(name: "contract")
    @delegate(path: "contracts(customerId:$fields:id)")
  contractIds: [ID!]
    @schema(name: "contract")
    @delegate(path: "contracts(customerId:$fields:id).id")
  foo: String @dependentOn(fields: ["id", "name"])
}

type Consultant {
  id: ID!
  name: String!
}

interface Contract {
  id: ID!
}

type LifeInsuranceContract implements Contract {
  id: ID!
  premium: Float
}

type SomeOtherContract implements Contract {
  id: ID!
  expiryDate: DateTime
}

union CustomerOrConsultant = Customer | Consultant
