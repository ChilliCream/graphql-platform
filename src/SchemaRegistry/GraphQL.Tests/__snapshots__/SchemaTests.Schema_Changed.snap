schema {
  query: Query
}

type Environment {
  description: String
  id: Uuid!
  name: String!
}

"A connection to a list of items."
type EnvironmentConnection {
  "A list of edges."
  edges: [EnvironmentEdge!]
  "A flattened list of the nodes."
  nodes: [Environment]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type EnvironmentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Environment
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Query {
  environments(after: String before: String first: PaginationAmount last: PaginationAmount order_by: EnvironmentSort where: EnvironmentFilter): EnvironmentConnection
}

input EnvironmentFilter {
  AND: [EnvironmentFilter!]
  description: String
  description_contains: String
  description_ends_with: String
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String]
  description_not_starts_with: String
  description_starts_with: String
  id: Uuid
  id_gt: Uuid
  id_gte: Uuid
  id_in: [Uuid!]
  id_lt: Uuid
  id_lte: Uuid
  id_not: Uuid
  id_not_gt: Uuid
  id_not_gte: Uuid
  id_not_in: [Uuid!]
  id_not_lt: Uuid
  id_not_lte: Uuid
  name: String
  name_contains: String
  name_ends_with: String
  name_in: [String!]
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  OR: [EnvironmentFilter!]
}

input EnvironmentSort {
  description: SortOperationKind
  id: SortOperationKind
  name: SortOperationKind
}

enum SortOperationKind {
  ASC
  DESC
}

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

scalar PaginationAmount

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

scalar Uuid
