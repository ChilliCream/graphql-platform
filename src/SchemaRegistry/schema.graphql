type Query {
  schemas: [Schema!]!
  schema(id: ID!): Schema
}

type Mutation {
  addSchema(input: AddSchemaInput): AddSchemaPayload
}

type Schema implements Node {
  id: ID!
  name: String!
  description: String
  versions: [SchemaVersion!]!
}

type SchemaVersion implements Node {
  id: ID!
  published: DateTime!
  sourceText: String!
  schema: Schema!
  environments: [EnvironmentInfo!]!
  tags: [Tag!]!
}

type EnvironmentInfo implements Node {
  id: ID!
  published: DateTime!
  state: PublishState!
  environment: [Environment!]!
  issues: [Issue!]!
  schemaVersion: s!
  documentVersion: [DocumentVersion!]!
}

type Issue implements Node {
  id: ID!
  code: String!
  message: String!
  type: IssueType!
  resolution: ResolutionType!
  schemaVersion: SchemaVersion
  documentVersion: [DocumentVersion!]!
}

type Tag {
  key: String!
  value: String!
  published: DateTime!
}

type Environment implements Node {
  id: ID!
  name: String!
  description: String
  policy: Policy!
  schemaVersions: [SchemaVersion!]!
  documentVersion: [DocumentVersion!]!
}

type Client implements Node {
  id: ID!
  name: String!
  description: String
  schema: Schema!
  clientVersions: [ClientVersion!]!
}

type ClientVersion implements Node {
  id: ID!
  published: DateTime!
  schema: Schema!
  environments: [EnvironmentInfo!]!
  tags: [Tag!]!
}

interface Node {
  id: ID!
}

enum PublishState {
  REJECTED
  PUBLISHED
}

enum IssueType {
  INFORMATION
  WARNING
  ERROR
}

enum ResolutionType {
  OPEN
  FIXED
  WONTFIX
}
