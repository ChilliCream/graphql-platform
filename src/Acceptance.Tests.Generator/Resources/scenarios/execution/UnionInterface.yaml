scenario: "Execute: Union and intersection types"
background:
  schema: |
    interface Named {
      name: String
    }
    
    type Dog implements Named {
      name: String
      barks: Boolean
    }
    
    type Cat implements Named {
      name: String
      meows: Boolean
    }
    
    union Pet = Dog | Cat
    
    type Person implements Named {
      name: String
      pets: [Pet]
      friends: [Named]
    }
    
    schema {
      query: Person
    }
  test-data:
    bob:
      type: Person
      name: Bob
      pets:
        - type: Cat
          name: Garfield
          meows: false
        - type: Dog
          name: Odie
          barks: true
      friends:
        - type: Person
          name: Liz
        - type: Dog
          name: Odie
          barks: true

tests:
  - name: introspect on union and intersection types
    given:
      query: |
        {
          Named: __type(name: "Named") {
            kind
            name
            fields { name }
            interfaces { name }
            possibleTypes { name }
            enumValues { name }
            inputFields { name }
          }
          Pet: __type(name: "Pet") {
            kind
            name
            fields { name }
            interfaces { name }
            possibleTypes { name }
            enumValues { name }
            inputFields { name }
          }
        }
    when:
      execute: true
    then:
      data: 
        Named:
          kind: "INTERFACE"
          name: "Named"
          fields:
            - name: "name"
          interfaces: null
          possibleTypes:
            - name: "Cat"
            - name: "Dog"
            - name: "Person"
          enumValues: null
          inputFields: null
        Pet:
          kind: "UNION"
          name: "Pet"
          fields: null
          interfaces: null
          possibleTypes:
            - name: "Dog"
            - name: "Cat"
          enumValues: null
          inputFields: null
  
  - name: executes using union types
    given:
      query: |
        {
          __typename
          name
          pets {
            __typename
            name
            barks
            meows
          }
        }
    when:
      execute:
        validate-query: false
        test-value: bob
    then:
      data: 
        __typename: "Person"
        name: "Bob"
        pets:
          - __typename: "Cat"
            name: "Garfield"
            meows: false
          - __typename: "Dog"
            name: "Odie"
            barks: true
              
  - name: executes union types with inline fragments
    given:
      query: |
        {
          __typename
          name
          pets {
            __typename
            ... on Dog {
              name
              barks
            }
            ... on Cat {
              name
              meows
            }
          }
        }
    when:
      execute:
        test-value: bob
    then:
      data: 
        __typename: "Person"
        name: "Bob"
        pets:
          - __typename: "Cat"
            name: "Garfield"
            meows: false
          - __typename: "Dog"
            name: "Odie"
            barks: true

  - name: executes using interface types
    given:
      query: |
        {
          __typename
          name
          friends {
            __typename
            name
            barks
            meows
          }
        }
    when:
      execute:
        validate-query: false
        test-value: bob
    then:
      data:
        __typename: "Person"
        name: "Bob"
        friends:
          - __typename: "Person"
            name: "Liz"
          - __typename: "Dog"
            name: "Odie"
            barks: true

  - name: executes interface types with inline fragments
    given:
      query: |
        {
          __typename
          name
          friends {
            __typename
            name
            ... on Dog {
              barks
            }
            ... on Cat {
              meows
            }
          }
        }
    when:
      execute:
        test-value: bob
    then:
      data:
        __typename: "Person"
        name: "Bob"
        friends: 
          - __typename: "Person"
            name: "Liz"
          - __typename: "Dog"
            name: "Odie"
            barks: true

  - name: allows fragment conditions to be abstract types
    given:
      query: |
        {
          __typename
          name
          pets { ...PetFields }
          friends { ...FriendFields }
        }

        fragment PetFields on Pet {
          __typename
          ... on Dog {
            name
            barks
          }
          ... on Cat {
            name
            meows
          }
        }

        fragment FriendFields on Named {
          __typename
          name
          ... on Dog {
            barks
          }
          ... on Cat {
            meows
          }
        }
    when:
      execute:
        test-value: bob
    then:
      data:
        __typename: "Person"
        name: "Bob"
        pets:
          - {__typename: "Cat", name: "Garfield", meows: false}
          - {__typename: "Dog", name: "Odie", barks: true}
        friends:
          - {__typename: "Person", name: "Liz"}
          - {__typename: "Dog", name: "Odie", barks: true}