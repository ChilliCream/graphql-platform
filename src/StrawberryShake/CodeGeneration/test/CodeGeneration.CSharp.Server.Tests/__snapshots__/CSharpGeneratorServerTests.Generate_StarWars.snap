{
  "Documents": [
    {
      "Name": "StarWarsClient",
      "SourceText": "// <auto-generated/>\n#nullable enable\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    // StrawberryShake.CodeGeneration.CSharp.Generators.DependencyInjectionGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public static partial class StarWarsClientServiceCollectionExtensions\n    {\n        public static global::StrawberryShake.IClientBuilder<global::StrawberryShake.Generated.State.StarWarsClientStoreAccessor> AddStarWarsClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly, global::StrawberryShake.Generated.StarWarsClientProfileKind profile = global::StrawberryShake.Generated.StarWarsClientProfileKind.Default)\n        {\n            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>\n            {\n                if (profile == global::StrawberryShake.Generated.StarWarsClientProfileKind.Default)\n                {\n                    ConfigureClientDefault(sp, serviceCollection, strategy);\n                }\n                else if (profile == global::StrawberryShake.Generated.StarWarsClientProfileKind.WebSocket)\n                {\n                    ConfigureClientWebSocket(sp, serviceCollection, strategy);\n                }\n\n                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));\n            });\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::StrawberryShake.Generated.State.StarWarsClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Generated.GetPeopleQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Generated.StarWarsClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Generated.IStarWarsClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\n            return new global::StrawberryShake.ClientBuilder<global::StrawberryShake.Generated.State.StarWarsClientStoreAccessor>(\"StarWarsClient\", services, serviceCollection);\n        }\n\n        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\n        {\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>\n            {\n                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);\n                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient(\"StarWarsClient\"));\n            });\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShake.Generated.State.PersonEntity, global::StrawberryShake.Generated.GetPeople_People_Nodes_Person>, global::StrawberryShake.Generated.State.GetPeople_People_Nodes_PersonFromPersonEntityMapper>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShake.Generated.IGetPeopleResult>, global::StrawberryShake.Generated.State.GetPeopleResultFactory>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShake.Generated.IGetPeopleResult>>(sp));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Generated.IGetPeopleQuery>(sp));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShake.Generated.IGetPeopleResult>, global::StrawberryShake.Generated.State.GetPeopleBuilder>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::StrawberryShake.Generated.IGetPeopleResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::StrawberryShake.Generated.IGetPeopleResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShake.Generated.IGetPeopleResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Generated.GetPeopleQuery>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Generated.IGetPeopleQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Generated.GetPeopleQuery>(sp));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::StrawberryShake.Generated.State.StarWarsClientEntityIdFactory>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Generated.StarWarsClient>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Generated.IStarWarsClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Generated.StarWarsClient>(sp));\n            return services;\n        }\n\n        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientWebSocket(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\n        {\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>\n            {\n                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);\n                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync(\"StarWarsClient\", ct));\n            });\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShake.Generated.State.PersonEntity, global::StrawberryShake.Generated.GetPeople_People_Nodes_Person>, global::StrawberryShake.Generated.State.GetPeople_People_Nodes_PersonFromPersonEntityMapper>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShake.Generated.IGetPeopleResult>, global::StrawberryShake.Generated.State.GetPeopleResultFactory>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShake.Generated.IGetPeopleResult>>(sp));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Generated.IGetPeopleQuery>(sp));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShake.Generated.IGetPeopleResult>, global::StrawberryShake.Generated.State.GetPeopleBuilder>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::StrawberryShake.Generated.IGetPeopleResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::StrawberryShake.Generated.IGetPeopleResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShake.Generated.IGetPeopleResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Generated.GetPeopleQuery>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Generated.IGetPeopleQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Generated.GetPeopleQuery>(sp));\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::StrawberryShake.Generated.State.StarWarsClientEntityIdFactory>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Generated.StarWarsClient>(services);\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Generated.IStarWarsClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Generated.StarWarsClient>(sp));\n            return services;\n        }\n\n        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable\n        {\n            private readonly System.IServiceProvider _provider;\n            public ClientServiceProvider(System.IServiceProvider provider)\n            {\n                _provider = provider;\n            }\n\n            public object? GetService(System.Type serviceType)\n            {\n                return _provider.GetService(serviceType);\n            }\n\n            public void Dispose()\n            {\n                if (_provider is System.IDisposable d)\n                {\n                    d.Dispose();\n                }\n            }\n        }\n    }\n}\n\nnamespace StrawberryShake.Generated\n{\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class GetPeopleResult : global::System.IEquatable<GetPeopleResult>, IGetPeopleResult\n    {\n        public GetPeopleResult(global::StrawberryShake.Generated.IGetPeople_People? people)\n        {\n            People = people;\n        }\n\n        /// <summary>\n        /// Gets access to all the people known to this service.\n        /// </summary>\n        public global::StrawberryShake.Generated.IGetPeople_People? People { get; }\n\n        public virtual global::System.Boolean Equals(GetPeopleResult? other)\n        {\n            if (ReferenceEquals(null, other))\n            {\n                return false;\n            }\n\n            if (ReferenceEquals(this, other))\n            {\n                return true;\n            }\n\n            if (other.GetType() != GetType())\n            {\n                return false;\n            }\n\n            return (((People is null && other.People is null) || People != null && People.Equals(other.People)));\n        }\n\n        public override global::System.Boolean Equals(global::System.Object? obj)\n        {\n            if (ReferenceEquals(null, obj))\n            {\n                return false;\n            }\n\n            if (ReferenceEquals(this, obj))\n            {\n                return true;\n            }\n\n            if (obj.GetType() != GetType())\n            {\n                return false;\n            }\n\n            return Equals((GetPeopleResult)obj);\n        }\n\n        public override global::System.Int32 GetHashCode()\n        {\n            unchecked\n            {\n                int hash = 5;\n                if (People != null)\n                {\n                    hash ^= 397 * People.GetHashCode();\n                }\n\n                return hash;\n            }\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator\n    /// <summary>\n    /// A connection to a list of items.\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class GetPeople_People_PersonConnection : global::System.IEquatable<GetPeople_People_PersonConnection>, IGetPeople_People_PersonConnection\n    {\n        public GetPeople_People_PersonConnection(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.Generated.IGetPeople_People_Nodes?>? nodes)\n        {\n            Nodes = nodes;\n        }\n\n        /// <summary>\n        /// A flattened list of the nodes.\n        /// </summary>\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.Generated.IGetPeople_People_Nodes?>? Nodes { get; }\n\n        public virtual global::System.Boolean Equals(GetPeople_People_PersonConnection? other)\n        {\n            if (ReferenceEquals(null, other))\n            {\n                return false;\n            }\n\n            if (ReferenceEquals(this, other))\n            {\n                return true;\n            }\n\n            if (other.GetType() != GetType())\n            {\n                return false;\n            }\n\n            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));\n        }\n\n        public override global::System.Boolean Equals(global::System.Object? obj)\n        {\n            if (ReferenceEquals(null, obj))\n            {\n                return false;\n            }\n\n            if (ReferenceEquals(this, obj))\n            {\n                return true;\n            }\n\n            if (obj.GetType() != GetType())\n            {\n                return false;\n            }\n\n            return Equals((GetPeople_People_PersonConnection)obj);\n        }\n\n        public override global::System.Int32 GetHashCode()\n        {\n            unchecked\n            {\n                int hash = 5;\n                if (Nodes != null)\n                {\n                    foreach (var Nodes_elm in Nodes)\n                    {\n                        if (Nodes_elm != null)\n                        {\n                            hash ^= 397 * Nodes_elm.GetHashCode();\n                        }\n                    }\n                }\n\n                return hash;\n            }\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class GetPeople_People_Nodes_Person : global::System.IEquatable<GetPeople_People_Nodes_Person>, IGetPeople_People_Nodes_Person\n    {\n        public GetPeople_People_Nodes_Person(global::System.String name, global::System.String email, global::System.Boolean isOnline, global::System.DateTimeOffset lastSeen)\n        {\n            Name = name;\n            Email = email;\n            IsOnline = isOnline;\n            LastSeen = lastSeen;\n        }\n\n        public global::System.String Name { get; }\n\n        public global::System.String Email { get; }\n\n        public global::System.Boolean IsOnline { get; }\n\n        public global::System.DateTimeOffset LastSeen { get; }\n\n        public virtual global::System.Boolean Equals(GetPeople_People_Nodes_Person? other)\n        {\n            if (ReferenceEquals(null, other))\n            {\n                return false;\n            }\n\n            if (ReferenceEquals(this, other))\n            {\n                return true;\n            }\n\n            if (other.GetType() != GetType())\n            {\n                return false;\n            }\n\n            return (Name.Equals(other.Name)) && Email.Equals(other.Email) && IsOnline == other.IsOnline && LastSeen.Equals(other.LastSeen);\n        }\n\n        public override global::System.Boolean Equals(global::System.Object? obj)\n        {\n            if (ReferenceEquals(null, obj))\n            {\n                return false;\n            }\n\n            if (ReferenceEquals(this, obj))\n            {\n                return true;\n            }\n\n            if (obj.GetType() != GetType())\n            {\n                return false;\n            }\n\n            return Equals((GetPeople_People_Nodes_Person)obj);\n        }\n\n        public override global::System.Int32 GetHashCode()\n        {\n            unchecked\n            {\n                int hash = 5;\n                hash ^= 397 * Name.GetHashCode();\n                hash ^= 397 * Email.GetHashCode();\n                hash ^= 397 * IsOnline.GetHashCode();\n                hash ^= 397 * LastSeen.GetHashCode();\n                return hash;\n            }\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial interface IGetPeopleResult\n    {\n        /// <summary>\n        /// Gets access to all the people known to this service.\n        /// </summary>\n        public global::StrawberryShake.Generated.IGetPeople_People? People { get; }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator\n    /// <summary>\n    /// A connection to a list of items.\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial interface IGetPeople_People\n    {\n        /// <summary>\n        /// A flattened list of the nodes.\n        /// </summary>\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.Generated.IGetPeople_People_Nodes?>? Nodes { get; }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator\n    /// <summary>\n    /// A connection to a list of items.\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial interface IGetPeople_People_PersonConnection : IGetPeople_People\n    {\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial interface IGetPeople_People_Nodes\n    {\n        public global::System.String Name { get; }\n\n        public global::System.String Email { get; }\n\n        public global::System.Boolean IsOnline { get; }\n\n        public global::System.DateTimeOffset LastSeen { get; }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial interface IGetPeople_People_Nodes_Person : IGetPeople_People_Nodes\n    {\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationDocumentGenerator\n    /// <summary>\n    /// Represents the operation service of the GetPeople GraphQL operation\n    /// <code>\n    /// query GetPeople {\n    ///   people(order_by: { name: ASC }) {\n    ///     __typename\n    ///     nodes {\n    ///       __typename\n    ///       name\n    ///       email\n    ///       isOnline\n    ///       lastSeen\n    ///       ... on Person {\n    ///         id\n    ///       }\n    ///     }\n    ///   }\n    /// }\n    /// </code>\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class GetPeopleQueryDocument : global::StrawberryShake.IDocument\n    {\n        private GetPeopleQueryDocument()\n        {\n        }\n\n        public static GetPeopleQueryDocument Instance { get; } = new GetPeopleQueryDocument();\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"22e3b8ba92883af43c70567c7d1cf143\");\n        public override global::System.String ToString()\n        {\n#if NETCOREAPP3_1_OR_GREATER\n        return global::System.Text.Encoding.UTF8.GetString(Body);\n#else\n            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\n#endif\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceGenerator\n    /// <summary>\n    /// Represents the operation service of the GetPeople GraphQL operation\n    /// <code>\n    /// query GetPeople {\n    ///   people(order_by: { name: ASC }) {\n    ///     __typename\n    ///     nodes {\n    ///       __typename\n    ///       name\n    ///       email\n    ///       isOnline\n    ///       lastSeen\n    ///       ... on Person {\n    ///         id\n    ///       }\n    ///     }\n    ///   }\n    /// }\n    /// </code>\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class GetPeopleQuery : global::StrawberryShake.Generated.IGetPeopleQuery\n    {\n        private readonly global::StrawberryShake.IOperationExecutor<IGetPeopleResult> _operationExecutor;\n        public GetPeopleQuery(global::StrawberryShake.IOperationExecutor<IGetPeopleResult> operationExecutor)\n        {\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\n        }\n\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPeopleResult);\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPeopleResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\n        {\n            var request = CreateRequest();\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\n        }\n\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPeopleResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\n        {\n            var request = CreateRequest();\n            return _operationExecutor.Watch(request, strategy);\n        }\n\n        private global::StrawberryShake.OperationRequest CreateRequest()\n        {\n            return CreateRequest(null);\n        }\n\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\n        {\n            return new global::StrawberryShake.OperationRequest(id: GetPeopleQueryDocument.Instance.Hash.Value, name: \"GetPeople\", document: GetPeopleQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\n        }\n\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\n        {\n            return CreateRequest();\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceInterfaceGenerator\n    /// <summary>\n    /// Represents the operation service of the GetPeople GraphQL operation\n    /// <code>\n    /// query GetPeople {\n    ///   people(order_by: { name: ASC }) {\n    ///     __typename\n    ///     nodes {\n    ///       __typename\n    ///       name\n    ///       email\n    ///       isOnline\n    ///       lastSeen\n    ///       ... on Person {\n    ///         id\n    ///       }\n    ///     }\n    ///   }\n    /// }\n    /// </code>\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial interface IGetPeopleQuery : global::StrawberryShake.IOperationRequestFactory\n    {\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPeopleResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPeopleResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientGenerator\n    /// <summary>\n    /// Represents the StarWarsClient GraphQL client\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class StarWarsClient : global::StrawberryShake.Generated.IStarWarsClient\n    {\n        private readonly global::StrawberryShake.Generated.IGetPeopleQuery _getPeople;\n        public StarWarsClient(global::StrawberryShake.Generated.IGetPeopleQuery getPeople)\n        {\n            _getPeople = getPeople ?? throw new global::System.ArgumentNullException(nameof(getPeople));\n        }\n\n        public static global::System.String ClientName => \"StarWarsClient\";\n        public global::StrawberryShake.Generated.IGetPeopleQuery GetPeople => _getPeople;\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientInterfaceGenerator\n    /// <summary>\n    /// Represents the StarWarsClient GraphQL client\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial interface IStarWarsClient\n    {\n        global::StrawberryShake.Generated.IGetPeopleQuery GetPeople { get; }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.TransportProfileEnumGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public enum StarWarsClientProfileKind\n    {\n        Default,\n        WebSocket\n    }\n}\n\nnamespace StrawberryShake.Generated.State\n{\n    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityTypeGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"0.0.0.0\")]\n    public partial class PersonEntity\n    {\n        public PersonEntity(global::System.String name = default !, global::System.String email = default !, global::System.Boolean isOnline = default !, global::System.DateTimeOffset lastSeen = default !)\n        {\n            Name = name;\n            Email = email;\n            IsOnline = isOnline;\n            LastSeen = lastSeen;\n        }\n\n        public global::System.String Name { get; }\n\n        public global::System.String Email { get; }\n\n        public global::System.Boolean IsOnline { get; }\n\n        public global::System.DateTimeOffset LastSeen { get; }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultDataFactoryGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class GetPeopleResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShake.Generated.GetPeopleResult>\n    {\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\n        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShake.Generated.State.PersonEntity, GetPeople_People_Nodes_Person> _getPeople_People_Nodes_PersonFromPersonEntityMapper;\n        public GetPeopleResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShake.Generated.State.PersonEntity, GetPeople_People_Nodes_Person> getPeople_People_Nodes_PersonFromPersonEntityMapper)\n        {\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\n            _getPeople_People_Nodes_PersonFromPersonEntityMapper = getPeople_People_Nodes_PersonFromPersonEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPeople_People_Nodes_PersonFromPersonEntityMapper));\n        }\n\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::StrawberryShake.Generated.IGetPeopleResult);\n        public GetPeopleResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\n        {\n            if (snapshot is null)\n            {\n                snapshot = _entityStore.CurrentSnapshot;\n            }\n\n            if (dataInfo is GetPeopleResultInfo info)\n            {\n                return new GetPeopleResult(MapIGetPeople_People(info.People, snapshot));\n            }\n\n            throw new global::System.ArgumentException(\"GetPeopleResultInfo expected.\");\n        }\n\n        private global::StrawberryShake.Generated.IGetPeople_People? MapIGetPeople_People(global::StrawberryShake.Generated.State.PersonConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)\n        {\n            if (data is null)\n            {\n                return null;\n            }\n\n            IGetPeople_People returnValue = default !;\n            if (data?.__typename.Equals(\"PersonConnection\", global::System.StringComparison.Ordinal) ?? false)\n            {\n                returnValue = new GetPeople_People_PersonConnection(MapIGetPeople_People_NodesArray(data.Nodes, snapshot));\n            }\n            else\n            {\n                throw new global::System.NotSupportedException();\n            }\n\n            return returnValue;\n        }\n\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.Generated.IGetPeople_People_Nodes?>? MapIGetPeople_People_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)\n        {\n            if (list is null)\n            {\n                return null;\n            }\n\n            var persons = new global::System.Collections.Generic.List<global::StrawberryShake.Generated.IGetPeople_People_Nodes?>();\n            foreach (global::StrawberryShake.EntityId? child in list)\n            {\n                persons.Add(MapIGetPeople_People_Nodes(child, snapshot));\n            }\n\n            return persons;\n        }\n\n        private global::StrawberryShake.Generated.IGetPeople_People_Nodes? MapIGetPeople_People_Nodes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\n        {\n            if (entityId is null)\n            {\n                return null;\n            }\n\n            if (entityId.Value.Name.Equals(\"Person\", global::System.StringComparison.Ordinal))\n            {\n                return _getPeople_People_Nodes_PersonFromPersonEntityMapper.Map(snapshot.GetEntity<global::StrawberryShake.Generated.State.PersonEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());\n            }\n\n            throw new global::System.NotSupportedException();\n        }\n\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\n        {\n            return Create(dataInfo, snapshot);\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInfoGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class GetPeopleResultInfo : global::StrawberryShake.IOperationResultDataInfo\n    {\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\n        private readonly global::System.UInt64 _version;\n        public GetPeopleResultInfo(global::StrawberryShake.Generated.State.PersonConnectionData? people, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\n        {\n            People = people;\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\n            _version = version;\n        }\n\n        /// <summary>\n        /// Gets access to all the people known to this service.\n        /// </summary>\n        public global::StrawberryShake.Generated.State.PersonConnectionData? People { get; }\n\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\n        public global::System.UInt64 Version => _version;\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\n        {\n            return new GetPeopleResultInfo(People, _entityIds, version);\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.JsonResultBuilderGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class GetPeopleBuilder : global::StrawberryShake.OperationResultBuilder<global::StrawberryShake.Generated.IGetPeopleResult>\n    {\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;\n        public GetPeopleBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShake.Generated.IGetPeopleResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\n        {\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\n            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\n            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>(\"Boolean\") ?? throw new global::System.ArgumentException(\"No serializer for type `Boolean` found.\");\n            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>(\"DateTime\") ?? throw new global::System.ArgumentException(\"No serializer for type `DateTime` found.\");\n        }\n\n        protected override global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShake.Generated.IGetPeopleResult> ResultDataFactory { get; }\n\n        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)\n        {\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\n            global::StrawberryShake.Generated.State.PersonConnectionData? peopleId = default !;\n            _entityStore.Update(session =>\n            {\n                peopleId = Deserialize_IGetPeople_People(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"people\"), entityIds);\n                snapshot = session.CurrentSnapshot;\n            });\n            return new GetPeopleResultInfo(peopleId, entityIds, snapshot.Version);\n        }\n\n        private global::StrawberryShake.Generated.State.PersonConnectionData? Deserialize_IGetPeople_People(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\n        {\n            if (!obj.HasValue)\n            {\n                return null;\n            }\n\n            var typename = obj.Value.GetProperty(\"__typename\").GetString();\n            if (typename?.Equals(\"PersonConnection\", global::System.StringComparison.Ordinal) ?? false)\n            {\n                return new global::StrawberryShake.Generated.State.PersonConnectionData(typename, nodes: Update_IGetPeople_People_NodesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"nodes\"), entityIds));\n            }\n\n            throw new global::System.NotSupportedException();\n        }\n\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Update_IGetPeople_People_NodesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\n        {\n            if (!obj.HasValue)\n            {\n                return null;\n            }\n\n            var persons = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();\n            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())\n            {\n                persons.Add(Update_IGetPeople_People_NodesEntity(session, child, entityIds));\n            }\n\n            return persons;\n        }\n\n        private global::StrawberryShake.EntityId? Update_IGetPeople_People_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\n        {\n            if (!obj.HasValue)\n            {\n                return null;\n            }\n\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\n            entityIds.Add(entityId);\n            if (entityId.Name.Equals(\"Person\", global::System.StringComparison.Ordinal))\n            {\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShake.Generated.State.PersonEntity? entity))\n                {\n                    session.SetEntity(entityId, new global::StrawberryShake.Generated.State.PersonEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"email\")), Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"isOnline\")), Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"lastSeen\"))));\n                }\n                else\n                {\n                    session.SetEntity(entityId, new global::StrawberryShake.Generated.State.PersonEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"email\")), Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"isOnline\")), Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"lastSeen\"))));\n                }\n\n                return entityId;\n            }\n\n            throw new global::System.NotSupportedException();\n        }\n\n        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)\n        {\n            if (!obj.HasValue)\n            {\n                throw new global::System.ArgumentNullException();\n            }\n\n            return _stringParser.Parse(obj.Value.GetString()!);\n        }\n\n        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)\n        {\n            if (!obj.HasValue)\n            {\n                throw new global::System.ArgumentNullException();\n            }\n\n            return _booleanParser.Parse(obj.Value.GetBoolean()!);\n        }\n\n        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)\n        {\n            if (!obj.HasValue)\n            {\n                throw new global::System.ArgumentNullException();\n            }\n\n            return _dateTimeParser.Parse(obj.Value.GetString()!);\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.DataTypeGenerator\n    ///<summary>A connection to a list of items.</summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"0.0.0.0\")]\n    public partial class PersonConnectionData\n    {\n        public PersonConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? nodes = default !)\n        {\n            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));\n            Nodes = nodes;\n        }\n\n        public global::System.String __typename { get; }\n\n        ///<summary>A flattened list of the nodes.</summary>\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Nodes { get; }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class GetPeople_People_Nodes_PersonFromPersonEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShake.Generated.State.PersonEntity, GetPeople_People_Nodes_Person>\n    {\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\n        public GetPeople_People_Nodes_PersonFromPersonEntityMapper(global::StrawberryShake.IEntityStore entityStore)\n        {\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\n        }\n\n        public GetPeople_People_Nodes_Person Map(global::StrawberryShake.Generated.State.PersonEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\n        {\n            if (snapshot is null)\n            {\n                snapshot = _entityStore.CurrentSnapshot;\n            }\n\n            return new GetPeople_People_Nodes_Person(entity.Name, entity.Email, entity.IsOnline, entity.LastSeen);\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityIdFactoryGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class StarWarsClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer\n    {\n        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()\n        {Indented = false};\n        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)\n        {\n            global::System.String __typename = obj.GetProperty(\"__typename\").GetString()!;\n            return __typename switch\n            {\n                \"Person\" => ParsePersonEntityId(obj, __typename),\n                _ => throw new global::System.NotSupportedException()};\n        }\n\n        public global::System.String Format(global::StrawberryShake.EntityId entityId)\n        {\n            return entityId.Name switch\n            {\n                \"Person\" => FormatPersonEntityId(entityId),\n                _ => throw new global::System.NotSupportedException()};\n        }\n\n        private global::StrawberryShake.EntityId ParsePersonEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\n        {\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetString()!);\n        }\n\n        private global::System.String FormatPersonEntityId(global::StrawberryShake.EntityId entityId)\n        {\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\n            jsonWriter.WriteStartObject();\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\n            jsonWriter.WriteString(\"id\", (global::System.String)entityId.Value);\n            jsonWriter.WriteEndObject();\n            jsonWriter.Flush();\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\n        }\n    }\n\n    // StrawberryShake.CodeGeneration.CSharp.Generators.StoreAccessorGenerator\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"11.0.0\")]\n    public partial class StarWarsClientStoreAccessor : global::StrawberryShake.StoreAccessor\n    {\n        public StarWarsClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)\n        {\n        }\n    }\n}\n",
      "Kind": "CSharp",
      "Hash": null,
      "Path": null
    }
  ],
  "Errors": []
}
