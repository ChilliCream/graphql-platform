schema {
  query: Query
  mutation: Mutation
  subscription: Mutation
}

"Url type - string which contains valid URL (Uniform Resource Locator)."
scalar Url

"DateTime type - string which contains valid date in \"<YYYY>-<MM>-<DD> <HH>:<MM>:<SS>\" format."
scalar DateTime

"Gps type - latitude and longitude."
type Gps {
  lat: Float!
  lng: Float!
}

"Gps input - input for the GPS."
input GpsInput {
  lat: Float!
  lng: Float!
}

"Void type - accepts null only."
scalar Void

"EmailAddress type - string which contains valid email address."
scalar EmailAddress

input ListConstraintInput {
  minItems: Int
  maxItems: Int
  unique: Boolean! = false
  innerList: ListConstraintInput
}

"Upload type - represents file which was send to server.\nBy GraphQL viewpoint it is scalar type, but it must be used as input only."
scalar Upload

type SetCompanyProfileDetailsPayload {
  result: Company!
}

type ListingRemoveFigurePayload {
  subject: Listing!
}

type ListingAddFloorPlanPayload {
  subject: Listing!
  result: FloorPlan!
}

type CompanyAddBrokerPayload {
  result: Broker!
}

type ListingAddVideoPayload {
  subject: Listing!
  result: Video!
}

type CompanyAddOfficePayload {
  result: Office!
}

type ListingAddMatterportPayload {
  subject: Listing!
  result: Matterport!
}

type ListingSetStatePayload {
  subject: Listing!
  oldState: ListingState!
  newState: ListingState!
}

type SetOfficeProfileDetailsPayload {
  result: Office!
}

type MoveListingFigurePayload {
  result: Broker!
}

type ListingEditPayload {
  subject: Listing!
}

type CompanyMoveSellerPayload {
  subject: SellerStructural!
  oldParentId: ID!
  newParentId: ID!
}

type SetBrokerProfilePhotoPayload {
  result: Broker!
}

type ListingAddPayload {
  result: Listing!
}

type CompanyRemoveSellerPayload {
  parent: Seller!
}

type ListingsPayload {
  items(sort: ListingSort! = RELEVANCE limit: Int! = 10 offset: Int! = 0): [Listing!]!
  count: Int!
}

type SetBrokerProfileDetailsPayload {
  result: Broker!
}

type ListingAddPhotoPayload {
  subject: Listing!
  result: Photo!
}

type Location {
  type: String!
  viewport: Viewport!
  region_name: String!
  district_name: String
  city_name: String
  city_part_name: String
  street_name: String
}

"Root type pro read operace nemovizor API."
type Query {
  "Vyhledávání v obsahu nemovizoru\n"
  search(value: String!): [SearchResult!]!
  "Vyhledání inzerátu dle ID\n\nVrací null pokud inzerát neexistuje nebo pokud klient nemá práva na jeho zobrazení."
  listing(id: ID!): Listing
  "Vyhledávání mezi inzeráty\n"
  listings(filter: ListingFilter! = { listingType: null, serviceType: null, estateType: null, price: null, location: null, features: null, amenities: null, usableArea: null, landArea: null, constructionYear: null }): ListingsPayload!
  "Body na mapě, pro daný filtr a viewport\n"
  points(filter: ListingFilter! = { listingType: null, serviceType: null, estateType: null, price: null, location: null, features: null, amenities: null, usableArea: null, landArea: null, constructionYear: null }): [Point!]!
  "Vyhledání prodávájícího dle ID\n\nVrací null pokud prodávající neexistuje nebo pokud klient nemá práva na jeho zobrazení."
  seller(id: ID!): Seller
  brokers(filter: BrokerFilter! = { tba: null }): Boolean @deprecated(reason: "Work in progress")
  statistics: Boolean @deprecated(reason: "Work in progress")
  walletStatus: Boolean @deprecated(reason: "Work in progress")
  "Aktuálně přihlášený uživatel\n"
  currentUser: User!
}

"Abstraktní jednoduchá nabídka - obyčejná nabídka nebo aukce"
interface ListingSimple {
  listingId: ID!
  customId: ID
  url: Url!
  title(lang: Language! = CS): String
  description(lang: Language! = CS): String
  seller: Seller!
  comments: [Comment!]!
  slideshow(singleOnly: Boolean = false): [Slide!]!
  photos: [Photo!]!
  videos: [Video!]!
  floorPlans: [FloorPlan!]!
  matterport: Matterport
  published: DateTime!
  estate: Estate!
  serviceType: ServiceType!
  serviceTypeInfo: ServiceTypeInfo!
}

type Project implements Listing {
  listingId: ID!
  customId: ID
  url: Url!
  title(lang: Language! = CS): String
  description(lang: Language! = CS): String
  seller: Seller!
  comments: [Comment!]!
  slideshow(singleOnly: Boolean = false): [Slide!]!
  photos: [Photo!]!
  videos: [Video!]!
  floorPlans: [FloorPlan!]!
  matterport: Matterport
  published: DateTime!
  listings: [ProjectListing!]!
  listingCount: Int!
}

"Abstraktní nabídka - obyčejná nabídka, aukce nebo projekt"
interface Listing {
  listingId: ID!
  customId: ID
  url: Url!
  title(lang: Language! = CS): String
  description(lang: Language! = CS): String
  seller: Seller!
  comments: [Comment!]!
  slideshow(singleOnly: Boolean = false): [Slide!]!
  photos: [Photo!]!
  videos: [Video!]!
  floorPlans: [FloorPlan!]!
  matterport: Matterport
  published: DateTime!
}

"Aukce - nabídka typu aukce"
type Auction implements Listing {
  listingId: ID!
  customId: ID
  url: Url!
  title(lang: Language! = CS): String
  description(lang: Language! = CS): String
  seller: Seller!
  comments: [Comment!]!
  slideshow(singleOnly: Boolean = false): [Slide!]!
  photos: [Photo!]!
  videos: [Video!]!
  floorPlans: [FloorPlan!]!
  matterport: Matterport
  published: DateTime!
  estate: Estate!
  serviceType: ServiceType!
  serviceTypeInfo: ServiceTypeInfo!
  startingPrice(currency: Currency! = CZK): Float!
  priceUnit: PriceUnit!
}

type Offer implements Listing {
  listingId: ID!
  customId: ID
  url: Url!
  title(lang: Language! = CS): String
  description(lang: Language! = CS): String
  seller: Seller!
  comments: [Comment!]!
  slideshow(singleOnly: Boolean = false): [Slide!]!
  photos: [Photo!]!
  videos: [Video!]!
  floorPlans: [FloorPlan!]!
  matterport: Matterport
  published: DateTime!
  estate: Estate!
  serviceType: ServiceType!
  serviceTypeInfo: ServiceTypeInfo!
  price(currency: Currency! = CZK): Float!
  priceUnit: PriceUnit!
}

input IntRange {
  greaterThan: Int
  lessThan: Int
}

input ListingFilter {
  listingType: [ListingType!]
  serviceType: [ServiceType!]
  estateType: EstateTypeFilter
  price: IntRange
  location: LocationFilter
  features: FeaturesFilter
  amenities: AmenitiesFilter
  usableArea: IntRange
  landArea: IntRange
  constructionYear: IntRange
}

input BrokerFilter {
  tba: Int
}

input AmenitiesFilter {
  dishwasher: Boolean
}

input FeaturesFilter {
  balcony: Boolean
  terrace: Boolean
  loggia: Boolean
  cellar: Boolean
  pool: Boolean
}

input LocationFilter {
  topLeft: GpsInput!
  bottomRight: GpsInput!
}

input EstateTypeFilter {
  main: [EstateType!]! = [ APARTMENT, HOUSE, COMMERCIAL, LAND, GARAGE ]
  apartmentTypes: [ApartmentType!]
  houseTypes: [HouseType!]
  landTypes: [LandType!]
  commercialTypes: [CommercialType!]
  garageTypes: [GarageType!]
}

type Viewport {
  top_left: Gps!
  bottom_right: Gps!
}

input CommercialInput {
  energyEfficiency: EnergyEfficiency!
  energyCertificate: EnergyCertificate!
  condition: Condition!
  material: Material!
  placement: Placement!
  roomCount: Int!
  ceilingHeight: Float!
  usableArea: Float!
  balconyArea: Float
  terraceArea: Float
  loggiaArea: Float
  cellarArea: Float
  poolArea: Float
  constructionYear: Int!
  acceptanceYear: Int!
  reconstructionYear: Int
  type: CommercialType!
  storeArea: Float
  officeArea: Float
  warehouseArea: Float
  productionArea: Float
}

input AddressInput {
  ruianCode: Int!
  blur: AddressBlur!
}

input CommentInput {
  tba: Int
}

input ListingInput {
  customId: String
  localizations: [LocalizationInput!]!
  sellerId: ID!
  offer: OfferInput
  auction: AuctionInput
  project: ProjectInput
}

input LandInput {
  type: LandType!
  landArea: Float!
}

input EstateInput {
  address: AddressInput!
  electricity: [Electricity!]!
  gas: [Gas!]!
  water: [Water!]!
  heating: [Heating!]!
  waste: [Waste!]!
  road: [Road!]!
  connectivity: [Connectivity!]!
  natureProtection: NatureProtection!
  apartment: ApartmentInput
  house: HouseInput
  land: LandInput
  commercial: CommercialInput
  garage: GarageInput
}

input ApartmentInput {
  energyEfficiency: EnergyEfficiency!
  energyCertificate: EnergyCertificate!
  condition: Condition!
  material: Material!
  placement: Placement!
  roomCount: Int!
  ceilingHeight: Float!
  usableArea: Float!
  balconyArea: Float
  terraceArea: Float
  loggiaArea: Float
  cellarArea: Float
  poolArea: Float
  constructionYear: Int!
  acceptanceYear: Int!
  reconstructionYear: Int
  type: ApartmentType!
  apartmentNumber: String!
  floorNumber: Int!
  specialClass: [ApartmentSpecialType!]!
}

input RentInput {
  restriction: [Restriction!]!
}

input AuctionInput {
  estate: EstateInput!
  startingPrice: Float!
  priceCurrency: Currency!
  priceUnit: PriceUnit!
  rent: RentInput
  transfer: TransferInput
}

input ProjectInput {
  tba: Int
}

input LocalizationInput {
  language: Language!
  title: String!
  description: String!
}

input GarageInput {
  energyEfficiency: EnergyEfficiency!
  energyCertificate: EnergyCertificate!
  condition: Condition!
  material: Material!
  placement: Placement!
  roomCount: Int!
  ceilingHeight: Float!
  usableArea: Float!
  balconyArea: Float
  terraceArea: Float
  loggiaArea: Float
  cellarArea: Float
  poolArea: Float
  constructionYear: Int!
  acceptanceYear: Int!
  reconstructionYear: Int
  type: GarageType!
}

input TransferInput {
  tba: Int
}

input HouseInput {
  energyEfficiency: EnergyEfficiency!
  energyCertificate: EnergyCertificate!
  condition: Condition!
  material: Material!
  placement: Placement!
  roomCount: Int!
  ceilingHeight: Float!
  usableArea: Float!
  balconyArea: Float
  terraceArea: Float
  loggiaArea: Float
  cellarArea: Float
  poolArea: Float
  constructionYear: Int!
  acceptanceYear: Int!
  reconstructionYear: Int
  type: HouseType!
  landArea: Float!
}

input IndividualInput {
  broker: ID
  individual: ID
}

input OfferInput {
  estate: EstateInput!
  price: Float!
  priceCurrency: Currency!
  priceUnit: PriceUnit!
  rent: RentInput
  transfer: TransferInput
}

"Root type pro write operace Nemovizor API."
type Mutation {
  "Přidání nového inzerátu\n"
  listingAdd(input: ListingInput!): ListingAddPayload!
  "Změna stavu inzerátu\n\nDefaultně je nabídka ve stavu DRAFT, což značí aktivní ale nepublikovanou nabídku. \nPublikování inzerátu je změna stavu na ACTIVE, při publikování je provedena kontrola zda jsou vyplněné všechny položky (např. počet fotek).\nOdstranění inzerátu je změna stavu na FINISHED nebo CANCELLED."
  listingSetState(listingId: ID! state: ListingState!): ListingSetStatePayload!
  "Úprava inzerátu\n"
  listingEdit(listingId: ID! input: ListingInput!): ListingEditPayload!
  "Přidání fotky k inzerátu\n"
  listingAddPhoto(listingId: ID! photo: Upload!): ListingAddPhotoPayload!
  "Přidání videa k inzerátu\n"
  listingAddVideo(listingId: ID! video: Upload!): ListingAddVideoPayload!
  "Přidání půdorysu k inzerátu\n"
  listingAddFloorPlan(listingId: ID! floorPlan: Upload!): ListingAddFloorPlanPayload!
  "Přidání prohlídky Matterport k inzerátu\n"
  listingAddMatterport(listingId: ID! matterport: Url!): ListingAddMatterportPayload!
  "Odstranění grafiky z inzerátu \n"
  listingRemoveFigure(figureId: ID!): ListingRemoveFigurePayload!
  listingLinearViewAddFigure(figureId: ID! position: Int!): ListingState! @deprecated(reason: "Work in progress")
  listingLinearViewMoveFigure(figureId: ID! position: Int!): ListingState! @deprecated(reason: "Work in progress")
  listingLinearViewRemoveFigure(figureId: ID!): ListingState! @deprecated(reason: "Work in progress")
  "Přidání nového makléře\n"
  companyAddBroker(input: CompanyAddBrokerInput!): CompanyAddBrokerPayload!
  "Přidání nové pobočky\n"
  companyAddOffice(input: CompanyAddOfficeInput!): CompanyAddOfficePayload!
  "Přesun prodejce ve struktuře společnosti\n"
  companyMoveSeller(sellerId: ID! parentId: ID!): CompanyMoveSellerPayload!
  "Odstranění prodejce ze společnosti\n\nPřevede všechny nabídky a podřízené na nadřízeného ve struktuře."
  companyRemoveSeller(sellerId: ID!): CompanyRemoveSellerPayload!
  companyProfileEdit(input: SetCompanyProfileDetailsInput!): SetCompanyProfileDetailsPayload! @deprecated(reason: "Work in progress")
  officeProfileEdit(input: SetOfficeProfileDetailsInput!): SetOfficeProfileDetailsPayload! @deprecated(reason: "Work in progress")
  brokerProfileEdit(input: SetBrokerProfileDetailsInput!): SetBrokerProfileDetailsPayload! @deprecated(reason: "Work in progress")
  sellerProfileSetPhoto(sellerId: ID! photo: Upload!): SetBrokerProfilePhotoPayload! @deprecated(reason: "Work in progress")
}

"Typ pozemku"
enum LandType {
  "Bydlení"
  LAND_HOUSING
  "Komerční"
  LAND_COMMERCIAL
  "Pole"
  LAND_FIELD
  "Louky"
  LAND_MEADOW
  "Lesy"
  LAND_FOREST
  "Rybníky"
  LAND_POND
  "Sady nebo vinice"
  LAND_ORCHARD
  "Zahrady"
  LAND_GARDEN
  "Jiné"
  OTHER
}

"Státy"
enum Country {
  CZECHIA
}

"Vybavení nemovitosti"
enum Amenity {
  DISHWASHER
}

"Energetická náročnost"
enum EnergyEfficiency {
  "Mimořádně úsporná"
  A
  "Velmi úsporná"
  B
  "Úsporná"
  C
  "Méně úsporná"
  D
  "Nehospodárná"
  E
  "Velmi nehospodárná"
  F
  "Mimořádně nehospodárná"
  G
}

"Přístupová cesta"
enum Road {
  "Asfaltová"
  ASPHALT
  "Betonová"
  CONCRETE
  "Dlážděná"
  PAVEMENT
  "Neupravená"
  UNTREATED
}

"Plyn"
enum Gas {
  PIPELINE
  INDIVIDUAL
}

"Odpad"
enum Waste {
  SEWERAGE
  PLANT
  SEPTIC
  SUMP
}

"Typ nabídky"
enum ListingType {
  "Standardní nabídka"
  OFFER
  "Aukce"
  AUCTION
  "Developerský projekt"
  PROJECT
}

"Jazyk"
enum Language {
  "Čeština"
  CS
  "Angličtina"
  EN
  "Ruština"
  RU
  "Němčina"
  DE
}

"Typ ostatních nemovitostí"
enum GarageType {
  "Garáž"
  GARAGE_GARAGE
  "Garážové stání"
  GARAGE_PARKING
  "Mobilheim"
  GARAGE_MOBILHEIM
  "Půdní prostor"
  GARAGE_ATTIC
  "Vinný sklep"
  GARAGE_WINE
  "Jiné"
  OTHER
}

"Energetická vyhláška"
enum EnergyCertificate {
  "č. 148\/2007 Sb."
  V147_2007
  "č. 78\/2013 Sb."
  V78_2013
  "č. 264\/2020 Sb."
  V264_2020
}

"Typ bytu"
enum ApartmentType {
  "1+kk"
  APAR_1KK
  "1+1"
  APAR_11
  "2+kk"
  APAR_2KK
  "2+1"
  APAR_21
  "3+kk"
  APAR_3KK
  "3+1"
  APAR_31
  "4+kk"
  APAR_4KK
  "4+1"
  APAR_41
  "5+kk"
  APAR_5KK
  "5+1"
  APAR_51
  "6 a více"
  APAR_6
  "Pokoj"
  APAR_ROOM
  "Jiné"
  OTHER
}

"Rozostření adresy"
enum AddressBlur {
  "Žádné - zobrazit přesnou adresu"
  NONE
  "Ulice - zobrazit jméno ulice bez blížšího upřesnění"
  STREET
  "Čtvrť - zobrazit jméno městské části"
  CITY_PART
  "Obec - zobrazit jméno obce"
  CITY
}

"Umístění budovy"
enum Placement {
  "V bloku"
  BLOCK
  "Samostatný"
  STANDALONE
}

"Voda"
enum Water {
  PIPELINE
  INDIVIDUAL
}

"Elekřina"
enum Electricity {
  V120
  V230
  V400
}

"Materiál"
enum Material {
  WOOD
  BRICK
  STONE
  PANEL
  MOUNTED
  SKELETAL
  MIXED
}

"Typ slajdu"
enum SlideType {
  SINGLE
  DOUBLE
  TRIPLE
}

"Speciální umístění"
enum PlacementSpecial {
  "Řadový"
  TERRACED
  "Rohový"
  CORNER
}

"Telekomunikační sítě"
enum Connectivity {
  INTERNET_OPTICAL
  INTERNET_DSL
  INTERNET_LTE
  TELEVISION_ANTENNA
  TELEVISION_SATELLITE
  TELEVISION_CABLE
  TELEVISION_IPTV
  TELEPHONE
}

"Měna"
enum Currency {
  "Koruna česká"
  CZK
  "Euro"
  EUR
  "Americký dolar"
  USD
  "Ruský rubl"
  RUB
}

"Typ komerčního prostoru"
enum CommercialType {
  "Kanceláře"
  COMM_OFFICE
  "Virtuální kanceláře"
  COMM_VIRTUAL_OFFICE
  "Sklady"
  COMM_WAREHOUSE
  "Výroba"
  COMM_PRODUCTION
  "Obchodní prostory"
  COMM_STORE
  "Ubytování"
  COMM_ACCOMMODATION
  "Restaurace"
  COMM_CATERING
  "Zemědělské prostory"
  COMM_AGRICULTURAL
  "Činžovní dům"
  COMM_APARTMENTS
  "Jiné"
  OTHER
}

"Způsob řazení nabídek"
enum ListingSort {
  "Doporučené řazení"
  RELEVANCE
  "Od nejnovějšího"
  NEWEST
  "Od nejlevnějšího"
  CHEAPEST
  "Od nejdražšího"
  MOST_EXPENSIVE
}

"Omezení v užívání nemovitosti"
enum Restriction {
  "Domácí mazlíčci"
  ANIMALS
  "Kouření"
  SMOKING
}

"Typ domu"
enum HouseType {
  "Rodinný dům"
  HOUSE_FAMILY
  "Vila"
  HOUSE_FAIRY
  "Chata"
  HOUSE_HUT
  "Chalupa"
  HOUSE_COTTAGE
  "Zemědělská usedlost"
  HOUSE_FARMLAND
  "Dům na klíč"
  HOUSE_TURNKEY
  "Jiné"
  OTHER
}

"Speciální kvalifikace bytu"
enum ApartmentSpecialType {
  "Mezonet"
  MAISONETTE
  "Loft"
  LOFT
  "Podkrovní"
  ATTIC
}

"Kategorie nemovitosti"
enum EstateType {
  "Byt"
  APARTMENT
  "Dům"
  HOUSE
  "Komerční prostor"
  COMMERCIAL
  "Pozemek"
  LAND
  "Garáž a ostatní"
  GARAGE
}

"Vytápění"
enum Heating {
  INDIVIDUAL_GAS
  INDIVIDUAL_SOLID
  INDIVIDUAL_ELECTRIC
  CENTRAL_GAS
  CENTRAL_SOLID
  CENTRAL_ELECTRIC
  CENTRAL_REMOTE
  OTHER
}

"Rozložení figur na slajdu"
enum SlideLayout {
  LEFT
  RIGHT
  EVEN
}

"Omezení v přístupu"
enum AuthLevel {
  "Registovaný jako prodávající"
  REGISTERED_SELLER
  "Člen firmy"
  COMPANY_MEMBER
  "Vlastník nebo nadřízený"
  OWNER
  "Správce firmy"
  COMPANY_ADMIN
}

"Stav budovy"
enum Condition {
  NEW
  EXCELLENT
  GOOD
  BAD
  CONSTRUCTION
  DEMOLITION
  BEFORE_RECONSTRUCTION
  RECONSTRUCTED
}

"Typ služby"
enum ServiceType {
  "Pronájem"
  RENT
  "Koupě a prodej"
  TRANSFER
}

"Zákonná ochrana"
enum NatureProtection {
  "Žádná"
  NONE
  "Ochrané pásmo"
  RESTRICTED_AREA
  "Chráněná krajiná oblast"
  LANDSCAPE_AREA
  "Národní park"
  NATIONAL_PARK
}

"Jednotky ceny"
enum PriceUnit {
  PROPERTY
  M2
  YEAR
  MONTH
  DAY
  HOUR
  M2_YEAR
  M2_MONTH
  M2_DAY
  M2_HOUR
}

"Stav nabídky"
enum ListingState {
  "V přípravě"
  DRAFT
  "Publikovaná"
  ACTIVE
  "Dokončená"
  FINISHED
  "Zrušená"
  CANCELLED
}

input SetBrokerProfileDetailsInput {
  parentId: ID!
  name: String!
}

input CompanyAddBrokerInput {
  parentId: ID!
  name: String!
  email: String!
}

input SetOfficeProfileDetailsInput {
  parentId: ID!
  name: String!
}

input CompanyAddOfficeInput {
  parentId: ID!
  name: String!
  headquarters: AddressInput!
}

input SetCompanyProfileDetailsInput {
  parentId: ID!
  name: String!
}

type PointBlurred implements PointListing {
  gps: Gps!
  listingId: ID!
}

type PointProject implements PointListing {
  gps: Gps!
  listingId: ID!
  count: Int!
}

interface Point {
  gps: Gps!
}

interface PointListing {
  gps: Gps!
  listingId: ID!
}

type PointSimple implements PointListing {
  gps: Gps!
  listingId: ID!
}

"Doplnující informace pro pronájem"
type RentInfo {
  restriction: [Restriction!]!
}

"Doplnující informace podle typu služby (prodej\/pronájem)"
union ServiceTypeInfo = TransferInfo | RentInfo

"Doplnující informace pro prodej"
type TransferInfo {

}

type Matterport implements Figure {
  figureId: ID!
  url: Url!
}

type Video implements Figure {
  figureId: ID!
  url: Url!
}

type FloorPlan implements Figure {
  figureId: ID!
  url: Url!
  size: Int!
}

type Photo implements Figure {
  figureId: ID!
  url: Url!
  originalUrl: Url!
  is360: Boolean!
  width: Int!
  height: Int!
  size: Int!
}

"Grafická položka - např. fotka nebo video"
interface Figure {
  figureId: ID!
  url: Url!
}

type Comment {
  commentId: ID!
  value: String!
  dateTime: String!
  poster: String!
  replies: Comment!
}

"Adresa - položky nabývají hodnoty null v případě rozostření adresy"
type Address {
  country: Country!
  cityName: String!
  cityPart: String
  postalCode: String
  streetName: String
  dscNumber: String
  eviNumber: String
  oriNumber: String
  lat: Float
  lng: Float
  ruianCode: Int
}

type Company implements SellerCorporate {
  sellerId: ID!
  listings: [Listing!]!
  name: String!
  description: String!
  photo: Photo!
  figures: [Figure!]!
  email: EmailAddress!
  subordinates: [SellerStructural!]!
  headquarters: Address!
  brokers: [Broker!]!
}

type Broker implements SellerStructural {
  sellerId: ID!
  listings: [Listing!]!
  name: String!
  description: String!
  photo: Photo!
  figures: [Figure!]!
  email: EmailAddress!
  subordinates: [SellerStructural!]!
  supervisor: SellerCorporate!
  company: Company
}

interface Seller {
  sellerId: ID!
  listings: [Listing!]!
}

interface SellerStructural {
  sellerId: ID!
  listings: [Listing!]!
  name: String!
  description: String!
  photo: Photo!
  figures: [Figure!]!
  email: EmailAddress!
  subordinates: [SellerStructural!]!
  supervisor: SellerCorporate!
}

type Office implements SellerStructural {
  sellerId: ID!
  listings: [Listing!]!
  name: String!
  description: String!
  photo: Photo!
  figures: [Figure!]!
  email: EmailAddress!
  subordinates: [SellerStructural!]!
  supervisor: SellerCorporate!
  headquarters: Address!
}

interface SellerCorporate {
  sellerId: ID!
  listings: [Listing!]!
  name: String!
  description: String!
  photo: Photo!
  figures: [Figure!]!
  email: EmailAddress!
  subordinates: [SellerStructural!]!
}

type Individual implements Seller {
  sellerId: ID!
  listings: [Listing!]!
}

type ProjectListing {
  listing: Listing!
  satisfiesFilter: Boolean!
}

union SearchResult = Offer | Auction | Project | Broker | Office | Company | Location

"Uživatel - informace o uživateli nemovizoru."
type User {
  userId: ID!
  sellers: [Seller!]!
}

"Nemovitost - popis nemovitosti"
type Estate {
  type: EstateType!
  address: Address!
  typeInfo: EstateTypeInfo!
  natureProtection: NatureProtection!
  electricity: [Electricity!]!
  gas: [Gas!]!
  water: [Water!]!
  heating: [Heating!]!
  waste: [Waste!]!
  road: [Road!]!
  connectivity: [Connectivity!]!
}

"Doplnující informace pro pozemky"
type LandInfo {
  type: LandType!
  landArea: Float!
}

"Doplnující informace pro garáže a ostatní nemovitosti"
type GarageInfo {
  energyEfficiency: EnergyEfficiency!
  energyCertificate: EnergyCertificate!
  condition: Condition!
  material: Material!
  placement: Placement!
  placementSpecial: [PlacementSpecial!]!
  roomCount: Int!
  ceilingHeight: Float!
  amenities: [Amenity!]!
  usableArea: Float!
  balconyArea: Float
  terraceArea: Float
  loggiaArea: Float
  cellarArea: Float
  poolArea: Float
  constructionYear: Int!
  acceptanceYear: Int!
  reconstructionYear: Int
  type: GarageType!
}

"Doplnující informace pro komerční prostory"
type CommercialInfo {
  energyEfficiency: EnergyEfficiency!
  energyCertificate: EnergyCertificate!
  condition: Condition!
  material: Material!
  placement: Placement!
  placementSpecial: [PlacementSpecial!]!
  roomCount: Int!
  ceilingHeight: Float!
  amenities: [Amenity!]!
  usableArea: Float!
  balconyArea: Float
  terraceArea: Float
  loggiaArea: Float
  cellarArea: Float
  poolArea: Float
  constructionYear: Int!
  acceptanceYear: Int!
  reconstructionYear: Int
  type: CommercialType!
  storeArea: Float
  officeArea: Float
  warehouseArea: Float
  productionArea: Float
}

"Doplnující informace pro domy"
type HouseInfo {
  energyEfficiency: EnergyEfficiency!
  energyCertificate: EnergyCertificate!
  condition: Condition!
  material: Material!
  placement: Placement!
  placementSpecial: [PlacementSpecial!]!
  roomCount: Int!
  ceilingHeight: Float!
  amenities: [Amenity!]!
  usableArea: Float!
  balconyArea: Float
  terraceArea: Float
  loggiaArea: Float
  cellarArea: Float
  poolArea: Float
  constructionYear: Int!
  acceptanceYear: Int!
  reconstructionYear: Int
  type: HouseType!
  landArea: Float!
}

"Doplnující informace podle typu nemovitosti"
union EstateTypeInfo = ApartmentInfo | HouseInfo | LandInfo | CommercialInfo | GarageInfo

"Doplnující informace pro byty"
type ApartmentInfo {
  energyEfficiency: EnergyEfficiency!
  energyCertificate: EnergyCertificate!
  condition: Condition!
  material: Material!
  placement: Placement!
  placementSpecial: [PlacementSpecial!]!
  roomCount: Int!
  ceilingHeight: Float!
  amenities: [Amenity!]!
  usableArea: Float!
  balconyArea: Float
  terraceArea: Float
  loggiaArea: Float
  cellarArea: Float
  poolArea: Float
  constructionYear: Int!
  acceptanceYear: Int!
  reconstructionYear: Int
  type: ApartmentType!
  apartmentNumber: String!
  floorNumber: Int!
  specialClass: [ApartmentSpecialType!]!
}

interface Slide {
  index: Int!
}

type SlideSingle implements Slide {
  index: Int!
  item: Figure!
}

type SlideDouble implements Slide {
  index: Int!
  layout: SlideLayout!
  itemOne: Figure!
  itemTwo: Figure!
}

type SlideTriple implements Slide {
  index: Int!
  layout: SlideLayout!
  itemOne: Figure!
  itemTwo: Figure!
  itemThree: Figure!
}

"Graphpinator stringWhere directive."
directive @stringWhere(field: String not: Boolean! = false equals: String contains: String startsWith: String endsWith: String orNull: Boolean! = false) repeatable on FIELD | INLINE_FRAGMENT | FRAGMENT_SPREAD

"Graphpinator intWhere directive."
directive @intWhere(field: String not: Boolean! = false equals: Int greaterThan: Int lessThan: Int orNull: Boolean! = false) repeatable on FIELD | INLINE_FRAGMENT | FRAGMENT_SPREAD

"Graphpinator floatWhere directive."
directive @floatWhere(field: String not: Boolean! = false equals: Float greaterThan: Float lessThan: Float orNull: Boolean! = false) repeatable on FIELD | INLINE_FRAGMENT | FRAGMENT_SPREAD

"Graphpinator booleanWhere directive."
directive @booleanWhere(field: String not: Boolean! = false equals: Boolean orNull: Boolean! = false) repeatable on FIELD | INLINE_FRAGMENT | FRAGMENT_SPREAD

"Graphpinator listWhere directive."
directive @listWhere(field: String not: Boolean! = false minItems: Int maxItems: Int orNull: Boolean! = false) repeatable on FIELD | INLINE_FRAGMENT | FRAGMENT_SPREAD

"Graphpinator stringConstraint directive."
directive @stringConstraint(minLength: Int maxLength: Int regex: String oneOf: [String!]) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Graphpinator intConstraint directive."
directive @intConstraint(min: Int max: Int oneOf: [Int!]) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Graphpinator floatConstraint directive."
directive @floatConstraint(min: Float max: Float oneOf: [Float!]) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Graphpinator listConstraint directive."
directive @listConstraint(minItems: Int maxItems: Int unique: Boolean! = false innerList: ListConstraintInput) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"Graphpinator objectConstraint directive."
directive @objectConstraint(atLeastOne: [String!] exactlyOne: [String!]) repeatable on OBJECT | INTERFACE | INPUT_OBJECT

"Uživatel musí být přihlášený."
directive @loggedIn on FIELD_DEFINITION

"Uživatel musí naplňovat určitou úroveň přístupu."
directive @auth(level: AuthLevel!) on FIELD_DEFINITION