[global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
public partial TestClient
    : ITestClient
{
    private const string _clientName = "TestClient";
    private readonly global::StrawberryShake.IOperationExecutor _executor;
    private readonly global::StrawberryShake.IOperationStreamExecutor _streamExecutor;

    public TestClient(global::StrawberryShake.IOperationExecutorPool executorPool)
    {
        _executor = executorPool.CreateExecutor(_clientName);
        _streamExecutor = executorPool.CreateStreamExecutor(_clientName);
    }

    public global::System.Threading.Tasks.Task<global::StrawberryShale.IResponseStream<global::Demo.IGetHero>> GetHeroAsync(
        global::Demo.Episode episode = global::Demo.Episode.NewHope,
        global::System.Threading.CancellationToken cancellationToken = default)
    {
        return _executor.ExecuteAsync(
            new global::Demo.GetHeroOperation
            {
                Episode = episode
            },
            cancellationToken);
    }

    public global::System.Threading.Tasks.Task<global::StrawberryShale.IResponseStream<global::Demo.IGetHero>> GetHeroAsync(
        global::Demo.GetHeroOperation operation,
        global::System.Threading.CancellationToken cancellationToken = default)
    {
        if (operation is null)
        {
            throw new ArgumentNullException(nameof(operation));
        }

        return _executor.ExecuteAsync(operation, cancellationToken);
    }
}
