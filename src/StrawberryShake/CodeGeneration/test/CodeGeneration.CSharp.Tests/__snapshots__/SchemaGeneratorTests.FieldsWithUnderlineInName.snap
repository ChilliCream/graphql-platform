// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable RedundantNameQualifier
// ReSharper disable ArrangeObjectCreationWhenTypeEvident
// ReSharper disable UnusedType.Global
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMethodReturnValue.Local
// ReSharper disable ConvertToAutoProperty
// ReSharper disable UnusedMember.Global
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable InconsistentNaming

// FooClient

// <auto-generated/>
#nullable enable

namespace Foo.Bar
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeriesResult : global::System.IEquatable<GetBwr_TimeSeriesResult>, IGetBwr_TimeSeriesResult
    {
        public GetBwr_TimeSeriesResult(global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries? bwr_TimeSeries)
        {
            Bwr_TimeSeries = bwr_TimeSeries;
        }

        public global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries? Bwr_TimeSeries
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetBwr_TimeSeriesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Bwr_TimeSeries is null && other.Bwr_TimeSeries is null) || Bwr_TimeSeries != null && Bwr_TimeSeries.Equals(other.Bwr_TimeSeries)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBwr_TimeSeriesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Bwr_TimeSeries != null)
                {
                    hash ^= 397 * Bwr_TimeSeries.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeries_Bwr_TimeSeries_Bwr_TimeSeriesConnection : global::System.IEquatable<GetBwr_TimeSeries_Bwr_TimeSeries_Bwr_TimeSeriesConnection>, IGetBwr_TimeSeries_Bwr_TimeSeries_Bwr_TimeSeriesConnection
    {
        public GetBwr_TimeSeries_Bwr_TimeSeries_Bwr_TimeSeriesConnection(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes?>? Nodes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetBwr_TimeSeries_Bwr_TimeSeries_Bwr_TimeSeriesConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBwr_TimeSeries_Bwr_TimeSeries_Bwr_TimeSeriesConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries : global::System.IEquatable<GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries>, IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries
    {
        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries(global::System.String? inventoryId, global::System.String? area, global::System.String? source, global::System.String? type, global::System.String? name, global::System.String? category, global::System.String? specification, global::System.String? commodity, global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution? resolution, global::System.String? unit, global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria? validationCriteria, global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification? importSpecification, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints>? _dataPoints)
        {
            InventoryId = inventoryId;
            Area = area;
            Source = source;
            Type = type;
            Name = name;
            Category = category;
            Specification = specification;
            Commodity = commodity;
            Resolution = resolution;
            Unit = unit;
            ValidationCriteria = validationCriteria;
            ImportSpecification = importSpecification;
            this._dataPoints = _dataPoints;
        }

        public global::System.String? InventoryId
        {
            get;
        }

        public global::System.String? Area
        {
            get;
        }

        public global::System.String? Source
        {
            get;
        }

        public global::System.String? Type
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::System.String? Category
        {
            get;
        }

        public global::System.String? Specification
        {
            get;
        }

        public global::System.String? Commodity
        {
            get;
        }

        public global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution? Resolution
        {
            get;
        }

        public global::System.String? Unit
        {
            get;
        }

        public global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria? ValidationCriteria
        {
            get;
        }

        public global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification? ImportSpecification
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints>? _dataPoints
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((InventoryId is null && other.InventoryId is null) || InventoryId != null && InventoryId.Equals(other.InventoryId))) && ((Area is null && other.Area is null) || Area != null && Area.Equals(other.Area)) && ((Source is null && other.Source is null) || Source != null && Source.Equals(other.Source)) && ((Type is null && other.Type is null) || Type != null && Type.Equals(other.Type)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Category is null && other.Category is null) || Category != null && Category.Equals(other.Category)) && ((Specification is null && other.Specification is null) || Specification != null && Specification.Equals(other.Specification)) && ((Commodity is null && other.Commodity is null) || Commodity != null && Commodity.Equals(other.Commodity)) && ((Resolution is null && other.Resolution is null) || Resolution != null && Resolution.Equals(other.Resolution)) && ((Unit is null && other.Unit is null) || Unit != null && Unit.Equals(other.Unit)) && ((ValidationCriteria is null && other.ValidationCriteria is null) || ValidationCriteria != null && ValidationCriteria.Equals(other.ValidationCriteria)) && ((ImportSpecification is null && other.ImportSpecification is null) || ImportSpecification != null && ImportSpecification.Equals(other.ImportSpecification)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(_dataPoints, other._dataPoints);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (InventoryId != null)
                {
                    hash ^= 397 * InventoryId.GetHashCode();
                }

                if (Area != null)
                {
                    hash ^= 397 * Area.GetHashCode();
                }

                if (Source != null)
                {
                    hash ^= 397 * Source.GetHashCode();
                }

                if (Type != null)
                {
                    hash ^= 397 * Type.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Category != null)
                {
                    hash ^= 397 * Category.GetHashCode();
                }

                if (Specification != null)
                {
                    hash ^= 397 * Specification.GetHashCode();
                }

                if (Commodity != null)
                {
                    hash ^= 397 * Commodity.GetHashCode();
                }

                if (Resolution != null)
                {
                    hash ^= 397 * Resolution.GetHashCode();
                }

                if (Unit != null)
                {
                    hash ^= 397 * Unit.GetHashCode();
                }

                if (ValidationCriteria != null)
                {
                    hash ^= 397 * ValidationCriteria.GetHashCode();
                }

                if (ImportSpecification != null)
                {
                    hash ^= 397 * ImportSpecification.GetHashCode();
                }

                if (_dataPoints != null)
                {
                    foreach (var _dataPoints_elm in _dataPoints)
                    {
                        hash ^= 397 * _dataPoints_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution_Resolution : global::System.IEquatable<GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution_Resolution>, IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution_Resolution
    {
        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution_Resolution(global::Foo.Bar.TimeUnit timeUnit, global::System.Int32 factor)
        {
            TimeUnit = timeUnit;
            Factor = factor;
        }

        public global::Foo.Bar.TimeUnit TimeUnit
        {
            get;
        }

        public global::System.Int32 Factor
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution_Resolution? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TimeUnit.Equals(other.TimeUnit)) && Factor == other.Factor;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution_Resolution)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TimeUnit.GetHashCode();
                hash ^= 397 * Factor.GetHashCode();
                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria : global::System.IEquatable<GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria>, IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria
    {
        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria(global::System.String? _inventoryItemId, global::System.String? name, global::System.String? completeness, global::System.Decimal? lowerBound, global::System.Decimal? upperBound)
        {
            this._inventoryItemId = _inventoryItemId;
            Name = name;
            Completeness = completeness;
            LowerBound = lowerBound;
            UpperBound = upperBound;
        }

        public global::System.String? _inventoryItemId
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::System.String? Completeness
        {
            get;
        }

        public global::System.Decimal? LowerBound
        {
            get;
        }

        public global::System.Decimal? UpperBound
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((_inventoryItemId is null && other._inventoryItemId is null) || _inventoryItemId != null && _inventoryItemId.Equals(other._inventoryItemId))) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Completeness is null && other.Completeness is null) || Completeness != null && Completeness.Equals(other.Completeness)) && LowerBound == other.LowerBound && UpperBound == other.UpperBound;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (_inventoryItemId != null)
                {
                    hash ^= 397 * _inventoryItemId.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Completeness != null)
                {
                    hash ^= 397 * Completeness.GetHashCode();
                }

                if (LowerBound != null)
                {
                    hash ^= 397 * LowerBound.GetHashCode();
                }

                if (UpperBound != null)
                {
                    hash ^= 397 * UpperBound.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification : global::System.IEquatable<GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification>, IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification
    {
        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification(global::System.Int32? fromPeriod, global::System.Int32? toPeriod)
        {
            FromPeriod = fromPeriod;
            ToPeriod = toPeriod;
        }

        public global::System.Int32? FromPeriod
        {
            get;
        }

        public global::System.Int32? ToPeriod
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (FromPeriod == other.FromPeriod) && ToPeriod == other.ToPeriod;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FromPeriod != null)
                {
                    hash ^= 397 * FromPeriod.GetHashCode();
                }

                if (ToPeriod != null)
                {
                    hash ^= 397 * ToPeriod.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints_DataPoint : global::System.IEquatable<GetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints_DataPoint>, IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints_DataPoint
    {
        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints_DataPoint(global::System.DateTimeOffset timestamp, global::System.Double @value, global::Foo.Bar.DataFlag flag)
        {
            Timestamp = timestamp;
            Value = @value;
            Flag = flag;
        }

        public global::System.DateTimeOffset Timestamp
        {
            get;
        }

        public global::System.Double Value
        {
            get;
        }

        public global::Foo.Bar.DataFlag Flag
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints_DataPoint? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Timestamp.Equals(other.Timestamp)) && Value == other.Value && Flag.Equals(other.Flag);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints_DataPoint)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Timestamp.GetHashCode();
                hash ^= 397 * Value.GetHashCode();
                hash ^= 397 * Flag.GetHashCode();
                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeriesResult
    {
        public global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries? Bwr_TimeSeries
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes?>? Nodes
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Bwr_TimeSeriesConnection : IGetBwr_TimeSeries_Bwr_TimeSeries
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IBwr_TimeSeries
    {
        public global::System.String? InventoryId
        {
            get;
        }

        public global::System.String? Area
        {
            get;
        }

        public global::System.String? Source
        {
            get;
        }

        public global::System.String? Type
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::System.String? Category
        {
            get;
        }

        public global::System.String? Specification
        {
            get;
        }

        public global::System.String? Commodity
        {
            get;
        }

        public global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution? Resolution
        {
            get;
        }

        public global::System.String? Unit
        {
            get;
        }

        public global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria? ValidationCriteria
        {
            get;
        }

        public global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification? ImportSpecification
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints>? _dataPoints
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes : IBwr_TimeSeries
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries : IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution
    {
        public global::Foo.Bar.TimeUnit TimeUnit
        {
            get;
        }

        public global::System.Int32 Factor
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution_Resolution : IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IBwr_ValidationCriteria
    {
        public global::System.String? _inventoryItemId
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::System.String? Completeness
        {
            get;
        }

        public global::System.Decimal? LowerBound
        {
            get;
        }

        public global::System.Decimal? UpperBound
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria : IBwr_ValidationCriteria
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria : IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification
    {
        public global::System.Int32? FromPeriod
        {
            get;
        }

        public global::System.Int32? ToPeriod
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification : IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints
    {
        public global::System.DateTimeOffset Timestamp
        {
            get;
        }

        public global::System.Double Value
        {
            get;
        }

        public global::Foo.Bar.DataFlag Flag
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints_DataPoint : IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class bwr_TimeSeriesFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _bwr_TimeSeriesFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _referenceTyOfbwr_TimeSeriesFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _listRefFilterTyOfbwr_TimeSeriesFilterInputFormatter = default !;
        public global::System.String TypeName => "bwr_TimeSeriesFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _bwr_TimeSeriesFilterInputFormatter = serializerResolver.GetInputValueFormatter("bwr_TimeSeriesFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _referenceTyOfbwr_TimeSeriesFilterInputFormatter = serializerResolver.GetInputValueFormatter("ReferenceTyOfbwr_TimeSeriesFilterInput");
            _listRefFilterTyOfbwr_TimeSeriesFilterInputFormatter = serializerResolver.GetInputValueFormatter("ListRefFilterTyOfbwr_TimeSeriesFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.bwr_TimeSeriesFilterInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsCategorySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("category", FormatCategory(input.Category)));
            }

            if (inputInfo.IsSpecificationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("specification", FormatSpecification(input.Specification)));
            }

            if (inputInfo.IsCommoditySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commodity", FormatCommodity(input.Commodity)));
            }

            if (inputInfo.IsAreaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("area", FormatArea(input.Area)));
            }

            if (inputInfo.IsSourceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("source", FormatSource(input.Source)));
            }

            if (inputInfo.IsTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("type", FormatType(input.Type)));
            }

            if (inputInfo.IsResolutionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("resolution", FormatResolution(input.Resolution)));
            }

            if (inputInfo.IsUnitSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("unit", FormatUnit(input.Unit)));
            }

            if (inputInfo.IsImportSpecificationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("importSpecification", FormatImportSpecification(input.ImportSpecification)));
            }

            if (inputInfo.IsValidationCriteriaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("validationCriteria", FormatValidationCriteria(input.ValidationCriteria)));
            }

            if (inputInfo.IsValidationResultsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("validationResults", FormatValidationResults(input.ValidationResults)));
            }

            if (inputInfo.Is_inventoryItemIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_inventoryItemId", Format_inventoryItemId(input._inventoryItemId)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.bwr_TimeSeriesFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_bwr_TimeSeriesFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.bwr_TimeSeriesFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_bwr_TimeSeriesFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatName(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCategory(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSpecification(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCommodity(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatArea(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSource(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatType(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatResolution(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUnit(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatImportSpecification(global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _referenceTyOfbwr_TimeSeriesFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatValidationCriteria(global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _referenceTyOfbwr_TimeSeriesFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatValidationResults(global::Foo.Bar.ListRefFilterTyOfbwr_TimeSeriesFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _listRefFilterTyOfbwr_TimeSeriesFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? Format_inventoryItemId(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class bwr_TimeSeriesFilterInput : global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo, global::System.IEquatable<bwr_TimeSeriesFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((bwr_TimeSeriesFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(bwr_TimeSeriesFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Category is null && other.Category is null) || Category != null && Category.Equals(other.Category)) && ((Specification is null && other.Specification is null) || Specification != null && Specification.Equals(other.Specification)) && ((Commodity is null && other.Commodity is null) || Commodity != null && Commodity.Equals(other.Commodity)) && ((Area is null && other.Area is null) || Area != null && Area.Equals(other.Area)) && ((Source is null && other.Source is null) || Source != null && Source.Equals(other.Source)) && ((Type is null && other.Type is null) || Type != null && Type.Equals(other.Type)) && ((Resolution is null && other.Resolution is null) || Resolution != null && Resolution.Equals(other.Resolution)) && ((Unit is null && other.Unit is null) || Unit != null && Unit.Equals(other.Unit)) && ((ImportSpecification is null && other.ImportSpecification is null) || ImportSpecification != null && ImportSpecification.Equals(other.ImportSpecification)) && ((ValidationCriteria is null && other.ValidationCriteria is null) || ValidationCriteria != null && ValidationCriteria.Equals(other.ValidationCriteria)) && ((ValidationResults is null && other.ValidationResults is null) || ValidationResults != null && ValidationResults.Equals(other.ValidationResults)) && ((_inventoryItemId is null && other._inventoryItemId is null) || _inventoryItemId != null && _inventoryItemId.Equals(other._inventoryItemId));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Category != null)
                {
                    hash ^= 397 * Category.GetHashCode();
                }

                if (Specification != null)
                {
                    hash ^= 397 * Specification.GetHashCode();
                }

                if (Commodity != null)
                {
                    hash ^= 397 * Commodity.GetHashCode();
                }

                if (Area != null)
                {
                    hash ^= 397 * Area.GetHashCode();
                }

                if (Source != null)
                {
                    hash ^= 397 * Source.GetHashCode();
                }

                if (Type != null)
                {
                    hash ^= 397 * Type.GetHashCode();
                }

                if (Resolution != null)
                {
                    hash ^= 397 * Resolution.GetHashCode();
                }

                if (Unit != null)
                {
                    hash ^= 397 * Unit.GetHashCode();
                }

                if (ImportSpecification != null)
                {
                    hash ^= 397 * ImportSpecification.GetHashCode();
                }

                if (ValidationCriteria != null)
                {
                    hash ^= 397 * ValidationCriteria.GetHashCode();
                }

                if (ValidationResults != null)
                {
                    hash ^= 397 * ValidationResults.GetHashCode();
                }

                if (_inventoryItemId != null)
                {
                    hash ^= 397 * _inventoryItemId.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.bwr_TimeSeriesFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.bwr_TimeSeriesFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::Foo.Bar.StringOperationFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::Foo.Bar.StringOperationFilterInput? _value_category;
        private global::System.Boolean _set_category;
        private global::Foo.Bar.StringOperationFilterInput? _value_specification;
        private global::System.Boolean _set_specification;
        private global::Foo.Bar.StringOperationFilterInput? _value_commodity;
        private global::System.Boolean _set_commodity;
        private global::Foo.Bar.StringOperationFilterInput? _value_area;
        private global::System.Boolean _set_area;
        private global::Foo.Bar.StringOperationFilterInput? _value_source;
        private global::System.Boolean _set_source;
        private global::Foo.Bar.StringOperationFilterInput? _value_type;
        private global::System.Boolean _set_type;
        private global::Foo.Bar.StringOperationFilterInput? _value_resolution;
        private global::System.Boolean _set_resolution;
        private global::Foo.Bar.StringOperationFilterInput? _value_unit;
        private global::System.Boolean _set_unit;
        private global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? _value_importSpecification;
        private global::System.Boolean _set_importSpecification;
        private global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? _value_validationCriteria;
        private global::System.Boolean _set_validationCriteria;
        private global::Foo.Bar.ListRefFilterTyOfbwr_TimeSeriesFilterInput? _value_validationResults;
        private global::System.Boolean _set_validationResults;
        private global::Foo.Bar.StringOperationFilterInput? _value__inventoryItemId;
        private global::System.Boolean _set__inventoryItemId;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.bwr_TimeSeriesFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.bwr_TimeSeriesFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsOrSet => _set_or;
        public global::Foo.Bar.StringOperationFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsNameSet => _set_name;
        public global::Foo.Bar.StringOperationFilterInput? Category
        {
            get => _value_category;
            set
            {
                _set_category = true;
                _value_category = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsCategorySet => _set_category;
        public global::Foo.Bar.StringOperationFilterInput? Specification
        {
            get => _value_specification;
            set
            {
                _set_specification = true;
                _value_specification = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsSpecificationSet => _set_specification;
        public global::Foo.Bar.StringOperationFilterInput? Commodity
        {
            get => _value_commodity;
            set
            {
                _set_commodity = true;
                _value_commodity = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsCommoditySet => _set_commodity;
        public global::Foo.Bar.StringOperationFilterInput? Area
        {
            get => _value_area;
            set
            {
                _set_area = true;
                _value_area = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsAreaSet => _set_area;
        public global::Foo.Bar.StringOperationFilterInput? Source
        {
            get => _value_source;
            set
            {
                _set_source = true;
                _value_source = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsSourceSet => _set_source;
        public global::Foo.Bar.StringOperationFilterInput? Type
        {
            get => _value_type;
            set
            {
                _set_type = true;
                _value_type = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsTypeSet => _set_type;
        public global::Foo.Bar.StringOperationFilterInput? Resolution
        {
            get => _value_resolution;
            set
            {
                _set_resolution = true;
                _value_resolution = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsResolutionSet => _set_resolution;
        public global::Foo.Bar.StringOperationFilterInput? Unit
        {
            get => _value_unit;
            set
            {
                _set_unit = true;
                _value_unit = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsUnitSet => _set_unit;
        public global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? ImportSpecification
        {
            get => _value_importSpecification;
            set
            {
                _set_importSpecification = true;
                _value_importSpecification = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsImportSpecificationSet => _set_importSpecification;
        public global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? ValidationCriteria
        {
            get => _value_validationCriteria;
            set
            {
                _set_validationCriteria = true;
                _value_validationCriteria = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsValidationCriteriaSet => _set_validationCriteria;
        public global::Foo.Bar.ListRefFilterTyOfbwr_TimeSeriesFilterInput? ValidationResults
        {
            get => _value_validationResults;
            set
            {
                _set_validationResults = true;
                _value_validationResults = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.IsValidationResultsSet => _set_validationResults;
        public global::Foo.Bar.StringOperationFilterInput? _inventoryItemId
        {
            get => _value__inventoryItemId;
            set
            {
                _set__inventoryItemId = true;
                _value__inventoryItemId = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IBwr_TimeSeriesFilterInputInfo.Is_inventoryItemIdSet => _set__inventoryItemId;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StringOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "StringOperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.StringOperationFilterInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IStringOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsContainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("contains", FormatContains(input.Contains)));
            }

            if (inputInfo.IsNcontainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ncontains", FormatNcontains(input.Ncontains)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsStartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("startsWith", FormatStartsWith(input.StartsWith)));
            }

            if (inputInfo.IsNstartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nstartsWith", FormatNstartsWith(input.NstartsWith)));
            }

            if (inputInfo.IsEndsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("endsWith", FormatEndsWith(input.EndsWith)));
            }

            if (inputInfo.IsNendsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nendsWith", FormatNendsWith(input.NendsWith)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatEq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatContains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNcontains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatStartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNstartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEndsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNendsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class StringOperationFilterInput : global::Foo.Bar.State.IStringOperationFilterInputInfo, global::System.IEquatable<StringOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StringOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(StringOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq)) && ((Neq is null && other.Neq is null) || Neq != null && Neq.Equals(other.Neq)) && ((Contains is null && other.Contains is null) || Contains != null && Contains.Equals(other.Contains)) && ((Ncontains is null && other.Ncontains is null) || Ncontains != null && Ncontains.Equals(other.Ncontains)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && ((StartsWith is null && other.StartsWith is null) || StartsWith != null && StartsWith.Equals(other.StartsWith)) && ((NstartsWith is null && other.NstartsWith is null) || NstartsWith != null && NstartsWith.Equals(other.NstartsWith)) && ((EndsWith is null && other.EndsWith is null) || EndsWith != null && EndsWith.Equals(other.EndsWith)) && ((NendsWith is null && other.NendsWith is null) || NendsWith != null && NendsWith.Equals(other.NendsWith));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (Contains != null)
                {
                    hash ^= 397 * Contains.GetHashCode();
                }

                if (Ncontains != null)
                {
                    hash ^= 397 * Ncontains.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        if (In_elm != null)
                        {
                            hash ^= 397 * In_elm.GetHashCode();
                        }
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        if (Nin_elm != null)
                        {
                            hash ^= 397 * Nin_elm.GetHashCode();
                        }
                    }
                }

                if (StartsWith != null)
                {
                    hash ^= 397 * StartsWith.GetHashCode();
                }

                if (NstartsWith != null)
                {
                    hash ^= 397 * NstartsWith.GetHashCode();
                }

                if (EndsWith != null)
                {
                    hash ^= 397 * EndsWith.GetHashCode();
                }

                if (NendsWith != null)
                {
                    hash ^= 397 * NendsWith.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.StringOperationFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.StringOperationFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::System.String? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.String? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.String? _value_contains;
        private global::System.Boolean _set_contains;
        private global::System.String? _value_ncontains;
        private global::System.Boolean _set_ncontains;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.String? _value_startsWith;
        private global::System.Boolean _set_startsWith;
        private global::System.String? _value_nstartsWith;
        private global::System.Boolean _set_nstartsWith;
        private global::System.String? _value_endsWith;
        private global::System.Boolean _set_endsWith;
        private global::System.String? _value_nendsWith;
        private global::System.Boolean _set_nendsWith;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.StringOperationFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.StringOperationFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsOrSet => _set_or;
        public global::System.String? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsEqSet => _set_eq;
        public global::System.String? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.String? Contains
        {
            get => _value_contains;
            set
            {
                _set_contains = true;
                _value_contains = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsContainsSet => _set_contains;
        public global::System.String? Ncontains
        {
            get => _value_ncontains;
            set
            {
                _set_ncontains = true;
                _value_ncontains = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsNcontainsSet => _set_ncontains;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsNinSet => _set_nin;
        public global::System.String? StartsWith
        {
            get => _value_startsWith;
            set
            {
                _set_startsWith = true;
                _value_startsWith = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsStartsWithSet => _set_startsWith;
        public global::System.String? NstartsWith
        {
            get => _value_nstartsWith;
            set
            {
                _set_nstartsWith = true;
                _value_nstartsWith = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsNstartsWithSet => _set_nstartsWith;
        public global::System.String? EndsWith
        {
            get => _value_endsWith;
            set
            {
                _set_endsWith = true;
                _value_endsWith = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsEndsWithSet => _set_endsWith;
        public global::System.String? NendsWith
        {
            get => _value_nendsWith;
            set
            {
                _set_nendsWith = true;
                _value_nendsWith = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStringOperationFilterInputInfo.IsNendsWithSet => _set_nendsWith;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class ReferenceTyOfbwr_TimeSeriesFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _referenceTyOfbwr_TimeSeriesFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        public global::System.String TypeName => "ReferenceTyOfbwr_TimeSeriesFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _referenceTyOfbwr_TimeSeriesFilterInputFormatter = serializerResolver.GetInputValueFormatter("ReferenceTyOfbwr_TimeSeriesFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IReferenceTyOfbwr_TimeSeriesFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.Is_inventoryItemIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_inventoryItemId", Format_inventoryItemId(input._inventoryItemId)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_referenceTyOfbwr_TimeSeriesFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_referenceTyOfbwr_TimeSeriesFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? Format_inventoryItemId(global::Foo.Bar.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class ReferenceTyOfbwr_TimeSeriesFilterInput : global::Foo.Bar.State.IReferenceTyOfbwr_TimeSeriesFilterInputInfo, global::System.IEquatable<ReferenceTyOfbwr_TimeSeriesFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ReferenceTyOfbwr_TimeSeriesFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ReferenceTyOfbwr_TimeSeriesFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((_inventoryItemId is null && other._inventoryItemId is null) || _inventoryItemId != null && _inventoryItemId.Equals(other._inventoryItemId));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (_inventoryItemId != null)
                {
                    hash ^= 397 * _inventoryItemId.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::Foo.Bar.StringOperationFilterInput? _value__inventoryItemId;
        private global::System.Boolean _set__inventoryItemId;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IReferenceTyOfbwr_TimeSeriesFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IReferenceTyOfbwr_TimeSeriesFilterInputInfo.IsOrSet => _set_or;
        public global::Foo.Bar.StringOperationFilterInput? _inventoryItemId
        {
            get => _value__inventoryItemId;
            set
            {
                _set__inventoryItemId = true;
                _value__inventoryItemId = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IReferenceTyOfbwr_TimeSeriesFilterInputInfo.Is_inventoryItemIdSet => _set__inventoryItemId;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class ListRefFilterTyOfbwr_TimeSeriesFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _referenceTyOfbwr_TimeSeriesFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "ListRefFilterTyOfbwr_TimeSeriesFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _referenceTyOfbwr_TimeSeriesFilterInputFormatter = serializerResolver.GetInputValueFormatter("ReferenceTyOfbwr_TimeSeriesFilterInput");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.ListRefFilterTyOfbwr_TimeSeriesFilterInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IListRefFilterTyOfbwr_TimeSeriesFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAllSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("all", FormatAll(input.All)));
            }

            if (inputInfo.IsNoneSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("none", FormatNone(input.None)));
            }

            if (inputInfo.IsSomeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("some", FormatSome(input.Some)));
            }

            if (inputInfo.IsAnySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("any", FormatAny(input.Any)));
            }

            return fields;
        }

        private global::System.Object? FormatAll(global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _referenceTyOfbwr_TimeSeriesFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNone(global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _referenceTyOfbwr_TimeSeriesFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSome(global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _referenceTyOfbwr_TimeSeriesFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAny(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class ListRefFilterTyOfbwr_TimeSeriesFilterInput : global::Foo.Bar.State.IListRefFilterTyOfbwr_TimeSeriesFilterInputInfo, global::System.IEquatable<ListRefFilterTyOfbwr_TimeSeriesFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListRefFilterTyOfbwr_TimeSeriesFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ListRefFilterTyOfbwr_TimeSeriesFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((All is null && other.All is null) || All != null && All.Equals(other.All))) && ((None is null && other.None is null) || None != null && None.Equals(other.None)) && ((Some is null && other.Some is null) || Some != null && Some.Equals(other.Some)) && Any == other.Any;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (All != null)
                {
                    hash ^= 397 * All.GetHashCode();
                }

                if (None != null)
                {
                    hash ^= 397 * None.GetHashCode();
                }

                if (Some != null)
                {
                    hash ^= 397 * Some.GetHashCode();
                }

                if (Any != null)
                {
                    hash ^= 397 * Any.GetHashCode();
                }

                return hash;
            }
        }

        private global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? _value_all;
        private global::System.Boolean _set_all;
        private global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? _value_none;
        private global::System.Boolean _set_none;
        private global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? _value_some;
        private global::System.Boolean _set_some;
        private global::System.Boolean? _value_any;
        private global::System.Boolean _set_any;
        public global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? All
        {
            get => _value_all;
            set
            {
                _set_all = true;
                _value_all = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IListRefFilterTyOfbwr_TimeSeriesFilterInputInfo.IsAllSet => _set_all;
        public global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? None
        {
            get => _value_none;
            set
            {
                _set_none = true;
                _value_none = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IListRefFilterTyOfbwr_TimeSeriesFilterInputInfo.IsNoneSet => _set_none;
        public global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInput? Some
        {
            get => _value_some;
            set
            {
                _set_some = true;
                _value_some = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IListRefFilterTyOfbwr_TimeSeriesFilterInputInfo.IsSomeSet => _set_some;
        public global::System.Boolean? Any
        {
            get => _value_any;
            set
            {
                _set_any = true;
                _value_any = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IListRefFilterTyOfbwr_TimeSeriesFilterInputInfo.IsAnySet => _set_any;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class ReadDataInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _resolutionInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _aggregationFormatter = default !;
        public global::System.String TypeName => "ReadDataInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _resolutionInputFormatter = serializerResolver.GetInputValueFormatter("ResolutionInput");
            _aggregationFormatter = serializerResolver.GetInputValueFormatter("Aggregation");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.ReadDataInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IReadDataInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsUnitSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("unit", FormatUnit(input.Unit)));
            }

            if (inputInfo.IsFromSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("from", FormatFrom(input.From)));
            }

            if (inputInfo.IsToSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("to", FormatTo(input.To)));
            }

            if (inputInfo.IsResolutionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("resolution", FormatResolution(input.Resolution)));
            }

            if (inputInfo.IsAggregationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("aggregation", FormatAggregation(input.Aggregation)));
            }

            return fields;
        }

        private global::System.Object? FormatUnit(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFrom(global::System.DateTimeOffset input)
        {
            return _dateTimeFormatter.Format(input);
        }

        private global::System.Object? FormatTo(global::System.DateTimeOffset input)
        {
            return _dateTimeFormatter.Format(input);
        }

        private global::System.Object? FormatResolution(global::Foo.Bar.ResolutionInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _resolutionInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAggregation(global::Foo.Bar.Aggregation? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _aggregationFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class ReadDataInput : global::Foo.Bar.State.IReadDataInputInfo, global::System.IEquatable<ReadDataInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ReadDataInput)obj);
        }

        public virtual global::System.Boolean Equals(ReadDataInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Unit is null && other.Unit is null) || Unit != null && Unit.Equals(other.Unit))) && From.Equals(other.From) && To.Equals(other.To) && ((Resolution is null && other.Resolution is null) || Resolution != null && Resolution.Equals(other.Resolution)) && ((Aggregation is null && other.Aggregation is null) || Aggregation != null && Aggregation.Equals(other.Aggregation));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Unit != null)
                {
                    hash ^= 397 * Unit.GetHashCode();
                }

                hash ^= 397 * From.GetHashCode();
                hash ^= 397 * To.GetHashCode();
                if (Resolution != null)
                {
                    hash ^= 397 * Resolution.GetHashCode();
                }

                if (Aggregation != null)
                {
                    hash ^= 397 * Aggregation.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_unit;
        private global::System.Boolean _set_unit;
        private global::System.DateTimeOffset _value_from;
        private global::System.Boolean _set_from;
        private global::System.DateTimeOffset _value_to;
        private global::System.Boolean _set_to;
        private global::Foo.Bar.ResolutionInput? _value_resolution;
        private global::System.Boolean _set_resolution;
        private global::Foo.Bar.Aggregation? _value_aggregation;
        private global::System.Boolean _set_aggregation;
        public global::System.String? Unit
        {
            get => _value_unit;
            set
            {
                _set_unit = true;
                _value_unit = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IReadDataInputInfo.IsUnitSet => _set_unit;
        public global::System.DateTimeOffset From
        {
            get => _value_from;
            set
            {
                _set_from = true;
                _value_from = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IReadDataInputInfo.IsFromSet => _set_from;
        public global::System.DateTimeOffset To
        {
            get => _value_to;
            set
            {
                _set_to = true;
                _value_to = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IReadDataInputInfo.IsToSet => _set_to;
        public global::Foo.Bar.ResolutionInput? Resolution
        {
            get => _value_resolution;
            set
            {
                _set_resolution = true;
                _value_resolution = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IReadDataInputInfo.IsResolutionSet => _set_resolution;
        public global::Foo.Bar.Aggregation? Aggregation
        {
            get => _value_aggregation;
            set
            {
                _set_aggregation = true;
                _value_aggregation = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IReadDataInputInfo.IsAggregationSet => _set_aggregation;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class ResolutionInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _timeUnitFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "ResolutionInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _timeUnitFormatter = serializerResolver.GetInputValueFormatter("TimeUnit");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.ResolutionInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IResolutionInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsTimeUnitSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("timeUnit", FormatTimeUnit(input.TimeUnit)));
            }

            if (inputInfo.IsFactorSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("factor", FormatFactor(input.Factor)));
            }

            return fields;
        }

        private global::System.Object? FormatTimeUnit(global::Foo.Bar.TimeUnit input)
        {
            return _timeUnitFormatter.Format(input);
        }

        private global::System.Object? FormatFactor(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class ResolutionInput : global::Foo.Bar.State.IResolutionInputInfo, global::System.IEquatable<ResolutionInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ResolutionInput)obj);
        }

        public virtual global::System.Boolean Equals(ResolutionInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TimeUnit.Equals(other.TimeUnit)) && Factor == other.Factor;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TimeUnit.GetHashCode();
                hash ^= 397 * Factor.GetHashCode();
                return hash;
            }
        }

        private global::Foo.Bar.TimeUnit _value_timeUnit;
        private global::System.Boolean _set_timeUnit;
        private global::System.Int32 _value_factor;
        private global::System.Boolean _set_factor;
        public global::Foo.Bar.TimeUnit TimeUnit
        {
            get => _value_timeUnit;
            set
            {
                _set_timeUnit = true;
                _value_timeUnit = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IResolutionInputInfo.IsTimeUnitSet => _set_timeUnit;
        public global::System.Int32 Factor
        {
            get => _value_factor;
            set
            {
                _set_factor = true;
                _value_factor = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IResolutionInputInfo.IsFactorSet => _set_factor;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum TimeUnit
    {
        Millisecond,
        Second,
        Minute,
        Hour,
        Day,
        Week,
        Month,
        Quarter,
        Year
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumParserGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class TimeUnitSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, TimeUnit>
    {
        public global::System.String TypeName => "TimeUnit";
        public TimeUnit Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "MILLISECOND" => TimeUnit.Millisecond, "SECOND" => TimeUnit.Second, "MINUTE" => TimeUnit.Minute, "HOUR" => TimeUnit.Hour, "DAY" => TimeUnit.Day, "WEEK" => TimeUnit.Week, "MONTH" => TimeUnit.Month, "QUARTER" => TimeUnit.Quarter, "YEAR" => TimeUnit.Year, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            TimeUnit.Millisecond => "MILLISECOND", TimeUnit.Second => "SECOND", TimeUnit.Minute => "MINUTE", TimeUnit.Hour => "HOUR", TimeUnit.Day => "DAY", TimeUnit.Week => "WEEK", TimeUnit.Month => "MONTH", TimeUnit.Quarter => "QUARTER", TimeUnit.Year => "YEAR", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum Aggregation
    {
        Avg,
        Sum,
        Min,
        Max
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumParserGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class AggregationSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Aggregation>
    {
        public global::System.String TypeName => "Aggregation";
        public Aggregation Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "AVG" => Aggregation.Avg, "SUM" => Aggregation.Sum, "MIN" => Aggregation.Min, "MAX" => Aggregation.Max, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            Aggregation.Avg => "AVG", Aggregation.Sum => "SUM", Aggregation.Min => "MIN", Aggregation.Max => "MAX", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum DataFlag
    {
        NoValue,
        Valid,
        Missing
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumParserGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class DataFlagSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, DataFlag>
    {
        public global::System.String TypeName => "DataFlag";
        public DataFlag Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "NO_VALUE" => DataFlag.NoValue, "VALID" => DataFlag.Valid, "MISSING" => DataFlag.Missing, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            DataFlag.NoValue => "NO_VALUE", DataFlag.Valid => "VALID", DataFlag.Missing => "MISSING", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationDocumentGenerator
    /// <summary>
    /// Represents the operation service of the GetBwr_TimeSeries GraphQL operation
    /// <code>
    /// query GetBwr_TimeSeries($where: bwr_TimeSeriesFilterInput, $readDataInput: ReadDataInput!) {
    ///   bwr_TimeSeries(where: $where) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... Bwr_TimeSeries
    ///       ... on bwr_TimeSeries {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment Bwr_TimeSeries on bwr_TimeSeries {
    ///   inventoryId: _inventoryItemId
    ///   area
    ///   source
    ///   type
    ///   name
    ///   category
    ///   specification
    ///   commodity
    ///   resolution {
    ///     __typename
    ///     timeUnit
    ///     factor
    ///   }
    ///   unit
    ///   validationCriteria {
    ///     __typename
    ///     ... Bwr_ValidationCriteria
    ///     ... on bwr_ValidationCriteria {
    ///       id
    ///     }
    ///   }
    ///   importSpecification {
    ///     __typename
    ///     fromPeriod
    ///     toPeriod
    ///     ... on bwr_ImportSpecification {
    ///       id
    ///     }
    ///   }
    ///   _dataPoints(input: $readDataInput) {
    ///     __typename
    ///     timestamp
    ///     value
    ///     flag
    ///   }
    /// }
    /// 
    /// fragment Bwr_ValidationCriteria on bwr_ValidationCriteria {
    ///   _inventoryItemId
    ///   name
    ///   completeness
    ///   lowerBound
    ///   upperBound
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeriesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetBwr_TimeSeriesQueryDocument()
        {
        }

        public static GetBwr_TimeSeriesQueryDocument Instance
        {
            get;
        }

        = new GetBwr_TimeSeriesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x42, 0x77, 0x72, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x28, 0x24, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x62, 0x77, 0x72, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2c, 0x20, 0x24, 0x72, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x62, 0x77, 0x72, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x77, 0x68, 0x65, 0x72, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x42, 0x77, 0x72, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x62, 0x77, 0x72, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x42, 0x77, 0x72, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x62, 0x77, 0x72, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x3a, 0x20, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x75, 0x6e, 0x69, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x42, 0x77, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x62, 0x77, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x74, 0x6f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x62, 0x77, 0x72, 0x5f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x42, 0x77, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x6f, 0x6e, 0x20, 0x62, 0x77, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("sha1Hash", "fd97876c1fe57bcb23d5c9cf665e79aff6ded9e3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceGenerator
    /// <summary>
    /// Represents the operation service of the GetBwr_TimeSeries GraphQL operation
    /// <code>
    /// query GetBwr_TimeSeries($where: bwr_TimeSeriesFilterInput, $readDataInput: ReadDataInput!) {
    ///   bwr_TimeSeries(where: $where) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... Bwr_TimeSeries
    ///       ... on bwr_TimeSeries {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment Bwr_TimeSeries on bwr_TimeSeries {
    ///   inventoryId: _inventoryItemId
    ///   area
    ///   source
    ///   type
    ///   name
    ///   category
    ///   specification
    ///   commodity
    ///   resolution {
    ///     __typename
    ///     timeUnit
    ///     factor
    ///   }
    ///   unit
    ///   validationCriteria {
    ///     __typename
    ///     ... Bwr_ValidationCriteria
    ///     ... on bwr_ValidationCriteria {
    ///       id
    ///     }
    ///   }
    ///   importSpecification {
    ///     __typename
    ///     fromPeriod
    ///     toPeriod
    ///     ... on bwr_ImportSpecification {
    ///       id
    ///     }
    ///   }
    ///   _dataPoints(input: $readDataInput) {
    ///     __typename
    ///     timestamp
    ///     value
    ///     flag
    ///   }
    /// }
    /// 
    /// fragment Bwr_ValidationCriteria on bwr_ValidationCriteria {
    ///   _inventoryItemId
    ///   name
    ///   completeness
    ///   lowerBound
    ///   upperBound
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeriesQuery : global::Foo.Bar.IGetBwr_TimeSeriesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetBwr_TimeSeriesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _bwr_TimeSeriesFilterInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _readDataInputFormatter;
        public GetBwr_TimeSeriesQuery(global::StrawberryShake.IOperationExecutor<IGetBwr_TimeSeriesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _bwr_TimeSeriesFilterInputFormatter = serializerResolver.GetInputValueFormatter("bwr_TimeSeriesFilterInput");
            _readDataInputFormatter = serializerResolver.GetInputValueFormatter("ReadDataInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetBwr_TimeSeriesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBwr_TimeSeriesResult>> ExecuteAsync(global::Foo.Bar.bwr_TimeSeriesFilterInput? @where, global::Foo.Bar.ReadDataInput readDataInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(@where, readDataInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBwr_TimeSeriesResult>> Watch(global::Foo.Bar.bwr_TimeSeriesFilterInput? @where, global::Foo.Bar.ReadDataInput readDataInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(@where, readDataInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Foo.Bar.bwr_TimeSeriesFilterInput? @where, global::Foo.Bar.ReadDataInput readDataInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("where", FormatWhere(@where));
            variables.Add("readDataInput", FormatReadDataInput(readDataInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetBwr_TimeSeriesQueryDocument.Instance.Hash.Value, name: "GetBwr_TimeSeries", document: GetBwr_TimeSeriesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatWhere(global::Foo.Bar.bwr_TimeSeriesFilterInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _bwr_TimeSeriesFilterInputFormatter.Format(value);
            }
        }

        private global::System.Object? FormatReadDataInput(global::Foo.Bar.ReadDataInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _readDataInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceInterfaceGenerator
    /// <summary>
    /// Represents the operation service of the GetBwr_TimeSeries GraphQL operation
    /// <code>
    /// query GetBwr_TimeSeries($where: bwr_TimeSeriesFilterInput, $readDataInput: ReadDataInput!) {
    ///   bwr_TimeSeries(where: $where) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... Bwr_TimeSeries
    ///       ... on bwr_TimeSeries {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment Bwr_TimeSeries on bwr_TimeSeries {
    ///   inventoryId: _inventoryItemId
    ///   area
    ///   source
    ///   type
    ///   name
    ///   category
    ///   specification
    ///   commodity
    ///   resolution {
    ///     __typename
    ///     timeUnit
    ///     factor
    ///   }
    ///   unit
    ///   validationCriteria {
    ///     __typename
    ///     ... Bwr_ValidationCriteria
    ///     ... on bwr_ValidationCriteria {
    ///       id
    ///     }
    ///   }
    ///   importSpecification {
    ///     __typename
    ///     fromPeriod
    ///     toPeriod
    ///     ... on bwr_ImportSpecification {
    ///       id
    ///     }
    ///   }
    ///   _dataPoints(input: $readDataInput) {
    ///     __typename
    ///     timestamp
    ///     value
    ///     flag
    ///   }
    /// }
    /// 
    /// fragment Bwr_ValidationCriteria on bwr_ValidationCriteria {
    ///   _inventoryItemId
    ///   name
    ///   completeness
    ///   lowerBound
    ///   upperBound
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IGetBwr_TimeSeriesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBwr_TimeSeriesResult>> ExecuteAsync(global::Foo.Bar.bwr_TimeSeriesFilterInput? @where, global::Foo.Bar.ReadDataInput readDataInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBwr_TimeSeriesResult>> Watch(global::Foo.Bar.bwr_TimeSeriesFilterInput? @where, global::Foo.Bar.ReadDataInput readDataInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClient : global::Foo.Bar.IFooClient
    {
        private readonly global::Foo.Bar.IGetBwr_TimeSeriesQuery _getBwr_TimeSeries;
        public FooClient(global::Foo.Bar.IGetBwr_TimeSeriesQuery getBwr_TimeSeries)
        {
            _getBwr_TimeSeries = getBwr_TimeSeries ?? throw new global::System.ArgumentNullException(nameof(getBwr_TimeSeries));
        }

        public static global::System.String ClientName => "FooClient";
        public global::Foo.Bar.IGetBwr_TimeSeriesQuery GetBwr_TimeSeries => _getBwr_TimeSeries;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientInterfaceGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IFooClient
    {
        global::Foo.Bar.IGetBwr_TimeSeriesQuery GetBwr_TimeSeries
        {
            get;
        }
    }
}

namespace Foo.Bar.State
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class bwr_TimeSeriesEntity
    {
        public bwr_TimeSeriesEntity(global::System.String? inventoryId = default !, global::System.String? area = default !, global::System.String? source = default !, global::System.String? type = default !, global::System.String? name = default !, global::System.String? category = default !, global::System.String? specification = default !, global::System.String? commodity = default !, global::Foo.Bar.State.ResolutionData? resolution = default !, global::System.String? unit = default !, global::StrawberryShake.EntityId? validationCriteria = default !, global::StrawberryShake.EntityId? importSpecification = default !, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.DataPointData>? _dataPoints = default !)
        {
            InventoryId = inventoryId;
            Area = area;
            Source = source;
            Type = type;
            Name = name;
            Category = category;
            Specification = specification;
            Commodity = commodity;
            Resolution = resolution;
            Unit = unit;
            ValidationCriteria = validationCriteria;
            ImportSpecification = importSpecification;
            this._dataPoints = _dataPoints;
        }

        public global::System.String? InventoryId
        {
            get;
        }

        public global::System.String? Area
        {
            get;
        }

        public global::System.String? Source
        {
            get;
        }

        public global::System.String? Type
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::System.String? Category
        {
            get;
        }

        public global::System.String? Specification
        {
            get;
        }

        public global::System.String? Commodity
        {
            get;
        }

        public global::Foo.Bar.State.ResolutionData? Resolution
        {
            get;
        }

        public global::System.String? Unit
        {
            get;
        }

        public global::StrawberryShake.EntityId? ValidationCriteria
        {
            get;
        }

        public global::StrawberryShake.EntityId? ImportSpecification
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.DataPointData>? _dataPoints
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class bwr_ValidationCriteriaEntity
    {
        public bwr_ValidationCriteriaEntity(global::System.String? _inventoryItemId = default !, global::System.String? name = default !, global::System.String? completeness = default !, global::System.Decimal? lowerBound = default !, global::System.Decimal? upperBound = default !)
        {
            this._inventoryItemId = _inventoryItemId;
            Name = name;
            Completeness = completeness;
            LowerBound = lowerBound;
            UpperBound = upperBound;
        }

        public global::System.String? _inventoryItemId
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::System.String? Completeness
        {
            get;
        }

        public global::System.Decimal? LowerBound
        {
            get;
        }

        public global::System.Decimal? UpperBound
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class bwr_ImportSpecificationEntity
    {
        public bwr_ImportSpecificationEntity(global::System.Int32? fromPeriod = default !, global::System.Int32? toPeriod = default !)
        {
            FromPeriod = fromPeriod;
            ToPeriod = toPeriod;
        }

        public global::System.Int32? FromPeriod
        {
            get;
        }

        public global::System.Int32? ToPeriod
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultDataFactoryGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeriesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.GetBwr_TimeSeriesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_TimeSeriesEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries> _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_Bwr_TimeSeriesFrombwr_TimeSeriesEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ValidationCriteriaEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria> _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ImportSpecificationEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification> _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper;
        public GetBwr_TimeSeriesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_TimeSeriesEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries> getBwr_TimeSeries_Bwr_TimeSeries_Nodes_Bwr_TimeSeriesFrombwr_TimeSeriesEntityMapper, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ValidationCriteriaEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria> getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ImportSpecificationEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification> getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_Bwr_TimeSeriesFrombwr_TimeSeriesEntityMapper = getBwr_TimeSeries_Bwr_TimeSeries_Nodes_Bwr_TimeSeriesFrombwr_TimeSeriesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBwr_TimeSeries_Bwr_TimeSeries_Nodes_Bwr_TimeSeriesFrombwr_TimeSeriesEntityMapper));
            _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper = getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper));
            _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper = getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Foo.Bar.IGetBwr_TimeSeriesResult);
        public GetBwr_TimeSeriesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetBwr_TimeSeriesResultInfo info)
            {
                return new GetBwr_TimeSeriesResult(MapIGetBwr_TimeSeries_Bwr_TimeSeries(info.Bwr_TimeSeries, snapshot));
            }

            throw new global::System.ArgumentException("GetBwr_TimeSeriesResultInfo expected.");
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries? MapIGetBwr_TimeSeries_Bwr_TimeSeries(global::Foo.Bar.State.Bwr_TimeSeriesConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBwr_TimeSeries_Bwr_TimeSeries returnValue = default !;
            if (data?.__typename.Equals("Bwr_TimeSeriesConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBwr_TimeSeries_Bwr_TimeSeries_Bwr_TimeSeriesConnection(MapIGetBwr_TimeSeries_Bwr_TimeSeries_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes?>? MapIGetBwr_TimeSeries_Bwr_TimeSeries_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var bwr_TimeSeriess = new global::System.Collections.Generic.List<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                bwr_TimeSeriess.Add(MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes(child, snapshot));
            }

            return bwr_TimeSeriess;
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes? MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("bwr_TimeSeries", global::System.StringComparison.Ordinal))
            {
                return _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_Bwr_TimeSeriesFrombwr_TimeSeriesEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.bwr_TimeSeriesEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution? MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution(global::Foo.Bar.State.ResolutionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution returnValue = default !;
            if (data?.__typename.Equals("Resolution", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution_Resolution(data.TimeUnit ?? throw new global::System.ArgumentNullException(), data.Factor ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria? MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("bwr_ValidationCriteria", global::System.StringComparison.Ordinal))
            {
                return _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.bwr_ValidationCriteriaEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification? MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("bwr_ImportSpecification", global::System.StringComparison.Ordinal))
            {
                return _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.bwr_ImportSpecificationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints>? MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPointsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.DataPointData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var dataPoints = new global::System.Collections.Generic.List<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints>();
            foreach (global::Foo.Bar.State.DataPointData child in list)
            {
                dataPoints.Add(MapNonNullableIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints(child, snapshot));
            }

            return dataPoints;
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints MapNonNullableIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints(global::Foo.Bar.State.DataPointData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints returnValue = default !;
            if (data.__typename.Equals("DataPoint", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints_DataPoint(data.Timestamp ?? throw new global::System.ArgumentNullException(), data.Value ?? throw new global::System.ArgumentNullException(), data.Flag ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInfoGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeriesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetBwr_TimeSeriesResultInfo(global::Foo.Bar.State.Bwr_TimeSeriesConnectionData? bwr_TimeSeries, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Bwr_TimeSeries = bwr_TimeSeries;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Foo.Bar.State.Bwr_TimeSeriesConnectionData? Bwr_TimeSeries
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetBwr_TimeSeriesResultInfo(Bwr_TimeSeries, _entityIds, version);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeriesFrombwr_TimeSeriesEntityMapper : global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_TimeSeriesEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ValidationCriteriaEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria> _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ImportSpecificationEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification> _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper;
        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeriesFrombwr_TimeSeriesEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ValidationCriteriaEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria> getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ImportSpecificationEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification> getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper = getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper));
            _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper = getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper));
        }

        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries Map(global::Foo.Bar.State.bwr_TimeSeriesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries(entity.InventoryId, entity.Area, entity.Source, entity.Type, entity.Name, entity.Category, entity.Specification, entity.Commodity, MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution(entity.Resolution, snapshot), entity.Unit, MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria(entity.ValidationCriteria, snapshot), MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification(entity.ImportSpecification, snapshot), MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPointsNonNullableArray(entity._dataPoints, snapshot));
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution? MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution(global::Foo.Bar.State.ResolutionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution returnValue = default !;
            if (data?.__typename.Equals("Resolution", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution_Resolution(data.TimeUnit ?? throw new global::System.ArgumentNullException(), data.Factor ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria? MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("bwr_ValidationCriteria", global::System.StringComparison.Ordinal))
            {
                return _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_Bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.bwr_ValidationCriteriaEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification? MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("bwr_ImportSpecification", global::System.StringComparison.Ordinal))
            {
                return _getBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_Bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.bwr_ImportSpecificationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints>? MapIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPointsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.DataPointData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var dataPoints = new global::System.Collections.Generic.List<global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints>();
            foreach (global::Foo.Bar.State.DataPointData child in list)
            {
                dataPoints.Add(MapNonNullableIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints(child, snapshot));
            }

            return dataPoints;
        }

        private global::Foo.Bar.IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints MapNonNullableIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints(global::Foo.Bar.State.DataPointData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints returnValue = default !;
            if (data.__typename.Equals("DataPoint", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints_DataPoint(data.Timestamp ?? throw new global::System.ArgumentNullException(), data.Value ?? throw new global::System.ArgumentNullException(), data.Flag ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper : global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ValidationCriteriaEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria Map(global::Foo.Bar.State.bwr_ValidationCriteriaEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria(entity._inventoryItemId, entity.Name, entity.Completeness, entity.LowerBound, entity.UpperBound);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper : global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ImportSpecificationEntity, GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification Map(global::Foo.Bar.State.bwr_ImportSpecificationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification(entity.FromPeriod, entity.ToPeriod);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IBwr_TimeSeriesFilterInputInfo
    {
        global::System.Boolean IsAndSet
        {
            get;
        }

        global::System.Boolean IsOrSet
        {
            get;
        }

        global::System.Boolean IsNameSet
        {
            get;
        }

        global::System.Boolean IsCategorySet
        {
            get;
        }

        global::System.Boolean IsSpecificationSet
        {
            get;
        }

        global::System.Boolean IsCommoditySet
        {
            get;
        }

        global::System.Boolean IsAreaSet
        {
            get;
        }

        global::System.Boolean IsSourceSet
        {
            get;
        }

        global::System.Boolean IsTypeSet
        {
            get;
        }

        global::System.Boolean IsResolutionSet
        {
            get;
        }

        global::System.Boolean IsUnitSet
        {
            get;
        }

        global::System.Boolean IsImportSpecificationSet
        {
            get;
        }

        global::System.Boolean IsValidationCriteriaSet
        {
            get;
        }

        global::System.Boolean IsValidationResultsSet
        {
            get;
        }

        global::System.Boolean Is_inventoryItemIdSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IStringOperationFilterInputInfo
    {
        global::System.Boolean IsAndSet
        {
            get;
        }

        global::System.Boolean IsOrSet
        {
            get;
        }

        global::System.Boolean IsEqSet
        {
            get;
        }

        global::System.Boolean IsNeqSet
        {
            get;
        }

        global::System.Boolean IsContainsSet
        {
            get;
        }

        global::System.Boolean IsNcontainsSet
        {
            get;
        }

        global::System.Boolean IsInSet
        {
            get;
        }

        global::System.Boolean IsNinSet
        {
            get;
        }

        global::System.Boolean IsStartsWithSet
        {
            get;
        }

        global::System.Boolean IsNstartsWithSet
        {
            get;
        }

        global::System.Boolean IsEndsWithSet
        {
            get;
        }

        global::System.Boolean IsNendsWithSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IReferenceTyOfbwr_TimeSeriesFilterInputInfo
    {
        global::System.Boolean IsAndSet
        {
            get;
        }

        global::System.Boolean IsOrSet
        {
            get;
        }

        global::System.Boolean Is_inventoryItemIdSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IListRefFilterTyOfbwr_TimeSeriesFilterInputInfo
    {
        global::System.Boolean IsAllSet
        {
            get;
        }

        global::System.Boolean IsNoneSet
        {
            get;
        }

        global::System.Boolean IsSomeSet
        {
            get;
        }

        global::System.Boolean IsAnySet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IReadDataInputInfo
    {
        global::System.Boolean IsUnitSet
        {
            get;
        }

        global::System.Boolean IsFromSet
        {
            get;
        }

        global::System.Boolean IsToSet
        {
            get;
        }

        global::System.Boolean IsResolutionSet
        {
            get;
        }

        global::System.Boolean IsAggregationSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IResolutionInputInfo
    {
        global::System.Boolean IsTimeUnitSet
        {
            get;
        }

        global::System.Boolean IsFactorSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.JsonResultBuilderGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetBwr_TimeSeriesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetBwr_TimeSeriesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetBwr_TimeSeriesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Foo.Bar.TimeUnit> _timeUnitParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Foo.Bar.Aggregation> _aggregationParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Foo.Bar.DataFlag> _dataFlagParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetBwr_TimeSeriesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetBwr_TimeSeriesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _timeUnitParser = serializerResolver.GetLeafValueParser<global::System.String, global::Foo.Bar.TimeUnit>("TimeUnit") ?? throw new global::System.ArgumentException("No serializer for type `TimeUnit` found.");
            _aggregationParser = serializerResolver.GetLeafValueParser<global::System.String, global::Foo.Bar.Aggregation>("Aggregation") ?? throw new global::System.ArgumentException("No serializer for type `Aggregation` found.");
            _dataFlagParser = serializerResolver.GetLeafValueParser<global::System.String, global::Foo.Bar.DataFlag>("DataFlag") ?? throw new global::System.ArgumentException("No serializer for type `DataFlag` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetBwr_TimeSeriesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetBwr_TimeSeriesResult Result, GetBwr_TimeSeriesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetBwr_TimeSeriesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetBwr_TimeSeriesResult, GetBwr_TimeSeriesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Foo.Bar.State.Bwr_TimeSeriesConnectionData? bwr_TimeSeriesId = default !;
            _entityStore.Update(session =>
            {
                bwr_TimeSeriesId = DeserializeIGetBwr_TimeSeries_Bwr_TimeSeries(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bwr_TimeSeries"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetBwr_TimeSeriesResultInfo(bwr_TimeSeriesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Foo.Bar.State.Bwr_TimeSeriesConnectionData? DeserializeIGetBwr_TimeSeries_Bwr_TimeSeries(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Bwr_TimeSeriesConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Foo.Bar.State.Bwr_TimeSeriesConnectionData(typename, nodes: UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_NodesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_NodesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var bwr_TimeSeriess = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                bwr_TimeSeriess.Add(UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_NodesEntity(session, child, entityIds));
            }

            return bwr_TimeSeriess;
        }

        private global::StrawberryShake.EntityId? UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("bwr_TimeSeries", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Foo.Bar.State.bwr_TimeSeriesEntity? entity))
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.bwr_TimeSeriesEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inventoryId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "area")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "source")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "category")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "specification")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commodity")), DeserializeIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "resolution")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "unit")), UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteriaEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationCriteria"), entityIds), UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecificationEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "importSpecification"), entityIds), DeserializeIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPointsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "_dataPoints"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.bwr_TimeSeriesEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inventoryId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "area")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "source")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "category")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "specification")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commodity")), DeserializeIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "resolution")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "unit")), UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteriaEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationCriteria"), entityIds), UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecificationEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "importSpecification"), entityIds), DeserializeIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPointsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "_dataPoints"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Foo.Bar.State.ResolutionData? DeserializeIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_Resolution(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Resolution", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Foo.Bar.State.ResolutionData(typename, timeUnit: DeserializeNonNullableTimeUnit(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeUnit")), factor: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "factor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Foo.Bar.TimeUnit DeserializeNonNullableTimeUnit(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _timeUnitParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteriaEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("bwr_ValidationCriteria", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Foo.Bar.State.bwr_ValidationCriteriaEntity? entity))
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.bwr_ValidationCriteriaEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "_inventoryItemId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completeness")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lowerBound")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "upperBound"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.bwr_ValidationCriteriaEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "_inventoryItemId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completeness")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lowerBound")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "upperBound"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Decimal? DeserializeDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecificationEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("bwr_ImportSpecification", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Foo.Bar.State.bwr_ImportSpecificationEntity? entity))
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.bwr_ImportSpecificationEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fromPeriod")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "toPeriod"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.bwr_ImportSpecificationEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fromPeriod")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "toPeriod"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.DataPointData>? DeserializeIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPointsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var dataPoints = new global::System.Collections.Generic.List<global::Foo.Bar.State.DataPointData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                dataPoints.Add(DeserializeNonNullableIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints(child));
            }

            return dataPoints;
        }

        private global::Foo.Bar.State.DataPointData DeserializeNonNullableIGetBwr_TimeSeries_Bwr_TimeSeries_Nodes__dataPoints(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DataPoint", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Foo.Bar.State.DataPointData(typename, timestamp: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timestamp")), @value: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), flag: DeserializeNonNullableDataFlag(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flag")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Foo.Bar.DataFlag DeserializeNonNullableDataFlag(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dataFlagParser.Parse(obj.Value.GetString()!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.DataTypeGenerator
    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class Bwr_TimeSeriesConnectionData
    {
        public Bwr_TimeSeriesConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Nodes
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.DataTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class ResolutionData
    {
        public ResolutionData(global::System.String __typename, global::Foo.Bar.TimeUnit? timeUnit = default !, global::System.Int32? factor = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TimeUnit = timeUnit;
            Factor = factor;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::Foo.Bar.TimeUnit? TimeUnit
        {
            get;
        }

        public global::System.Int32? Factor
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.DataTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class DataPointData
    {
        public DataPointData(global::System.String __typename, global::System.DateTimeOffset? timestamp = default !, global::System.Double? @value = default !, global::Foo.Bar.DataFlag? flag = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Timestamp = timestamp;
            Value = @value;
            Flag = flag;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.DateTimeOffset? Timestamp
        {
            get;
        }

        public global::System.Double? Value
        {
            get;
        }

        public global::Foo.Bar.DataFlag? Flag
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityIdFactoryGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "bwr_TimeSeries" => Parsebwr_TimeSeriesEntityId(obj, __typename), "bwr_ValidationCriteria" => Parsebwr_ValidationCriteriaEntityId(obj, __typename), "bwr_ImportSpecification" => Parsebwr_ImportSpecificationEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "bwr_TimeSeries" => Formatbwr_TimeSeriesEntityId(entityId), "bwr_ValidationCriteria" => Formatbwr_ValidationCriteriaEntityId(entityId), "bwr_ImportSpecification" => Formatbwr_ImportSpecificationEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId Parsebwr_TimeSeriesEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String Formatbwr_TimeSeriesEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId Parsebwr_ValidationCriteriaEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String Formatbwr_ValidationCriteriaEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId Parsebwr_ImportSpecificationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String Formatbwr_ImportSpecificationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.StoreAccessorGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public FooClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.DependencyInjectionGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public static partial class FooClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Foo.Bar.State.FooClientStoreAccessor> AddFooClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Foo.Bar.State.FooClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.GetBwr_TimeSeriesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.FooClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.IFooClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Foo.Bar.State.FooClientStoreAccessor>("FooClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("FooClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_TimeSeriesEntity, global::Foo.Bar.GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeries>, global::Foo.Bar.State.GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_bwr_TimeSeriesFrombwr_TimeSeriesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ValidationCriteriaEntity, global::Foo.Bar.GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteria>, global::Foo.Bar.State.GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ValidationCriteria_bwr_ValidationCriteriaFrombwr_ValidationCriteriaEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.bwr_ImportSpecificationEntity, global::Foo.Bar.GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecification>, global::Foo.Bar.State.GetBwr_TimeSeries_Bwr_TimeSeries_Nodes_ImportSpecification_bwr_ImportSpecificationFrombwr_ImportSpecificationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.TimeUnitSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.AggregationSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.DataFlagSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.bwr_TimeSeriesFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.StringOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.ReferenceTyOfbwr_TimeSeriesFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.ListRefFilterTyOfbwr_TimeSeriesFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.ReadDataInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.ResolutionInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetBwr_TimeSeriesResult>, global::Foo.Bar.State.GetBwr_TimeSeriesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetBwr_TimeSeriesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.IGetBwr_TimeSeriesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetBwr_TimeSeriesResult>, global::Foo.Bar.State.GetBwr_TimeSeriesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Foo.Bar.IGetBwr_TimeSeriesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetBwr_TimeSeriesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetBwr_TimeSeriesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.GetBwr_TimeSeriesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.IGetBwr_TimeSeriesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.GetBwr_TimeSeriesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Foo.Bar.State.FooClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.FooClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.IFooClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.FooClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}


