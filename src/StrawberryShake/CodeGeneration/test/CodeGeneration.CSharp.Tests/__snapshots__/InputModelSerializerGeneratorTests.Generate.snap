[global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
public partial ReviewInputSerializer
    : global::StrawberryShake.IInputSerializer
{
    private bool _needsInitialization = true;
    private global::StrawberryShake.IValueSerializer _stringSerializer;
    private global::StrawberryShake.IValueSerializer _intSerializer;

    public string Name
    {
        get
        {
            return "ReviewInput";
        }
    }

    public global::StrawberryShake.ValueKind Kind
    {
        get
        {
            return global::StrawberryShake.ValueKind.InputObject;
        }
    }

    public global::System.Type ClrType
    {
        get
        {
            return typeof(global::Demo.ReviewInput);
        }
    }

    public global::System.Type SerializationType
    {
        get
        {
            return typeof(global::System.Collections.Generic.IReadOnlyDictionary<string, object>);
        }
    }

    public void Initialize(global::StrawberryShake.IValueSerializerCollection serializerResolver)
    {
        if (serializerResolver is null)
        {
            throw new global::System.ArgumentNullException(nameof(serializerResolver));
        }

        _stringSerializer = serializerResolver.Get("String")
        _intSerializer = serializerResolver.Get("Int")
        _needsInitialization = false;
    }

    public object Serialize(object value)
    {
        if (_needsInitialization)
        {
            throw new global::System.InvalidOperationException(
                $"The serializer for type `{Name}` has not been initialized.");
        }

        if (value is null)
        {
            return null;
        }

        var input = (global::Demo.ReviewInput)value;
        var map = new global::System.Collections.Generic.Dictionary<string, object>();

        if (input.Commentary.HasValue)
        {
            map.Add("commentary", SerializeNullableString(input.Commentary.Value));
        }

        if (input.Stars.HasValue)
        {
            map.Add("stars", SerializeNullableInt(input.Stars.Value));
        }

        return map;
    }

    public object Deserialize(object serialized)
    {
        throw new NotSupportedException(
            "Deserializing input values is not supported.");
    }

    private object SerializeNullableString(object value)
    {
        if (value is null)
        {
            return null;
        }

        _stringSerializer!.Serialize(value);
    }

    private object SerializeNullableInt(object value)
    {
        _intSerializer!.Serialize(value);
    }
}
