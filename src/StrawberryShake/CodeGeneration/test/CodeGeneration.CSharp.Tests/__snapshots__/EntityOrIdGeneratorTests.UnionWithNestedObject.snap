// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable RedundantNameQualifier
// ReSharper disable ArrangeObjectCreationWhenTypeEvident
// ReSharper disable UnusedType.Global
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMethodReturnValue.Local
// ReSharper disable ConvertToAutoProperty
// ReSharper disable UnusedMember.Global
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable InconsistentNaming

// FooClient

// <auto-generated/>
#nullable enable

namespace Foo.Bar
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingForResult : global::System.IEquatable<StoreUserSettingForResult>, IStoreUserSettingForResult
    {
        public StoreUserSettingForResult(global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor storeUserSettingFor)
        {
            StoreUserSettingFor = storeUserSettingFor;
        }

        public global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor StoreUserSettingFor
        {
            get;
        }

        public virtual global::System.Boolean Equals(StoreUserSettingForResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (StoreUserSettingFor.Equals(other.StoreUserSettingFor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StoreUserSettingForResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * StoreUserSettingFor.GetHashCode();
                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess : global::System.IEquatable<StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess>, IStoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess
    {
        public StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess(global::System.Int32 id)
        {
            Id = id;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public virtual global::System.Boolean Equals(StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingFor_StoreUserSettingFor_UserSettingError : global::System.IEquatable<StoreUserSettingFor_StoreUserSettingFor_UserSettingError>, IStoreUserSettingFor_StoreUserSettingFor_UserSettingError
    {
        public StoreUserSettingFor_StoreUserSettingFor_UserSettingError(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor_Errors> errors)
        {
            Errors = errors;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor_Errors> Errors
        {
            get;
        }

        public virtual global::System.Boolean Equals(StoreUserSettingFor_StoreUserSettingFor_UserSettingError? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StoreUserSettingFor_StoreUserSettingFor_UserSettingError)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingFor_StoreUserSettingFor_Errors_ErrorNode : global::System.IEquatable<StoreUserSettingFor_StoreUserSettingFor_Errors_ErrorNode>, IStoreUserSettingFor_StoreUserSettingFor_Errors_ErrorNode
    {
        public StoreUserSettingFor_StoreUserSettingFor_Errors_ErrorNode(global::Foo.Bar.ErrorCode? code, global::System.String? message)
        {
            Code = code;
            Message = message;
        }

        public global::Foo.Bar.ErrorCode? Code
        {
            get;
        }

        public global::System.String? Message
        {
            get;
        }

        public virtual global::System.Boolean Equals(StoreUserSettingFor_StoreUserSettingFor_Errors_ErrorNode? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Code is null && other.Code is null) || Code != null && Code.Equals(other.Code))) && ((Message is null && other.Message is null) || Message != null && Message.Equals(other.Message));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StoreUserSettingFor_StoreUserSettingFor_Errors_ErrorNode)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Code != null)
                {
                    hash ^= 397 * Code.GetHashCode();
                }

                if (Message != null)
                {
                    hash ^= 397 * Message.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IStoreUserSettingForResult
    {
        public global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor StoreUserSettingFor
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IStoreUserSettingFor_StoreUserSettingFor
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IStoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess : IStoreUserSettingFor_StoreUserSettingFor
    {
        public global::System.Int32 Id
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IStoreUserSettingFor_StoreUserSettingFor_UserSettingError : IStoreUserSettingFor_StoreUserSettingFor
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor_Errors> Errors
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IStoreUserSettingFor_StoreUserSettingFor_Errors
    {
        public global::Foo.Bar.ErrorCode? Code
        {
            get;
        }

        public global::System.String? Message
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IStoreUserSettingFor_StoreUserSettingFor_Errors_ErrorNode : IStoreUserSettingFor_StoreUserSettingFor_Errors
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingForInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "StoreUserSettingForInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.StoreUserSettingForInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IStoreUserSettingForInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsPortalSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("portal", FormatPortal(input.Portal)));
            }

            if (inputInfo.IsMobileSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("mobile", FormatMobile(input.Mobile)));
            }

            return fields;
        }

        private global::System.Object? FormatPortal(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatMobile(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class StoreUserSettingForInput : global::Foo.Bar.State.IStoreUserSettingForInputInfo, global::System.IEquatable<StoreUserSettingForInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StoreUserSettingForInput)obj);
        }

        public virtual global::System.Boolean Equals(StoreUserSettingForInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Portal is null && other.Portal is null) || Portal != null && Portal.Equals(other.Portal))) && ((Mobile is null && other.Mobile is null) || Mobile != null && Mobile.Equals(other.Mobile));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Portal != null)
                {
                    hash ^= 397 * Portal.GetHashCode();
                }

                if (Mobile != null)
                {
                    hash ^= 397 * Mobile.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_portal;
        private global::System.Boolean _set_portal;
        private global::System.String? _value_mobile;
        private global::System.Boolean _set_mobile;
        public global::System.String? Portal
        {
            get => _value_portal;
            set
            {
                _set_portal = true;
                _value_portal = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStoreUserSettingForInputInfo.IsPortalSet => _set_portal;
        public global::System.String? Mobile
        {
            get => _value_mobile;
            set
            {
                _set_mobile = true;
                _value_mobile = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IStoreUserSettingForInputInfo.IsMobileSet => _set_mobile;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum ErrorCode
    {
        Unknown,
        MissingArgument,
        InvalidArgument,
        Failed
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumParserGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class ErrorCodeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ErrorCode>
    {
        public global::System.String TypeName => "ErrorCode";
        public ErrorCode Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "UNKNOWN" => ErrorCode.Unknown, "MISSING_ARGUMENT" => ErrorCode.MissingArgument, "INVALID_ARGUMENT" => ErrorCode.InvalidArgument, "FAILED" => ErrorCode.Failed, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            ErrorCode.Unknown => "UNKNOWN", ErrorCode.MissingArgument => "MISSING_ARGUMENT", ErrorCode.InvalidArgument => "INVALID_ARGUMENT", ErrorCode.Failed => "FAILED", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationDocumentGenerator
    /// <summary>
    /// Represents the operation service of the StoreUserSettingFor GraphQL operation
    /// <code>
    /// mutation StoreUserSettingFor($userId: Int!, $customerId: Int!, $input: StoreUserSettingForInput!) {
    ///   storeUserSettingFor(userId: $userId, customerId: $customerId, input: $input) {
    ///     __typename
    ///     ... on UserSettingSuccess {
    ///       id
    ///     }
    ///     ... on UserSettingError {
    ///       errors {
    ///         __typename
    ///         code
    ///         message
    ///       }
    ///     }
    ///     ... on UserSettingSuccess {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingForMutationDocument : global::StrawberryShake.IDocument
    {
        private StoreUserSettingForMutationDocument()
        {
        }

        public static StoreUserSettingForMutationDocument Instance
        {
            get;
        }

        = new StoreUserSettingForMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x28, 0x24, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x28, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x7b, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("sha1Hash", "f33df9abf35b15407c80896d34adc22dd9dc8695");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceGenerator
    /// <summary>
    /// Represents the operation service of the StoreUserSettingFor GraphQL operation
    /// <code>
    /// mutation StoreUserSettingFor($userId: Int!, $customerId: Int!, $input: StoreUserSettingForInput!) {
    ///   storeUserSettingFor(userId: $userId, customerId: $customerId, input: $input) {
    ///     __typename
    ///     ... on UserSettingSuccess {
    ///       id
    ///     }
    ///     ... on UserSettingError {
    ///       errors {
    ///         __typename
    ///         code
    ///         message
    ///       }
    ///     }
    ///     ... on UserSettingSuccess {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingForMutation : global::Foo.Bar.IStoreUserSettingForMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IStoreUserSettingForResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _storeUserSettingForInputFormatter;
        public StoreUserSettingForMutation(global::StrawberryShake.IOperationExecutor<IStoreUserSettingForResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _storeUserSettingForInputFormatter = serializerResolver.GetInputValueFormatter("StoreUserSettingForInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IStoreUserSettingForResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IStoreUserSettingForResult>> ExecuteAsync(global::System.Int32 userId, global::System.Int32 customerId, global::Foo.Bar.StoreUserSettingForInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(userId, customerId, input);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IStoreUserSettingForResult>> Watch(global::System.Int32 userId, global::System.Int32 customerId, global::Foo.Bar.StoreUserSettingForInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(userId, customerId, input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 userId, global::System.Int32 customerId, global::Foo.Bar.StoreUserSettingForInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("userId", FormatUserId(userId));
            variables.Add("customerId", FormatCustomerId(customerId));
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: StoreUserSettingForMutationDocument.Instance.Hash.Value, name: "StoreUserSettingFor", document: StoreUserSettingForMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatUserId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatCustomerId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatInput(global::Foo.Bar.StoreUserSettingForInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _storeUserSettingForInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceInterfaceGenerator
    /// <summary>
    /// Represents the operation service of the StoreUserSettingFor GraphQL operation
    /// <code>
    /// mutation StoreUserSettingFor($userId: Int!, $customerId: Int!, $input: StoreUserSettingForInput!) {
    ///   storeUserSettingFor(userId: $userId, customerId: $customerId, input: $input) {
    ///     __typename
    ///     ... on UserSettingSuccess {
    ///       id
    ///     }
    ///     ... on UserSettingError {
    ///       errors {
    ///         __typename
    ///         code
    ///         message
    ///       }
    ///     }
    ///     ... on UserSettingSuccess {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IStoreUserSettingForMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IStoreUserSettingForResult>> ExecuteAsync(global::System.Int32 userId, global::System.Int32 customerId, global::Foo.Bar.StoreUserSettingForInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IStoreUserSettingForResult>> Watch(global::System.Int32 userId, global::System.Int32 customerId, global::Foo.Bar.StoreUserSettingForInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClient : global::Foo.Bar.IFooClient
    {
        private readonly global::Foo.Bar.IStoreUserSettingForMutation _storeUserSettingFor;
        public FooClient(global::Foo.Bar.IStoreUserSettingForMutation storeUserSettingFor)
        {
            _storeUserSettingFor = storeUserSettingFor ?? throw new global::System.ArgumentNullException(nameof(storeUserSettingFor));
        }

        public static global::System.String ClientName => "FooClient";
        public global::Foo.Bar.IStoreUserSettingForMutation StoreUserSettingFor => _storeUserSettingFor;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientInterfaceGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IFooClient
    {
        global::Foo.Bar.IStoreUserSettingForMutation StoreUserSettingFor
        {
            get;
        }
    }
}

namespace Foo.Bar.State
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class UserSettingSuccessEntity
    {
        public UserSettingSuccessEntity(global::System.Int32 id = default !)
        {
            Id = id;
        }

        public global::System.Int32 Id
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultDataFactoryGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingForResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.StoreUserSettingForResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.UserSettingSuccessEntity, StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess> _storeUserSettingFor_StoreUserSettingFor_UserSettingSuccessFromUserSettingSuccessEntityMapper;
        public StoreUserSettingForResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.UserSettingSuccessEntity, StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess> storeUserSettingFor_StoreUserSettingFor_UserSettingSuccessFromUserSettingSuccessEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _storeUserSettingFor_StoreUserSettingFor_UserSettingSuccessFromUserSettingSuccessEntityMapper = storeUserSettingFor_StoreUserSettingFor_UserSettingSuccessFromUserSettingSuccessEntityMapper ?? throw new global::System.ArgumentNullException(nameof(storeUserSettingFor_StoreUserSettingFor_UserSettingSuccessFromUserSettingSuccessEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Foo.Bar.IStoreUserSettingForResult);
        public StoreUserSettingForResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is StoreUserSettingForResultInfo info)
            {
                return new StoreUserSettingForResult(MapNonNullableIStoreUserSettingFor_StoreUserSettingFor(info.StoreUserSettingFor, snapshot));
            }

            throw new global::System.ArgumentException("StoreUserSettingForResultInfo expected.");
        }

        private global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor MapNonNullableIStoreUserSettingFor_StoreUserSettingFor(global::StrawberryShake.EntityIdOrData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data.EntityId is
            {
            }

            id)
            {
                return MapIStoreUserSettingFor_StoreUserSettingForData(id, snapshot);
            }
            else if (data.Data is global::Foo.Bar.State.IUserSettingResultData d)
            {
                return MapIStoreUserSettingFor_StoreUserSettingForEntity(d, snapshot);
            }
            else
            {
                throw new global::System.ArgumentOutOfRangeException();
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor_Errors> MapNonNullableIStoreUserSettingFor_StoreUserSettingFor_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.ErrorNodeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var errorNodes = new global::System.Collections.Generic.List<global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor_Errors>();
            foreach (global::Foo.Bar.State.ErrorNodeData child in list)
            {
                errorNodes.Add(MapNonNullableIStoreUserSettingFor_StoreUserSettingFor_Errors(child, snapshot));
            }

            return errorNodes;
        }

        private global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor_Errors MapNonNullableIStoreUserSettingFor_StoreUserSettingFor_Errors(global::Foo.Bar.State.ErrorNodeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IStoreUserSettingFor_StoreUserSettingFor_Errors returnValue = default !;
            if (data.__typename.Equals("ErrorNode", global::System.StringComparison.Ordinal))
            {
                returnValue = new StoreUserSettingFor_StoreUserSettingFor_Errors_ErrorNode(data.Code, data.Message);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor MapIStoreUserSettingFor_StoreUserSettingForEntity(global::Foo.Bar.State.IUserSettingResultData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IStoreUserSettingFor_StoreUserSettingFor? returnValue;
            if (data is global::Foo.Bar.State.UserSettingErrorData userSettingError)
            {
                returnValue = new global::Foo.Bar.StoreUserSettingFor_StoreUserSettingFor_UserSettingError(MapNonNullableIStoreUserSettingFor_StoreUserSettingFor_ErrorsNonNullableArray(userSettingError.Errors, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Foo.Bar.IStoreUserSettingFor_StoreUserSettingFor MapIStoreUserSettingFor_StoreUserSettingForData(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("UserSettingSuccess", global::System.StringComparison.Ordinal))
            {
                return _storeUserSettingFor_StoreUserSettingFor_UserSettingSuccessFromUserSettingSuccessEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.UserSettingSuccessEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInfoGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingForResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public StoreUserSettingForResultInfo(global::StrawberryShake.EntityIdOrData storeUserSettingFor, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            StoreUserSettingFor = storeUserSettingFor;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityIdOrData StoreUserSettingFor
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new StoreUserSettingForResultInfo(StoreUserSettingFor, _entityIds, version);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccessFromUserSettingSuccessEntityMapper : global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.UserSettingSuccessEntity, StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccessFromUserSettingSuccessEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess Map(global::Foo.Bar.State.UserSettingSuccessEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess(entity.Id);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IStoreUserSettingForInputInfo
    {
        global::System.Boolean IsPortalSet
        {
            get;
        }

        global::System.Boolean IsMobileSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.JsonResultBuilderGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class StoreUserSettingForBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IStoreUserSettingForResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IStoreUserSettingForResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Foo.Bar.ErrorCode> _errorCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public StoreUserSettingForBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IStoreUserSettingForResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _errorCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Foo.Bar.ErrorCode>("ErrorCode") ?? throw new global::System.ArgumentException("No serializer for type `ErrorCode` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IStoreUserSettingForResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IStoreUserSettingForResult Result, StoreUserSettingForResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IStoreUserSettingForResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IStoreUserSettingForResult, StoreUserSettingForResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityIdOrData storeUserSettingForId = default !;
            _entityStore.Update(session =>
            {
                storeUserSettingForId = DeserializeNonNullableIUserSettingResultData(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "storeUserSettingFor"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new StoreUserSettingForResultInfo(storeUserSettingForId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityIdOrData DeserializeNonNullableIUserSettingResultData(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserSettingSuccess", global::System.StringComparison.Ordinal) ?? false)
            {
                global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
                if (entityId.Name.Equals("UserSettingSuccess", global::System.StringComparison.Ordinal))
                {
                    if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Foo.Bar.State.UserSettingSuccessEntity? entity))
                    {
                        session.SetEntity(entityId, new global::Foo.Bar.State.UserSettingSuccessEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                    }
                    else
                    {
                        session.SetEntity(entityId, new global::Foo.Bar.State.UserSettingSuccessEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                    }

                    return new global::StrawberryShake.EntityIdOrData(entityId);
                }
            }

            if (typename?.Equals("UserSettingError", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryShake.EntityIdOrData(new global::Foo.Bar.State.UserSettingErrorData(typename, errors: DeserializeNonNullableIStoreUserSettingFor_StoreUserSettingFor_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors"))));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.ErrorNodeData> DeserializeNonNullableIStoreUserSettingFor_StoreUserSettingFor_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var errorNodes = new global::System.Collections.Generic.List<global::Foo.Bar.State.ErrorNodeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                errorNodes.Add(DeserializeNonNullableIStoreUserSettingFor_StoreUserSettingFor_Errors(child));
            }

            return errorNodes;
        }

        private global::Foo.Bar.State.ErrorNodeData DeserializeNonNullableIStoreUserSettingFor_StoreUserSettingFor_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ErrorNode", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Foo.Bar.State.ErrorNodeData(typename, code: DeserializeErrorCode(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), message: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Foo.Bar.ErrorCode? DeserializeErrorCode(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _errorCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.DataTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial interface IUserSettingResultData
    {
        global::System.String __typename
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.DataTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class UserSettingErrorData : IUserSettingResultData
    {
        public UserSettingErrorData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.ErrorNodeData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Errors = errors;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.ErrorNodeData>? Errors
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.DataTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class ErrorNodeData
    {
        public ErrorNodeData(global::System.String __typename, global::Foo.Bar.ErrorCode? code = default !, global::System.String? message = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Code = code;
            Message = message;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::Foo.Bar.ErrorCode? Code
        {
            get;
        }

        public global::System.String? Message
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityIdFactoryGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "UserSettingSuccess" => ParseUserSettingSuccessEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "UserSettingSuccess" => FormatUserSettingSuccessEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseUserSettingSuccessEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatUserSettingSuccessEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.StoreAccessorGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public FooClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.DependencyInjectionGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public static partial class FooClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Foo.Bar.State.FooClientStoreAccessor> AddFooClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Foo.Bar.State.FooClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.StoreUserSettingForMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.FooClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.IFooClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Foo.Bar.State.FooClientStoreAccessor>("FooClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("FooClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.UserSettingSuccessEntity, global::Foo.Bar.StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccess>, global::Foo.Bar.State.StoreUserSettingFor_StoreUserSettingFor_UserSettingSuccessFromUserSettingSuccessEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.ErrorCodeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.StoreUserSettingForInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IStoreUserSettingForResult>, global::Foo.Bar.State.StoreUserSettingForResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IStoreUserSettingForResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.IStoreUserSettingForMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IStoreUserSettingForResult>, global::Foo.Bar.State.StoreUserSettingForBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Foo.Bar.IStoreUserSettingForResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Foo.Bar.IStoreUserSettingForResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IStoreUserSettingForResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.StoreUserSettingForMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.IStoreUserSettingForMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.StoreUserSettingForMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Foo.Bar.State.FooClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.FooClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.IFooClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.FooClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}


