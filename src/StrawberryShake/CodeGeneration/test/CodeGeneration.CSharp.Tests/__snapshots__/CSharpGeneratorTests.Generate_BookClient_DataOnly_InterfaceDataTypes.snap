// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable RedundantNameQualifier
// ReSharper disable ArrangeObjectCreationWhenTypeEvident
// ReSharper disable UnusedType.Global
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMethodReturnValue.Local
// ReSharper disable ConvertToAutoProperty
// ReSharper disable UnusedMember.Global
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable InconsistentNaming

// SearchSomethingResultFactory

// StrawberryShake.CodeGeneration.CSharp.ResultDataFactoryGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class SearchSomethingResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<SearchSomethingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;

        public SearchSomethingResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public SearchSomethingResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo)
        {
            if (dataInfo is SearchSomethingResultInfo info)
            {
                return new SearchSomethingResult(MapIPrintDataArray(info.Prints));
            }

            throw new global::System.ArgumentException("SearchSomethingResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<ISearchSomething_Prints?>? MapIPrintDataArray(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.IPrintData?>? list)
        {
            if (list == default)
            {
                return null;
            }

            var prints = new global::System.Collections.Generic.List<ISearchSomething_Prints?>();

            foreach (global::Foo.Bar.State.IPrintData? child in list)
            {
                prints.Add(MapIPrintData(child));
            }

            return prints;
        }

        private ISearchSomething_Prints? MapIPrintData(global::Foo.Bar.State.IPrintData data)
        {
            if (data == default)
            {
                return null;
            }

            ISearchSomething_Prints returnValue = default!;

            if (data is global::Foo.Bar.State.BookData book)
            {
                returnValue = new global::Foo.Bar.SearchSomething_Prints_Book(
                    book.Isbn,
                    book.Title);
            }
            else if (data is global::Foo.Bar.State.MagazineData magazine)
            {
                returnValue = new global::Foo.Bar.SearchSomething_Prints_Magazine(
                    magazine.Isbn,
                    magazine.CoverImageUrl);
            }
            else {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }
    }
}


// SearchSomethingResultInfo

// StrawberryShake.CodeGeneration.CSharp.ResultInfoGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class SearchSomethingResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public SearchSomethingResultInfo(
            global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.IPrintData?>? prints,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Prints = prints;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.IPrintData?>? Prints { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SearchSomethingResultInfo(
                Prints,
                _entityIds,
                version);
        }
    }
}


// SearchSomethingResult

// StrawberryShake.CodeGeneration.CSharp.ResultTypeGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class SearchSomethingResult
        : ISearchSomethingResult
    {
        public SearchSomethingResult(global::System.Collections.Generic.IReadOnlyList<ISearchSomething_Prints?>? prints)
        {
            Prints = prints;
        }

        public global::System.Collections.Generic.IReadOnlyList<ISearchSomething_Prints?>? Prints { get; } = default!;
    }
}


// SearchSomething_Prints_Book

// StrawberryShake.CodeGeneration.CSharp.ResultTypeGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class SearchSomething_Prints_Book
        : ISearchSomething_Prints_Book
    {
        public SearchSomething_Prints_Book(
            global::System.String isbn,
            global::System.String title)
        {
            Isbn = isbn;
            Title = title;
        }

        public global::System.String Isbn { get; }

        public global::System.String Title { get; }
    }
}


// SearchSomething_Prints_Magazine

// StrawberryShake.CodeGeneration.CSharp.ResultTypeGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class SearchSomething_Prints_Magazine
        : ISearchSomething_Prints_Magazine
    {
        public SearchSomething_Prints_Magazine(
            global::System.String isbn,
            global::System.String? coverImageUrl)
        {
            Isbn = isbn;
            CoverImageUrl = coverImageUrl;
        }

        public global::System.String Isbn { get; }

        public global::System.String? CoverImageUrl { get; } = default!;
    }
}


// ISearchSomethingResult

// StrawberryShake.CodeGeneration.CSharp.ResultInterfaceGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface ISearchSomethingResult
    {
        public global::System.Collections.Generic.IReadOnlyList<ISearchSomething_Prints?>? Prints { get; }
    }
}


// ISearchSomething_Prints

// StrawberryShake.CodeGeneration.CSharp.ResultInterfaceGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface ISearchSomething_Prints
    {
        public global::System.String Isbn { get; }
    }
}


// ISearchSomething_Prints_Book

// StrawberryShake.CodeGeneration.CSharp.ResultInterfaceGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface ISearchSomething_Prints_Book
        : ISearchSomething_Prints
    {
        public global::System.String Title { get; }
    }
}


// ISearchSomething_Prints_Magazine

// StrawberryShake.CodeGeneration.CSharp.ResultInterfaceGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface ISearchSomething_Prints_Magazine
        : ISearchSomething_Prints
    {
        public global::System.String? CoverImageUrl { get; }
    }
}


// SearchSomethingQueryDocument

// StrawberryShake.CodeGeneration.CSharp.OperationDocumentGenerator

#nullable enable

namespace Foo.Bar
{
    /// <summary>
    /// Represents the operation service of the SearchSomething GraphQL operation
    /// <code>
    /// query SearchSomething {
    ///   prints {
    ///     __typename
    ///     isbn
    ///     ... on Book {
    ///       title
    ///     }
    ///     ... on Magazine {
    ///       coverImageUrl
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class SearchSomethingQueryDocument
        : global::StrawberryShake.IDocument
    {
        private SearchSomethingQueryDocument()
        {
        }

        public static SearchSomethingQueryDocument Instance { get; } = new SearchSomethingQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x73, 0x62, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x6b, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x7d, 0x0a, 0x7d };

        public override global::System.String ToString()
        {
            return global::System.Text.Encoding.UTF8.GetString(Body);
        }
    }
}


// SearchSomethingQuery

// StrawberryShake.CodeGeneration.CSharp.OperationServiceGenerator

#nullable enable

namespace Foo.Bar
{
    /// <summary>
    /// Represents the operation service of the SearchSomething GraphQL operation
    /// <code>
    /// query SearchSomething {
    ///   prints {
    ///     __typename
    ///     isbn
    ///     ... on Book {
    ///       title
    ///     }
    ///     ... on Magazine {
    ///       coverImageUrl
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class SearchSomethingQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISearchSomethingResult> _operationExecutor;

        public SearchSomethingQuery(global::StrawberryShake.IOperationExecutor<ISearchSomethingResult> operationExecutor)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISearchSomethingResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISearchSomethingResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {

            return new global::StrawberryShake.OperationRequest(
                "SearchSomething",
                SearchSomethingQueryDocument.Instance);
        }
    }
}


// SearchSomethingBuilder

// StrawberryShake.CodeGeneration.CSharp.JsonResultBuilderGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class SearchSomethingBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, ISearchSomethingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::System.Func<global::System.Text.Json.JsonElement, global::StrawberryShake.EntityId> _extractId;
        private readonly global::StrawberryShake.IOperationResultDataFactory<ISearchSomethingResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public SearchSomethingBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::System.Func<global::System.Text.Json.JsonElement, global::StrawberryShake.EntityId> extractId,
            global::StrawberryShake.IOperationResultDataFactory<ISearchSomethingResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _extractId = extractId
                 ?? throw new global::System.ArgumentNullException(nameof(extractId));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ISearchSomethingResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISearchSomethingResult Result, SearchSomethingResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            if (response.Body != null)
            {
                if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement))
                {
                    data = BuildData(dataElement);
                }
                if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
            }

            return new global::StrawberryShake.OperationResult<ISearchSomethingResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (ISearchSomethingResult, SearchSomethingResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            using global::StrawberryShake.IEntityUpdateSession session = _entityStore.BeginUpdate();
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();


            var resultInfo = new SearchSomethingResultInfo(
                DeserializeIPrintDataArray(
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "prints")),
                entityIds,
                session.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.State.IPrintData?>? DeserializeIPrintDataArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var prints = new global::System.Collections.Generic.List<global::Foo.Bar.State.IPrintData?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                prints.Add(DeserializeIPrintData(child));
            }

            return prints;
        }

        private global::Foo.Bar.State.IPrintData? DeserializeIPrintData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("Book", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Foo.Bar.State.BookData(
                    typename,
                    isbn: DeserializeNonNullableString(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "isbn")),
                    title: DeserializeNonNullableString(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "title")));
            }

            if (typename?.Equals("Magazine", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Foo.Bar.State.MagazineData(
                    typename,
                    isbn: DeserializeNonNullableString(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "isbn")),
                    coverImageUrl: DeserializeString(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "coverImageUrl")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// ISearchResultData

// StrawberryShake.CodeGeneration.CSharp.DataTypeGenerator

#nullable enable

namespace Foo.Bar.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface ISearchResultData
    {
        public global::System.String __typename { get; }
    }
}


// IPrintData

// StrawberryShake.CodeGeneration.CSharp.DataTypeGenerator

#nullable enable

namespace Foo.Bar.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IPrintData
    {
        public global::System.String __typename { get; }
    }
}


// BookData

// StrawberryShake.CodeGeneration.CSharp.DataTypeGenerator

#nullable enable

namespace Foo.Bar.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class BookData
        : ISearchResultData
        , IPrintData
    {
        public BookData(
            global::System.String typename,
            global::System.String? isbn = null,
            global::System.String? title = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Isbn = isbn;
            Title = title;
        }

        public global::System.String __typename { get; }

        public global::System.String? Isbn { get; }

        public global::System.String? Title { get; }
    }
}


// MagazineData

// StrawberryShake.CodeGeneration.CSharp.DataTypeGenerator

#nullable enable

namespace Foo.Bar.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class MagazineData
        : IPrintData
    {
        public MagazineData(
            global::System.String typename,
            global::System.String? isbn = null,
            global::System.String? coverImageUrl = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Isbn = isbn;
            CoverImageUrl = coverImageUrl;
        }

        public global::System.String __typename { get; }

        public global::System.String? Isbn { get; }

        public global::System.String? CoverImageUrl { get; }
    }
}


// FooClient

// StrawberryShake.CodeGeneration.CSharp.ClientGenerator

#nullable enable

namespace Foo.Bar
{
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClient
    {
        private readonly global::Foo.Bar.SearchSomethingQuery _searchSomething;

        public FooClient(global::Foo.Bar.SearchSomethingQuery searchSomething)
        {
            _searchSomething = searchSomething
                 ?? throw new global::System.ArgumentNullException(nameof(searchSomething));
        }

        public static global::System.String ClientName => "FooClient";

        public global::Foo.Bar.SearchSomethingQuery SearchSomething => _searchSomething;
    }
}


// EntityIdFactory

// StrawberryShake.CodeGeneration.CSharp.EntityIdFactoryGenerator

#nullable enable

namespace Foo.Bar
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public static partial class EntityIdFactory
    {
        public static global::StrawberryShake.EntityId CreateEntityId(global::System.Text.Json.JsonElement obj)
        {
            global::System.String typeName = obj
                .GetProperty("__typename")
                .GetString()!;

            return typeName switch
            {
                _ => throw new global::System.NotSupportedException()
            };
        }
    }
}


// FooClientServiceCollectionExtensions

// StrawberryShake.CodeGeneration.CSharp.DependencyInjectionGenerator

#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public static partial class FooClientServiceCollectionExtensions
    {
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddFooClient(
            this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services,
            global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => 
                {
                    var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();

                    ConfigureClient(
                        serviceCollection,
                        sp,
                        strategy);

                    return new ClientServiceProvider(
                        global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
                });

            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.SearchSomethingQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));

            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.FooClient>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));

            return services;
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(
            global::Microsoft.Extensions.DependencyInjection.IServiceCollection services,
            global::System.IServiceProvider parentServices,
            global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            if (services is null)
            {
                throw new global::System.ArgumentNullException(nameof(services));
            }
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::System.Func<global::System.Text.Json.JsonElement, global::StrawberryShake.EntityId>>(
                services,
                global::Foo.Bar.EntityIdFactory.CreateEntityId);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(
                services,
                sp => new global::StrawberryShake.OperationStore(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)
                    .Watch()));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => 
                {
                    var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                    return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("FooClient"));
                });


            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(
                services,
                sp => new global::StrawberryShake.Serialization.SerializerResolver(
                    global::System.Linq.Enumerable.Concat(
                        global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(
                            parentServices),
                        global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(
                            sp))));

            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.ISearchSomethingResult>, global::Foo.Bar.SearchSomethingResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.ISearchSomethingResult>, global::Foo.Bar.SearchSomethingBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Foo.Bar.ISearchSomethingResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Foo.Bar.ISearchSomethingResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.ISearchSomethingResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.SearchSomethingQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.FooClient>(services);
            return services;
        }

        private class ClientServiceProvider
            : System.IServiceProvider
            , System.IDisposable
        {
            private readonly System.IServiceProvider _provider;

            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}


