// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable RedundantNameQualifier
// ReSharper disable ArrangeObjectCreationWhenTypeEvident
// ReSharper disable UnusedType.Global
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMethodReturnValue.Local
// ReSharper disable ConvertToAutoProperty
// ReSharper disable UnusedMember.Global
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable InconsistentNaming

// FooClient

// <auto-generated/>
#nullable enable

namespace Foo.Bar
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPageResult : global::System.IEquatable<GetFeatsPageResult>, IGetFeatsPageResult
    {
        public GetFeatsPageResult(global::Foo.Bar.IGetFeatsPage_Feats? feats)
        {
            Feats = feats;
        }

        public global::Foo.Bar.IGetFeatsPage_Feats? Feats
        {
            get;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatsPageResult)obj);
        }

        public global::System.Boolean Equals(GetFeatsPageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Feats is null && other.Feats is null) || Feats != null && Feats.Equals(other.Feats)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Feats != null)
                {
                    hash ^= 397 * Feats.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPage_Feats_FeatCollectionSegment : global::System.IEquatable<GetFeatsPage_Feats_FeatCollectionSegment>, IGetFeatsPage_Feats_FeatCollectionSegment
    {
        public GetFeatsPage_Feats_FeatCollectionSegment(global::System.Int32 totalCount, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatsPage_Feats_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatsPage_Feats_Items?>? Items
        {
            get;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatsPage_Feats_FeatCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetFeatsPage_Feats_FeatCollectionSegment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Items, other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                if (Items != null)
                {
                    foreach (var Items_elm in Items)
                    {
                        if (Items_elm != null)
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPage_Feats_Items_Feat : global::System.IEquatable<GetFeatsPage_Feats_Items_Feat>, IGetFeatsPage_Feats_Items_Feat
    {
        public GetFeatsPage_Feats_Items_Feat(global::System.Guid id, global::System.String name, global::System.Int32 level, global::System.Boolean canBeLearnedMoreThanOnce, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatsPage_Feats_Items_Details> details)
        {
            Id = id;
            Name = name;
            Level = level;
            CanBeLearnedMoreThanOnce = canBeLearnedMoreThanOnce;
            Details = details;
        }

        public global::System.Guid Id
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.Int32 Level
        {
            get;
        }

        public global::System.Boolean CanBeLearnedMoreThanOnce
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatsPage_Feats_Items_Details> Details
        {
            get;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatsPage_Feats_Items_Feat)obj);
        }

        public global::System.Boolean Equals(GetFeatsPage_Feats_Items_Feat? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && Level == other.Level && CanBeLearnedMoreThanOnce == other.CanBeLearnedMoreThanOnce && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Details, other.Details);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Level.GetHashCode();
                hash ^= 397 * CanBeLearnedMoreThanOnce.GetHashCode();
                foreach (var Details_elm in Details)
                {
                    hash ^= 397 * Details_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPage_Feats_Items_Details_FeatDetailsBlock : global::System.IEquatable<GetFeatsPage_Feats_Items_Details_FeatDetailsBlock>, IGetFeatsPage_Feats_Items_Details_FeatDetailsBlock
    {
        public GetFeatsPage_Feats_Items_Details_FeatDetailsBlock(global::System.String text)
        {
            Text = text;
        }

        public global::System.String Text
        {
            get;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatsPage_Feats_Items_Details_FeatDetailsBlock)obj);
        }

        public global::System.Boolean Equals(GetFeatsPage_Feats_Items_Details_FeatDetailsBlock? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Text.Equals(other.Text));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Text.GetHashCode();
                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatsPageResult
    {
        public global::Foo.Bar.IGetFeatsPage_Feats? Feats
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatsPage_Feats
    {
        public global::System.Int32 TotalCount
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatsPage_Feats_Items?>? Items
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatsPage_Feats_FeatCollectionSegment : IGetFeatsPage_Feats
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IFeatsPage
    {
        public global::System.Guid Id
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.Int32 Level
        {
            get;
        }

        public global::System.Boolean CanBeLearnedMoreThanOnce
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatsPage_Feats_Items_Details> Details
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatsPage_Feats_Items : IFeatsPage
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatsPage_Feats_Items_Feat : IGetFeatsPage_Feats_Items
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatsPage_Feats_Items_Details
    {
        public global::System.String Text
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatsPage_Feats_Items_Details_FeatDetailsBlock : IGetFeatsPage_Feats_Items_Details
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatByIdResult : global::System.IEquatable<GetFeatByIdResult>, IGetFeatByIdResult
    {
        public GetFeatByIdResult(global::Foo.Bar.IGetFeatById_Feats? feats)
        {
            Feats = feats;
        }

        public global::Foo.Bar.IGetFeatById_Feats? Feats
        {
            get;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatByIdResult)obj);
        }

        public global::System.Boolean Equals(GetFeatByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Feats is null && other.Feats is null) || Feats != null && Feats.Equals(other.Feats)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Feats != null)
                {
                    hash ^= 397 * Feats.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatById_Feats_FeatCollectionSegment : global::System.IEquatable<GetFeatById_Feats_FeatCollectionSegment>, IGetFeatById_Feats_FeatCollectionSegment
    {
        public GetFeatById_Feats_FeatCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatById_Feats_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatById_Feats_Items?>? Items
        {
            get;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatById_Feats_FeatCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetFeatById_Feats_FeatCollectionSegment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Items, other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Items != null)
                {
                    foreach (var Items_elm in Items)
                    {
                        if (Items_elm != null)
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatById_Feats_Items_Feat : global::System.IEquatable<GetFeatById_Feats_Items_Feat>, IGetFeatById_Feats_Items_Feat
    {
        public GetFeatById_Feats_Items_Feat(global::System.Guid id, global::System.String name, global::System.Int32 level, global::System.String? special, global::System.String? trigger, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatById_Feats_Items_Details> details, global::Foo.Bar.IGetFeatById_Feats_Items_ActionType actionType)
        {
            Id = id;
            Name = name;
            Level = level;
            Special = special;
            Trigger = trigger;
            Details = details;
            ActionType = actionType;
        }

        public global::System.Guid Id
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.Int32 Level
        {
            get;
        }

        public global::System.String? Special
        {
            get;
        }

        public global::System.String? Trigger
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatById_Feats_Items_Details> Details
        {
            get;
        }

        public global::Foo.Bar.IGetFeatById_Feats_Items_ActionType ActionType
        {
            get;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatById_Feats_Items_Feat)obj);
        }

        public global::System.Boolean Equals(GetFeatById_Feats_Items_Feat? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && Level == other.Level && ((Special is null && other.Special is null) || Special != null && Special.Equals(other.Special)) && ((Trigger is null && other.Trigger is null) || Trigger != null && Trigger.Equals(other.Trigger)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Details, other.Details) && ActionType.Equals(other.ActionType);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Level.GetHashCode();
                if (Special != null)
                {
                    hash ^= 397 * Special.GetHashCode();
                }

                if (Trigger != null)
                {
                    hash ^= 397 * Trigger.GetHashCode();
                }

                foreach (var Details_elm in Details)
                {
                    hash ^= 397 * Details_elm.GetHashCode();
                }

                hash ^= 397 * ActionType.GetHashCode();
                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatById_Feats_Items_Details_FeatDetailsBlock : global::System.IEquatable<GetFeatById_Feats_Items_Details_FeatDetailsBlock>, IGetFeatById_Feats_Items_Details_FeatDetailsBlock
    {
        public GetFeatById_Feats_Items_Details_FeatDetailsBlock(global::System.String text)
        {
            Text = text;
        }

        public global::System.String Text
        {
            get;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatById_Feats_Items_Details_FeatDetailsBlock)obj);
        }

        public global::System.Boolean Equals(GetFeatById_Feats_Items_Details_FeatDetailsBlock? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Text.Equals(other.Text));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Text.GetHashCode();
                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatById_Feats_Items_ActionType_ActionType : global::System.IEquatable<GetFeatById_Feats_Items_ActionType_ActionType>, IGetFeatById_Feats_Items_ActionType_ActionType
    {
        public GetFeatById_Feats_Items_ActionType_ActionType(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name
        {
            get;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatById_Feats_Items_ActionType_ActionType)obj);
        }

        public global::System.Boolean Equals(GetFeatById_Feats_Items_ActionType_ActionType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatByIdResult
    {
        public global::Foo.Bar.IGetFeatById_Feats? Feats
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatById_Feats
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatById_Feats_Items?>? Items
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatById_Feats_FeatCollectionSegment : IGetFeatById_Feats
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IFeatById
    {
        public global::System.Guid Id
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.Int32 Level
        {
            get;
        }

        public global::System.String? Special
        {
            get;
        }

        public global::System.String? Trigger
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatById_Feats_Items_Details> Details
        {
            get;
        }

        public global::Foo.Bar.IGetFeatById_Feats_Items_ActionType ActionType
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatById_Feats_Items : IFeatById
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatById_Feats_Items_Feat : IGetFeatById_Feats_Items
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatById_Feats_Items_Details
    {
        public global::System.String Text
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatById_Feats_Items_Details_FeatDetailsBlock : IGetFeatById_Feats_Items_Details
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatById_Feats_Items_ActionType
    {
        public global::System.String Name
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatById_Feats_Items_ActionType_ActionType : IGetFeatById_Feats_Items_ActionType
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FeatSortInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _actionTypeSortInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _featTypeSortInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _frequencySortInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _rollableEffectSortInputFormatter = default !;
        public global::System.String TypeName => "FeatSortInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
            _actionTypeSortInputFormatter = serializerResolver.GetInputValueFormatter("ActionTypeSortInput");
            _featTypeSortInputFormatter = serializerResolver.GetInputValueFormatter("FeatTypeSortInput");
            _frequencySortInputFormatter = serializerResolver.GetInputValueFormatter("FrequencySortInput");
            _rollableEffectSortInputFormatter = serializerResolver.GetInputValueFormatter("RollableEffectSortInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.FeatSortInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IFeatSortInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsCanBeLearnedMoreThanOnceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("canBeLearnedMoreThanOnce", FormatCanBeLearnedMoreThanOnce(input.CanBeLearnedMoreThanOnce)));
            }

            if (inputInfo.IsSpecialSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("special", FormatSpecial(input.Special)));
            }

            if (inputInfo.IsTriggerSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("trigger", FormatTrigger(input.Trigger)));
            }

            if (inputInfo.IsLevelSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("level", FormatLevel(input.Level)));
            }

            if (inputInfo.IsActionTypeIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("actionTypeId", FormatActionTypeId(input.ActionTypeId)));
            }

            if (inputInfo.IsActionTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("actionType", FormatActionType(input.ActionType)));
            }

            if (inputInfo.IsFeatTypeIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("featTypeId", FormatFeatTypeId(input.FeatTypeId)));
            }

            if (inputInfo.IsFeatTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("featType", FormatFeatType(input.FeatType)));
            }

            if (inputInfo.IsFrequencyIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("frequencyId", FormatFrequencyId(input.FrequencyId)));
            }

            if (inputInfo.IsFrequencySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("frequency", FormatFrequency(input.Frequency)));
            }

            if (inputInfo.IsRollableEffectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rollableEffect", FormatRollableEffect(input.RollableEffect)));
            }

            if (inputInfo.IsRollableEffectIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rollableEffectId", FormatRollableEffectId(input.RollableEffectId)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCanBeLearnedMoreThanOnce(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSpecial(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTrigger(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLevel(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatActionTypeId(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatActionType(global::Foo.Bar.ActionTypeSortInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _actionTypeSortInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFeatTypeId(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFeatType(global::Foo.Bar.FeatTypeSortInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _featTypeSortInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFrequencyId(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFrequency(global::Foo.Bar.FrequencySortInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _frequencySortInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRollableEffect(global::Foo.Bar.RollableEffectSortInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _rollableEffectSortInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRollableEffectId(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class FeatSortInput : global::Foo.Bar.State.IFeatSortInputInfo
    {
        private global::Foo.Bar.SortEnumType? _value_name;
        private global::System.Boolean _set_name;
        private global::Foo.Bar.SortEnumType? _value_canBeLearnedMoreThanOnce;
        private global::System.Boolean _set_canBeLearnedMoreThanOnce;
        private global::Foo.Bar.SortEnumType? _value_special;
        private global::System.Boolean _set_special;
        private global::Foo.Bar.SortEnumType? _value_trigger;
        private global::System.Boolean _set_trigger;
        private global::Foo.Bar.SortEnumType? _value_level;
        private global::System.Boolean _set_level;
        private global::Foo.Bar.SortEnumType? _value_actionTypeId;
        private global::System.Boolean _set_actionTypeId;
        private global::Foo.Bar.ActionTypeSortInput? _value_actionType;
        private global::System.Boolean _set_actionType;
        private global::Foo.Bar.SortEnumType? _value_featTypeId;
        private global::System.Boolean _set_featTypeId;
        private global::Foo.Bar.FeatTypeSortInput? _value_featType;
        private global::System.Boolean _set_featType;
        private global::Foo.Bar.SortEnumType? _value_frequencyId;
        private global::System.Boolean _set_frequencyId;
        private global::Foo.Bar.FrequencySortInput? _value_frequency;
        private global::System.Boolean _set_frequency;
        private global::Foo.Bar.RollableEffectSortInput? _value_rollableEffect;
        private global::System.Boolean _set_rollableEffect;
        private global::Foo.Bar.SortEnumType? _value_rollableEffectId;
        private global::System.Boolean _set_rollableEffectId;
        private global::Foo.Bar.SortEnumType? _value_id;
        private global::System.Boolean _set_id;
        public global::Foo.Bar.SortEnumType? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsNameSet => _set_name;
        public global::Foo.Bar.SortEnumType? CanBeLearnedMoreThanOnce
        {
            get => _value_canBeLearnedMoreThanOnce;
            set
            {
                _set_canBeLearnedMoreThanOnce = true;
                _value_canBeLearnedMoreThanOnce = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsCanBeLearnedMoreThanOnceSet => _set_canBeLearnedMoreThanOnce;
        public global::Foo.Bar.SortEnumType? Special
        {
            get => _value_special;
            set
            {
                _set_special = true;
                _value_special = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsSpecialSet => _set_special;
        public global::Foo.Bar.SortEnumType? Trigger
        {
            get => _value_trigger;
            set
            {
                _set_trigger = true;
                _value_trigger = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsTriggerSet => _set_trigger;
        public global::Foo.Bar.SortEnumType? Level
        {
            get => _value_level;
            set
            {
                _set_level = true;
                _value_level = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsLevelSet => _set_level;
        public global::Foo.Bar.SortEnumType? ActionTypeId
        {
            get => _value_actionTypeId;
            set
            {
                _set_actionTypeId = true;
                _value_actionTypeId = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsActionTypeIdSet => _set_actionTypeId;
        public global::Foo.Bar.ActionTypeSortInput? ActionType
        {
            get => _value_actionType;
            set
            {
                _set_actionType = true;
                _value_actionType = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsActionTypeSet => _set_actionType;
        public global::Foo.Bar.SortEnumType? FeatTypeId
        {
            get => _value_featTypeId;
            set
            {
                _set_featTypeId = true;
                _value_featTypeId = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsFeatTypeIdSet => _set_featTypeId;
        public global::Foo.Bar.FeatTypeSortInput? FeatType
        {
            get => _value_featType;
            set
            {
                _set_featType = true;
                _value_featType = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsFeatTypeSet => _set_featType;
        public global::Foo.Bar.SortEnumType? FrequencyId
        {
            get => _value_frequencyId;
            set
            {
                _set_frequencyId = true;
                _value_frequencyId = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsFrequencyIdSet => _set_frequencyId;
        public global::Foo.Bar.FrequencySortInput? Frequency
        {
            get => _value_frequency;
            set
            {
                _set_frequency = true;
                _value_frequency = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsFrequencySet => _set_frequency;
        public global::Foo.Bar.RollableEffectSortInput? RollableEffect
        {
            get => _value_rollableEffect;
            set
            {
                _set_rollableEffect = true;
                _value_rollableEffect = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsRollableEffectSet => _set_rollableEffect;
        public global::Foo.Bar.SortEnumType? RollableEffectId
        {
            get => _value_rollableEffectId;
            set
            {
                _set_rollableEffectId = true;
                _value_rollableEffectId = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsRollableEffectIdSet => _set_rollableEffectId;
        public global::Foo.Bar.SortEnumType? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatSortInputInfo.IsIdSet => _set_id;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class ActionTypeSortInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default !;
        public global::System.String TypeName => "ActionTypeSortInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.ActionTypeSortInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IActionTypeSortInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class ActionTypeSortInput : global::Foo.Bar.State.IActionTypeSortInputInfo
    {
        private global::Foo.Bar.SortEnumType? _value_name;
        private global::System.Boolean _set_name;
        private global::Foo.Bar.SortEnumType? _value_id;
        private global::System.Boolean _set_id;
        public global::Foo.Bar.SortEnumType? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IActionTypeSortInputInfo.IsNameSet => _set_name;
        public global::Foo.Bar.SortEnumType? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IActionTypeSortInputInfo.IsIdSet => _set_id;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FeatTypeSortInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default !;
        public global::System.String TypeName => "FeatTypeSortInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.FeatTypeSortInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IFeatTypeSortInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class FeatTypeSortInput : global::Foo.Bar.State.IFeatTypeSortInputInfo
    {
        private global::Foo.Bar.SortEnumType? _value_name;
        private global::System.Boolean _set_name;
        private global::Foo.Bar.SortEnumType? _value_id;
        private global::System.Boolean _set_id;
        public global::Foo.Bar.SortEnumType? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatTypeSortInputInfo.IsNameSet => _set_name;
        public global::Foo.Bar.SortEnumType? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFeatTypeSortInputInfo.IsIdSet => _set_id;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FrequencySortInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default !;
        public global::System.String TypeName => "FrequencySortInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.FrequencySortInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IFrequencySortInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("amount", FormatAmount(input.Amount)));
            }

            if (inputInfo.IsTimeSpanSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("timeSpan", FormatTimeSpan(input.TimeSpan)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAmount(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTimeSpan(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class FrequencySortInput : global::Foo.Bar.State.IFrequencySortInputInfo
    {
        private global::Foo.Bar.SortEnumType? _value_name;
        private global::System.Boolean _set_name;
        private global::Foo.Bar.SortEnumType? _value_amount;
        private global::System.Boolean _set_amount;
        private global::Foo.Bar.SortEnumType? _value_timeSpan;
        private global::System.Boolean _set_timeSpan;
        private global::Foo.Bar.SortEnumType? _value_id;
        private global::System.Boolean _set_id;
        public global::Foo.Bar.SortEnumType? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFrequencySortInputInfo.IsNameSet => _set_name;
        public global::Foo.Bar.SortEnumType? Amount
        {
            get => _value_amount;
            set
            {
                _set_amount = true;
                _value_amount = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFrequencySortInputInfo.IsAmountSet => _set_amount;
        public global::Foo.Bar.SortEnumType? TimeSpan
        {
            get => _value_timeSpan;
            set
            {
                _set_timeSpan = true;
                _value_timeSpan = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFrequencySortInputInfo.IsTimeSpanSet => _set_timeSpan;
        public global::Foo.Bar.SortEnumType? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IFrequencySortInputInfo.IsIdSet => _set_id;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class RollableEffectSortInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default !;
        public global::System.String TypeName => "RollableEffectSortInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.RollableEffectSortInput;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IRollableEffectSortInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsCriticalSuccessSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("criticalSuccess", FormatCriticalSuccess(input.CriticalSuccess)));
            }

            if (inputInfo.IsSuccessSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("success", FormatSuccess(input.Success)));
            }

            if (inputInfo.IsFailureSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("failure", FormatFailure(input.Failure)));
            }

            if (inputInfo.IsCriticalFailureSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("criticalFailure", FormatCriticalFailure(input.CriticalFailure)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatCriticalSuccess(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSuccess(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFailure(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCriticalFailure(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::Foo.Bar.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class RollableEffectSortInput : global::Foo.Bar.State.IRollableEffectSortInputInfo
    {
        private global::Foo.Bar.SortEnumType? _value_criticalSuccess;
        private global::System.Boolean _set_criticalSuccess;
        private global::Foo.Bar.SortEnumType? _value_success;
        private global::System.Boolean _set_success;
        private global::Foo.Bar.SortEnumType? _value_failure;
        private global::System.Boolean _set_failure;
        private global::Foo.Bar.SortEnumType? _value_criticalFailure;
        private global::System.Boolean _set_criticalFailure;
        private global::Foo.Bar.SortEnumType? _value_id;
        private global::System.Boolean _set_id;
        public global::Foo.Bar.SortEnumType? CriticalSuccess
        {
            get => _value_criticalSuccess;
            set
            {
                _set_criticalSuccess = true;
                _value_criticalSuccess = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IRollableEffectSortInputInfo.IsCriticalSuccessSet => _set_criticalSuccess;
        public global::Foo.Bar.SortEnumType? Success
        {
            get => _value_success;
            set
            {
                _set_success = true;
                _value_success = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IRollableEffectSortInputInfo.IsSuccessSet => _set_success;
        public global::Foo.Bar.SortEnumType? Failure
        {
            get => _value_failure;
            set
            {
                _set_failure = true;
                _value_failure = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IRollableEffectSortInputInfo.IsFailureSet => _set_failure;
        public global::Foo.Bar.SortEnumType? CriticalFailure
        {
            get => _value_criticalFailure;
            set
            {
                _set_criticalFailure = true;
                _value_criticalFailure = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IRollableEffectSortInputInfo.IsCriticalFailureSet => _set_criticalFailure;
        public global::Foo.Bar.SortEnumType? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IRollableEffectSortInputInfo.IsIdSet => _set_id;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum SortEnumType
    {
        Asc,
        Desc
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumParserGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class SortEnumTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, SortEnumType>
    {
        public global::System.String TypeName => "SortEnumType";
        public SortEnumType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "ASC" => SortEnumType.Asc, "DESC" => SortEnumType.Desc, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            SortEnumType.Asc => "ASC", SortEnumType.Desc => "DESC", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationDocumentGenerator
    /// <summary>
    /// Represents the operation service of the GetFeatsPage GraphQL operation
    /// <code>
    /// query GetFeatsPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [FeatSortInput!] = [ { name: ASC } ]) {
    ///   feats(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { traits: { some: { name: { contains: $searchTerm } } } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       ... FeatsPage
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatsPage on Feat {
    ///   id
    ///   name
    ///   level
    ///   canBeLearnedMoreThanOnce
    ///   details {
    ///     __typename
    ///     text
    ///     ... on FeatDetailsBlock {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPageQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFeatsPageQueryDocument()
        {
        }

        public static GetFeatsPageQueryDocument Instance
        {
            get;
        }

        = new GetFeatsPageQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x46, 0x65, 0x61, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x66, 0x65, 0x61, 0x74, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x7b, 0x20, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x3a, 0x20, 0x7b, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x46, 0x65, 0x61, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x6e, 0x63, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("sha1Hash", "defcd7f67f31345e43429d1db7aa93bc8ca8af7d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceGenerator
    /// <summary>
    /// Represents the operation service of the GetFeatsPage GraphQL operation
    /// <code>
    /// query GetFeatsPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [FeatSortInput!] = [ { name: ASC } ]) {
    ///   feats(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { traits: { some: { name: { contains: $searchTerm } } } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       ... FeatsPage
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatsPage on Feat {
    ///   id
    ///   name
    ///   level
    ///   canBeLearnedMoreThanOnce
    ///   details {
    ///     __typename
    ///     text
    ///     ... on FeatDetailsBlock {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPageQuery : global::Foo.Bar.IGetFeatsPageQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFeatsPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _featSortInputFormatter;
        public GetFeatsPageQuery(global::StrawberryShake.IOperationExecutor<IGetFeatsPageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _featSortInputFormatter = serializerResolver.GetInputValueFormatter("FeatSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFeatsPageResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFeatsPageResult>> ExecuteAsync(global::System.Int32 skip, global::System.Int32 take, global::System.String searchTerm, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.FeatSortInput>? order, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(skip, take, searchTerm, order);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFeatsPageResult>> Watch(global::System.Int32 skip, global::System.Int32 take, global::System.String searchTerm, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.FeatSortInput>? order, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(skip, take, searchTerm, order);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 skip, global::System.Int32 take, global::System.String searchTerm, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.FeatSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("skip", FormatSkip(skip));
            variables.Add("take", FormatTake(take));
            variables.Add("searchTerm", FormatSearchTerm(searchTerm));
            variables.Add("order", FormatOrder(order));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFeatsPageQueryDocument.Instance.Hash.Value, name: "GetFeatsPage", document: GetFeatsPageQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.FeatSortInput>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(value_elm));
                    }

                    value_list.Add(_featSortInputFormatter.Format(value_elm));
                }

                return value_list;
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceInterfaceGenerator
    /// <summary>
    /// Represents the operation service of the GetFeatsPage GraphQL operation
    /// <code>
    /// query GetFeatsPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [FeatSortInput!] = [ { name: ASC } ]) {
    ///   feats(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { traits: { some: { name: { contains: $searchTerm } } } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       ... FeatsPage
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatsPage on Feat {
    ///   id
    ///   name
    ///   level
    ///   canBeLearnedMoreThanOnce
    ///   details {
    ///     __typename
    ///     text
    ///     ... on FeatDetailsBlock {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatsPageQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFeatsPageResult>> ExecuteAsync(global::System.Int32 skip, global::System.Int32 take, global::System.String searchTerm, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.FeatSortInput>? order, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFeatsPageResult>> Watch(global::System.Int32 skip, global::System.Int32 take, global::System.String searchTerm, global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.FeatSortInput>? order, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationDocumentGenerator
    /// <summary>
    /// Represents the operation service of the GetFeatById GraphQL operation
    /// <code>
    /// query GetFeatById($id: Uuid!) {
    ///   feats(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... FeatById
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatById on Feat {
    ///   id
    ///   name
    ///   level
    ///   special
    ///   trigger
    ///   details {
    ///     __typename
    ///     text
    ///     ... on FeatDetailsBlock {
    ///       id
    ///     }
    ///   }
    ///   actionType {
    ///     __typename
    ///     name
    ///     ... on ActionType {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFeatByIdQueryDocument()
        {
        }

        public static GetFeatByIdQueryDocument Instance
        {
            get;
        }

        = new GetFeatByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x66, 0x65, 0x61, 0x74, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("sha1Hash", "c06088d3f845e82061f56cf33974853ea149a879");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceGenerator
    /// <summary>
    /// Represents the operation service of the GetFeatById GraphQL operation
    /// <code>
    /// query GetFeatById($id: Uuid!) {
    ///   feats(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... FeatById
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatById on Feat {
    ///   id
    ///   name
    ///   level
    ///   special
    ///   trigger
    ///   details {
    ///     __typename
    ///     text
    ///     ... on FeatDetailsBlock {
    ///       id
    ///     }
    ///   }
    ///   actionType {
    ///     __typename
    ///     name
    ///     ... on ActionType {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatByIdQuery : global::Foo.Bar.IGetFeatByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFeatByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;
        public GetFeatByIdQuery(global::StrawberryShake.IOperationExecutor<IGetFeatByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFeatByIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFeatByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFeatByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFeatByIdQueryDocument.Instance.Hash.Value, name: "GetFeatById", document: GetFeatByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceInterfaceGenerator
    /// <summary>
    /// Represents the operation service of the GetFeatById GraphQL operation
    /// <code>
    /// query GetFeatById($id: Uuid!) {
    ///   feats(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... FeatById
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatById on Feat {
    ///   id
    ///   name
    ///   level
    ///   special
    ///   trigger
    ///   details {
    ///     __typename
    ///     text
    ///     ... on FeatDetailsBlock {
    ///       id
    ///     }
    ///   }
    ///   actionType {
    ///     __typename
    ///     name
    ///     ... on ActionType {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetFeatByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFeatByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFeatByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClient : global::Foo.Bar.IFooClient
    {
        private readonly global::Foo.Bar.IGetFeatsPageQuery _getFeatsPage;
        private readonly global::Foo.Bar.IGetFeatByIdQuery _getFeatById;
        public FooClient(global::Foo.Bar.IGetFeatsPageQuery getFeatsPage, global::Foo.Bar.IGetFeatByIdQuery getFeatById)
        {
            _getFeatsPage = getFeatsPage ?? throw new global::System.ArgumentNullException(nameof(getFeatsPage));
            _getFeatById = getFeatById ?? throw new global::System.ArgumentNullException(nameof(getFeatById));
        }

        public static global::System.String ClientName => "FooClient";
        public global::Foo.Bar.IGetFeatsPageQuery GetFeatsPage => _getFeatsPage;
        public global::Foo.Bar.IGetFeatByIdQuery GetFeatById => _getFeatById;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientInterfaceGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IFooClient
    {
        global::Foo.Bar.IGetFeatsPageQuery GetFeatsPage
        {
            get;
        }

        global::Foo.Bar.IGetFeatByIdQuery GetFeatById
        {
            get;
        }
    }
}

namespace Foo.Bar.State
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class FeatEntity
    {
        public FeatEntity(global::System.Guid id = default !, global::System.String name = default !, global::System.Int32 level = default !, global::System.Boolean canBeLearnedMoreThanOnce = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> details = default !, global::System.String? special = default !, global::System.String? trigger = default !, global::StrawberryShake.EntityId actionType = default !)
        {
            Id = id;
            Name = name;
            Level = level;
            CanBeLearnedMoreThanOnce = canBeLearnedMoreThanOnce;
            Details = details;
            Special = special;
            Trigger = trigger;
            ActionType = actionType;
        }

        public global::System.Guid Id
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.Int32 Level
        {
            get;
        }

        public global::System.Boolean CanBeLearnedMoreThanOnce
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Details
        {
            get;
        }

        public global::System.String? Special
        {
            get;
        }

        public global::System.String? Trigger
        {
            get;
        }

        public global::StrawberryShake.EntityId ActionType
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class FeatDetailsBlockEntity
    {
        public FeatDetailsBlockEntity(global::System.String text = default !)
        {
            Text = text;
        }

        public global::System.String Text
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class ActionTypeEntity
    {
        public ActionTypeEntity(global::System.String name = default !)
        {
            Name = name;
        }

        public global::System.String Name
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultDataFactoryGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.GetFeatsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatEntity, GetFeatsPage_Feats_Items_Feat> _getFeatsPage_Feats_Items_FeatFromFeatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock> _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper;
        public GetFeatsPageResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatEntity, GetFeatsPage_Feats_Items_Feat> getFeatsPage_Feats_Items_FeatFromFeatEntityMapper, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock> getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFeatsPage_Feats_Items_FeatFromFeatEntityMapper = getFeatsPage_Feats_Items_FeatFromFeatEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFeatsPage_Feats_Items_FeatFromFeatEntityMapper));
            _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper = getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Foo.Bar.IGetFeatsPageResult);
        public GetFeatsPageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFeatsPageResultInfo info)
            {
                return new GetFeatsPageResult(MapIGetFeatsPage_Feats(info.Feats, snapshot));
            }

            throw new global::System.ArgumentException("GetFeatsPageResultInfo expected.");
        }

        private global::Foo.Bar.IGetFeatsPage_Feats? MapIGetFeatsPage_Feats(global::Foo.Bar.State.FeatCollectionSegmentData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFeatsPage_Feats returnValue = default !;
            if (data?.__typename.Equals("FeatCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFeatsPage_Feats_FeatCollectionSegment(data.TotalCount ?? throw new global::System.ArgumentNullException(), MapIGetFeatsPage_Feats_ItemsArray(data.Items, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatsPage_Feats_Items?>? MapIGetFeatsPage_Feats_ItemsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var feats = new global::System.Collections.Generic.List<global::Foo.Bar.IGetFeatsPage_Feats_Items?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                feats.Add(MapIGetFeatsPage_Feats_Items(child, snapshot));
            }

            return feats;
        }

        private global::Foo.Bar.IGetFeatsPage_Feats_Items? MapIGetFeatsPage_Feats_Items(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Feat", global::System.StringComparison.Ordinal))
            {
                return _getFeatsPage_Feats_Items_FeatFromFeatEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.FeatEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatsPage_Feats_Items_Details> MapNonNullableIGetFeatsPage_Feats_Items_DetailsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var featDetailsBlocks = new global::System.Collections.Generic.List<global::Foo.Bar.IGetFeatsPage_Feats_Items_Details>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                featDetailsBlocks.Add(MapNonNullableIGetFeatsPage_Feats_Items_Details(child, snapshot));
            }

            return featDetailsBlocks;
        }

        private global::Foo.Bar.IGetFeatsPage_Feats_Items_Details MapNonNullableIGetFeatsPage_Feats_Items_Details(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("FeatDetailsBlock", global::System.StringComparison.Ordinal))
            {
                return _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.FeatDetailsBlockEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInfoGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFeatsPageResultInfo(global::Foo.Bar.State.FeatCollectionSegmentData? feats, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Feats = feats;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Foo.Bar.State.FeatCollectionSegmentData? Feats
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFeatsPageResultInfo(Feats, _entityIds, version);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPage_Feats_Items_FeatFromFeatEntityMapper : global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatEntity, GetFeatsPage_Feats_Items_Feat>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock> _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper;
        public GetFeatsPage_Feats_Items_FeatFromFeatEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock> getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper = getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper));
        }

        public GetFeatsPage_Feats_Items_Feat Map(global::Foo.Bar.State.FeatEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFeatsPage_Feats_Items_Feat(entity.Id, entity.Name, entity.Level, entity.CanBeLearnedMoreThanOnce, MapNonNullableIGetFeatsPage_Feats_Items_DetailsNonNullableArray(entity.Details, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatsPage_Feats_Items_Details> MapNonNullableIGetFeatsPage_Feats_Items_DetailsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var featDetailsBlocks = new global::System.Collections.Generic.List<global::Foo.Bar.IGetFeatsPage_Feats_Items_Details>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                featDetailsBlocks.Add(MapNonNullableIGetFeatsPage_Feats_Items_Details(child, snapshot));
            }

            return featDetailsBlocks;
        }

        private global::Foo.Bar.IGetFeatsPage_Feats_Items_Details MapNonNullableIGetFeatsPage_Feats_Items_Details(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("FeatDetailsBlock", global::System.StringComparison.Ordinal))
            {
                return _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.FeatDetailsBlockEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper : global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFeatsPage_Feats_Items_Details_FeatDetailsBlock Map(global::Foo.Bar.State.FeatDetailsBlockEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFeatsPage_Feats_Items_Details_FeatDetailsBlock(entity.Text);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultDataFactoryGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.GetFeatByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatEntity, GetFeatById_Feats_Items_Feat> _getFeatById_Feats_Items_FeatFromFeatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatById_Feats_Items_Details_FeatDetailsBlock> _getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.ActionTypeEntity, GetFeatById_Feats_Items_ActionType_ActionType> _getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper;
        public GetFeatByIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatEntity, GetFeatById_Feats_Items_Feat> getFeatById_Feats_Items_FeatFromFeatEntityMapper, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatById_Feats_Items_Details_FeatDetailsBlock> getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.ActionTypeEntity, GetFeatById_Feats_Items_ActionType_ActionType> getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFeatById_Feats_Items_FeatFromFeatEntityMapper = getFeatById_Feats_Items_FeatFromFeatEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_FeatFromFeatEntityMapper));
            _getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper = getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper));
            _getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper = getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Foo.Bar.IGetFeatByIdResult);
        public GetFeatByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFeatByIdResultInfo info)
            {
                return new GetFeatByIdResult(MapIGetFeatById_Feats(info.Feats, snapshot));
            }

            throw new global::System.ArgumentException("GetFeatByIdResultInfo expected.");
        }

        private global::Foo.Bar.IGetFeatById_Feats? MapIGetFeatById_Feats(global::Foo.Bar.State.FeatCollectionSegmentData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFeatById_Feats returnValue = default !;
            if (data?.__typename.Equals("FeatCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFeatById_Feats_FeatCollectionSegment(MapIGetFeatById_Feats_ItemsArray(data.Items, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatById_Feats_Items?>? MapIGetFeatById_Feats_ItemsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var feats = new global::System.Collections.Generic.List<global::Foo.Bar.IGetFeatById_Feats_Items?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                feats.Add(MapIGetFeatById_Feats_Items(child, snapshot));
            }

            return feats;
        }

        private global::Foo.Bar.IGetFeatById_Feats_Items? MapIGetFeatById_Feats_Items(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Feat", global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_FeatFromFeatEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.FeatEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatById_Feats_Items_Details> MapNonNullableIGetFeatById_Feats_Items_DetailsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var featDetailsBlocks = new global::System.Collections.Generic.List<global::Foo.Bar.IGetFeatById_Feats_Items_Details>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                featDetailsBlocks.Add(MapNonNullableIGetFeatById_Feats_Items_Details(child, snapshot));
            }

            return featDetailsBlocks;
        }

        private global::Foo.Bar.IGetFeatById_Feats_Items_Details MapNonNullableIGetFeatById_Feats_Items_Details(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("FeatDetailsBlock", global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.FeatDetailsBlockEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Foo.Bar.IGetFeatById_Feats_Items_ActionType MapNonNullableIGetFeatById_Feats_Items_ActionType(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ActionType", global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.ActionTypeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInfoGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFeatByIdResultInfo(global::Foo.Bar.State.FeatCollectionSegmentData? feats, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Feats = feats;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Foo.Bar.State.FeatCollectionSegmentData? Feats
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFeatByIdResultInfo(Feats, _entityIds, version);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatById_Feats_Items_FeatFromFeatEntityMapper : global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatEntity, GetFeatById_Feats_Items_Feat>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatById_Feats_Items_Details_FeatDetailsBlock> _getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.ActionTypeEntity, GetFeatById_Feats_Items_ActionType_ActionType> _getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper;
        public GetFeatById_Feats_Items_FeatFromFeatEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatById_Feats_Items_Details_FeatDetailsBlock> getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper, global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.ActionTypeEntity, GetFeatById_Feats_Items_ActionType_ActionType> getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper = getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper));
            _getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper = getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper));
        }

        public GetFeatById_Feats_Items_Feat Map(global::Foo.Bar.State.FeatEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFeatById_Feats_Items_Feat(entity.Id, entity.Name, entity.Level, entity.Special, entity.Trigger, MapNonNullableIGetFeatById_Feats_Items_DetailsNonNullableArray(entity.Details, snapshot), MapNonNullableIGetFeatById_Feats_Items_ActionType(entity.ActionType, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.IGetFeatById_Feats_Items_Details> MapNonNullableIGetFeatById_Feats_Items_DetailsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var featDetailsBlocks = new global::System.Collections.Generic.List<global::Foo.Bar.IGetFeatById_Feats_Items_Details>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                featDetailsBlocks.Add(MapNonNullableIGetFeatById_Feats_Items_Details(child, snapshot));
            }

            return featDetailsBlocks;
        }

        private global::Foo.Bar.IGetFeatById_Feats_Items_Details MapNonNullableIGetFeatById_Feats_Items_Details(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("FeatDetailsBlock", global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.FeatDetailsBlockEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Foo.Bar.IGetFeatById_Feats_Items_ActionType MapNonNullableIGetFeatById_Feats_Items_ActionType(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ActionType", global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper.Map(snapshot.GetEntity<global::Foo.Bar.State.ActionTypeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper : global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, GetFeatById_Feats_Items_Details_FeatDetailsBlock>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFeatById_Feats_Items_Details_FeatDetailsBlock Map(global::Foo.Bar.State.FeatDetailsBlockEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFeatById_Feats_Items_Details_FeatDetailsBlock(entity.Text);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultFromEntityTypeMapperGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper : global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.ActionTypeEntity, GetFeatById_Feats_Items_ActionType_ActionType>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFeatById_Feats_Items_ActionType_ActionType Map(global::Foo.Bar.State.ActionTypeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFeatById_Feats_Items_ActionType_ActionType(entity.Name);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IFeatSortInputInfo
    {
        global::System.Boolean IsNameSet
        {
            get;
        }

        global::System.Boolean IsCanBeLearnedMoreThanOnceSet
        {
            get;
        }

        global::System.Boolean IsSpecialSet
        {
            get;
        }

        global::System.Boolean IsTriggerSet
        {
            get;
        }

        global::System.Boolean IsLevelSet
        {
            get;
        }

        global::System.Boolean IsActionTypeIdSet
        {
            get;
        }

        global::System.Boolean IsActionTypeSet
        {
            get;
        }

        global::System.Boolean IsFeatTypeIdSet
        {
            get;
        }

        global::System.Boolean IsFeatTypeSet
        {
            get;
        }

        global::System.Boolean IsFrequencyIdSet
        {
            get;
        }

        global::System.Boolean IsFrequencySet
        {
            get;
        }

        global::System.Boolean IsRollableEffectSet
        {
            get;
        }

        global::System.Boolean IsRollableEffectIdSet
        {
            get;
        }

        global::System.Boolean IsIdSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IActionTypeSortInputInfo
    {
        global::System.Boolean IsNameSet
        {
            get;
        }

        global::System.Boolean IsIdSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IFeatTypeSortInputInfo
    {
        global::System.Boolean IsNameSet
        {
            get;
        }

        global::System.Boolean IsIdSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IFrequencySortInputInfo
    {
        global::System.Boolean IsNameSet
        {
            get;
        }

        global::System.Boolean IsAmountSet
        {
            get;
        }

        global::System.Boolean IsTimeSpanSet
        {
            get;
        }

        global::System.Boolean IsIdSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IRollableEffectSortInputInfo
    {
        global::System.Boolean IsCriticalSuccessSet
        {
            get;
        }

        global::System.Boolean IsSuccessSet
        {
            get;
        }

        global::System.Boolean IsFailureSet
        {
            get;
        }

        global::System.Boolean IsCriticalFailureSet
        {
            get;
        }

        global::System.Boolean IsIdSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.JsonResultBuilderGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatsPageBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetFeatsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetFeatsPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Foo.Bar.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetFeatsPageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetFeatsPageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Foo.Bar.SortEnumType>("SortEnumType") ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid") ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFeatsPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFeatsPageResult Result, GetFeatsPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetFeatsPageResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFeatsPageResult, GetFeatsPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Foo.Bar.State.FeatCollectionSegmentData? featsId = default !;
            _entityStore.Update(session =>
            {
                featsId = DeserializeIGetFeatsPage_Feats(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "feats"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFeatsPageResultInfo(featsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Foo.Bar.State.FeatCollectionSegmentData? DeserializeIGetFeatsPage_Feats(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("FeatCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Foo.Bar.State.FeatCollectionSegmentData(typename, totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), items: UpdateIGetFeatsPage_Feats_ItemsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetFeatsPage_Feats_ItemsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var feats = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                feats.Add(UpdateIGetFeatsPage_Feats_ItemsEntity(session, child, entityIds));
            }

            return feats;
        }

        private global::StrawberryShake.EntityId? UpdateIGetFeatsPage_Feats_ItemsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Feat", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Foo.Bar.State.FeatEntity? entity))
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.FeatEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "level")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "canBeLearnedMoreThanOnce")), UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"), entityIds), entity.Special, entity.Trigger, entity.ActionType));
                }
                else
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.FeatEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "level")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "canBeLearnedMoreThanOnce")), UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"), entityIds), default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var featDetailsBlocks = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                featDetailsBlocks.Add(UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntity(session, child, entityIds));
            }

            return featDetailsBlocks;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("FeatDetailsBlock", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Foo.Bar.State.FeatDetailsBlockEntity? entity))
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.FeatDetailsBlockEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.FeatDetailsBlockEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.JsonResultBuilderGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetFeatByIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetFeatByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetFeatByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetFeatByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetFeatByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid") ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFeatByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFeatByIdResult Result, GetFeatByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetFeatByIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFeatByIdResult, GetFeatByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Foo.Bar.State.FeatCollectionSegmentData? featsId = default !;
            _entityStore.Update(session =>
            {
                featsId = DeserializeIGetFeatById_Feats(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "feats"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFeatByIdResultInfo(featsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Foo.Bar.State.FeatCollectionSegmentData? DeserializeIGetFeatById_Feats(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("FeatCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Foo.Bar.State.FeatCollectionSegmentData(typename, items: UpdateIGetFeatById_Feats_ItemsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetFeatById_Feats_ItemsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var feats = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                feats.Add(UpdateIGetFeatById_Feats_ItemsEntity(session, child, entityIds));
            }

            return feats;
        }

        private global::StrawberryShake.EntityId? UpdateIGetFeatById_Feats_ItemsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Feat", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Foo.Bar.State.FeatEntity? entity))
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.FeatEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "level")), entity.CanBeLearnedMoreThanOnce, UpdateNonNullableIGetFeatById_Feats_Items_DetailsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "special")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "trigger")), UpdateNonNullableIGetFeatById_Feats_Items_ActionTypeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionType"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.FeatEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "level")), default !, UpdateNonNullableIGetFeatById_Feats_Items_DetailsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "special")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "trigger")), UpdateNonNullableIGetFeatById_Feats_Items_ActionTypeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionType"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetFeatById_Feats_Items_DetailsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var featDetailsBlocks = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                featDetailsBlocks.Add(UpdateNonNullableIGetFeatById_Feats_Items_DetailsEntity(session, child, entityIds));
            }

            return featDetailsBlocks;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFeatById_Feats_Items_DetailsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("FeatDetailsBlock", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Foo.Bar.State.FeatDetailsBlockEntity? entity))
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.FeatDetailsBlockEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.FeatDetailsBlockEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFeatById_Feats_Items_ActionTypeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ActionType", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Foo.Bar.State.ActionTypeEntity? entity))
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.ActionTypeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Foo.Bar.State.ActionTypeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.DataTypeGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class FeatCollectionSegmentData
    {
        public FeatCollectionSegmentData(global::System.String __typename, global::System.Int32? totalCount = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Int32? TotalCount
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityIdFactoryGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Feat" => ParseFeatEntityId(obj, __typename), "FeatDetailsBlock" => ParseFeatDetailsBlockEntityId(obj, __typename), "ActionType" => ParseActionTypeEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Feat" => FormatFeatEntityId(entityId), "FeatDetailsBlock" => FormatFeatDetailsBlockEntityId(entityId), "ActionType" => FormatActionTypeEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseFeatEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetGuid()!);
        }

        private global::System.String FormatFeatEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseFeatDetailsBlockEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetGuid()!);
        }

        private global::System.String FormatFeatDetailsBlockEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseActionTypeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetGuid()!);
        }

        private global::System.String FormatActionTypeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.StoreAccessorGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public FooClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.DependencyInjectionGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public static partial class FooClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Foo.Bar.State.FooClientStoreAccessor> AddFooClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Foo.Bar.State.FooClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.GetFeatsPageQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.GetFeatByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.FooClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.IFooClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Foo.Bar.State.FooClientStoreAccessor>("FooClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("FooClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatEntity, global::Foo.Bar.GetFeatsPage_Feats_Items_Feat>, global::Foo.Bar.State.GetFeatsPage_Feats_Items_FeatFromFeatEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, global::Foo.Bar.GetFeatsPage_Feats_Items_Details_FeatDetailsBlock>, global::Foo.Bar.State.GetFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatEntity, global::Foo.Bar.GetFeatById_Feats_Items_Feat>, global::Foo.Bar.State.GetFeatById_Feats_Items_FeatFromFeatEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.FeatDetailsBlockEntity, global::Foo.Bar.GetFeatById_Feats_Items_Details_FeatDetailsBlock>, global::Foo.Bar.State.GetFeatById_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Foo.Bar.State.ActionTypeEntity, global::Foo.Bar.GetFeatById_Feats_Items_ActionType_ActionType>, global::Foo.Bar.State.GetFeatById_Feats_Items_ActionType_ActionTypeFromActionTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.SortEnumTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.FeatSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.ActionTypeSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.FeatTypeSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.FrequencySortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.RollableEffectSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetFeatsPageResult>, global::Foo.Bar.State.GetFeatsPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetFeatsPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.IGetFeatsPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetFeatsPageResult>, global::Foo.Bar.State.GetFeatsPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Foo.Bar.IGetFeatsPageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetFeatsPageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetFeatsPageResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.GetFeatsPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.IGetFeatsPageQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.GetFeatsPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetFeatByIdResult>, global::Foo.Bar.State.GetFeatByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IGetFeatByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.IGetFeatByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetFeatByIdResult>, global::Foo.Bar.State.GetFeatByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Foo.Bar.IGetFeatByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetFeatByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IGetFeatByIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.GetFeatByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.IGetFeatByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.GetFeatByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Foo.Bar.State.FooClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.FooClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.IFooClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.FooClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}


