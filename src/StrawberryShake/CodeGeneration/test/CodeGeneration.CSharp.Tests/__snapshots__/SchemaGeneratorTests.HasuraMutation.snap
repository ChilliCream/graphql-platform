// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable RedundantNameQualifier
// ReSharper disable ArrangeObjectCreationWhenTypeEvident
// ReSharper disable UnusedType.Global
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMethodReturnValue.Local
// ReSharper disable ConvertToAutoProperty
// ReSharper disable UnusedMember.Global
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable InconsistentNaming

// FooClient

// <auto-generated/>
#nullable enable

namespace Foo.Bar
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    /// <summary>
    /// mutation root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class InsertPeopleResult : global::System.IEquatable<InsertPeopleResult>, IInsertPeopleResult
    {
        public InsertPeopleResult(global::Foo.Bar.IInsertPeople_Insert_people? insert_People)
        {
            Insert_people = insert_People;
        }

        /// <summary>
        /// insert data into the table: "people"
        /// </summary>
        public global::Foo.Bar.IInsertPeople_Insert_people? Insert_people
        {
            get;
        }

        public virtual global::System.Boolean Equals(InsertPeopleResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Insert_people is null && other.Insert_people is null) || Insert_people != null && Insert_people.Equals(other.Insert_people)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((InsertPeopleResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Insert_people != null)
                {
                    hash ^= 397 * Insert_people.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    /// <summary>
    /// response of any mutation on the table "people"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class InsertPeople_Insert_people_people_mutation_response : global::System.IEquatable<InsertPeople_Insert_people_people_mutation_response>, IInsertPeople_Insert_people_people_mutation_response
    {
        public InsertPeople_Insert_people_people_mutation_response(global::System.Int32 affected_Rows)
        {
            Affected_rows = affected_Rows;
        }

        /// <summary>
        /// number of rows affected by the mutation
        /// </summary>
        public global::System.Int32 Affected_rows
        {
            get;
        }

        public virtual global::System.Boolean Equals(InsertPeople_Insert_people_people_mutation_response? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Affected_rows == other.Affected_rows);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((InsertPeople_Insert_people_people_mutation_response)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Affected_rows.GetHashCode();
                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    /// <summary>
    /// mutation root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IInsertPeopleResult
    {
        /// <summary>
        /// insert data into the table: "people"
        /// </summary>
        public global::Foo.Bar.IInsertPeople_Insert_people? Insert_people
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    /// <summary>
    /// response of any mutation on the table "people"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IInsertPeople_Insert_people
    {
        /// <summary>
        /// number of rows affected by the mutation
        /// </summary>
        public global::System.Int32 Affected_rows
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    /// <summary>
    /// response of any mutation on the table "people"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IInsertPeople_Insert_people_people_mutation_response : IInsertPeople_Insert_people
    {
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class people_insert_inputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _cars_Arr_Rel_Insert_InputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter = default !;
        public global::System.String TypeName => "people_insert_input";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _cars_Arr_Rel_Insert_InputFormatter = serializerResolver.GetInputValueFormatter("cars_arr_rel_insert_input");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _uuidFormatter = serializerResolver.GetInputValueFormatter("uuid");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.people_insert_input;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IPeople_insert_inputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsCarsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("cars", FormatCars(input.Cars)));
            }

            if (inputInfo.IsFirstNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("firstName", FormatFirstName(input.FirstName)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsLastNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lastName", FormatLastName(input.LastName)));
            }

            return fields;
        }

        private global::System.Object? FormatCars(global::Foo.Bar.cars_arr_rel_insert_input? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _cars_Arr_Rel_Insert_InputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFirstName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuidFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLastName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>input type for inserting data into table "people"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class people_insert_input : global::Foo.Bar.State.IPeople_insert_inputInfo, global::System.IEquatable<people_insert_input>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((people_insert_input)obj);
        }

        public virtual global::System.Boolean Equals(people_insert_input? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Cars is null && other.Cars is null) || Cars != null && Cars.Equals(other.Cars))) && ((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName)) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Cars != null)
                {
                    hash ^= 397 * Cars.GetHashCode();
                }

                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                return hash;
            }
        }

        private global::Foo.Bar.cars_arr_rel_insert_input? _value_cars;
        private global::System.Boolean _set_cars;
        private global::System.String? _value_firstName;
        private global::System.Boolean _set_firstName;
        private global::System.String? _value_id;
        private global::System.Boolean _set_id;
        private global::System.String? _value_lastName;
        private global::System.Boolean _set_lastName;
        public global::Foo.Bar.cars_arr_rel_insert_input? Cars
        {
            get => _value_cars;
            set
            {
                _set_cars = true;
                _value_cars = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_insert_inputInfo.IsCarsSet => _set_cars;
        public global::System.String? FirstName
        {
            get => _value_firstName;
            set
            {
                _set_firstName = true;
                _value_firstName = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_insert_inputInfo.IsFirstNameSet => _set_firstName;
        public global::System.String? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_insert_inputInfo.IsIdSet => _set_id;
        public global::System.String? LastName
        {
            get => _value_lastName;
            set
            {
                _set_lastName = true;
                _value_lastName = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_insert_inputInfo.IsLastNameSet => _set_lastName;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class cars_arr_rel_insert_inputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _cars_Insert_InputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _cars_On_ConflictFormatter = default !;
        public global::System.String TypeName => "cars_arr_rel_insert_input";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _cars_Insert_InputFormatter = serializerResolver.GetInputValueFormatter("cars_insert_input");
            _cars_On_ConflictFormatter = serializerResolver.GetInputValueFormatter("cars_on_conflict");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.cars_arr_rel_insert_input;
            var inputInfo = runtimeValue as global::Foo.Bar.State.ICars_arr_rel_insert_inputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsDataSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("data", FormatData(input.Data)));
            }

            if (inputInfo.IsOn_conflictSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("on_conflict", FormatOn_conflict(input.On_conflict)));
            }

            return fields;
        }

        private global::System.Object? FormatData(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.cars_insert_input> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_cars_Insert_InputFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatOn_conflict(global::Foo.Bar.cars_on_conflict? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _cars_On_ConflictFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>input type for inserting array relation for remote table "cars"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class cars_arr_rel_insert_input : global::Foo.Bar.State.ICars_arr_rel_insert_inputInfo, global::System.IEquatable<cars_arr_rel_insert_input>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((cars_arr_rel_insert_input)obj);
        }

        public virtual global::System.Boolean Equals(cars_arr_rel_insert_input? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Data, other.Data)) && ((On_conflict is null && other.On_conflict is null) || On_conflict != null && On_conflict.Equals(other.On_conflict));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Data_elm in Data)
                {
                    hash ^= 397 * Data_elm.GetHashCode();
                }

                if (On_conflict != null)
                {
                    hash ^= 397 * On_conflict.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.cars_insert_input> _value_data = default !;
        private global::System.Boolean _set_data;
        private global::Foo.Bar.cars_on_conflict? _value_on_Conflict;
        private global::System.Boolean _set_on_Conflict;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.cars_insert_input> Data
        {
            get => _value_data;
            set
            {
                _set_data = true;
                _value_data = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_arr_rel_insert_inputInfo.IsDataSet => _set_data;
        ///<summary>on conflict condition</summary>
        public global::Foo.Bar.cars_on_conflict? On_conflict
        {
            get => _value_on_Conflict;
            set
            {
                _set_on_Conflict = true;
                _value_on_Conflict = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_arr_rel_insert_inputInfo.IsOn_conflictSet => _set_on_Conflict;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class cars_insert_inputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _people_Obj_Rel_Insert_InputFormatter = default !;
        public global::System.String TypeName => "cars_insert_input";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _uuidFormatter = serializerResolver.GetInputValueFormatter("uuid");
            _people_Obj_Rel_Insert_InputFormatter = serializerResolver.GetInputValueFormatter("people_obj_rel_insert_input");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.cars_insert_input;
            var inputInfo = runtimeValue as global::Foo.Bar.State.ICars_insert_inputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsCarNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("carName", FormatCarName(input.CarName)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsOwnerIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ownerId", FormatOwnerId(input.OwnerId)));
            }

            if (inputInfo.IsPersonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("person", FormatPerson(input.Person)));
            }

            return fields;
        }

        private global::System.Object? FormatCarName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuidFormatter.Format(input);
            }
        }

        private global::System.Object? FormatOwnerId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuidFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPerson(global::Foo.Bar.people_obj_rel_insert_input? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _people_Obj_Rel_Insert_InputFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>input type for inserting data into table "cars"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class cars_insert_input : global::Foo.Bar.State.ICars_insert_inputInfo, global::System.IEquatable<cars_insert_input>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((cars_insert_input)obj);
        }

        public virtual global::System.Boolean Equals(cars_insert_input? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CarName is null && other.CarName is null) || CarName != null && CarName.Equals(other.CarName))) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((OwnerId is null && other.OwnerId is null) || OwnerId != null && OwnerId.Equals(other.OwnerId)) && ((Person is null && other.Person is null) || Person != null && Person.Equals(other.Person));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CarName != null)
                {
                    hash ^= 397 * CarName.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (OwnerId != null)
                {
                    hash ^= 397 * OwnerId.GetHashCode();
                }

                if (Person != null)
                {
                    hash ^= 397 * Person.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_carName;
        private global::System.Boolean _set_carName;
        private global::System.String? _value_id;
        private global::System.Boolean _set_id;
        private global::System.String? _value_ownerId;
        private global::System.Boolean _set_ownerId;
        private global::Foo.Bar.people_obj_rel_insert_input? _value_person;
        private global::System.Boolean _set_person;
        public global::System.String? CarName
        {
            get => _value_carName;
            set
            {
                _set_carName = true;
                _value_carName = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_insert_inputInfo.IsCarNameSet => _set_carName;
        public global::System.String? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_insert_inputInfo.IsIdSet => _set_id;
        public global::System.String? OwnerId
        {
            get => _value_ownerId;
            set
            {
                _set_ownerId = true;
                _value_ownerId = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_insert_inputInfo.IsOwnerIdSet => _set_ownerId;
        public global::Foo.Bar.people_obj_rel_insert_input? Person
        {
            get => _value_person;
            set
            {
                _set_person = true;
                _value_person = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_insert_inputInfo.IsPersonSet => _set_person;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class people_obj_rel_insert_inputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _people_Insert_InputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _people_On_ConflictFormatter = default !;
        public global::System.String TypeName => "people_obj_rel_insert_input";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _people_Insert_InputFormatter = serializerResolver.GetInputValueFormatter("people_insert_input");
            _people_On_ConflictFormatter = serializerResolver.GetInputValueFormatter("people_on_conflict");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.people_obj_rel_insert_input;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IPeople_obj_rel_insert_inputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsDataSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("data", FormatData(input.Data)));
            }

            if (inputInfo.IsOn_conflictSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("on_conflict", FormatOn_conflict(input.On_conflict)));
            }

            return fields;
        }

        private global::System.Object? FormatData(global::Foo.Bar.people_insert_input input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _people_Insert_InputFormatter.Format(input);
        }

        private global::System.Object? FormatOn_conflict(global::Foo.Bar.people_on_conflict? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _people_On_ConflictFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>input type for inserting object relation for remote table "people"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class people_obj_rel_insert_input : global::Foo.Bar.State.IPeople_obj_rel_insert_inputInfo, global::System.IEquatable<people_obj_rel_insert_input>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((people_obj_rel_insert_input)obj);
        }

        public virtual global::System.Boolean Equals(people_obj_rel_insert_input? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Data.Equals(other.Data)) && ((On_conflict is null && other.On_conflict is null) || On_conflict != null && On_conflict.Equals(other.On_conflict));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Data.GetHashCode();
                if (On_conflict != null)
                {
                    hash ^= 397 * On_conflict.GetHashCode();
                }

                return hash;
            }
        }

        private global::Foo.Bar.people_insert_input _value_data = default !;
        private global::System.Boolean _set_data;
        private global::Foo.Bar.people_on_conflict? _value_on_Conflict;
        private global::System.Boolean _set_on_Conflict;
        public global::Foo.Bar.people_insert_input Data
        {
            get => _value_data;
            set
            {
                _set_data = true;
                _value_data = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_obj_rel_insert_inputInfo.IsDataSet => _set_data;
        ///<summary>on conflict condition</summary>
        public global::Foo.Bar.people_on_conflict? On_conflict
        {
            get => _value_on_Conflict;
            set
            {
                _set_on_Conflict = true;
                _value_on_Conflict = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_obj_rel_insert_inputInfo.IsOn_conflictSet => _set_on_Conflict;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class people_on_conflictInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _people_ConstraintFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _people_Update_ColumnFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _people_Bool_ExpFormatter = default !;
        public global::System.String TypeName => "people_on_conflict";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _people_ConstraintFormatter = serializerResolver.GetInputValueFormatter("People_constraint");
            _people_Update_ColumnFormatter = serializerResolver.GetInputValueFormatter("People_update_column");
            _people_Bool_ExpFormatter = serializerResolver.GetInputValueFormatter("people_bool_exp");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.people_on_conflict;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IPeople_on_conflictInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsConstraintSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("constraint", FormatConstraint(input.Constraint)));
            }

            if (inputInfo.IsUpdate_columnsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("update_columns", FormatUpdate_columns(input.Update_columns)));
            }

            if (inputInfo.IsWhereSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("where", FormatWhere(input.Where)));
            }

            return fields;
        }

        private global::System.Object? FormatConstraint(global::Foo.Bar.People_constraint input)
        {
            return _people_ConstraintFormatter.Format(input);
        }

        private global::System.Object? FormatUpdate_columns(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.People_update_column>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_people_Update_ColumnFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatWhere(global::Foo.Bar.people_bool_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _people_Bool_ExpFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>on conflict condition type for table "people"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class people_on_conflict : global::Foo.Bar.State.IPeople_on_conflictInfo, global::System.IEquatable<people_on_conflict>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((people_on_conflict)obj);
        }

        public virtual global::System.Boolean Equals(people_on_conflict? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Constraint.Equals(other.Constraint)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Update_columns, other.Update_columns) && ((Where is null && other.Where is null) || Where != null && Where.Equals(other.Where));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Constraint.GetHashCode();
                if (Update_columns != null)
                {
                    foreach (var Update_columns_elm in Update_columns)
                    {
                        hash ^= 397 * Update_columns_elm.GetHashCode();
                    }
                }

                if (Where != null)
                {
                    hash ^= 397 * Where.GetHashCode();
                }

                return hash;
            }
        }

        private global::Foo.Bar.People_constraint _value_constraint;
        private global::System.Boolean _set_constraint;
        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.People_update_column>? _value_update_Columns;
        private global::System.Boolean _set_update_Columns;
        private global::Foo.Bar.people_bool_exp? _value_where;
        private global::System.Boolean _set_where;
        public global::Foo.Bar.People_constraint Constraint
        {
            get => _value_constraint;
            set
            {
                _set_constraint = true;
                _value_constraint = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_on_conflictInfo.IsConstraintSet => _set_constraint;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.People_update_column>? Update_columns
        {
            get => _value_update_Columns;
            set
            {
                _set_update_Columns = true;
                _value_update_Columns = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_on_conflictInfo.IsUpdate_columnsSet => _set_update_Columns;
        public global::Foo.Bar.people_bool_exp? Where
        {
            get => _value_where;
            set
            {
                _set_where = true;
                _value_where = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_on_conflictInfo.IsWhereSet => _set_where;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class people_bool_expInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _people_Bool_ExpFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _cars_Bool_ExpFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _string_Comparison_ExpFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _uuid_Comparison_ExpFormatter = default !;
        public global::System.String TypeName => "people_bool_exp";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _people_Bool_ExpFormatter = serializerResolver.GetInputValueFormatter("people_bool_exp");
            _cars_Bool_ExpFormatter = serializerResolver.GetInputValueFormatter("cars_bool_exp");
            _string_Comparison_ExpFormatter = serializerResolver.GetInputValueFormatter("String_comparison_exp");
            _uuid_Comparison_ExpFormatter = serializerResolver.GetInputValueFormatter("uuid_comparison_exp");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.people_bool_exp;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IPeople_bool_expInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.Is_andSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_and", Format_and(input._and)));
            }

            if (inputInfo.Is_notSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_not", Format_not(input._not)));
            }

            if (inputInfo.Is_orSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_or", Format_or(input._or)));
            }

            if (inputInfo.IsCarsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("cars", FormatCars(input.Cars)));
            }

            if (inputInfo.IsFirstNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("firstName", FormatFirstName(input.FirstName)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsLastNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lastName", FormatLastName(input.LastName)));
            }

            return fields;
        }

        private global::System.Object? Format_and(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_bool_exp>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_people_Bool_ExpFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? Format_not(global::Foo.Bar.people_bool_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _people_Bool_ExpFormatter.Format(input);
            }
        }

        private global::System.Object? Format_or(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_bool_exp>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_people_Bool_ExpFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatCars(global::Foo.Bar.cars_bool_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _cars_Bool_ExpFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFirstName(global::Foo.Bar.String_comparison_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _string_Comparison_ExpFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::Foo.Bar.uuid_comparison_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuid_Comparison_ExpFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLastName(global::Foo.Bar.String_comparison_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _string_Comparison_ExpFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>Boolean expression to filter rows from the table "people". All fields are combined with a logical 'AND'.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class people_bool_exp : global::Foo.Bar.State.IPeople_bool_expInfo, global::System.IEquatable<people_bool_exp>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((people_bool_exp)obj);
        }

        public virtual global::System.Boolean Equals(people_bool_exp? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(_and, other._and)) && ((_not is null && other._not is null) || _not != null && _not.Equals(other._not)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(_or, other._or) && ((Cars is null && other.Cars is null) || Cars != null && Cars.Equals(other.Cars)) && ((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName)) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (_and != null)
                {
                    foreach (var _and_elm in _and)
                    {
                        hash ^= 397 * _and_elm.GetHashCode();
                    }
                }

                if (_not != null)
                {
                    hash ^= 397 * _not.GetHashCode();
                }

                if (_or != null)
                {
                    foreach (var _or_elm in _or)
                    {
                        hash ^= 397 * _or_elm.GetHashCode();
                    }
                }

                if (Cars != null)
                {
                    hash ^= 397 * Cars.GetHashCode();
                }

                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_bool_exp>? _value__and;
        private global::System.Boolean _set__and;
        private global::Foo.Bar.people_bool_exp? _value__not;
        private global::System.Boolean _set__not;
        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_bool_exp>? _value__or;
        private global::System.Boolean _set__or;
        private global::Foo.Bar.cars_bool_exp? _value_cars;
        private global::System.Boolean _set_cars;
        private global::Foo.Bar.String_comparison_exp? _value_firstName;
        private global::System.Boolean _set_firstName;
        private global::Foo.Bar.uuid_comparison_exp? _value_id;
        private global::System.Boolean _set_id;
        private global::Foo.Bar.String_comparison_exp? _value_lastName;
        private global::System.Boolean _set_lastName;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_bool_exp>? _and
        {
            get => _value__and;
            set
            {
                _set__and = true;
                _value__and = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_bool_expInfo.Is_andSet => _set__and;
        public global::Foo.Bar.people_bool_exp? _not
        {
            get => _value__not;
            set
            {
                _set__not = true;
                _value__not = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_bool_expInfo.Is_notSet => _set__not;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_bool_exp>? _or
        {
            get => _value__or;
            set
            {
                _set__or = true;
                _value__or = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_bool_expInfo.Is_orSet => _set__or;
        public global::Foo.Bar.cars_bool_exp? Cars
        {
            get => _value_cars;
            set
            {
                _set_cars = true;
                _value_cars = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_bool_expInfo.IsCarsSet => _set_cars;
        public global::Foo.Bar.String_comparison_exp? FirstName
        {
            get => _value_firstName;
            set
            {
                _set_firstName = true;
                _value_firstName = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_bool_expInfo.IsFirstNameSet => _set_firstName;
        public global::Foo.Bar.uuid_comparison_exp? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_bool_expInfo.IsIdSet => _set_id;
        public global::Foo.Bar.String_comparison_exp? LastName
        {
            get => _value_lastName;
            set
            {
                _set_lastName = true;
                _value_lastName = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IPeople_bool_expInfo.IsLastNameSet => _set_lastName;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class cars_bool_expInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _cars_Bool_ExpFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _string_Comparison_ExpFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _uuid_Comparison_ExpFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _people_Bool_ExpFormatter = default !;
        public global::System.String TypeName => "cars_bool_exp";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _cars_Bool_ExpFormatter = serializerResolver.GetInputValueFormatter("cars_bool_exp");
            _string_Comparison_ExpFormatter = serializerResolver.GetInputValueFormatter("String_comparison_exp");
            _uuid_Comparison_ExpFormatter = serializerResolver.GetInputValueFormatter("uuid_comparison_exp");
            _people_Bool_ExpFormatter = serializerResolver.GetInputValueFormatter("people_bool_exp");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.cars_bool_exp;
            var inputInfo = runtimeValue as global::Foo.Bar.State.ICars_bool_expInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.Is_andSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_and", Format_and(input._and)));
            }

            if (inputInfo.Is_notSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_not", Format_not(input._not)));
            }

            if (inputInfo.Is_orSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_or", Format_or(input._or)));
            }

            if (inputInfo.IsCarNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("carName", FormatCarName(input.CarName)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsOwnerIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ownerId", FormatOwnerId(input.OwnerId)));
            }

            if (inputInfo.IsPersonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("person", FormatPerson(input.Person)));
            }

            return fields;
        }

        private global::System.Object? Format_and(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.cars_bool_exp>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_cars_Bool_ExpFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? Format_not(global::Foo.Bar.cars_bool_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _cars_Bool_ExpFormatter.Format(input);
            }
        }

        private global::System.Object? Format_or(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.cars_bool_exp>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_cars_Bool_ExpFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatCarName(global::Foo.Bar.String_comparison_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _string_Comparison_ExpFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::Foo.Bar.uuid_comparison_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuid_Comparison_ExpFormatter.Format(input);
            }
        }

        private global::System.Object? FormatOwnerId(global::Foo.Bar.uuid_comparison_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuid_Comparison_ExpFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPerson(global::Foo.Bar.people_bool_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _people_Bool_ExpFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>Boolean expression to filter rows from the table "cars". All fields are combined with a logical 'AND'.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class cars_bool_exp : global::Foo.Bar.State.ICars_bool_expInfo, global::System.IEquatable<cars_bool_exp>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((cars_bool_exp)obj);
        }

        public virtual global::System.Boolean Equals(cars_bool_exp? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(_and, other._and)) && ((_not is null && other._not is null) || _not != null && _not.Equals(other._not)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(_or, other._or) && ((CarName is null && other.CarName is null) || CarName != null && CarName.Equals(other.CarName)) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((OwnerId is null && other.OwnerId is null) || OwnerId != null && OwnerId.Equals(other.OwnerId)) && ((Person is null && other.Person is null) || Person != null && Person.Equals(other.Person));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (_and != null)
                {
                    foreach (var _and_elm in _and)
                    {
                        hash ^= 397 * _and_elm.GetHashCode();
                    }
                }

                if (_not != null)
                {
                    hash ^= 397 * _not.GetHashCode();
                }

                if (_or != null)
                {
                    foreach (var _or_elm in _or)
                    {
                        hash ^= 397 * _or_elm.GetHashCode();
                    }
                }

                if (CarName != null)
                {
                    hash ^= 397 * CarName.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (OwnerId != null)
                {
                    hash ^= 397 * OwnerId.GetHashCode();
                }

                if (Person != null)
                {
                    hash ^= 397 * Person.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.cars_bool_exp>? _value__and;
        private global::System.Boolean _set__and;
        private global::Foo.Bar.cars_bool_exp? _value__not;
        private global::System.Boolean _set__not;
        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.cars_bool_exp>? _value__or;
        private global::System.Boolean _set__or;
        private global::Foo.Bar.String_comparison_exp? _value_carName;
        private global::System.Boolean _set_carName;
        private global::Foo.Bar.uuid_comparison_exp? _value_id;
        private global::System.Boolean _set_id;
        private global::Foo.Bar.uuid_comparison_exp? _value_ownerId;
        private global::System.Boolean _set_ownerId;
        private global::Foo.Bar.people_bool_exp? _value_person;
        private global::System.Boolean _set_person;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.cars_bool_exp>? _and
        {
            get => _value__and;
            set
            {
                _set__and = true;
                _value__and = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_bool_expInfo.Is_andSet => _set__and;
        public global::Foo.Bar.cars_bool_exp? _not
        {
            get => _value__not;
            set
            {
                _set__not = true;
                _value__not = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_bool_expInfo.Is_notSet => _set__not;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.cars_bool_exp>? _or
        {
            get => _value__or;
            set
            {
                _set__or = true;
                _value__or = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_bool_expInfo.Is_orSet => _set__or;
        public global::Foo.Bar.String_comparison_exp? CarName
        {
            get => _value_carName;
            set
            {
                _set_carName = true;
                _value_carName = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_bool_expInfo.IsCarNameSet => _set_carName;
        public global::Foo.Bar.uuid_comparison_exp? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_bool_expInfo.IsIdSet => _set_id;
        public global::Foo.Bar.uuid_comparison_exp? OwnerId
        {
            get => _value_ownerId;
            set
            {
                _set_ownerId = true;
                _value_ownerId = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_bool_expInfo.IsOwnerIdSet => _set_ownerId;
        public global::Foo.Bar.people_bool_exp? Person
        {
            get => _value_person;
            set
            {
                _set_person = true;
                _value_person = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_bool_expInfo.IsPersonSet => _set_person;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class String_comparison_expInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "String_comparison_exp";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.String_comparison_exp;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IString_comparison_expInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.Is_eqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_eq", Format_eq(input._eq)));
            }

            if (inputInfo.Is_gtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_gt", Format_gt(input._gt)));
            }

            if (inputInfo.Is_gteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_gte", Format_gte(input._gte)));
            }

            if (inputInfo.Is_ilikeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_ilike", Format_ilike(input._ilike)));
            }

            if (inputInfo.Is_inSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_in", Format_in(input._in)));
            }

            if (inputInfo.Is_iregexSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_iregex", Format_iregex(input._iregex)));
            }

            if (inputInfo.Is_is_nullSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_is_null", Format_is_null(input._is_null)));
            }

            if (inputInfo.Is_likeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_like", Format_like(input._like)));
            }

            if (inputInfo.Is_ltSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_lt", Format_lt(input._lt)));
            }

            if (inputInfo.Is_lteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_lte", Format_lte(input._lte)));
            }

            if (inputInfo.Is_neqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_neq", Format_neq(input._neq)));
            }

            if (inputInfo.Is_nilikeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_nilike", Format_nilike(input._nilike)));
            }

            if (inputInfo.Is_ninSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_nin", Format_nin(input._nin)));
            }

            if (inputInfo.Is_niregexSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_niregex", Format_niregex(input._niregex)));
            }

            if (inputInfo.Is_nlikeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_nlike", Format_nlike(input._nlike)));
            }

            if (inputInfo.Is_nregexSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_nregex", Format_nregex(input._nregex)));
            }

            if (inputInfo.Is_nsimilarSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_nsimilar", Format_nsimilar(input._nsimilar)));
            }

            if (inputInfo.Is_regexSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_regex", Format_regex(input._regex)));
            }

            if (inputInfo.Is_similarSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_similar", Format_similar(input._similar)));
            }

            return fields;
        }

        private global::System.Object? Format_eq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_gt(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_gte(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_ilike(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_in(global::System.Collections.Generic.IReadOnlyList<global::System.String>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? Format_iregex(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_is_null(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }

        private global::System.Object? Format_like(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_lt(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_lte(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_neq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_nilike(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_nin(global::System.Collections.Generic.IReadOnlyList<global::System.String>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? Format_niregex(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_nlike(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_nregex(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_nsimilar(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_regex(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? Format_similar(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class String_comparison_exp : global::Foo.Bar.State.IString_comparison_expInfo, global::System.IEquatable<String_comparison_exp>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((String_comparison_exp)obj);
        }

        public virtual global::System.Boolean Equals(String_comparison_exp? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((_eq is null && other._eq is null) || _eq != null && _eq.Equals(other._eq))) && ((_gt is null && other._gt is null) || _gt != null && _gt.Equals(other._gt)) && ((_gte is null && other._gte is null) || _gte != null && _gte.Equals(other._gte)) && ((_ilike is null && other._ilike is null) || _ilike != null && _ilike.Equals(other._ilike)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(_in, other._in) && ((_iregex is null && other._iregex is null) || _iregex != null && _iregex.Equals(other._iregex)) && _is_null == other._is_null && ((_like is null && other._like is null) || _like != null && _like.Equals(other._like)) && ((_lt is null && other._lt is null) || _lt != null && _lt.Equals(other._lt)) && ((_lte is null && other._lte is null) || _lte != null && _lte.Equals(other._lte)) && ((_neq is null && other._neq is null) || _neq != null && _neq.Equals(other._neq)) && ((_nilike is null && other._nilike is null) || _nilike != null && _nilike.Equals(other._nilike)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(_nin, other._nin) && ((_niregex is null && other._niregex is null) || _niregex != null && _niregex.Equals(other._niregex)) && ((_nlike is null && other._nlike is null) || _nlike != null && _nlike.Equals(other._nlike)) && ((_nregex is null && other._nregex is null) || _nregex != null && _nregex.Equals(other._nregex)) && ((_nsimilar is null && other._nsimilar is null) || _nsimilar != null && _nsimilar.Equals(other._nsimilar)) && ((_regex is null && other._regex is null) || _regex != null && _regex.Equals(other._regex)) && ((_similar is null && other._similar is null) || _similar != null && _similar.Equals(other._similar));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (_eq != null)
                {
                    hash ^= 397 * _eq.GetHashCode();
                }

                if (_gt != null)
                {
                    hash ^= 397 * _gt.GetHashCode();
                }

                if (_gte != null)
                {
                    hash ^= 397 * _gte.GetHashCode();
                }

                if (_ilike != null)
                {
                    hash ^= 397 * _ilike.GetHashCode();
                }

                if (_in != null)
                {
                    foreach (var _in_elm in _in)
                    {
                        hash ^= 397 * _in_elm.GetHashCode();
                    }
                }

                if (_iregex != null)
                {
                    hash ^= 397 * _iregex.GetHashCode();
                }

                if (_is_null != null)
                {
                    hash ^= 397 * _is_null.GetHashCode();
                }

                if (_like != null)
                {
                    hash ^= 397 * _like.GetHashCode();
                }

                if (_lt != null)
                {
                    hash ^= 397 * _lt.GetHashCode();
                }

                if (_lte != null)
                {
                    hash ^= 397 * _lte.GetHashCode();
                }

                if (_neq != null)
                {
                    hash ^= 397 * _neq.GetHashCode();
                }

                if (_nilike != null)
                {
                    hash ^= 397 * _nilike.GetHashCode();
                }

                if (_nin != null)
                {
                    foreach (var _nin_elm in _nin)
                    {
                        hash ^= 397 * _nin_elm.GetHashCode();
                    }
                }

                if (_niregex != null)
                {
                    hash ^= 397 * _niregex.GetHashCode();
                }

                if (_nlike != null)
                {
                    hash ^= 397 * _nlike.GetHashCode();
                }

                if (_nregex != null)
                {
                    hash ^= 397 * _nregex.GetHashCode();
                }

                if (_nsimilar != null)
                {
                    hash ^= 397 * _nsimilar.GetHashCode();
                }

                if (_regex != null)
                {
                    hash ^= 397 * _regex.GetHashCode();
                }

                if (_similar != null)
                {
                    hash ^= 397 * _similar.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value__eq;
        private global::System.Boolean _set__eq;
        private global::System.String? _value__gt;
        private global::System.Boolean _set__gt;
        private global::System.String? _value__gte;
        private global::System.Boolean _set__gte;
        private global::System.String? _value__ilike;
        private global::System.Boolean _set__ilike;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? _value__in;
        private global::System.Boolean _set__in;
        private global::System.String? _value__iregex;
        private global::System.Boolean _set__iregex;
        private global::System.Boolean? _value__is_null;
        private global::System.Boolean _set__is_null;
        private global::System.String? _value__like;
        private global::System.Boolean _set__like;
        private global::System.String? _value__lt;
        private global::System.Boolean _set__lt;
        private global::System.String? _value__lte;
        private global::System.Boolean _set__lte;
        private global::System.String? _value__neq;
        private global::System.Boolean _set__neq;
        private global::System.String? _value__nilike;
        private global::System.Boolean _set__nilike;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? _value__nin;
        private global::System.Boolean _set__nin;
        private global::System.String? _value__niregex;
        private global::System.Boolean _set__niregex;
        private global::System.String? _value__nlike;
        private global::System.Boolean _set__nlike;
        private global::System.String? _value__nregex;
        private global::System.Boolean _set__nregex;
        private global::System.String? _value__nsimilar;
        private global::System.Boolean _set__nsimilar;
        private global::System.String? _value__regex;
        private global::System.Boolean _set__regex;
        private global::System.String? _value__similar;
        private global::System.Boolean _set__similar;
        public global::System.String? _eq
        {
            get => _value__eq;
            set
            {
                _set__eq = true;
                _value__eq = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_eqSet => _set__eq;
        public global::System.String? _gt
        {
            get => _value__gt;
            set
            {
                _set__gt = true;
                _value__gt = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_gtSet => _set__gt;
        public global::System.String? _gte
        {
            get => _value__gte;
            set
            {
                _set__gte = true;
                _value__gte = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_gteSet => _set__gte;
        ///<summary>does the column match the given case-insensitive pattern</summary>
        public global::System.String? _ilike
        {
            get => _value__ilike;
            set
            {
                _set__ilike = true;
                _value__ilike = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_ilikeSet => _set__ilike;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? _in
        {
            get => _value__in;
            set
            {
                _set__in = true;
                _value__in = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_inSet => _set__in;
        ///<summary>does the column match the given POSIX regular expression, case insensitive</summary>
        public global::System.String? _iregex
        {
            get => _value__iregex;
            set
            {
                _set__iregex = true;
                _value__iregex = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_iregexSet => _set__iregex;
        public global::System.Boolean? _is_null
        {
            get => _value__is_null;
            set
            {
                _set__is_null = true;
                _value__is_null = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_is_nullSet => _set__is_null;
        ///<summary>does the column match the given pattern</summary>
        public global::System.String? _like
        {
            get => _value__like;
            set
            {
                _set__like = true;
                _value__like = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_likeSet => _set__like;
        public global::System.String? _lt
        {
            get => _value__lt;
            set
            {
                _set__lt = true;
                _value__lt = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_ltSet => _set__lt;
        public global::System.String? _lte
        {
            get => _value__lte;
            set
            {
                _set__lte = true;
                _value__lte = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_lteSet => _set__lte;
        public global::System.String? _neq
        {
            get => _value__neq;
            set
            {
                _set__neq = true;
                _value__neq = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_neqSet => _set__neq;
        ///<summary>does the column NOT match the given case-insensitive pattern</summary>
        public global::System.String? _nilike
        {
            get => _value__nilike;
            set
            {
                _set__nilike = true;
                _value__nilike = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_nilikeSet => _set__nilike;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? _nin
        {
            get => _value__nin;
            set
            {
                _set__nin = true;
                _value__nin = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_ninSet => _set__nin;
        ///<summary>does the column NOT match the given POSIX regular expression, case insensitive</summary>
        public global::System.String? _niregex
        {
            get => _value__niregex;
            set
            {
                _set__niregex = true;
                _value__niregex = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_niregexSet => _set__niregex;
        ///<summary>does the column NOT match the given pattern</summary>
        public global::System.String? _nlike
        {
            get => _value__nlike;
            set
            {
                _set__nlike = true;
                _value__nlike = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_nlikeSet => _set__nlike;
        ///<summary>does the column NOT match the given POSIX regular expression, case sensitive</summary>
        public global::System.String? _nregex
        {
            get => _value__nregex;
            set
            {
                _set__nregex = true;
                _value__nregex = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_nregexSet => _set__nregex;
        ///<summary>does the column NOT match the given SQL regular expression</summary>
        public global::System.String? _nsimilar
        {
            get => _value__nsimilar;
            set
            {
                _set__nsimilar = true;
                _value__nsimilar = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_nsimilarSet => _set__nsimilar;
        ///<summary>does the column match the given POSIX regular expression, case sensitive</summary>
        public global::System.String? _regex
        {
            get => _value__regex;
            set
            {
                _set__regex = true;
                _value__regex = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_regexSet => _set__regex;
        ///<summary>does the column match the given SQL regular expression</summary>
        public global::System.String? _similar
        {
            get => _value__similar;
            set
            {
                _set__similar = true;
                _value__similar = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IString_comparison_expInfo.Is_similarSet => _set__similar;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class uuid_comparison_expInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "uuid_comparison_exp";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _uuidFormatter = serializerResolver.GetInputValueFormatter("uuid");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.uuid_comparison_exp;
            var inputInfo = runtimeValue as global::Foo.Bar.State.IUuid_comparison_expInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.Is_eqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_eq", Format_eq(input._eq)));
            }

            if (inputInfo.Is_gtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_gt", Format_gt(input._gt)));
            }

            if (inputInfo.Is_gteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_gte", Format_gte(input._gte)));
            }

            if (inputInfo.Is_inSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_in", Format_in(input._in)));
            }

            if (inputInfo.Is_is_nullSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_is_null", Format_is_null(input._is_null)));
            }

            if (inputInfo.Is_ltSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_lt", Format_lt(input._lt)));
            }

            if (inputInfo.Is_lteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_lte", Format_lte(input._lte)));
            }

            if (inputInfo.Is_neqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_neq", Format_neq(input._neq)));
            }

            if (inputInfo.Is_ninSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("_nin", Format_nin(input._nin)));
            }

            return fields;
        }

        private global::System.Object? Format_eq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuidFormatter.Format(input);
            }
        }

        private global::System.Object? Format_gt(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuidFormatter.Format(input);
            }
        }

        private global::System.Object? Format_gte(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuidFormatter.Format(input);
            }
        }

        private global::System.Object? Format_in(global::System.Collections.Generic.IReadOnlyList<global::System.String>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_uuidFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? Format_is_null(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }

        private global::System.Object? Format_lt(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuidFormatter.Format(input);
            }
        }

        private global::System.Object? Format_lte(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuidFormatter.Format(input);
            }
        }

        private global::System.Object? Format_neq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uuidFormatter.Format(input);
            }
        }

        private global::System.Object? Format_nin(global::System.Collections.Generic.IReadOnlyList<global::System.String>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_uuidFormatter.Format(input_elm));
                }

                return input_list;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class uuid_comparison_exp : global::Foo.Bar.State.IUuid_comparison_expInfo, global::System.IEquatable<uuid_comparison_exp>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((uuid_comparison_exp)obj);
        }

        public virtual global::System.Boolean Equals(uuid_comparison_exp? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((_eq is null && other._eq is null) || _eq != null && _eq.Equals(other._eq))) && ((_gt is null && other._gt is null) || _gt != null && _gt.Equals(other._gt)) && ((_gte is null && other._gte is null) || _gte != null && _gte.Equals(other._gte)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(_in, other._in) && _is_null == other._is_null && ((_lt is null && other._lt is null) || _lt != null && _lt.Equals(other._lt)) && ((_lte is null && other._lte is null) || _lte != null && _lte.Equals(other._lte)) && ((_neq is null && other._neq is null) || _neq != null && _neq.Equals(other._neq)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(_nin, other._nin);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (_eq != null)
                {
                    hash ^= 397 * _eq.GetHashCode();
                }

                if (_gt != null)
                {
                    hash ^= 397 * _gt.GetHashCode();
                }

                if (_gte != null)
                {
                    hash ^= 397 * _gte.GetHashCode();
                }

                if (_in != null)
                {
                    foreach (var _in_elm in _in)
                    {
                        hash ^= 397 * _in_elm.GetHashCode();
                    }
                }

                if (_is_null != null)
                {
                    hash ^= 397 * _is_null.GetHashCode();
                }

                if (_lt != null)
                {
                    hash ^= 397 * _lt.GetHashCode();
                }

                if (_lte != null)
                {
                    hash ^= 397 * _lte.GetHashCode();
                }

                if (_neq != null)
                {
                    hash ^= 397 * _neq.GetHashCode();
                }

                if (_nin != null)
                {
                    foreach (var _nin_elm in _nin)
                    {
                        hash ^= 397 * _nin_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }

        private global::System.String? _value__eq;
        private global::System.Boolean _set__eq;
        private global::System.String? _value__gt;
        private global::System.Boolean _set__gt;
        private global::System.String? _value__gte;
        private global::System.Boolean _set__gte;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? _value__in;
        private global::System.Boolean _set__in;
        private global::System.Boolean? _value__is_null;
        private global::System.Boolean _set__is_null;
        private global::System.String? _value__lt;
        private global::System.Boolean _set__lt;
        private global::System.String? _value__lte;
        private global::System.Boolean _set__lte;
        private global::System.String? _value__neq;
        private global::System.Boolean _set__neq;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? _value__nin;
        private global::System.Boolean _set__nin;
        public global::System.String? _eq
        {
            get => _value__eq;
            set
            {
                _set__eq = true;
                _value__eq = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IUuid_comparison_expInfo.Is_eqSet => _set__eq;
        public global::System.String? _gt
        {
            get => _value__gt;
            set
            {
                _set__gt = true;
                _value__gt = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IUuid_comparison_expInfo.Is_gtSet => _set__gt;
        public global::System.String? _gte
        {
            get => _value__gte;
            set
            {
                _set__gte = true;
                _value__gte = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IUuid_comparison_expInfo.Is_gteSet => _set__gte;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? _in
        {
            get => _value__in;
            set
            {
                _set__in = true;
                _value__in = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IUuid_comparison_expInfo.Is_inSet => _set__in;
        public global::System.Boolean? _is_null
        {
            get => _value__is_null;
            set
            {
                _set__is_null = true;
                _value__is_null = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IUuid_comparison_expInfo.Is_is_nullSet => _set__is_null;
        public global::System.String? _lt
        {
            get => _value__lt;
            set
            {
                _set__lt = true;
                _value__lt = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IUuid_comparison_expInfo.Is_ltSet => _set__lt;
        public global::System.String? _lte
        {
            get => _value__lte;
            set
            {
                _set__lte = true;
                _value__lte = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IUuid_comparison_expInfo.Is_lteSet => _set__lte;
        public global::System.String? _neq
        {
            get => _value__neq;
            set
            {
                _set__neq = true;
                _value__neq = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IUuid_comparison_expInfo.Is_neqSet => _set__neq;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? _nin
        {
            get => _value__nin;
            set
            {
                _set__nin = true;
                _value__nin = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.IUuid_comparison_expInfo.Is_ninSet => _set__nin;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class cars_on_conflictInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _cars_ConstraintFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _cars_Update_ColumnFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _cars_Bool_ExpFormatter = default !;
        public global::System.String TypeName => "cars_on_conflict";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _cars_ConstraintFormatter = serializerResolver.GetInputValueFormatter("Cars_constraint");
            _cars_Update_ColumnFormatter = serializerResolver.GetInputValueFormatter("Cars_update_column");
            _cars_Bool_ExpFormatter = serializerResolver.GetInputValueFormatter("cars_bool_exp");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Foo.Bar.cars_on_conflict;
            var inputInfo = runtimeValue as global::Foo.Bar.State.ICars_on_conflictInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsConstraintSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("constraint", FormatConstraint(input.Constraint)));
            }

            if (inputInfo.IsUpdate_columnsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("update_columns", FormatUpdate_columns(input.Update_columns)));
            }

            if (inputInfo.IsWhereSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("where", FormatWhere(input.Where)));
            }

            return fields;
        }

        private global::System.Object? FormatConstraint(global::Foo.Bar.Cars_constraint input)
        {
            return _cars_ConstraintFormatter.Format(input);
        }

        private global::System.Object? FormatUpdate_columns(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.Cars_update_column>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_cars_Update_ColumnFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatWhere(global::Foo.Bar.cars_bool_exp? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _cars_Bool_ExpFormatter.Format(input);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    ///<summary>on conflict condition type for table "cars"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class cars_on_conflict : global::Foo.Bar.State.ICars_on_conflictInfo, global::System.IEquatable<cars_on_conflict>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((cars_on_conflict)obj);
        }

        public virtual global::System.Boolean Equals(cars_on_conflict? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Constraint.Equals(other.Constraint)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Update_columns, other.Update_columns) && ((Where is null && other.Where is null) || Where != null && Where.Equals(other.Where));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Constraint.GetHashCode();
                if (Update_columns != null)
                {
                    foreach (var Update_columns_elm in Update_columns)
                    {
                        hash ^= 397 * Update_columns_elm.GetHashCode();
                    }
                }

                if (Where != null)
                {
                    hash ^= 397 * Where.GetHashCode();
                }

                return hash;
            }
        }

        private global::Foo.Bar.Cars_constraint _value_constraint;
        private global::System.Boolean _set_constraint;
        private global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.Cars_update_column>? _value_update_Columns;
        private global::System.Boolean _set_update_Columns;
        private global::Foo.Bar.cars_bool_exp? _value_where;
        private global::System.Boolean _set_where;
        public global::Foo.Bar.Cars_constraint Constraint
        {
            get => _value_constraint;
            set
            {
                _set_constraint = true;
                _value_constraint = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_on_conflictInfo.IsConstraintSet => _set_constraint;
        public global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.Cars_update_column>? Update_columns
        {
            get => _value_update_Columns;
            set
            {
                _set_update_Columns = true;
                _value_update_Columns = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_on_conflictInfo.IsUpdate_columnsSet => _set_update_Columns;
        public global::Foo.Bar.cars_bool_exp? Where
        {
            get => _value_where;
            set
            {
                _set_where = true;
                _value_where = value;
            }
        }

        global::System.Boolean global::Foo.Bar.State.ICars_on_conflictInfo.IsWhereSet => _set_where;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum People_constraint
    {
        /// <summary>
        /// unique or primary key constraint
        /// </summary>
        PeoplePkey
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumParserGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class People_constraintSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, People_constraint>
    {
        public global::System.String TypeName => "People_constraint";
        public People_constraint Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "people_pkey" => People_constraint.PeoplePkey, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            People_constraint.PeoplePkey => "people_pkey", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum People_update_column
    {
        /// <summary>
        /// column name
        /// </summary>
        Firstname,
        /// <summary>
        /// column name
        /// </summary>
        Id,
        /// <summary>
        /// column name
        /// </summary>
        Lastname
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumParserGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class People_update_columnSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, People_update_column>
    {
        public global::System.String TypeName => "People_update_column";
        public People_update_column Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "firstName" => People_update_column.Firstname, "id" => People_update_column.Id, "lastName" => People_update_column.Lastname, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            People_update_column.Firstname => "firstName", People_update_column.Id => "id", People_update_column.Lastname => "lastName", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum Cars_constraint
    {
        /// <summary>
        /// unique or primary key constraint
        /// </summary>
        CarsPkey
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumParserGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class Cars_constraintSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Cars_constraint>
    {
        public global::System.String TypeName => "Cars_constraint";
        public Cars_constraint Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "cars_pkey" => Cars_constraint.CarsPkey, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            Cars_constraint.CarsPkey => "cars_pkey", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum Cars_update_column
    {
        /// <summary>
        /// column name
        /// </summary>
        Carname,
        /// <summary>
        /// column name
        /// </summary>
        Id,
        /// <summary>
        /// column name
        /// </summary>
        Ownerid
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EnumParserGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class Cars_update_columnSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Cars_update_column>
    {
        public global::System.String TypeName => "Cars_update_column";
        public Cars_update_column Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "carName" => Cars_update_column.Carname, "id" => Cars_update_column.Id, "ownerId" => Cars_update_column.Ownerid, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            Cars_update_column.Carname => "carName", Cars_update_column.Id => "id", Cars_update_column.Ownerid => "ownerId", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationDocumentGenerator
    /// <summary>
    /// Represents the operation service of the InsertPeople GraphQL operation
    /// <code>
    /// mutation InsertPeople($people: [people_insert_input!]!) {
    ///   insert_people(objects: $people) {
    ///     __typename
    ///     affected_rows
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class InsertPeopleMutationDocument : global::StrawberryShake.IDocument
    {
        private InsertPeopleMutationDocument()
        {
        }

        public static InsertPeopleMutationDocument Instance
        {
            get;
        }

        = new InsertPeopleMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x28, 0x24, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x5b, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x28, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a, 0x20, 0x24, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("sha1Hash", "c8b55152dcc4370cf6b30d4d748739527f578d0a");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceGenerator
    /// <summary>
    /// Represents the operation service of the InsertPeople GraphQL operation
    /// <code>
    /// mutation InsertPeople($people: [people_insert_input!]!) {
    ///   insert_people(objects: $people) {
    ///     __typename
    ///     affected_rows
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class InsertPeopleMutation : global::Foo.Bar.IInsertPeopleMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IInsertPeopleResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _people_Insert_InputFormatter;
        public InsertPeopleMutation(global::StrawberryShake.IOperationExecutor<IInsertPeopleResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _people_Insert_InputFormatter = serializerResolver.GetInputValueFormatter("people_insert_input");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IInsertPeopleResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IInsertPeopleResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_insert_input> people, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(people);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IInsertPeopleResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_insert_input> people, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(people);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_insert_input> people)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("people", FormatPeople(people));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: InsertPeopleMutationDocument.Instance.Hash.Value, name: "InsertPeople", document: InsertPeopleMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPeople(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_insert_input> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_people_Insert_InputFormatter.Format(value_elm));
            }

            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceInterfaceGenerator
    /// <summary>
    /// Represents the operation service of the InsertPeople GraphQL operation
    /// <code>
    /// mutation InsertPeople($people: [people_insert_input!]!) {
    ///   insert_people(objects: $people) {
    ///     __typename
    ///     affected_rows
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IInsertPeopleMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IInsertPeopleResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_insert_input> people, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IInsertPeopleResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::Foo.Bar.people_insert_input> people, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClient : global::Foo.Bar.IFooClient
    {
        private readonly global::Foo.Bar.IInsertPeopleMutation _insertPeople;
        public FooClient(global::Foo.Bar.IInsertPeopleMutation insertPeople)
        {
            _insertPeople = insertPeople ?? throw new global::System.ArgumentNullException(nameof(insertPeople));
        }

        public static global::System.String ClientName => "FooClient";
        public global::Foo.Bar.IInsertPeopleMutation InsertPeople => _insertPeople;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientInterfaceGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial interface IFooClient
    {
        global::Foo.Bar.IInsertPeopleMutation InsertPeople
        {
            get;
        }
    }
}

namespace Foo.Bar.State
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultDataFactoryGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class InsertPeopleResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.InsertPeopleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public InsertPeopleResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Foo.Bar.IInsertPeopleResult);
        public InsertPeopleResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is InsertPeopleResultInfo info)
            {
                return new InsertPeopleResult(MapIInsertPeople_Insert_people(info.Insert_people, snapshot));
            }

            throw new global::System.ArgumentException("InsertPeopleResultInfo expected.");
        }

        private global::Foo.Bar.IInsertPeople_Insert_people? MapIInsertPeople_Insert_people(global::Foo.Bar.State.people_mutation_responseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IInsertPeople_Insert_people returnValue = default !;
            if (data?.__typename.Equals("people_mutation_response", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new InsertPeople_Insert_people_people_mutation_response(data.Affected_rows ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInfoGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class InsertPeopleResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public InsertPeopleResultInfo(global::Foo.Bar.State.people_mutation_responseData? insert_People, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Insert_people = insert_People;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// insert data into the table: "people"
        /// </summary>
        public global::Foo.Bar.State.people_mutation_responseData? Insert_people
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new InsertPeopleResultInfo(Insert_people, _entityIds, version);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IPeople_insert_inputInfo
    {
        global::System.Boolean IsCarsSet
        {
            get;
        }

        global::System.Boolean IsFirstNameSet
        {
            get;
        }

        global::System.Boolean IsIdSet
        {
            get;
        }

        global::System.Boolean IsLastNameSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface ICars_arr_rel_insert_inputInfo
    {
        global::System.Boolean IsDataSet
        {
            get;
        }

        global::System.Boolean IsOn_conflictSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface ICars_insert_inputInfo
    {
        global::System.Boolean IsCarNameSet
        {
            get;
        }

        global::System.Boolean IsIdSet
        {
            get;
        }

        global::System.Boolean IsOwnerIdSet
        {
            get;
        }

        global::System.Boolean IsPersonSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IPeople_obj_rel_insert_inputInfo
    {
        global::System.Boolean IsDataSet
        {
            get;
        }

        global::System.Boolean IsOn_conflictSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IPeople_on_conflictInfo
    {
        global::System.Boolean IsConstraintSet
        {
            get;
        }

        global::System.Boolean IsUpdate_columnsSet
        {
            get;
        }

        global::System.Boolean IsWhereSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IPeople_bool_expInfo
    {
        global::System.Boolean Is_andSet
        {
            get;
        }

        global::System.Boolean Is_notSet
        {
            get;
        }

        global::System.Boolean Is_orSet
        {
            get;
        }

        global::System.Boolean IsCarsSet
        {
            get;
        }

        global::System.Boolean IsFirstNameSet
        {
            get;
        }

        global::System.Boolean IsIdSet
        {
            get;
        }

        global::System.Boolean IsLastNameSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface ICars_bool_expInfo
    {
        global::System.Boolean Is_andSet
        {
            get;
        }

        global::System.Boolean Is_notSet
        {
            get;
        }

        global::System.Boolean Is_orSet
        {
            get;
        }

        global::System.Boolean IsCarNameSet
        {
            get;
        }

        global::System.Boolean IsIdSet
        {
            get;
        }

        global::System.Boolean IsOwnerIdSet
        {
            get;
        }

        global::System.Boolean IsPersonSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IString_comparison_expInfo
    {
        global::System.Boolean Is_eqSet
        {
            get;
        }

        global::System.Boolean Is_gtSet
        {
            get;
        }

        global::System.Boolean Is_gteSet
        {
            get;
        }

        global::System.Boolean Is_ilikeSet
        {
            get;
        }

        global::System.Boolean Is_inSet
        {
            get;
        }

        global::System.Boolean Is_iregexSet
        {
            get;
        }

        global::System.Boolean Is_is_nullSet
        {
            get;
        }

        global::System.Boolean Is_likeSet
        {
            get;
        }

        global::System.Boolean Is_ltSet
        {
            get;
        }

        global::System.Boolean Is_lteSet
        {
            get;
        }

        global::System.Boolean Is_neqSet
        {
            get;
        }

        global::System.Boolean Is_nilikeSet
        {
            get;
        }

        global::System.Boolean Is_ninSet
        {
            get;
        }

        global::System.Boolean Is_niregexSet
        {
            get;
        }

        global::System.Boolean Is_nlikeSet
        {
            get;
        }

        global::System.Boolean Is_nregexSet
        {
            get;
        }

        global::System.Boolean Is_nsimilarSet
        {
            get;
        }

        global::System.Boolean Is_regexSet
        {
            get;
        }

        global::System.Boolean Is_similarSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface IUuid_comparison_expInfo
    {
        global::System.Boolean Is_eqSet
        {
            get;
        }

        global::System.Boolean Is_gtSet
        {
            get;
        }

        global::System.Boolean Is_gteSet
        {
            get;
        }

        global::System.Boolean Is_inSet
        {
            get;
        }

        global::System.Boolean Is_is_nullSet
        {
            get;
        }

        global::System.Boolean Is_ltSet
        {
            get;
        }

        global::System.Boolean Is_lteSet
        {
            get;
        }

        global::System.Boolean Is_neqSet
        {
            get;
        }

        global::System.Boolean Is_ninSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeStateInterfaceGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    internal interface ICars_on_conflictInfo
    {
        global::System.Boolean IsConstraintSet
        {
            get;
        }

        global::System.Boolean IsUpdate_columnsSet
        {
            get;
        }

        global::System.Boolean IsWhereSet
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.JsonResultBuilderGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class InsertPeopleBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IInsertPeopleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IInsertPeopleResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Foo.Bar.People_constraint> _people_ConstraintParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Foo.Bar.People_update_column> _people_Update_ColumnParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Foo.Bar.Cars_constraint> _cars_ConstraintParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Foo.Bar.Cars_update_column> _cars_Update_ColumnParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public InsertPeopleBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IInsertPeopleResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _people_ConstraintParser = serializerResolver.GetLeafValueParser<global::System.String, global::Foo.Bar.People_constraint>("People_constraint") ?? throw new global::System.ArgumentException("No serializer for type `People_constraint` found.");
            _people_Update_ColumnParser = serializerResolver.GetLeafValueParser<global::System.String, global::Foo.Bar.People_update_column>("People_update_column") ?? throw new global::System.ArgumentException("No serializer for type `People_update_column` found.");
            _cars_ConstraintParser = serializerResolver.GetLeafValueParser<global::System.String, global::Foo.Bar.Cars_constraint>("Cars_constraint") ?? throw new global::System.ArgumentException("No serializer for type `Cars_constraint` found.");
            _cars_Update_ColumnParser = serializerResolver.GetLeafValueParser<global::System.String, global::Foo.Bar.Cars_update_column>("Cars_update_column") ?? throw new global::System.ArgumentException("No serializer for type `Cars_update_column` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("uuid") ?? throw new global::System.ArgumentException("No serializer for type `uuid` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IInsertPeopleResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IInsertPeopleResult Result, InsertPeopleResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IInsertPeopleResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IInsertPeopleResult, InsertPeopleResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new InsertPeopleResultInfo(DeserializeIInsertPeople_Insert_people(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "insert_people")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Foo.Bar.State.people_mutation_responseData? DeserializeIInsertPeople_Insert_people(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("people_mutation_response", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Foo.Bar.State.people_mutation_responseData(typename, affected_Rows: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "affected_rows")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.DataTypeGenerator
    ///<summary>response of any mutation on the table "people"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class people_mutation_responseData
    {
        public people_mutation_responseData(global::System.String __typename, global::System.Int32? affected_Rows = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Affected_rows = affected_Rows;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>number of rows affected by the mutation</summary>
        public global::System.Int32? Affected_rows
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityIdFactoryGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            _ => throw new global::System.NotSupportedException()}

            ;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.StoreAccessorGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public FooClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.DependencyInjectionGenerator
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public static partial class FooClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Foo.Bar.State.FooClientStoreAccessor> AddFooClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Foo.Bar.State.FooClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.InsertPeopleMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.FooClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.IFooClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Foo.Bar.State.FooClientStoreAccessor>("FooClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("FooClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.People_constraintSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.People_update_columnSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.Cars_constraintSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.Cars_update_columnSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("uuid"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.people_insert_inputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.cars_arr_rel_insert_inputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.cars_insert_inputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.people_obj_rel_insert_inputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.people_on_conflictInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.people_bool_expInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.cars_bool_expInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.String_comparison_expInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.uuid_comparison_expInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Foo.Bar.cars_on_conflictInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IInsertPeopleResult>, global::Foo.Bar.State.InsertPeopleResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Foo.Bar.IInsertPeopleResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.IInsertPeopleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IInsertPeopleResult>, global::Foo.Bar.State.InsertPeopleBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Foo.Bar.IInsertPeopleResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Foo.Bar.IInsertPeopleResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Foo.Bar.IInsertPeopleResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.InsertPeopleMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.IInsertPeopleMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.InsertPeopleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Foo.Bar.State.FooClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.FooClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Foo.Bar.IFooClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Foo.Bar.FooClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}


