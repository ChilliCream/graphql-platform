// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable RedundantNameQualifier
// ReSharper disable ArrangeObjectCreationWhenTypeEvident
// ReSharper disable UnusedType.Global
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMethodReturnValue.Local
// ReSharper disable ConvertToAutoProperty
// ReSharper disable UnusedMember.Global
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable InconsistentNaming

// FooClient

// <auto-generated/>

#nullable enable

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using System.Text.Json;
using Foo.Bar;
using Foo.Bar.State;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using StrawberryShake;
using StrawberryShake.Serialization;
using StrawberryShake.Json;
using StrawberryShake.Transport.Http;

namespace Foo.Bar
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultTypeGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetSomethingResult : IEquatable<GetSomethingResult>, IGetSomethingResult
    {
        public GetSomethingResult(string? foo)
        {
            Foo = foo;
        }

        public string? Foo
        {
            get;
        }

        public override Boolean Equals(object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSomethingResult)obj);
        }

        public Boolean Equals(GetSomethingResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Foo is null && other.Foo is null) || Foo != null && Foo.Equals(other.Foo)));
        }

        public override Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (!(Foo is null))
                {
                    hash ^= 397 * Foo.GetHashCode();
                }

                return hash;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInterfaceGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetSomethingResult
    {
        public string? Foo
        {
            get;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class BarInputValueFormatter : IInputObjectFormatter
    {
        private IInputValueFormatter _bazFormatter = default!;
        public string TypeName => "Bar";

        public void Initialize(ISerializerResolver serializerResolver)
        {
            _bazFormatter = serializerResolver.GetInputValueFormatter("Baz");
        }

        public object? Format(object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            Bar? input = runtimeValue as Bar;
            IBarState? state = runtimeValue as IBarState;

            if (input is null || state is null)
            {
                throw new ArgumentException(nameof(runtimeValue));
            }

            var fields = new List<KeyValuePair<string, object?>>();

            if (state.BazHasValue)
            {
                fields.Add(new KeyValuePair<string, object?>("baz", FormatBaz(input.Baz)));
            }

            return fields;
        }

        private object? FormatBaz(IReadOnlyList<Baz?>? value)
        {
            if (value != null)
            {
                var list = new List<object?>();

                foreach (var element in value)
                {
                    if (element is null)
                    {
                        list.Add(element);
                    }
                    else
                    {
                        list.Add(_bazFormatter.Format(element));
                    }
                }

                return list;
            }
            else
            {
                return value;
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class Bar : IBarState
    {
        private bool _state_baz;
        private IReadOnlyList<Baz?>? _value_baz;

        public IReadOnlyList<Baz?>? Baz
        {
            get => _value_baz;
            set
            {
                _state_baz = true;
                _value_baz = value;
            }
        }

        bool IBarState.BazHasValue => _state_baz;
    }

    internal interface IBarState
    {
        bool BazHasValue { get; }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputValueFormatterGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class BazInputValueFormatter : IInputObjectFormatter
    {
        private IInputValueFormatter _stringFormatter = default!;
        public string TypeName => "Baz";

        public void Initialize(ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("string");
        }

        public object? Format(object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is Baz d))
            {
                throw new ArgumentException(nameof(runtimeValue));
            }

            return new KeyValuePair<string, object?>[]
            {
                new KeyValuePair<string, object?>("qux", FormatQux(d.Qux))
            };
        }

        private object? FormatQux(string? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.InputTypeGenerator
    [GeneratedCode("StrawberryShake", "0.0.0.0")]
    public partial class Baz
    {
        public string? Qux
        {
            get;
            set;
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationDocumentGenerator
    /// <summary>
    /// Represents the operation service of the GetSomething GraphQL operation
    /// <code>
    /// query GetSomething($bar: Bar) {
    ///   foo(bar: $bar)
    /// }
    /// </code>
    /// </summary>
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetSomethingQueryDocument : IDocument
    {
        private GetSomethingQueryDocument()
        {
        }

        public static GetSomethingQueryDocument Instance
        {
            get;
        }

            = new GetSomethingQueryDocument();

        public OperationKind Kind => OperationKind.Query;

        public ReadOnlySpan<Byte> Body => new Byte[]
        {
            0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x74,
            0x68, 0x69, 0x6e, 0x67, 0x28, 0x24, 0x62, 0x61, 0x72, 0x3a, 0x20, 0x42, 0x61, 0x72,
            0x29, 0x20, 0x7b, 0x20, 0x66, 0x6f, 0x6f, 0x28, 0x62, 0x61, 0x72, 0x3a, 0x20, 0x24,
            0x62, 0x61, 0x72, 0x29, 0x20, 0x7d
        };

        public DocumentHash Hash
        {
            get;
        } = new DocumentHash("sha1Hash", "da8906d1f936b0ba2f53ecc3b4f994f97a74891d");

        public override string ToString()
        {
#if NETSTANDARD2_0
            return Encoding.UTF8.GetString(Body.ToArray());
#else
            return Encoding.UTF8.GetString(Body);
#endif
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceGenerator
    /// <summary>
    /// Represents the operation service of the GetSomething GraphQL operation
    /// <code>
    /// query GetSomething($bar: Bar) {
    ///   foo(bar: $bar)
    /// }
    /// </code>
    /// </summary>
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetSomethingQuery : IGetSomethingQuery
    {
        private readonly IOperationExecutor<IGetSomethingResult> _operationExecutor;
        private readonly IInputValueFormatter _barFormatter;

        public GetSomethingQuery(
            IOperationExecutor<IGetSomethingResult> operationExecutor,
            ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ??
                                 throw new ArgumentNullException(nameof(operationExecutor));
            _barFormatter = serializerResolver.GetInputValueFormatter("Bar");
        }

        Type IOperationRequestFactory.ResultType => typeof(IGetSomethingResult);

        public async Task<IOperationResult<IGetSomethingResult>> ExecuteAsync(Bar? bar,
            CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(bar);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken)
                .ConfigureAwait(false);
        }

        public IObservable<IOperationResult<IGetSomethingResult>> Watch(Bar? bar,
            ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(bar);
            return _operationExecutor.Watch(request, strategy);
        }

        private OperationRequest CreateRequest(Bar? bar)
        {
            var variables = new Dictionary<string, object?>();
            variables.Add("bar", FormatBar(bar));
            return CreateRequest(variables);
        }

        private OperationRequest CreateRequest(IReadOnlyDictionary<string, object?>? variables)
        {
            return new OperationRequest(
                id: GetSomethingQueryDocument.Instance.Hash.Value,
                name: "GetSomething",
                document: GetSomethingQueryDocument.Instance,
                strategy: RequestStrategy.Default, variables: variables);
        }

        private object? FormatBar(Bar? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _barFormatter.Format(value);
            }
        }

        OperationRequest IOperationRequestFactory.Create(
            IReadOnlyDictionary<string, object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.OperationServiceInterfaceGenerator
    /// <summary>
    /// Represents the operation service of the GetSomething GraphQL operation
    /// <code>
    /// query GetSomething($bar: Bar) {
    ///   foo(bar: $bar)
    /// }
    /// </code>
    /// </summary>
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetSomethingQuery : IOperationRequestFactory
    {
        Task<IOperationResult<IGetSomethingResult>> ExecuteAsync(Bar? bar,
            CancellationToken cancellationToken = default);

        IObservable<IOperationResult<IGetSomethingResult>> Watch(Bar? bar,
            ExecutionStrategy? strategy = null);
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClient : IFooClient
    {
        private readonly IGetSomethingQuery _getSomething;

        public FooClient(IGetSomethingQuery getSomething)
        {
            _getSomething = getSomething ?? throw new ArgumentNullException(nameof(getSomething));
        }

        public static string ClientName => "FooClient";
        public IGetSomethingQuery GetSomething => _getSomething;
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ClientInterfaceGenerator
    /// <summary>
    /// Represents the FooClient GraphQL client
    /// </summary>
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IFooClient
    {
        IGetSomethingQuery GetSomething
        {
            get;
        }
    }
}

namespace Foo.Bar.State
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultDataFactoryGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetSomethingResultFactory : IOperationResultDataFactory<GetSomethingResult>
    {
        private readonly IEntityStore _entityStore;

        public GetSomethingResultFactory(IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new ArgumentNullException(nameof(entityStore));
        }

        Type IOperationResultDataFactory.ResultType => typeof(IGetSomethingResult);

        public GetSomethingResult Create(IOperationResultDataInfo dataInfo,
            IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSomethingResultInfo info)
            {
                return new GetSomethingResult(info.Foo);
            }

            throw new ArgumentException("GetSomethingResultInfo expected.");
        }

        object IOperationResultDataFactory.Create(IOperationResultDataInfo dataInfo,
            IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.ResultInfoGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetSomethingResultInfo : IOperationResultDataInfo
    {
        private readonly IReadOnlyCollection<EntityId> _entityIds;
        private readonly UInt64 _version;

        public GetSomethingResultInfo(string? foo, IReadOnlyCollection<EntityId> entityIds,
            UInt64 version)
        {
            Foo = foo;
            _entityIds = entityIds ?? throw new ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public string? Foo
        {
            get;
        }

        public IReadOnlyCollection<EntityId> EntityIds => _entityIds;
        public UInt64 Version => _version;

        public IOperationResultDataInfo WithVersion(UInt64 version)
        {
            return new GetSomethingResultInfo(Foo, _entityIds, version);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.JsonResultBuilderGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class
        GetSomethingBuilder : IOperationResultBuilder<JsonDocument, IGetSomethingResult>
    {
        private readonly IEntityStore _entityStore;
        private readonly IEntityIdSerializer _idSerializer;
        private readonly IOperationResultDataFactory<IGetSomethingResult> _resultDataFactory;
        private readonly ILeafValueParser<string, string> _stringParser;

        public GetSomethingBuilder(IEntityStore entityStore, IEntityIdSerializer idSerializer,
            IOperationResultDataFactory<IGetSomethingResult> resultDataFactory,
            ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ??
                                 throw new ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<string, string>("string") ??
                            throw new ArgumentException("No serializer for type `string` found.");
        }

        public IOperationResult<IGetSomethingResult> Build(Response<JsonDocument> response)
        {
            (IGetSomethingResult Result, GetSomethingResultInfo Info)? data = null;
            IReadOnlyList<IClientError>? errors = null;
            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data",
                            out JsonElement dataElement) &&
                        dataElement.ValueKind == JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }

                    if (response.Body.RootElement.TryGetProperty("errors",
                        out JsonElement errorsElement))
                    {
                        errors = JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch (Exception ex)
            {
                errors = new IClientError[] { new ClientError(ex.Message, exception: ex) };
            }

            return new OperationResult<IGetSomethingResult>(data?.Result, data?.Info,
                _resultDataFactory, errors);
        }

        private (IGetSomethingResult, GetSomethingResultInfo) BuildData(JsonElement obj)
        {
            var entityIds = new HashSet<EntityId>();
            IEntityStoreSnapshot snapshot = default!;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetSomethingResultInfo(
                DeserializeString(JsonElementExtensions.GetPropertyOrNull(obj, "foo")),
                entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private string? DeserializeString(JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.EntityIdFactoryGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientEntityIdFactory : IEntityIdSerializer
    {
        private static readonly JsonWriterOptions _options = new JsonWriterOptions()
        {
            Indented = false
        };

        public EntityId Parse(JsonElement obj)
        {
            string __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new NotSupportedException()
            };
        }

        public string Format(EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new NotSupportedException()
            };
        }
    }

    // StrawberryShake.CodeGeneration.CSharp.Generators.StoreAccessorGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClientStoreAccessor : StoreAccessor
    {
        public FooClientStoreAccessor(IOperationStore operationStore, IEntityStore entityStore,
            IEntityIdSerializer entityIdSerializer,
            IEnumerable<IOperationRequestFactory> requestFactories,
            IEnumerable<IOperationResultDataFactory> resultDataFactories) : base(operationStore,
            entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    // StrawberryShake.CodeGeneration.CSharp.Generators.DependencyInjectionGenerator
    [GeneratedCode("StrawberryShake", "11.0.0")]
    public static partial class FooClientServiceCollectionExtensions
    {
        public static IClientBuilder<FooClientStoreAccessor> AddFooClient(
            this IServiceCollection services,
            ExecutionStrategy strategy = ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new ServiceCollection();
            services
                .AddSingleton(sp =>
                {
                    ConfigureClientDefault(sp, serviceCollection, strategy);
                    return new ClientServiceProvider(serviceCollection.BuildServiceProvider());
                });
            services
                .AddSingleton(sp => new FooClientStoreAccessor(
                    sp.GetRequiredService<ClientServiceProvider>()
                        .GetRequiredService<IOperationStore>(),
                    sp.GetRequiredService<ClientServiceProvider>()
                        .GetRequiredService<IEntityStore>(),
                    sp.GetRequiredService<ClientServiceProvider>()
                        .GetRequiredService<IEntityIdSerializer>(),
                    sp.GetRequiredService<ClientServiceProvider>()
                        .GetRequiredService<IEnumerable<IOperationRequestFactory>>(),
                    sp.GetRequiredService<ClientServiceProvider>()
                        .GetRequiredService<IEnumerable<IOperationResultDataFactory>>()));
            services
                .AddSingleton(sp =>
                    sp.GetRequiredService<ClientServiceProvider>()
                        .GetRequiredService<GetSomethingQuery>());
            services
                .AddSingleton(sp =>
                    sp.GetRequiredService<ClientServiceProvider>().GetRequiredService<FooClient>());
            services
                .AddSingleton(sp =>
                    sp.GetRequiredService<ClientServiceProvider>()
                        .GetRequiredService<IFooClient>());
            return new ClientBuilder<FooClientStoreAccessor>("FooClient", services,
                serviceCollection);
        }

        private static IServiceCollection ConfigureClientDefault(
            IServiceProvider parentServices,
            ServiceCollection services,
            ExecutionStrategy strategy = ExecutionStrategy.NetworkOnly)
        {
            services.TryAddSingleton<IEntityStore, EntityStore>();
            services.TryAddSingleton<IOperationStore>(sp =>
                new OperationStore(sp.GetRequiredService<IEntityStore>()));
            services
                .AddSingleton<IHttpConnection>(_ =>
                {
                    var clientFactory = parentServices.GetRequiredService<IHttpClientFactory>();
                    return new HttpConnection(() => clientFactory.CreateClient("FooClient"));
                });
            services
                .AddSingleton<ISerializer, StringSerializer>();
            services
                .AddSingleton<ISerializer, BooleanSerializer>();
            services
                .AddSingleton<ISerializer, ByteSerializer>();
            services
                .AddSingleton<ISerializer, ShortSerializer>();
            services
                .AddSingleton<ISerializer, IntSerializer>();
            services
                .AddSingleton<ISerializer, LongSerializer>();
            services
                .AddSingleton<ISerializer, FloatSerializer>();
            services
                .AddSingleton<ISerializer, DecimalSerializer>();
            services
                .AddSingleton<ISerializer, UrlSerializer>();
            services
                .AddSingleton<ISerializer, UuidSerializer>();
            services
                .AddSingleton<ISerializer, IdSerializer>();
            services
                .AddSingleton<ISerializer, DateTimeSerializer>();
            services
                .AddSingleton<ISerializer, DateSerializer>();
            services
                .AddSingleton<ISerializer, ByteArraySerializer>();
            services
                .AddSingleton<ISerializer, TimeSpanSerializer>();
            services
                .AddSingleton<ISerializer, BarInputValueFormatter>();
            services
                .AddSingleton<ISerializer, BazInputValueFormatter>();
            services
                .AddSingleton<ISerializerResolver>(sp => new SerializerResolver(parentServices
                    .GetRequiredService<IEnumerable<ISerializer>>().Concat(sp
                        .GetRequiredService<IEnumerable<ISerializer>>())));
            services
                .AddSingleton<IOperationResultDataFactory<IGetSomethingResult>,
                    GetSomethingResultFactory>();
            services
                .AddSingleton<IOperationResultDataFactory>(sp => sp
                    .GetRequiredService<IOperationResultDataFactory<IGetSomethingResult>>());
            services
                .AddSingleton<IOperationRequestFactory>(sp => sp
                    .GetRequiredService<IGetSomethingQuery>());
            services
                .AddSingleton<IOperationResultBuilder<JsonDocument, IGetSomethingResult>,
                    GetSomethingBuilder>();
            services
                .AddSingleton<IOperationExecutor<IGetSomethingResult>>(
                    sp => new OperationExecutor<JsonDocument, IGetSomethingResult>(
                        sp.GetRequiredService<IHttpConnection>(),
                        sp.GetRequiredService<
                            IOperationResultBuilder<JsonDocument, IGetSomethingResult>>,
                        sp.GetRequiredService<IOperationStore>(), strategy));
            services.AddSingleton<GetSomethingQuery>();
            services.AddSingleton<IGetSomethingQuery>(sp =>
                sp.GetRequiredService<GetSomethingQuery>());
            services.AddSingleton<IEntityIdSerializer, FooClientEntityIdFactory>();
            services.AddSingleton<FooClient>();
            services.AddSingleton<IFooClient>(sp => sp.GetRequiredService<FooClient>());
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;

            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
