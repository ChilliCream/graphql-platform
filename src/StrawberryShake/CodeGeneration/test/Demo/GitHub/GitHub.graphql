schema {
  query: Query
  mutation: Mutation
}

"The query root of GitHub's GraphQL interface."
type Query {
  "Look up a code of conduct by its key"
  codeOfConduct("The code of conduct's key" key: String!): CodeOfConduct
  "Look up a code of conduct by its key"
  codesOfConduct: [CodeOfConduct]
  "Look up an open source license by its key"
  license("The license's downcased SPDX ID" key: String!): License
  "Return a list of known open source licenses"
  licenses: [License]!
  "Get alphabetically sorted list of Marketplace categories"
  marketplaceCategories("Return only the specified categories." includeCategories: [String!] "Exclude categories with no listings." excludeEmpty: Boolean "Returns top level categories only, excluding any subcategories." excludeSubcategories: Boolean): [MarketplaceCategory!]!
  "Look up a Marketplace category by its slug."
  marketplaceCategory("The URL slug of the category." slug: String! "Also check topic aliases for the category slug" useTopicAliases: Boolean): MarketplaceCategory
  "Look up a single Marketplace listing"
  marketplaceListing("Select the listing that matches this slug. It's the short name of the listing used in its URL." slug: String!): MarketplaceListing
  "Look up Marketplace listings"
  marketplaceListings("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Select only listings with the given category." categorySlug: String "Also check topic aliases for the category slug" useTopicAliases: Boolean "Select listings to which user has admin access. If omitted, listings visible to the\nviewer are returned.\n" viewerCanAdmin: Boolean "Select listings that can be administered by the specified user." adminId: ID "Select listings for products owned by the specified organization." organizationId: ID "Select listings visible to the viewer even if they are not approved. If omitted or\nfalse, only approved listings will be returned.\n" allStates: Boolean "Select the listings with these slugs, if they are visible to the viewer." slugs: [String] "Select only listings where the primary category matches the given category slug." primaryCategoryOnly: Boolean = false "Select only listings that offer a free trial." withFreeTrialsOnly: Boolean = false): MarketplaceListingConnection!
  "Return information about the GitHub instance"
  meta: GitHubMetadata!
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  "Lookup a organization by login."
  organization("The organization's login." login: String!): Organization
  "The client's rate limit information."
  rateLimit("If true, calculate the cost for the query without evaluating it" dryRun: Boolean = false): RateLimit
  "Hack to workaround https:\/\/github.com\/facebook\/relay\/issues\/112 re-exposing the root query object"
  relay: Query!
  "Lookup a given repository by the owner and repository name."
  repository("The login field of a user or organization" owner: String! "The name of the repository" name: String!): Repository
  "Lookup a repository owner (ie. either a User or an Organization) by login."
  repositoryOwner("The username to lookup the owner by." login: String!): RepositoryOwner
  "Lookup resource by a URL."
  resource("The URL." url: URI!): UniformResourceLocatable
  "Perform a search across resources."
  search("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "The search string to look for." query: String! "The types of search items to search within." type: SearchType!): SearchResultItemConnection!
  "GitHub Security Advisories"
  securityAdvisories("Ordering options for the returned topics." orderBy: SecurityAdvisoryOrder = { field: UPDATED_AT, direction: DESC } "Filter advisories by identifier, e.g. GHSA or CVE." identifier: SecurityAdvisoryIdentifierFilter "Filter advisories to those published since a time in the past." publishedSince: DateTime "Filter advisories to those updated since a time in the past." updatedSince: DateTime "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): SecurityAdvisoryConnection!
  "Fetch a Security Advisory by its GHSA ID"
  securityAdvisory("GitHub Security Advisory ID." ghsaId: String!): SecurityAdvisory
  "Software Vulnerabilities documented by GitHub Security Advisories"
  securityVulnerabilities("Ordering options for the returned topics." orderBy: SecurityVulnerabilityOrder = { field: UPDATED_AT, direction: DESC } "An ecosystem to filter vulnerabilities by." ecosystem: SecurityAdvisoryEcosystem "A package name to filter vulnerabilities by." package: String "A list of severities to filter vulnerabilities by." severities: [SecurityAdvisorySeverity!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): SecurityVulnerabilityConnection!
  "Look up a single Sponsors Listing"
  sponsorsListing("Select the Sponsors listing which matches this slug" slug: String!): SponsorsListing
  "Look up a topic by name."
  topic("The topic's name." name: String!): Topic
  "Lookup a user by login."
  user("The user's login." login: String!): User
  "The currently authenticated user."
  viewer: User!
}

"An object with an ID."
interface Node {
  "ID of the object."
  id: ID!
}

"Represents a type that can be retrieved by a URL."
interface UniformResourceLocatable {
  "The HTML path to this resource."
  resourcePath: URI!
  "The URL to this resource."
  url: URI!
}

"An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."
scalar URI

"A user is an individual's account on GitHub that owns repositories and can make new content."
type User implements Node & Actor & RegistryPackageOwner & RegistryPackageSearch & ProjectOwner & RepositoryOwner & UniformResourceLocatable & ProfileOwner & Sponsorable {
  "Determine if this repository owner has any items that can be pinned to their profile."
  anyPinnableItems("Filter to only a particular kind of pinnable item." type: PinnableItemType): Boolean!
  "A URL pointing to the user's public avatar."
  avatarUrl("The size of the resulting square image." size: Int): URI!
  "The user's public profile bio."
  bio: String
  "The user's public profile bio as HTML."
  bioHTML: HTML!
  "A list of commit comments made by this user."
  commitComments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): CommitCommentConnection!
  "The user's public profile company."
  company: String
  "The user's public profile company as HTML."
  companyHTML: HTML!
  "The collection of contributions this user has made to different repositories."
  contributionsCollection("The ID of the organization used to filter contributions." organizationID: ID "Only contributions made at this time or later will be counted. If omitted, defaults to a year ago." from: DateTime "Only contributions made before and up to and including this time will be counted. If omitted, defaults to the current time." to: DateTime): ContributionsCollection!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "The user's publicly visible profile email."
  email: String!
  "A list of users the given user is followed by."
  followers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): FollowerConnection!
  "A list of users the given user is following."
  following("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): FollowingConnection!
  "Find gist by repo name."
  gist("The gist name to find." name: String!): Gist
  "A list of gist comments made by this user."
  gistComments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): GistCommentConnection!
  "A list of the Gists the user has created."
  gists("Filters Gists according to privacy." privacy: GistPrivacy "Ordering options for gists returned from the connection" orderBy: GistOrder "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): GistConnection!
  "The hovercard information for this user in a given context"
  hovercard("The ID of the subject to get the hovercard in the context of" primarySubjectId: ID): Hovercard!
  id: ID!
  "Whether or not this user is a participant in the GitHub Security Bug Bounty."
  isBountyHunter: Boolean!
  "Whether or not this user is a participant in the GitHub Campus Experts Program."
  isCampusExpert: Boolean!
  "Whether or not this user is a GitHub Developer Program member."
  isDeveloperProgramMember: Boolean!
  "Whether or not this user is a GitHub employee."
  isEmployee: Boolean!
  "Whether or not the user has marked themselves as for hire."
  isHireable: Boolean!
  "Whether or not this user is a site administrator."
  isSiteAdmin: Boolean!
  "Whether or not this user is the viewing user."
  isViewer: Boolean!
  "A list of issue comments made by this user."
  issueComments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): IssueCommentConnection!
  "A list of issues associated with this user."
  issues("Ordering options for issues returned from the connection." orderBy: IssueOrder "A list of label names to filter the pull requests by." labels: [String!] "A list of states to filter the issues by." states: [IssueState!] "Filtering options for issues returned from the connection." filterBy: IssueFilters "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): IssueConnection!
  "Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity."
  itemShowcase: ProfileItemShowcase!
  "The user's public profile location."
  location: String
  "The username used to login."
  login: String!
  "The user's public profile name."
  name: String
  "Find an organization by its login that the user belongs to."
  organization("The login of the organization to find." login: String!): Organization
  "A list of organizations the user belongs to."
  organizations("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): OrganizationConnection!
  "A list of repositories and gists this profile owner can pin to their profile."
  pinnableItems("Filter the types of pinnable items that are returned." types: [PinnableItemType!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PinnableItemConnection!
  "A list of repositories and gists this profile owner has pinned to their profile"
  pinnedItems("Filter the types of pinned items that are returned." types: [PinnableItemType!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PinnableItemConnection!
  "Returns how many more items this profile owner can pin to their profile."
  pinnedItemsRemaining: Int!
  "A list of repositories this user has pinned to their profile"
  pinnedRepositories("If non-null, filters repositories according to privacy" privacy: RepositoryPrivacy "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder "Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns." affiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns." ownerAffiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "If non-null, filters repositories according to whether they have been locked" isLocked: Boolean "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RepositoryConnection!
  "Find project by number."
  project("The project number to find." number: Int!): Project
  "A list of projects under the owner."
  projects("Ordering options for projects returned from the connection" orderBy: ProjectOrder "Query to search projects by, currently only searching by name." search: String "A list of states to filter the projects by." states: [ProjectState!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): ProjectConnection!
  "The HTTP path listing user's projects"
  projectsResourcePath: URI!
  "The HTTP URL listing user's projects"
  projectsUrl: URI!
  "A list of public keys associated with this user."
  publicKeys("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PublicKeyConnection!
  "A list of pull requests associated with this user."
  pullRequests("A list of states to filter the pull requests by." states: [PullRequestState!] "A list of label names to filter the pull requests by." labels: [String!] "The head ref name to filter the pull requests by." headRefName: String "The base ref name to filter the pull requests by." baseRefName: String "Ordering options for pull requests returned from the connection." orderBy: IssueOrder "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestConnection!
  "A list of registry packages under the owner."
  registryPackages("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Find registry package by name." name: String "Find registry packages by their names." names: [String] "Find registry packages in a repository." repositoryId: ID "Filter registry package by type." packageType: RegistryPackageType "Filter registry package by type (string)." registryPackageType: String "Filter registry package by whether it is publicly visible" publicOnly: Boolean = false): RegistryPackageConnection!
  "A list of registry packages for a particular search query."
  registryPackagesForQuery("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Find registry package by search query." query: String "Filter registry package by type." packageType: RegistryPackageType): RegistryPackageConnection!
  "A list of repositories that the user owns."
  repositories("If non-null, filters repositories according to privacy" privacy: RepositoryPrivacy "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder "Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns." affiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns." ownerAffiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "If non-null, filters repositories according to whether they have been locked" isLocked: Boolean "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "If non-null, filters repositories according to whether they are forks of another repository" isFork: Boolean): RepositoryConnection!
  "A list of repositories that the user recently contributed to."
  repositoriesContributedTo("If non-null, filters repositories according to privacy" privacy: RepositoryPrivacy "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder "If non-null, filters repositories according to whether they have been locked" isLocked: Boolean "If true, include user repositories" includeUserRepositories: Boolean "If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]" contributionTypes: [RepositoryContributionType] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RepositoryConnection!
  "Find Repository."
  repository("Name of Repository to find." name: String!): Repository
  "The HTTP path for this user"
  resourcePath: URI!
  "Replies this user has saved"
  savedReplies("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "The field to order saved replies by." orderBy: SavedReplyOrder = { field: UPDATED_AT, direction: DESC }): SavedReplyConnection
  "This object's sponsorships as the maintainer."
  sponsorshipsAsMaintainer("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Whether or not to include private sponsorships in the result set" includePrivate: Boolean = false "Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer." orderBy: SponsorshipOrder): SponsorshipConnection!
  "This object's sponsorships as the sponsor."
  sponsorshipsAsSponsor("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer." orderBy: SponsorshipOrder): SponsorshipConnection!
  "Repositories the user has starred."
  starredRepositories("Filters starred repositories to only return repositories owned by the viewer." ownedByViewer: Boolean "Order for connection" orderBy: StarOrder "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): StarredRepositoryConnection!
  "The user's description of what they're currently doing."
  status: UserStatus
  "Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created\n"
  topRepositories("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder! "How far back in time to fetch contributed repositories" since: DateTime): RepositoryConnection!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this user"
  url: URI!
  "Can the viewer pin repositories and gists to the profile?"
  viewerCanChangePinnedItems: Boolean!
  "Can the current viewer create new projects on this owner."
  viewerCanCreateProjects: Boolean!
  "Whether or not the viewer is able to follow the user."
  viewerCanFollow: Boolean!
  "Whether or not this user is followed by the viewer."
  viewerIsFollowing: Boolean!
  "A list of repositories the given user is watching."
  watching("If non-null, filters repositories according to privacy" privacy: RepositoryPrivacy "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder "Affiliation options for repositories returned from the connection" affiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR, ORGANIZATION_MEMBER ] "Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns." ownerAffiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "If non-null, filters repositories according to whether they have been locked" isLocked: Boolean "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RepositoryConnection!
  "A URL pointing to the user's public website\/blog."
  websiteUrl: URI
}

"Represents an object which can take actions on GitHub. Typically a User or Bot."
interface Actor {
  "A URL pointing to the actor's public avatar."
  avatarUrl("The size of the resulting square image." size: Int): URI!
  "The username of the actor."
  login: String!
  "The HTTP path for this actor."
  resourcePath: URI!
  "The HTTP URL for this actor."
  url: URI!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Represents an owner of a registry package."
interface RegistryPackageOwner {
  id: ID!
  "A list of registry packages under the owner."
  registryPackages("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Find registry package by name." name: String "Find registry packages by their names." names: [String] "Find registry packages in a repository." repositoryId: ID "Filter registry package by type." packageType: RegistryPackageType "Filter registry package by type (string)." registryPackageType: String "Filter registry package by whether it is publicly visible" publicOnly: Boolean = false): RegistryPackageConnection!
}

"The connection type for RegistryPackage."
type RegistryPackageConnection {
  "A list of edges."
  edges: [RegistryPackageEdge]
  "A list of nodes."
  nodes: [RegistryPackage]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type RegistryPackageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistryPackage
}

"A registry package contains the content for an uploaded package."
type RegistryPackage implements Node {
  "The package type color"
  color: String!
  id: ID!
  "Find the latest version for the package."
  latestVersion: RegistryPackageVersion
  "Identifies the title of the package."
  name: String!
  "Identifies the title of the package, with the owner prefixed."
  nameWithOwner: String!
  "Find the package file identified by the guid."
  packageFileByGuid("The unique identifier of the package_file" guid: String!): RegistryPackageFile
  "Find the package file identified by the sha256."
  packageFileBySha256("The SHA256 of the package_file" sha256: String!): RegistryPackageFile
  "Identifies the type of the package."
  packageType: RegistryPackageType!
  "List the prerelease versions for this package."
  preReleaseVersions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RegistryPackageVersionConnection
  "The type of the package."
  registryPackageType: String
  "repository that the release is associated with"
  repository: Repository
  "Statistics about package activity."
  statistics: RegistryPackageStatistics
  "list of tags for this package"
  tags("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RegistryPackageTagConnection!
  "List the topics for this package."
  topics("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): TopicConnection
  "Find package version by version string."
  version("The package version." version: String!): RegistryPackageVersion
  "Find package version by version string."
  versionByPlatform("The package version." version: String! "Find a registry package for a specific platform." platform: String!): RegistryPackageVersion
  "Find package version by manifest SHA256."
  versionBySha256("The package SHA256 digest." sha256: String!): RegistryPackageVersion
  "list of versions for this package"
  versions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RegistryPackageVersionConnection!
  "List package versions with a specific metadatum."
  versionsByMetadatum("Filter on a specific metadatum." metadatum: RegistryPackageMetadatum! "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RegistryPackageVersionConnection
}

"The possible types of a registry package."
enum RegistryPackageType {
  "An npm registry package."
  NPM
  "A rubygems registry package."
  RUBYGEMS
  "A maven registry package."
  MAVEN
  "A docker image."
  DOCKER
  "A debian package."
  DEBIAN
  "A nuget package."
  NUGET
  "A python package."
  PYTHON
}

"A repository contains the content for a project."
type Repository implements Node & ProjectOwner & RegistryPackageOwner & RegistryPackageSearch & Subscribable & Starrable & UniformResourceLocatable & RepositoryInfo {
  "A list of users that can be assigned to issues in this repository."
  assignableUsers("Filters users with query on user name and login" query: String "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserConnection!
  "A list of branch protection rules for this repository."
  branchProtectionRules("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): BranchProtectionRuleConnection!
  "Returns the code of conduct for this repository"
  codeOfConduct: CodeOfConduct
  "A list of collaborators associated with the repository."
  collaborators("Collaborators affiliation level with a repository." affiliation: CollaboratorAffiliation "Filters users with query on user name and login" query: String "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RepositoryCollaboratorConnection
  "A list of commit comments associated with the repository."
  commitComments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): CommitCommentConnection!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "The Ref associated with the repository's default branch."
  defaultBranchRef: Ref
  "A list of deploy keys that are on this repository."
  deployKeys("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): DeployKeyConnection!
  "Deployments associated with the repository"
  deployments("Environments to list deployments for" environments: [String!] "Ordering options for deployments returned from the connection." orderBy: DeploymentOrder = { field: CREATED_AT, direction: ASC } "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): DeploymentConnection!
  "The description of the repository."
  description: String
  "The description of the repository rendered to HTML."
  descriptionHTML: HTML!
  "The number of kilobytes this repository occupies on disk."
  diskUsage: Int
  "Returns how many forks there are of this repository in the whole network."
  forkCount: Int!
  "A list of direct forked repositories."
  forks("If non-null, filters repositories according to privacy" privacy: RepositoryPrivacy "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder "Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns." affiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns." ownerAffiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "If non-null, filters repositories according to whether they have been locked" isLocked: Boolean "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RepositoryConnection!
  "Indicates if the repository has issues feature enabled."
  hasIssuesEnabled: Boolean!
  "Indicates if the repository has wiki feature enabled."
  hasWikiEnabled: Boolean!
  "The repository's URL."
  homepageUrl: URI
  id: ID!
  "Indicates if the repository is unmaintained."
  isArchived: Boolean!
  "Returns whether or not this repository disabled."
  isDisabled: Boolean!
  "Identifies if the repository is a fork."
  isFork: Boolean!
  "Indicates if the repository has been locked or not."
  isLocked: Boolean!
  "Identifies if the repository is a mirror."
  isMirror: Boolean!
  "Identifies if the repository is private."
  isPrivate: Boolean!
  "Identifies if the repository is a template that can be used to generate new repositories."
  isTemplate: Boolean!
  "Returns a single issue from the current repository by number."
  issue("The number for the issue to be returned." number: Int!): Issue
  "Returns a single issue-like object from the current repository by number."
  issueOrPullRequest("The number for the issue to be returned." number: Int!): IssueOrPullRequest
  "A list of issues that have been opened in the repository."
  issues("Ordering options for issues returned from the connection." orderBy: IssueOrder "A list of label names to filter the pull requests by." labels: [String!] "A list of states to filter the issues by." states: [IssueState!] "Filtering options for issues returned from the connection." filterBy: IssueFilters "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): IssueConnection!
  "Returns a single label by name"
  label("Label name" name: String!): Label
  "A list of labels associated with the repository."
  labels("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "If provided, searches labels by name and description." query: String): LabelConnection
  "A list containing a breakdown of the language composition of the repository."
  languages("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Order for connection" orderBy: LanguageOrder): LanguageConnection
  "The license associated with the repository"
  licenseInfo: License
  "The reason the repository has been locked."
  lockReason: RepositoryLockReason
  "A list of Users that can be mentioned in the context of the repository."
  mentionableUsers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserConnection!
  "Whether or not PRs are merged with a merge commit on this repository."
  mergeCommitAllowed: Boolean!
  "Returns a single milestone from the current repository by number."
  milestone("The number for the milestone to be returned." number: Int!): Milestone
  "A list of milestones associated with the repository."
  milestones("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Filter by the state of the milestones." states: [MilestoneState!] "Ordering options for milestones." orderBy: MilestoneOrder): MilestoneConnection
  "The repository's original mirror URL."
  mirrorUrl: URI
  "The name of the repository."
  name: String!
  "The repository's name with owner."
  nameWithOwner: String!
  "A Git object in the repository"
  object("The Git object ID" oid: GitObjectID "A Git revision expression suitable for rev-parse" expression: String): GitObject
  "The image used to represent this repository in Open Graph data."
  openGraphImageUrl: URI!
  "The User owner of the repository."
  owner: RepositoryOwner!
  "The repository parent, if this is a fork."
  parent: Repository
  "The primary language of the repository's code."
  primaryLanguage: Language
  "Find project by number."
  project("The project number to find." number: Int!): Project
  "A list of projects under the owner."
  projects("Ordering options for projects returned from the connection" orderBy: ProjectOrder "Query to search projects by, currently only searching by name." search: String "A list of states to filter the projects by." states: [ProjectState!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): ProjectConnection!
  "The HTTP path listing the repository's projects"
  projectsResourcePath: URI!
  "The HTTP URL listing the repository's projects"
  projectsUrl: URI!
  "Returns a single pull request from the current repository by number."
  pullRequest("The number for the pull request to be returned." number: Int!): PullRequest
  "A list of pull requests that have been opened in the repository."
  pullRequests("A list of states to filter the pull requests by." states: [PullRequestState!] "A list of label names to filter the pull requests by." labels: [String!] "The head ref name to filter the pull requests by." headRefName: String "The base ref name to filter the pull requests by." baseRefName: String "Ordering options for pull requests returned from the connection." orderBy: IssueOrder "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestConnection!
  "Identifies when the repository was last pushed to."
  pushedAt: DateTime
  "Whether or not rebase-merging is enabled on this repository."
  rebaseMergeAllowed: Boolean!
  "Fetch a given ref from the repository"
  ref("The ref to retrieve. Fully qualified matches are checked in order (`refs\/heads\/master`) before falling back onto checks for short name matches (`master`)." qualifiedName: String!): Ref
  "Fetch a list of refs from the repository"
  refs("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "A ref name prefix like `refs\/heads\/`, `refs\/tags\/`, etc." refPrefix: String! "DEPRECATED: use orderBy. The ordering direction." direction: OrderDirection "Ordering options for refs returned from the connection." orderBy: RefOrder): RefConnection
  "A list of registry packages under the owner."
  registryPackages("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Find registry package by name." name: String "Find registry packages by their names." names: [String] "Find registry packages in a repository." repositoryId: ID "Filter registry package by type." packageType: RegistryPackageType "Filter registry package by type (string)." registryPackageType: String "Filter registry package by whether it is publicly visible" publicOnly: Boolean = false): RegistryPackageConnection!
  "A list of registry packages for a particular search query."
  registryPackagesForQuery("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Find registry package by search query." query: String "Filter registry package by type." packageType: RegistryPackageType): RegistryPackageConnection!
  "Lookup a single release given various criteria."
  release("The name of the Tag the Release was created from" tagName: String!): Release
  "List of releases which are dependent on this repository."
  releases("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Order for connection" orderBy: ReleaseOrder): ReleaseConnection!
  "A list of applied repository-topic associations for this repository."
  repositoryTopics("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RepositoryTopicConnection!
  "The HTTP path for this repository"
  resourcePath: URI!
  "A description of the repository, rendered to HTML without any links in it."
  shortDescriptionHTML("How many characters to return." limit: Int = 200): HTML!
  "Whether or not squash-merging is enabled on this repository."
  squashMergeAllowed: Boolean!
  "The SSH URL to clone this repository"
  sshUrl: GitSSHRemote!
  "A list of users who have starred this starrable."
  stargazers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Order for connection" orderBy: StarOrder): StargazerConnection!
  "The repository from which this repository was generated, if any."
  templateRepository: Repository
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this repository"
  url: URI!
  "Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar."
  usesCustomOpenGraphImage: Boolean!
  "Indicates whether the viewer has admin permissions on this repository."
  viewerCanAdminister: Boolean!
  "Can the current viewer create new projects on this owner."
  viewerCanCreateProjects: Boolean!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Indicates whether the viewer can update the topics of this repository."
  viewerCanUpdateTopics: Boolean!
  "Returns a boolean indicating whether the viewing user has starred this starrable."
  viewerHasStarred: Boolean!
  "The users permission level on the repository. Will return null if authenticated as an GitHub App."
  viewerPermission: RepositoryPermission
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: SubscriptionState
  "A list of users watching the repository."
  watchers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserConnection!
}

"Represents an owner of a Project."
interface ProjectOwner {
  id: ID!
  "Find project by number."
  project("The project number to find." number: Int!): Project
  "A list of projects under the owner."
  projects("Ordering options for projects returned from the connection" orderBy: ProjectOrder "Query to search projects by, currently only searching by name." search: String "A list of states to filter the projects by." states: [ProjectState!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): ProjectConnection!
  "The HTTP path listing owners projects"
  projectsResourcePath: URI!
  "The HTTP URL listing owners projects"
  projectsUrl: URI!
  "Can the current viewer create new projects on this owner."
  viewerCanCreateProjects: Boolean!
}

"Projects manage issues, pull requests and notes within a project owner."
type Project implements Node & Closable & Updatable {
  "The project's description body."
  body: String
  "The projects description body rendered to HTML."
  bodyHTML: HTML!
  "`true` if the object is closed (definition of closed may depend on type)"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: DateTime
  "List of columns in the project"
  columns("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): ProjectColumnConnection!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The actor who originally created the project."
  creator: Actor
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The project's name."
  name: String!
  "The project's number."
  number: Int!
  "The project's owner. Currently limited to repositories, organizations, and users."
  owner: ProjectOwner!
  "List of pending cards in this project"
  pendingCards("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "A list of archived states to filter the cards by" archivedStates: [ProjectCardArchivedState] = [ ARCHIVED, NOT_ARCHIVED ]): ProjectCardConnection!
  "The HTTP path for this project"
  resourcePath: URI!
  "Whether the project is open or closed."
  state: ProjectState!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this project"
  url: URI!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
}

"An object that can be closed"
interface Closable {
  "`true` if the object is closed (definition of closed may depend on type)"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: DateTime
}

"Entities that can be updated."
interface Updatable {
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
}

"State of the project; either 'open' or 'closed'"
enum ProjectState {
  "The project is open."
  OPEN
  "The project is closed."
  CLOSED
}

"A string containing HTML code."
scalar HTML

"The connection type for ProjectColumn."
type ProjectColumnConnection {
  "A list of edges."
  edges: [ProjectColumnEdge]
  "A list of nodes."
  nodes: [ProjectColumn]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ProjectColumnEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ProjectColumn
}

"A column inside a project."
type ProjectColumn implements Node {
  "List of cards in the column"
  cards("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "A list of archived states to filter the cards by" archivedStates: [ProjectCardArchivedState] = [ ARCHIVED, NOT_ARCHIVED ]): ProjectCardConnection!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The project column's name."
  name: String!
  "The project that contains this column."
  project: Project!
  "The semantic purpose of the column"
  purpose: ProjectColumnPurpose
  "The HTTP path for this project column"
  resourcePath: URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this project column"
  url: URI!
}

"The semantic purpose of the column - todo, in progress, or done."
enum ProjectColumnPurpose {
  "The column contains cards still to be worked on"
  TODO
  "The column contains cards which are currently being worked on"
  IN_PROGRESS
  "The column contains cards which are complete"
  DONE
}

"The connection type for ProjectCard."
type ProjectCardConnection {
  "A list of edges."
  edges: [ProjectCardEdge]
  "A list of nodes."
  nodes: [ProjectCard]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ProjectCardEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ProjectCard
}

"A card in a project."
type ProjectCard implements Node {
  "The project column this card is associated under. A card may only belong to one\nproject column at a time. The column field will be null if the card is created\nin a pending state and has yet to be associated with a column. Once cards are\nassociated with a column, they will not become pending in the future.\n"
  column: ProjectColumn
  "The card content item"
  content: ProjectCardItem
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The actor who created this card"
  creator: Actor
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "Whether the card is archived"
  isArchived: Boolean!
  "The card note"
  note: String
  "The project that contains this card."
  project: Project!
  "The HTTP path for this card"
  resourcePath: URI!
  "The state of ProjectCard"
  state: ProjectCardState
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this card"
  url: URI!
}

"Various content states of a ProjectCard"
enum ProjectCardState {
  "The card has content only."
  CONTENT_ONLY
  "The card has a note only."
  NOTE_ONLY
  "The card is redacted."
  REDACTED
}

"Types that can be inside Project Cards."
union ProjectCardItem = Issue | PullRequest

"An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project."
type Issue implements Node & Assignable & Closable & Comment & Updatable & UpdatableComment & Labelable & Lockable & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable {
  "Reason that the conversation was locked."
  activeLockReason: LockReason
  "A list of Users assigned to this object."
  assignees("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserConnection!
  "The actor who authored the comment."
  author: Actor
  "Author's association with the subject of the comment."
  authorAssociation: CommentAuthorAssociation!
  "Identifies the body of the issue."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "Identifies the body of the issue rendered to text."
  bodyText: String!
  "`true` if the object is closed (definition of closed may depend on type)"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: DateTime
  "A list of comments associated with the Issue."
  comments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): IssueCommentConnection!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Actor
  "The hovercard information for this issue"
  hovercard("Whether or not to include notification contexts" includeNotificationContexts: Boolean = true): Hovercard!
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "A list of labels associated with the object."
  labels("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): LabelConnection
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "`true` if the object is locked"
  locked: Boolean!
  "Identifies the milestone associated with the issue."
  milestone: Milestone
  "Identifies the issue number."
  number: Int!
  "A list of Users that are participating in the Issue conversation."
  participants("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserConnection!
  "List of project cards associated with this issue."
  projectCards("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "A list of archived states to filter the cards by" archivedStates: [ProjectCardArchivedState] = [ ARCHIVED, NOT_ARCHIVED ]): ProjectCardConnection!
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Allows filtering Reactions by emoji." content: ReactionContent "Allows specifying the order in which reactions are returned." orderBy: ReactionOrder): ReactionConnection!
  "The repository associated with this node."
  repository: Repository!
  "The HTTP path for this issue"
  resourcePath: URI!
  "Identifies the state of the issue."
  state: IssueState!
  "A list of events, comments, commits, etc. associated with the issue."
  timeline("Allows filtering timeline events by a `since` timestamp." since: DateTime "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): IssueTimelineConnection!
  "A list of events, comments, commits, etc. associated with the issue."
  timelineItems("Filter timeline items by a `since` timestamp." since: DateTime "Skips the first _n_ elements in the list." skip: Int "Filter timeline items by type." itemTypes: [IssueTimelineItemsItemType!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): IssueTimelineItemsConnection!
  "Identifies the issue title."
  title: String!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this issue"
  url: URI!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: SubscriptionState
}

"An object that can have users assigned to it."
interface Assignable {
  "A list of Users assigned to this object."
  assignees("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserConnection!
}

"The connection type for User."
type UserConnection {
  "A list of edges."
  edges: [UserEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user."
type UserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}

"Represents a comment."
interface Comment {
  "The actor who authored the comment."
  author: Actor
  "Author's association with the subject of the comment."
  authorAssociation: CommentAuthorAssociation!
  "The body as Markdown."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "The body rendered to text."
  bodyText: String!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "The actor who edited the comment."
  editor: Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"A list of edits to content."
type UserContentEditConnection {
  "A list of edges."
  edges: [UserContentEditEdge]
  "A list of nodes."
  nodes: [UserContentEdit]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type UserContentEditEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserContentEdit
}

"An edit on user content"
type UserContentEdit implements Node {
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the date and time when the object was deleted."
  deletedAt: DateTime
  "The actor who deleted this content"
  deletedBy: Actor
  "A summary of the changes for this edit"
  diff: String
  "When this content was edited"
  editedAt: DateTime!
  "The actor who edited this content"
  editor: Actor
  id: ID!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
}

"A comment author association with repository."
enum CommentAuthorAssociation {
  "Author is a member of the organization that owns the repository."
  MEMBER
  "Author is the owner of the repository."
  OWNER
  "Author has been invited to collaborate on the repository."
  COLLABORATOR
  "Author has previously committed to the repository."
  CONTRIBUTOR
  "Author has not previously committed to the repository."
  FIRST_TIME_CONTRIBUTOR
  "Author has not previously committed to GitHub."
  FIRST_TIMER
  "Author has no association with the repository."
  NONE
}

"Comments that can be updated."
interface UpdatableComment {
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
}

"The possible errors that will prevent a user from updating a comment."
enum CommentCannotUpdateReason {
  "Unable to create comment because repository is archived."
  ARCHIVED
  "You must be the author or have write access to this repository to update this comment."
  INSUFFICIENT_ACCESS
  "Unable to create comment because issue is locked."
  LOCKED
  "You must be logged in to update this comment."
  LOGIN_REQUIRED
  "Repository is under maintenance."
  MAINTENANCE
  "At least one email address must be verified to update this comment."
  VERIFIED_EMAIL_REQUIRED
  "You cannot update this comment"
  DENIED
}

"An object that can have labels assigned to it."
interface Labelable {
  "A list of labels associated with the object."
  labels("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): LabelConnection
}

"The connection type for Label."
type LabelConnection {
  "A list of edges."
  edges: [LabelEdge]
  "A list of nodes."
  nodes: [Label]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type LabelEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Label
}

"A label for categorizing Issues or Milestones with a given Repository."
type Label implements Node {
  "Identifies the label color."
  color: String!
  "Identifies the date and time when the label was created."
  createdAt: DateTime
  "A brief description of this label."
  description: String
  id: ID!
  "Indicates whether or not this is a default label."
  isDefault: Boolean!
  "A list of issues associated with this label."
  issues("Ordering options for issues returned from the connection." orderBy: IssueOrder "A list of label names to filter the pull requests by." labels: [String!] "A list of states to filter the issues by." states: [IssueState!] "Filtering options for issues returned from the connection." filterBy: IssueFilters "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): IssueConnection!
  "Identifies the label name."
  name: String!
  "A list of pull requests associated with this label."
  pullRequests("A list of states to filter the pull requests by." states: [PullRequestState!] "A list of label names to filter the pull requests by." labels: [String!] "The head ref name to filter the pull requests by." headRefName: String "The base ref name to filter the pull requests by." baseRefName: String "Ordering options for pull requests returned from the connection." orderBy: IssueOrder "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestConnection!
  "The repository associated with this label."
  repository: Repository!
  "The HTTP path for this label."
  resourcePath: URI!
  "Identifies the date and time when the label was last updated."
  updatedAt: DateTime
  "The HTTP URL for this label."
  url: URI!
}

"The connection type for Issue."
type IssueConnection {
  "A list of edges."
  edges: [IssueEdge]
  "A list of nodes."
  nodes: [Issue]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type IssueEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Issue
}

"Ways in which lists of issues can be ordered upon return."
input IssueOrder {
  "The field in which to order issues by."
  field: IssueOrderField!
  "The direction in which to order issues by the specified field."
  direction: OrderDirection!
}

"Properties by which issue connections can be ordered."
enum IssueOrderField {
  "Order issues by creation time"
  CREATED_AT
  "Order issues by update time"
  UPDATED_AT
  "Order issues by comment count"
  COMMENTS
}

"Possible directions in which to order a list of items when provided an `orderBy` argument."
enum OrderDirection {
  "Specifies an ascending order for a given `orderBy` argument."
  ASC
  "Specifies a descending order for a given `orderBy` argument."
  DESC
}

"The possible states of an issue."
enum IssueState {
  "An issue that is still open"
  OPEN
  "An issue that has been closed"
  CLOSED
}

"Ways in which to filter lists of issues."
input IssueFilters {
  "List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user."
  assignee: String
  "List issues created by given name."
  createdBy: String
  "List issues where the list of label names exist on the issue."
  labels: [String!]
  "List issues where the given name is mentioned in the issue."
  mentioned: String
  "List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone."
  milestone: String
  "List issues that have been updated at or after the given date."
  since: DateTime
  "List issues filtered by the list of states given."
  states: [IssueState!]
  "List issues subscribed to by viewer."
  viewerSubscribed: Boolean = false
}

"The connection type for PullRequest."
type PullRequestConnection {
  "A list of edges."
  edges: [PullRequestEdge]
  "A list of nodes."
  nodes: [PullRequest]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PullRequestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PullRequest
}

"A repository pull request."
type PullRequest implements Node & Assignable & Closable & Comment & Updatable & UpdatableComment & Labelable & Lockable & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable {
  "Reason that the conversation was locked."
  activeLockReason: LockReason
  "The number of additions in this pull request."
  additions: Int!
  "A list of Users assigned to this object."
  assignees("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserConnection!
  "The actor who authored the comment."
  author: Actor
  "Author's association with the subject of the comment."
  authorAssociation: CommentAuthorAssociation!
  "Identifies the base Ref associated with the pull request."
  baseRef: Ref
  "Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."
  baseRefName: String!
  "Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."
  baseRefOid: GitObjectID!
  "The repository associated with this pull request's base Ref."
  baseRepository: Repository
  "The body as Markdown."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "The body rendered to text."
  bodyText: String!
  "The number of changed files in this pull request."
  changedFiles: Int!
  "`true` if the pull request is closed"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: DateTime
  "A list of comments associated with the pull request."
  comments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): IssueCommentConnection!
  "A list of commits present in this pull request's head branch not present in the base branch."
  commits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestCommitConnection!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The number of deletions in this pull request."
  deletions: Int!
  "The actor who edited this pull request's body."
  editor: Actor
  "Lists the files changed within this pull request."
  files("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestChangedFileConnection
  "Identifies the head Ref associated with the pull request."
  headRef: Ref
  "Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."
  headRefName: String!
  "Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."
  headRefOid: GitObjectID!
  "The repository associated with this pull request's head Ref."
  headRepository: Repository
  "The owner of the repository associated with this pull request's head Ref."
  headRepositoryOwner: RepositoryOwner
  "The hovercard information for this issue"
  hovercard("Whether or not to include notification contexts" includeNotificationContexts: Boolean = true): Hovercard!
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The head and base repositories are different."
  isCrossRepository: Boolean!
  "A list of labels associated with the object."
  labels("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): LabelConnection
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "`true` if the pull request is locked"
  locked: Boolean!
  "Indicates whether maintainers can modify the pull request."
  maintainerCanModify: Boolean!
  "The commit that was created when this pull request was merged."
  mergeCommit: Commit
  "Whether or not the pull request can be merged based on the existence of merge conflicts."
  mergeable: MergeableState!
  "Whether or not the pull request was merged."
  merged: Boolean!
  "The date and time that the pull request was merged."
  mergedAt: DateTime
  "The actor who merged the pull request."
  mergedBy: Actor
  "Identifies the milestone associated with the pull request."
  milestone: Milestone
  "Identifies the pull request number."
  number: Int!
  "A list of Users that are participating in the Pull Request conversation."
  participants("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserConnection!
  "The permalink to the pull request."
  permalink: URI!
  "The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request."
  potentialMergeCommit: Commit
  "List of project cards associated with this pull request."
  projectCards("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "A list of archived states to filter the cards by" archivedStates: [ProjectCardArchivedState] = [ ARCHIVED, NOT_ARCHIVED ]): ProjectCardConnection!
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Allows filtering Reactions by emoji." content: ReactionContent "Allows specifying the order in which reactions are returned." orderBy: ReactionOrder): ReactionConnection!
  "The repository associated with this node."
  repository: Repository!
  "The HTTP path for this pull request."
  resourcePath: URI!
  "The HTTP path for reverting this pull request."
  revertResourcePath: URI!
  "The HTTP URL for reverting this pull request."
  revertUrl: URI!
  "A list of review requests associated with the pull request."
  reviewRequests("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): ReviewRequestConnection
  "The list of all review threads for this pull request."
  reviewThreads("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestReviewThreadConnection!
  "A list of reviews associated with the pull request."
  reviews("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "A list of states to filter the reviews." states: [PullRequestReviewState!] "Filter by author of the review." author: String): PullRequestReviewConnection
  "Identifies the state of the pull request."
  state: PullRequestState!
  "A list of reviewer suggestions based on commit history and past review comments."
  suggestedReviewers: [SuggestedReviewer]!
  "A list of events, comments, commits, etc. associated with the pull request."
  timeline("Allows filtering timeline events by a `since` timestamp." since: DateTime "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestTimelineConnection!
  "A list of events, comments, commits, etc. associated with the pull request."
  timelineItems("Filter timeline items by a `since` timestamp." since: DateTime "Skips the first _n_ elements in the list." skip: Int "Filter timeline items by type." itemTypes: [PullRequestTimelineItemsItemType!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestTimelineItemsConnection!
  "Identifies the pull request title."
  title: String!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this pull request."
  url: URI!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Whether or not the viewer can apply suggestion."
  viewerCanApplySuggestion: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: SubscriptionState
}

"An object that can be locked."
interface Lockable {
  "Reason that the conversation was locked."
  activeLockReason: LockReason
  "`true` if the object is locked"
  locked: Boolean!
}

"The possible reasons that an issue or pull request was locked."
enum LockReason {
  "The issue or pull request was locked because the conversation was off-topic."
  OFF_TOPIC
  "The issue or pull request was locked because the conversation was too heated."
  TOO_HEATED
  "The issue or pull request was locked because the conversation was resolved."
  RESOLVED
  "The issue or pull request was locked because the conversation was spam."
  SPAM
}

"A GitHub App."
type App implements Node {
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "The description of the app."
  description: String
  id: ID!
  "The hex color code, without the leading '#', for the logo background."
  logoBackgroundColor: String!
  "A URL pointing to the app's logo."
  logoUrl("The size of the resulting image." size: Int): URI!
  "The name of the app."
  name: String!
  "A slug based on the name of the app for use in URLs."
  slug: String!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The URL to the app's homepage."
  url: URI!
}

"A listing in the GitHub integration marketplace."
type MarketplaceListing implements Node {
  "The GitHub App this listing represents."
  app: App
  "URL to the listing owner's company site."
  companyUrl: URI
  "The HTTP path for configuring access to the listing's integration or OAuth app"
  configurationResourcePath: URI!
  "The HTTP URL for configuring access to the listing's integration or OAuth app"
  configurationUrl: URI!
  "URL to the listing's documentation."
  documentationUrl: URI
  "The listing's detailed description."
  extendedDescription: String
  "The listing's detailed description rendered to HTML."
  extendedDescriptionHTML: HTML!
  "The listing's introductory description."
  fullDescription: String!
  "The listing's introductory description rendered to HTML."
  fullDescriptionHTML: HTML!
  "Whether this listing has been submitted for review from GitHub for approval to be displayed in the Marketplace."
  hasApprovalBeenRequested: Boolean!
  "Does this listing have any plans with a free trial?"
  hasPublishedFreeTrialPlans: Boolean!
  "Does this listing have a terms of service link?"
  hasTermsOfService: Boolean!
  "A technical description of how this app works with GitHub."
  howItWorks: String
  "The listing's technical description rendered to HTML."
  howItWorksHTML: HTML!
  id: ID!
  "URL to install the product to the viewer's account or organization."
  installationUrl: URI
  "Whether this listing's app has been installed for the current viewer"
  installedForViewer: Boolean!
  "Whether this listing has been approved for display in the Marketplace."
  isApproved: Boolean!
  "Whether this listing has been removed from the Marketplace."
  isArchived: Boolean!
  "Whether this listing has been removed from the Marketplace."
  isDelisted: Boolean!
  "Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace."
  isDraft: Boolean!
  "Whether the product this listing represents is available as part of a paid plan."
  isPaid: Boolean!
  "Whether this listing has been approved for display in the Marketplace."
  isPublic: Boolean!
  "Whether this listing has been rejected by GitHub for display in the Marketplace."
  isRejected: Boolean!
  "Whether this listing has been approved for unverified display in the Marketplace."
  isUnverified: Boolean!
  "Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace."
  isUnverifiedPending: Boolean!
  "Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace."
  isVerificationPendingFromDraft: Boolean!
  "Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace."
  isVerificationPendingFromUnverified: Boolean!
  "Whether this listing has been approved for verified display in the Marketplace."
  isVerified: Boolean!
  "The hex color code, without the leading '#', for the logo background."
  logoBackgroundColor: String!
  "URL for the listing's logo image."
  logoUrl("The size in pixels of the resulting square image." size: Int = 400): URI
  "The listing's full name."
  name: String!
  "The listing's very short description without a trailing period or ampersands."
  normalizedShortDescription: String!
  "URL to the listing's detailed pricing."
  pricingUrl: URI
  "The category that best describes the listing."
  primaryCategory: MarketplaceCategory!
  "URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL."
  privacyPolicyUrl: URI!
  "The HTTP path for the Marketplace listing."
  resourcePath: URI!
  "The URLs for the listing's screenshots."
  screenshotUrls: [String]!
  "An alternate category that describes the listing."
  secondaryCategory: MarketplaceCategory
  "The listing's very short description."
  shortDescription: String!
  "The short name of the listing used in its URL."
  slug: String!
  "URL to the listing's status page."
  statusUrl: URI
  "An email address for support for this listing's app."
  supportEmail: String
  "Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL."
  supportUrl: URI!
  "URL to the listing's terms of service."
  termsOfServiceUrl: URI
  "The HTTP URL for the Marketplace listing."
  url: URI!
  "Can the current viewer add plans for this Marketplace listing."
  viewerCanAddPlans: Boolean!
  "Can the current viewer approve this Marketplace listing."
  viewerCanApprove: Boolean!
  "Can the current viewer delist this Marketplace listing."
  viewerCanDelist: Boolean!
  "Can the current viewer edit this Marketplace listing."
  viewerCanEdit: Boolean!
  "Can the current viewer edit the primary and secondary category of this\nMarketplace listing.\n"
  viewerCanEditCategories: Boolean!
  "Can the current viewer edit the plans for this Marketplace listing."
  viewerCanEditPlans: Boolean!
  "Can the current viewer return this Marketplace listing to draft state\nso it becomes editable again.\n"
  viewerCanRedraft: Boolean!
  "Can the current viewer reject this Marketplace listing by returning it to\nan editable draft state or rejecting it entirely.\n"
  viewerCanReject: Boolean!
  "Can the current viewer request this listing be reviewed for display in\nthe Marketplace as verified.\n"
  viewerCanRequestApproval: Boolean!
  "Indicates whether the current user has an active subscription to this Marketplace listing.\n"
  viewerHasPurchased: Boolean!
  "Indicates if the current user has purchased a subscription to this Marketplace listing\nfor all of the organizations the user owns.\n"
  viewerHasPurchasedForAllOrganizations: Boolean!
  "Does the current viewer role allow them to administer this Marketplace listing.\n"
  viewerIsListingAdmin: Boolean!
}

"An account on GitHub, with one or more owners, that has repositories, members and teams."
type Organization implements Node & Actor & RegistryPackageOwner & RegistryPackageSearch & ProjectOwner & RepositoryOwner & UniformResourceLocatable & MemberStatusable & ProfileOwner & Sponsorable {
  "Determine if this repository owner has any items that can be pinned to their profile."
  anyPinnableItems("Filter to only a particular kind of pinnable item." type: PinnableItemType): Boolean!
  "Audit log entries of the organization"
  auditLog("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "The query string to filter audit entries" query: String "Ordering options for the returned audit log entries." orderBy: AuditLogOrder = { field: CREATED_AT, direction: DESC }): OrganizationAuditEntryConnection!
  "A URL pointing to the organization's public avatar."
  avatarUrl("The size of the resulting square image." size: Int): URI!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "The organization's public profile description."
  description: String
  "The organization's public profile description rendered to HTML."
  descriptionHTML: String
  "The organization's public email."
  email: String
  id: ID!
  "Whether the organization has verified its profile email and website."
  isVerified: Boolean!
  "Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity."
  itemShowcase: ProfileItemShowcase!
  "The organization's public profile location."
  location: String
  "The organization's login name."
  login: String!
  "Get the status messages members of this entity have set that are either public or visible only to the organization."
  memberStatuses("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for user statuses returned from the connection." orderBy: UserStatusOrder = { field: UPDATED_AT, direction: DESC }): UserStatusConnection!
  "A list of users who are members of this organization."
  membersWithRole("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): OrganizationMemberConnection!
  "The organization's public profile name."
  name: String
  "The HTTP path creating a new team"
  newTeamResourcePath: URI!
  "The HTTP URL creating a new team"
  newTeamUrl: URI!
  "The billing email for the organization."
  organizationBillingEmail: String
  "A list of users who have been invited to join this organization."
  pendingMembers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserConnection!
  "A list of repositories and gists this profile owner can pin to their profile."
  pinnableItems("Filter the types of pinnable items that are returned." types: [PinnableItemType!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PinnableItemConnection!
  "A list of repositories and gists this profile owner has pinned to their profile"
  pinnedItems("Filter the types of pinned items that are returned." types: [PinnableItemType!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PinnableItemConnection!
  "Returns how many more items this profile owner can pin to their profile."
  pinnedItemsRemaining: Int!
  "A list of repositories this user has pinned to their profile"
  pinnedRepositories("If non-null, filters repositories according to privacy" privacy: RepositoryPrivacy "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder "Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns." affiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns." ownerAffiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "If non-null, filters repositories according to whether they have been locked" isLocked: Boolean "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RepositoryConnection!
  "Find project by number."
  project("The project number to find." number: Int!): Project
  "A list of projects under the owner."
  projects("Ordering options for projects returned from the connection" orderBy: ProjectOrder "Query to search projects by, currently only searching by name." search: String "A list of states to filter the projects by." states: [ProjectState!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): ProjectConnection!
  "The HTTP path listing organization's projects"
  projectsResourcePath: URI!
  "The HTTP URL listing organization's projects"
  projectsUrl: URI!
  "A list of registry packages under the owner."
  registryPackages("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Find registry package by name." name: String "Find registry packages by their names." names: [String] "Find registry packages in a repository." repositoryId: ID "Filter registry package by type." packageType: RegistryPackageType "Filter registry package by type (string)." registryPackageType: String "Filter registry package by whether it is publicly visible" publicOnly: Boolean = false): RegistryPackageConnection!
  "A list of registry packages for a particular search query."
  registryPackagesForQuery("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Find registry package by search query." query: String "Filter registry package by type." packageType: RegistryPackageType): RegistryPackageConnection!
  "A list of repositories that the user owns."
  repositories("If non-null, filters repositories according to privacy" privacy: RepositoryPrivacy "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder "Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns." affiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns." ownerAffiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "If non-null, filters repositories according to whether they have been locked" isLocked: Boolean "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "If non-null, filters repositories according to whether they are forks of another repository" isFork: Boolean): RepositoryConnection!
  "Find Repository."
  repository("Name of Repository to find." name: String!): Repository
  "When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication."
  requiresTwoFactorAuthentication: Boolean
  "The HTTP path for this organization."
  resourcePath: URI!
  "The Organization's SAML identity providers"
  samlIdentityProvider: OrganizationIdentityProvider
  "This object's sponsorships as the maintainer."
  sponsorshipsAsMaintainer("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Whether or not to include private sponsorships in the result set" includePrivate: Boolean = false "Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer." orderBy: SponsorshipOrder): SponsorshipConnection!
  "This object's sponsorships as the sponsor."
  sponsorshipsAsSponsor("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer." orderBy: SponsorshipOrder): SponsorshipConnection!
  "Find an organization's team by its slug."
  team("The name or slug of the team to find." slug: String!): Team
  "A list of teams in this organization."
  teams("If non-null, filters teams according to privacy" privacy: TeamPrivacy "If non-null, filters teams according to whether the viewer is an admin or member on team" role: TeamRole "If non-null, filters teams with query on team name and team slug" query: String "User logins to filter by" userLogins: [String!] "Ordering options for teams returned from the connection" orderBy: TeamOrder "If true, filters teams that are mapped to an LDAP Group (Enterprise only)" ldapMapped: Boolean "If true, restrict to only root teams" rootTeamsOnly: Boolean = false "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): TeamConnection!
  "The HTTP path listing organization's teams"
  teamsResourcePath: URI!
  "The HTTP URL listing organization's teams"
  teamsUrl: URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this organization."
  url: URI!
  "Organization is adminable by the viewer."
  viewerCanAdminister: Boolean!
  "Can the viewer pin repositories and gists to the profile?"
  viewerCanChangePinnedItems: Boolean!
  "Can the current viewer create new projects on this owner."
  viewerCanCreateProjects: Boolean!
  "Viewer can create repositories on this organization"
  viewerCanCreateRepositories: Boolean!
  "Viewer can create teams on this organization."
  viewerCanCreateTeams: Boolean!
  "Viewer is an active member of this organization."
  viewerIsAMember: Boolean!
  "The organization's public profile URL."
  websiteUrl: URI
}

"Represents an interface to search packages on an object."
interface RegistryPackageSearch {
  id: ID!
  "A list of registry packages for a particular search query."
  registryPackagesForQuery("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Find registry package by search query." query: String "Filter registry package by type." packageType: RegistryPackageType): RegistryPackageConnection!
}

"Represents an owner of a Repository."
interface RepositoryOwner {
  "A URL pointing to the owner's public avatar."
  avatarUrl("The size of the resulting square image." size: Int): URI!
  id: ID!
  "The username used to login."
  login: String!
  "A list of repositories this user has pinned to their profile"
  pinnedRepositories("If non-null, filters repositories according to privacy" privacy: RepositoryPrivacy "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder "Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns." affiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns." ownerAffiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "If non-null, filters repositories according to whether they have been locked" isLocked: Boolean "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RepositoryConnection!
  "A list of repositories that the user owns."
  repositories("If non-null, filters repositories according to privacy" privacy: RepositoryPrivacy "Ordering options for repositories returned from the connection" orderBy: RepositoryOrder "Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns." affiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns." ownerAffiliations: [RepositoryAffiliation] = [ OWNER, COLLABORATOR ] "If non-null, filters repositories according to whether they have been locked" isLocked: Boolean "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "If non-null, filters repositories according to whether they are forks of another repository" isFork: Boolean): RepositoryConnection!
  "Find Repository."
  repository("Name of Repository to find." name: String!): Repository
  "The HTTP URL for the owner."
  resourcePath: URI!
  "The HTTP URL for the owner."
  url: URI!
}

"A list of repositories owned by the subject."
type RepositoryConnection {
  "A list of edges."
  edges: [RepositoryEdge]
  "A list of nodes."
  nodes: [Repository]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
  "The total size in kilobytes of all repositories in the connection."
  totalDiskUsage: Int!
}

"An edge in a connection."
type RepositoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Repository
}

"The privacy of a repository"
enum RepositoryPrivacy {
  "Public"
  PUBLIC
  "Private"
  PRIVATE
}

"Ordering options for repository connections"
input RepositoryOrder {
  "The field to order repositories by."
  field: RepositoryOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which repository connections can be ordered."
enum RepositoryOrderField {
  "Order repositories by creation time"
  CREATED_AT
  "Order repositories by update time"
  UPDATED_AT
  "Order repositories by push time"
  PUSHED_AT
  "Order repositories by name"
  NAME
  "Order repositories by number of stargazers"
  STARGAZERS
}

"The affiliation of a user to a repository"
enum RepositoryAffiliation {
  "Repositories that are owned by the authenticated user."
  OWNER
  "Repositories that the user has been added to as a collaborator."
  COLLABORATOR
  "Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on."
  ORGANIZATION_MEMBER
}

"Entities that have members who can set status messages."
interface MemberStatusable {
  "Get the status messages members of this entity have set that are either public or visible only to the organization."
  memberStatuses("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for user statuses returned from the connection." orderBy: UserStatusOrder = { field: UPDATED_AT, direction: DESC }): UserStatusConnection!
}

"The connection type for UserStatus."
type UserStatusConnection {
  "A list of edges."
  edges: [UserStatusEdge]
  "A list of nodes."
  nodes: [UserStatus]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type UserStatusEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserStatus
}

"The user's description of what they're currently doing."
type UserStatus implements Node {
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "An emoji summarizing the user's status."
  emoji: String
  "The status emoji as HTML."
  emojiHTML: HTML
  "If set, the status will not be shown after this date."
  expiresAt: DateTime
  "ID of the object."
  id: ID!
  "Whether this status indicates the user is not fully available on GitHub."
  indicatesLimitedAvailability: Boolean!
  "A brief message describing what the user is doing."
  message: String
  "The organization whose members can see this status. If null, this status is publicly visible."
  organization: Organization
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The user who has this status."
  user: User!
}

"Ordering options for user status connections."
input UserStatusOrder {
  "The field to order user statuses by."
  field: UserStatusOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which user status connections can be ordered."
enum UserStatusOrderField {
  "Order user statuses by when they were updated."
  UPDATED_AT
}

"Represents any entity on GitHub that has a profile page."
interface ProfileOwner {
  "Determine if this repository owner has any items that can be pinned to their profile."
  anyPinnableItems("Filter to only a particular kind of pinnable item." type: PinnableItemType): Boolean!
  "The public profile email."
  email: String!
  id: ID!
  "Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity."
  itemShowcase: ProfileItemShowcase!
  "The public profile location."
  location: String
  "The username used to login."
  login: String!
  "The public profile name."
  name: String
  "A list of repositories and gists this profile owner can pin to their profile."
  pinnableItems("Filter the types of pinnable items that are returned." types: [PinnableItemType!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PinnableItemConnection!
  "A list of repositories and gists this profile owner has pinned to their profile"
  pinnedItems("Filter the types of pinned items that are returned." types: [PinnableItemType!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PinnableItemConnection!
  "Returns how many more items this profile owner can pin to their profile."
  pinnedItemsRemaining: Int!
  "Can the viewer pin repositories and gists to the profile?"
  viewerCanChangePinnedItems: Boolean!
  "The public profile website URL."
  websiteUrl: URI
}

"A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own."
type ProfileItemShowcase {
  "Whether or not the owner has pinned any repositories or gists."
  hasPinnedItems: Boolean!
  "The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned."
  items("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PinnableItemConnection!
}

"The connection type for PinnableItem."
type PinnableItemConnection {
  "A list of edges."
  edges: [PinnableItemEdge]
  "A list of nodes."
  nodes: [PinnableItem]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PinnableItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PinnableItem
}

"Types that can be pinned to a profile page."
union PinnableItem = Gist | Repository

"A Gist."
type Gist implements Node & Starrable & UniformResourceLocatable {
  "A list of comments associated with the gist"
  comments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): GistCommentConnection!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The gist description."
  description: String
  "The files in this gist."
  files("The maximum number of files to return." limit: Int = 10 "The oid of the files to return" oid: GitObjectID): [GistFile]
  "A list of forks associated with the gist"
  forks("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for gists returned from the connection" orderBy: GistOrder): GistConnection!
  id: ID!
  "Identifies if the gist is a fork."
  isFork: Boolean!
  "Whether the gist is public or not."
  isPublic: Boolean!
  "The gist name."
  name: String!
  "The gist owner."
  owner: RepositoryOwner
  "Identifies when the gist was last pushed to."
  pushedAt: DateTime
  "The HTML path to this resource."
  resourcePath: URI!
  "A list of users who have starred this starrable."
  stargazers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Order for connection" orderBy: StarOrder): StargazerConnection!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this Gist."
  url: URI!
  "Returns a boolean indicating whether the viewing user has starred this starrable."
  viewerHasStarred: Boolean!
}

"Things that can be starred."
interface Starrable {
  id: ID!
  "A list of users who have starred this starrable."
  stargazers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Order for connection" orderBy: StarOrder): StargazerConnection!
  "Returns a boolean indicating whether the viewing user has starred this starrable."
  viewerHasStarred: Boolean!
}

"The connection type for User."
type StargazerConnection {
  "A list of edges."
  edges: [StargazerEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user that's starred a repository."
type StargazerEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: User!
  "Identifies when the item was starred."
  starredAt: DateTime!
}

"Ways in which star connections can be ordered."
input StarOrder {
  "The field in which to order nodes by."
  field: StarOrderField!
  "The direction in which to order nodes."
  direction: OrderDirection!
}

"Properties by which star connections can be ordered."
enum StarOrderField {
  "Allows ordering a list of stars by when they were created."
  STARRED_AT
}

"A subset of repository info."
interface RepositoryInfo {
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The description of the repository."
  description: String
  "The description of the repository rendered to HTML."
  descriptionHTML: HTML!
  "Returns how many forks there are of this repository in the whole network."
  forkCount: Int!
  "Indicates if the repository has issues feature enabled."
  hasIssuesEnabled: Boolean!
  "Indicates if the repository has wiki feature enabled."
  hasWikiEnabled: Boolean!
  "The repository's URL."
  homepageUrl: URI
  "Indicates if the repository is unmaintained."
  isArchived: Boolean!
  "Identifies if the repository is a fork."
  isFork: Boolean!
  "Indicates if the repository has been locked or not."
  isLocked: Boolean!
  "Identifies if the repository is a mirror."
  isMirror: Boolean!
  "Identifies if the repository is private."
  isPrivate: Boolean!
  "Identifies if the repository is a template that can be used to generate new repositories."
  isTemplate: Boolean!
  "The license associated with the repository"
  licenseInfo: License
  "The reason the repository has been locked."
  lockReason: RepositoryLockReason
  "The repository's original mirror URL."
  mirrorUrl: URI
  "The name of the repository."
  name: String!
  "The repository's name with owner."
  nameWithOwner: String!
  "The image used to represent this repository in Open Graph data."
  openGraphImageUrl: URI!
  "The User owner of the repository."
  owner: RepositoryOwner!
  "Identifies when the repository was last pushed to."
  pushedAt: DateTime
  "The HTTP path for this repository"
  resourcePath: URI!
  "A description of the repository, rendered to HTML without any links in it."
  shortDescriptionHTML("How many characters to return." limit: Int = 200): HTML!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this repository"
  url: URI!
  "Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar."
  usesCustomOpenGraphImage: Boolean!
}

"The repository's visibility level."
enum RepositoryVisibility {
  "The repository is visible only to those with explicit access."
  PRIVATE
  "The repository is visible to everyone."
  PUBLIC
  "The repository is visible only to users in the same business."
  INTERNAL
}

"The possible reasons a given repository could be in a locked state."
enum RepositoryLockReason {
  "The repository is locked due to a move."
  MOVING
  "The repository is locked due to a billing related reason."
  BILLING
  "The repository is locked due to a rename."
  RENAME
  "The repository is locked due to a migration."
  MIGRATING
}

"A repository's open source license"
type License implements Node {
  "The full text of the license"
  body: String!
  "The conditions set by the license"
  conditions: [LicenseRule]!
  "A human-readable description of the license"
  description: String
  "Whether the license should be featured"
  featured: Boolean!
  "Whether the license should be displayed in license pickers"
  hidden: Boolean!
  id: ID!
  "Instructions on how to implement the license"
  implementation: String
  "The lowercased SPDX ID of the license"
  key: String!
  "The limitations set by the license"
  limitations: [LicenseRule]!
  "The license full name specified by <https:\/\/spdx.org\/licenses>"
  name: String!
  "Customary short name if applicable (e.g, GPLv3)"
  nickname: String
  "The permissions set by the license"
  permissions: [LicenseRule]!
  "Whether the license is a pseudo-license placeholder (e.g., other, no-license)"
  pseudoLicense: Boolean!
  "Short identifier specified by <https:\/\/spdx.org\/licenses>"
  spdxId: String
  "URL to the license on <https:\/\/choosealicense.com>"
  url: URI
}

"Describes a License's conditions, permissions, and limitations"
type LicenseRule {
  "A description of the rule"
  description: String!
  "The machine-readable rule key"
  key: String!
  "The human-readable rule label"
  label: String!
}

"The connection type for RepositoryTopic."
type RepositoryTopicConnection {
  "A list of edges."
  edges: [RepositoryTopicEdge]
  "A list of nodes."
  nodes: [RepositoryTopic]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type RepositoryTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RepositoryTopic
}

"A repository-topic connects a repository to a topic."
type RepositoryTopic implements Node & UniformResourceLocatable {
  id: ID!
  "The HTTP path for this repository-topic."
  resourcePath: URI!
  "The topic."
  topic: Topic!
  "The HTTP URL for this repository-topic."
  url: URI!
}

"A topic aggregates entities that are related to a subject."
type Topic implements Node & Starrable {
  id: ID!
  "The topic's name."
  name: String!
  "A list of related topics, including aliases of this topic, sorted with the most relevant\nfirst. Returns up to 10 Topics.\n"
  relatedTopics("How many topics to return." first: Int = 3): [Topic!]!
  "A list of users who have starred this starrable."
  stargazers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Order for connection" orderBy: StarOrder): StargazerConnection!
  "Returns a boolean indicating whether the viewing user has starred this starrable."
  viewerHasStarred: Boolean!
}

"A release contains the content for a release."
type Release implements Node & UniformResourceLocatable {
  "The author of the release"
  author: User
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The description of the release."
  description: String
  "The description of this release rendered to HTML."
  descriptionHTML: HTML
  id: ID!
  "Whether or not the release is a draft"
  isDraft: Boolean!
  "Whether or not the release is a prerelease"
  isPrerelease: Boolean!
  "The title of the release."
  name: String
  "Identifies the date and time when the release was created."
  publishedAt: DateTime
  "List of releases assets which are dependent on this release."
  releaseAssets("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "A list of names to filter the assets by." name: String): ReleaseAssetConnection!
  "The HTTP path for this issue"
  resourcePath: URI!
  "A description of the release, rendered to HTML without any links in it."
  shortDescriptionHTML("How many characters to return." limit: Int = 200): HTML
  "The Git tag the release points to"
  tag: Ref
  "The name of the release's Git tag"
  tagName: String!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this issue"
  url: URI!
}

"Represents a Git reference."
type Ref implements Node {
  "A list of pull requests with this ref as the head ref."
  associatedPullRequests("A list of states to filter the pull requests by." states: [PullRequestState!] "A list of label names to filter the pull requests by." labels: [String!] "The head ref name to filter the pull requests by." headRefName: String "The base ref name to filter the pull requests by." baseRefName: String "Ordering options for pull requests returned from the connection." orderBy: IssueOrder "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestConnection!
  id: ID!
  "The ref name."
  name: String!
  "The ref's prefix, such as `refs\/heads\/` or `refs\/tags\/`."
  prefix: String!
  "The repository the ref belongs to."
  repository: Repository!
  "The object the ref points to."
  target: GitObject!
}

"Represents a Git object."
interface GitObject {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "The HTTP path for this Git object"
  commitResourcePath: URI!
  "The HTTP URL for this Git object"
  commitUrl: URI!
  id: ID!
  "The Git object ID"
  oid: GitObjectID!
  "The Repository the Git object belongs to"
  repository: Repository!
}

"A Git object ID."
scalar GitObjectID

"Represents a object that belongs to a repository."
interface RepositoryNode {
  "The repository associated with this node."
  repository: Repository!
}

"Represents a Git blob."
type Blob implements Node & GitObject {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "Byte size of Blob object"
  byteSize: Int!
  "The HTTP path for this Git object"
  commitResourcePath: URI!
  "The HTTP URL for this Git object"
  commitUrl: URI!
  id: ID!
  "Indicates whether the Blob is binary or text"
  isBinary: Boolean!
  "Indicates whether the contents is truncated"
  isTruncated: Boolean!
  "The Git object ID"
  oid: GitObjectID!
  "The Repository the Git object belongs to"
  repository: Repository!
  "UTF8 text data or null if the Blob is binary"
  text: String
}

"Represents a Git commit."
type Commit implements Node & GitObject & Subscribable & UniformResourceLocatable {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "The number of additions in this commit."
  additions: Int!
  "The pull requests associated with a commit"
  associatedPullRequests("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for pull requests." orderBy: PullRequestOrder = { field: CREATED_AT, direction: ASC }): PullRequestConnection
  "Authorship details of the commit."
  author: GitActor
  "Check if the committer and the author match."
  authoredByCommitter: Boolean!
  "The datetime when this commit was authored."
  authoredDate: DateTime!
  "Fetches `git blame` information."
  blame("The file whose Git blame information you want." path: String!): Blame!
  "The number of changed files in this commit."
  changedFiles: Int!
  "Comments made on the commit."
  comments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): CommitCommentConnection!
  "The HTTP path for this Git object"
  commitResourcePath: URI!
  "The HTTP URL for this Git object"
  commitUrl: URI!
  "The datetime when this commit was committed."
  committedDate: DateTime!
  "Check if commited via GitHub web UI."
  committedViaWeb: Boolean!
  "Committership details of the commit."
  committer: GitActor
  "The number of deletions in this commit."
  deletions: Int!
  "The deployments associated with a commit."
  deployments("Environments to list deployments for" environments: [String!] "Ordering options for deployments returned from the connection." orderBy: DeploymentOrder = { field: CREATED_AT, direction: ASC } "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): DeploymentConnection
  "The linear commit history starting from (and including) this commit, in the same order as `git log`."
  history("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "If non-null, filters history to only show commits touching files under this path." path: String "If non-null, filters history to only show commits with matching authorship." author: CommitAuthor "Allows specifying a beginning time or date for fetching commits." since: GitTimestamp "Allows specifying an ending time or date for fetching commits." until: GitTimestamp): CommitHistoryConnection!
  id: ID!
  "The Git commit message"
  message: String!
  "The Git commit message body"
  messageBody: String!
  "The commit message body rendered to HTML."
  messageBodyHTML: HTML!
  "The Git commit message headline"
  messageHeadline: String!
  "The commit message headline rendered to HTML."
  messageHeadlineHTML: HTML!
  "The Git object ID"
  oid: GitObjectID!
  "The parents of a commit."
  parents("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): CommitConnection!
  "The datetime when this commit was pushed."
  pushedDate: DateTime
  "The Repository this commit belongs to"
  repository: Repository!
  "The HTTP path for this commit"
  resourcePath: URI!
  "Commit signing information, if present."
  signature: GitSignature
  "Status information for this commit"
  status: Status
  "Returns a URL to download a tarball archive for a repository.\nNote: For private repositories, these links are temporary and expire after five minutes."
  tarballUrl: URI!
  "Commit's root Tree"
  tree: Tree!
  "The HTTP path for the tree of this commit"
  treeResourcePath: URI!
  "The HTTP URL for the tree of this commit"
  treeUrl: URI!
  "The HTTP URL for this commit"
  url: URI!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: SubscriptionState
  "Returns a URL to download a zipball archive for a repository.\nNote: For private repositories, these links are temporary and expire after five minutes."
  zipballUrl: URI!
}

"Entities that can be subscribed to for web and email notifications."
interface Subscribable {
  id: ID!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: SubscriptionState
}

"The possible states of a subscription."
enum SubscriptionState {
  "The User is only notified when participating or @mentioned."
  UNSUBSCRIBED
  "The User is notified of all conversations."
  SUBSCRIBED
  "The User is never notified."
  IGNORED
}

"Represents a Git tree."
type Tree implements Node & GitObject {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "The HTTP path for this Git object"
  commitResourcePath: URI!
  "The HTTP URL for this Git object"
  commitUrl: URI!
  "A list of tree entries."
  entries: [TreeEntry!]
  id: ID!
  "The Git object ID"
  oid: GitObjectID!
  "The Repository the Git object belongs to"
  repository: Repository!
}

"Represents a Git tree entry."
type TreeEntry {
  "Entry file mode."
  mode: Int!
  "Entry file name."
  name: String!
  "Entry file object."
  object: GitObject
  "Entry file Git object ID."
  oid: GitObjectID!
  "The Repository the tree entry belongs to"
  repository: Repository!
  "Entry file type."
  type: String!
}

"Represents an actor in a Git commit (ie. an author or committer)."
type GitActor {
  "A URL pointing to the author's public avatar."
  avatarUrl("The size of the resulting square image." size: Int): URI!
  "The timestamp of the Git action (authoring or committing)."
  date: GitTimestamp
  "The email in the Git commit."
  email: String
  "The name in the Git commit."
  name: String
  "The GitHub user corresponding to the email field. Null if no such user exists."
  user: User
}

"An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC."
scalar GitTimestamp

"The connection type for Commit."
type CommitConnection {
  "A list of edges."
  edges: [CommitEdge]
  "A list of nodes."
  nodes: [Commit]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type CommitEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Commit
}

"The connection type for Commit."
type CommitHistoryConnection {
  "A list of edges."
  edges: [CommitEdge]
  "A list of nodes."
  nodes: [Commit]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Specifies an author for filtering Git commits."
input CommitAuthor {
  "ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails."
  id: ID
  "Email addresses to filter by. Commits authored by any of the specified email addresses will be returned."
  emails: [String!]
}

"The connection type for CommitComment."
type CommitCommentConnection {
  "A list of edges."
  edges: [CommitCommentEdge]
  "A list of nodes."
  nodes: [CommitComment]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type CommitCommentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CommitComment
}

"Represents a comment on a given Commit."
type CommitComment implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {
  "The actor who authored the comment."
  author: Actor
  "Author's association with the subject of the comment."
  authorAssociation: CommentAuthorAssociation!
  "Identifies the comment body."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "The body rendered to text."
  bodyText: String!
  "Identifies the commit associated with the comment, if the commit exists."
  commit: Commit
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "Returns whether or not a comment has been minimized."
  isMinimized: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "Returns why the comment was minimized."
  minimizedReason: String
  "Identifies the file path associated with the comment."
  path: String
  "Identifies the line position associated with the comment."
  position: Int
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Allows filtering Reactions by emoji." content: ReactionContent "Allows specifying the order in which reactions are returned." orderBy: ReactionOrder): ReactionConnection!
  "The repository associated with this node."
  repository: Repository!
  "The HTTP path permalink for this commit comment."
  resourcePath: URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL permalink for this commit comment."
  url: URI!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Check if the current viewer can minimize this object."
  viewerCanMinimize: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"Entities that can be deleted."
interface Deletable {
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
}

"Represents a subject that can be reacted on."
interface Reactable {
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Allows filtering Reactions by emoji." content: ReactionContent "Allows specifying the order in which reactions are returned." orderBy: ReactionOrder): ReactionConnection!
  "Can user react to this subject"
  viewerCanReact: Boolean!
}

"A group of emoji reactions to a particular piece of content."
type ReactionGroup {
  "Identifies the emoji reaction."
  content: ReactionContent!
  "Identifies when the reaction was created."
  createdAt: DateTime
  "The subject that was reacted to."
  subject: Reactable!
  "Users who have reacted to the reaction subject with the emotion represented by this reaction group"
  users("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): ReactingUserConnection!
  "Whether or not the authenticated user has left a reaction on the subject."
  viewerHasReacted: Boolean!
}

"Emojis that can be attached to Issues, Pull Requests and Comments."
enum ReactionContent {
  "Represents the `:+1:` emoji."
  THUMBS_UP
  "Represents the `:-1:` emoji."
  THUMBS_DOWN
  "Represents the `:laugh:` emoji."
  LAUGH
  "Represents the `:hooray:` emoji."
  HOORAY
  "Represents the `:confused:` emoji."
  CONFUSED
  "Represents the `:heart:` emoji."
  HEART
  "Represents the `:rocket:` emoji."
  ROCKET
  "Represents the `:eyes:` emoji."
  EYES
}

"The connection type for User."
type ReactingUserConnection {
  "A list of edges."
  edges: [ReactingUserEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user that's made a reaction."
type ReactingUserEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: User!
  "The moment when the user made the reaction."
  reactedAt: DateTime!
}

"A list of reactions that have been left on the subject."
type ReactionConnection {
  "A list of edges."
  edges: [ReactionEdge]
  "A list of nodes."
  nodes: [Reaction]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
  "Whether or not the authenticated user has left a reaction on the subject."
  viewerHasReacted: Boolean!
}

"An edge in a connection."
type ReactionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Reaction
}

"An emoji reaction to a particular piece of content."
type Reaction implements Node {
  "Identifies the emoji reaction."
  content: ReactionContent!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The reactable piece of content"
  reactable: Reactable!
  "Identifies the user who created this reaction."
  user: User
}

"Ways in which lists of reactions can be ordered upon return."
input ReactionOrder {
  "The field in which to order reactions by."
  field: ReactionOrderField!
  "The direction in which to order reactions by the specified field."
  direction: OrderDirection!
}

"A list of fields that reactions can be ordered by."
enum ReactionOrderField {
  "Allows ordering a list of reactions by when they were created."
  CREATED_AT
}

"Information about a signature (GPG or S\/MIME) on a Commit or Tag."
interface GitSignature {
  "Email used to sign this object."
  email: String!
  "True if the signature is valid and verified by GitHub."
  isValid: Boolean!
  "Payload for GPG signing object. Raw ODB object without the signature header."
  payload: String!
  "ASCII-armored signature header from object."
  signature: String!
  "GitHub user corresponding to the email signing this commit."
  signer: User
  "The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid."
  state: GitSignatureState!
  "True if the signature was made with GitHub's signing key."
  wasSignedByGitHub: Boolean!
}

"The state of a Git signature."
enum GitSignatureState {
  "Valid signature and verified by GitHub"
  VALID
  "Invalid signature"
  INVALID
  "Malformed signature"
  MALFORMED_SIG
  "Key used for signing not known to GitHub"
  UNKNOWN_KEY
  "Invalid email used for signing"
  BAD_EMAIL
  "Email used for signing unverified on GitHub"
  UNVERIFIED_EMAIL
  "Email used for signing not known to GitHub"
  NO_USER
  "Unknown signature type"
  UNKNOWN_SIG_TYPE
  "Unsigned"
  UNSIGNED
  "Internal error - the GPG verification service is unavailable at the moment"
  GPGVERIFY_UNAVAILABLE
  "Internal error - the GPG verification service misbehaved"
  GPGVERIFY_ERROR
  "The usage flags for the key that signed this don't allow signing"
  NOT_SIGNING_KEY
  "Signing key expired"
  EXPIRED_KEY
  "Valid signature, pending certificate revocation checking"
  OCSP_PENDING
  "Valid siganture, though certificate revocation check failed"
  OCSP_ERROR
  "The signing certificate or its chain could not be verified"
  BAD_CERT
  "One or more certificates in chain has been revoked"
  OCSP_REVOKED
}

"Represents a commit status."
type Status implements Node {
  "The commit this status is attached to."
  commit: Commit
  "Looks up an individual status context by context name."
  context("The context name." name: String!): StatusContext
  "The individual status contexts for this commit."
  contexts: [StatusContext!]!
  id: ID!
  "The combined commit status."
  state: StatusState!
}

"The possible commit status states."
enum StatusState {
  "Status is expected."
  EXPECTED
  "Status is errored."
  ERROR
  "Status is failing."
  FAILURE
  "Status is pending."
  PENDING
  "Status is successful."
  SUCCESS
}

"Represents an individual commit status context"
type StatusContext implements Node {
  "The avatar of the OAuth application or the user that created the status"
  avatarUrl("The size of the resulting square image." size: Int = 40): URI
  "This commit this status context is attached to."
  commit: Commit
  "The name of this status context."
  context: String!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The actor who created this status context."
  creator: Actor
  "The description for this status context."
  description: String
  id: ID!
  "The state of this status context."
  state: StatusState!
  "The URL for this status context."
  targetUrl: URI
}

"A special type of user which takes actions on behalf of GitHub Apps."
type Bot implements Node & Actor & UniformResourceLocatable {
  "A URL pointing to the GitHub App's public avatar."
  avatarUrl("The size of the resulting square image." size: Int): URI!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The username of the actor."
  login: String!
  "The HTTP path for this bot"
  resourcePath: URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this bot"
  url: URI!
}

"The possible states of a pull request."
enum PullRequestState {
  "A pull request that is still open."
  OPEN
  "A pull request that has been closed without being merged."
  CLOSED
  "A pull request that has been closed by being merged."
  MERGED
}

"Represents a Git blame."
type Blame {
  "The list of ranges from a Git blame."
  ranges: [BlameRange!]!
}

"Represents a range of information from a Git blame."
type BlameRange {
  "Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change."
  age: Int!
  "Identifies the line author"
  commit: Commit!
  "The ending line for the range"
  endingLine: Int!
  "The starting line for the range"
  startingLine: Int!
}

"The connection type for Deployment."
type DeploymentConnection {
  "A list of edges."
  edges: [DeploymentEdge]
  "A list of nodes."
  nodes: [Deployment]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type DeploymentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Deployment
}

"Represents triggered deployment instance."
type Deployment implements Node {
  "Identifies the commit sha of the deployment."
  commit: Commit
  "Identifies the oid of the deployment commit, even if the commit has been deleted."
  commitOid: String!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the actor who triggered the deployment."
  creator: Actor
  "Identifies the primary key from the database."
  databaseId: Int
  "The deployment description."
  description: String
  "The environment to which this deployment was made."
  environment: String
  id: ID!
  "The latest status of this deployment."
  latestStatus: DeploymentStatus
  "Extra information that a deployment system might need."
  payload: String
  "Identifies the Ref of the deployment, if the deployment was created by ref."
  ref: Ref
  "Identifies the repository associated with the deployment."
  repository: Repository!
  "The current state of the deployment."
  state: DeploymentState
  "A list of statuses associated with the deployment."
  statuses("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): DeploymentStatusConnection
  "The deployment task."
  task: String
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
}

"The connection type for DeploymentStatus."
type DeploymentStatusConnection {
  "A list of edges."
  edges: [DeploymentStatusEdge]
  "A list of nodes."
  nodes: [DeploymentStatus]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type DeploymentStatusEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DeploymentStatus
}

"Describes the status of a given deployment attempt."
type DeploymentStatus implements Node {
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the actor who triggered the deployment."
  creator: Actor
  "Identifies the deployment associated with status."
  deployment: Deployment!
  "Identifies the description of the deployment."
  description: String
  "Identifies the environment URL of the deployment."
  environmentUrl: URI
  id: ID!
  "Identifies the log URL of the deployment."
  logUrl: URI
  "Identifies the current state of the deployment."
  state: DeploymentStatusState!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
}

"The possible states for a deployment status."
enum DeploymentStatusState {
  "The deployment is pending."
  PENDING
  "The deployment was successful."
  SUCCESS
  "The deployment has failed."
  FAILURE
  "The deployment is inactive."
  INACTIVE
  "The deployment experienced an error."
  ERROR
  "The deployment is queued"
  QUEUED
  "The deployment is in progress."
  IN_PROGRESS
}

"The possible states in which a deployment can be."
enum DeploymentState {
  "The pending deployment was not updated after 30 minutes."
  ABANDONED
  "The deployment is currently active."
  ACTIVE
  "An inactive transient deployment."
  DESTROYED
  "The deployment experienced an error."
  ERROR
  "The deployment has failed."
  FAILURE
  "The deployment is inactive."
  INACTIVE
  "The deployment is pending."
  PENDING
  "The deployment has queued"
  QUEUED
  "The deployment is in progress."
  IN_PROGRESS
}

"Ordering options for deployment connections"
input DeploymentOrder {
  "The field to order deployments by."
  field: DeploymentOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which deployment connections can be ordered."
enum DeploymentOrderField {
  "Order collection by creation time"
  CREATED_AT
}

"Ways in which lists of issues can be ordered upon return."
input PullRequestOrder {
  "The field in which to order pull requests by."
  field: PullRequestOrderField!
  "The direction in which to order pull requests by the specified field."
  direction: OrderDirection!
}

"Properties by which pull_requests connections can be ordered."
enum PullRequestOrderField {
  "Order pull_requests by creation time"
  CREATED_AT
  "Order pull_requests by update time"
  UPDATED_AT
}

"The connection type for ReleaseAsset."
type ReleaseAssetConnection {
  "A list of edges."
  edges: [ReleaseAssetEdge]
  "A list of nodes."
  nodes: [ReleaseAsset]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ReleaseAssetEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ReleaseAsset
}

"A release asset contains the content for a release asset."
type ReleaseAsset implements Node {
  "The asset's content-type"
  contentType: String!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The number of times this asset was downloaded"
  downloadCount: Int!
  "Identifies the URL where you can download the release asset via the browser."
  downloadUrl: URI!
  id: ID!
  "Identifies the title of the release asset."
  name: String!
  "Release that the asset is associated with"
  release: Release
  "The size (in bytes) of the asset"
  size: Int!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The user that performed the upload"
  uploadedBy: User!
  "Identifies the URL of the release asset."
  url: URI!
}

"The connection type for RegistryPackageVersion."
type RegistryPackageVersionConnection {
  "A list of edges."
  edges: [RegistryPackageVersionEdge]
  "A list of nodes."
  nodes: [RegistryPackageVersion]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type RegistryPackageVersionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistryPackageVersion
}

"A package version contains the information about a specific package version."
type RegistryPackageVersion implements Node {
  "list of dependencies for this package"
  dependencies("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Find dependencies by type." type: RegistryPackageDependencyType): RegistryPackageDependencyConnection!
  "A file associated with this registry package version"
  fileByName("A specific file to find." filename: String!): RegistryPackageFile
  "List of files associated with this registry package version"
  files("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RegistryPackageFileConnection!
  id: ID!
  "A single line of text to install this package version."
  installationCommand: String
  "Identifies the package manifest for this package version."
  manifest: String
  "Identifies the platform this version was built for."
  platform: String
  "Indicates whether this version is a pre-release."
  preRelease: Boolean!
  "The README of this package version"
  readme: String
  "The HTML README of this package version"
  readmeHtml: HTML
  "Registry package associated with this version."
  registryPackage: RegistryPackage
  "Release associated with this package."
  release: Release
  "Identifies the sha256."
  sha256: String
  "Identifies the size."
  size: Int
  "Statistics about package activity."
  statistics: RegistryPackageVersionStatistics
  "Identifies the package version summary."
  summary: String
  "Time at which the most recent file upload for this package version finished"
  updatedAt: DateTime!
  "Identifies the version number."
  version: String!
  "Can the current viewer edit this Package version."
  viewerCanEdit: Boolean!
}

"Represents a object that contains package version activity statistics such as downloads."
type RegistryPackageVersionStatistics {
  "Number of times the package was downloaded this month."
  downloadsThisMonth: Int!
  "Number of times the package was downloaded this week."
  downloadsThisWeek: Int!
  "Number of times the package was downloaded this year."
  downloadsThisYear: Int!
  "Number of times the package was downloaded today."
  downloadsToday: Int!
  "Number of times the package was downloaded since it was created."
  downloadsTotalCount: Int!
}

"The connection type for RegistryPackageDependency."
type RegistryPackageDependencyConnection {
  "A list of edges."
  edges: [RegistryPackageDependencyEdge]
  "A list of nodes."
  nodes: [RegistryPackageDependency]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type RegistryPackageDependencyEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistryPackageDependency
}

"A package dependency contains the information needed to satisfy a dependency."
type RegistryPackageDependency implements Node {
  "Identifies the type of dependency."
  dependencyType: RegistryPackageDependencyType!
  id: ID!
  "Identifies the name of the dependency."
  name: String!
  "Identifies the version of the dependency."
  version: String!
}

"The possible types of a registry package dependency."
enum RegistryPackageDependencyType {
  "A default registry package dependency type."
  DEFAULT
  "A dev registry package dependency type."
  DEV
  "A test registry package dependency type."
  TEST
  "A peer registry package dependency type."
  PEER
  "An optional registry package dependency type."
  OPTIONAL
  "An optional registry package dependency type."
  BUNDLED
}

"The connection type for RegistryPackageFile."
type RegistryPackageFileConnection {
  "A list of edges."
  edges: [RegistryPackageFileEdge]
  "A list of nodes."
  nodes: [RegistryPackageFile]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type RegistryPackageFileEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistryPackageFile
}

"A file in a specific registry package version."
type RegistryPackageFile implements Node {
  "A unique identifier for this file."
  guid: String
  id: ID!
  "Identifies the md5."
  md5: String
  "URL to download the asset metadata."
  metadataUrl: URI!
  "Name of the file"
  name: String!
  "The package version this file belongs to."
  packageVersion: RegistryPackageVersion!
  "Identifies the sha1."
  sha1: String
  "Identifies the sha256."
  sha256: String
  "Identifies the size."
  size: Int
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "URL to download the asset."
  url: URI!
}

"A public description of a Marketplace category."
type MarketplaceCategory implements Node {
  "The category's description."
  description: String
  "The technical description of how apps listed in this category work with GitHub."
  howItWorks: String
  id: ID!
  "The category's name."
  name: String!
  "How many Marketplace listings have this as their primary category."
  primaryListingCount: Int!
  "The HTTP path for this Marketplace category."
  resourcePath: URI!
  "How many Marketplace listings have this as their secondary category."
  secondaryListingCount: Int!
  "The short name of the category used in its URL."
  slug: String!
  "The HTTP URL for this Marketplace category."
  url: URI!
}

"Look up Marketplace Listings"
type MarketplaceListingConnection {
  "A list of edges."
  edges: [MarketplaceListingEdge]
  "A list of nodes."
  nodes: [MarketplaceListing]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type MarketplaceListingEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MarketplaceListing
}

"The connection type for Release."
type ReleaseConnection {
  "A list of edges."
  edges: [ReleaseEdge]
  "A list of nodes."
  nodes: [Release]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ReleaseEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Release
}

"Ways in which lists of releases can be ordered upon return."
input ReleaseOrder {
  "The field in which to order releases by."
  field: ReleaseOrderField!
  "The direction in which to order releases by the specified field."
  direction: OrderDirection!
}

"Properties by which release connections can be ordered."
enum ReleaseOrderField {
  "Order releases by creation time"
  CREATED_AT
  "Order releases alphabetically by name"
  NAME
}

"The connection type for GistComment."
type GistCommentConnection {
  "A list of edges."
  edges: [GistCommentEdge]
  "A list of nodes."
  nodes: [GistComment]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type GistCommentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: GistComment
}

"Represents a comment on an Gist."
type GistComment implements Node & Comment & Deletable & Updatable & UpdatableComment {
  "The actor who authored the comment."
  author: Actor
  "Author's association with the gist."
  authorAssociation: CommentAuthorAssociation!
  "Identifies the comment body."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "The body rendered to text."
  bodyText: String!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Actor
  "The associated gist."
  gist: Gist!
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "Returns whether or not a comment has been minimized."
  isMinimized: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "Returns why the comment was minimized."
  minimizedReason: String
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Check if the current viewer can minimize this object."
  viewerCanMinimize: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"The connection type for Gist."
type GistConnection {
  "A list of edges."
  edges: [GistEdge]
  "A list of nodes."
  nodes: [Gist]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type GistEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Gist
}

"Ordering options for gist connections"
input GistOrder {
  "The field to order repositories by."
  field: GistOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which gist connections can be ordered."
enum GistOrderField {
  "Order gists by creation time"
  CREATED_AT
  "Order gists by update time"
  UPDATED_AT
  "Order gists by push time"
  PUSHED_AT
}

"A file in a gist."
type GistFile {
  "The file name encoded to remove characters that are invalid in URL paths."
  encodedName: String
  "The gist file encoding."
  encoding: String
  "The file extension from the file name."
  extension: String
  "Indicates if this file is an image."
  isImage: Boolean!
  "Whether the file's contents were truncated."
  isTruncated: Boolean!
  "The programming language this file is written in."
  language: Language
  "The gist file name."
  name: String
  "The gist file size in bytes."
  size: Int
  "UTF8 text data or null if the file is binary"
  text("Optionally truncate the returned file to this length." truncate: Int): String
}

"Represents a given language found in repositories."
type Language implements Node {
  "The color defined for the current language."
  color: String
  id: ID!
  "The name of the current language."
  name: String!
}

"Represents items that can be pinned to a profile page or dashboard."
enum PinnableItemType {
  "A repository."
  REPOSITORY
  "A gist."
  GIST
  "An issue."
  ISSUE
  "A project."
  PROJECT
  "A pull request."
  PULL_REQUEST
  "A user."
  USER
  "An organization."
  ORGANIZATION
  "A team."
  TEAM
}

"Entities that can be sponsored through GitHub Sponsors"
interface Sponsorable {
  "This object's sponsorships as the maintainer."
  sponsorshipsAsMaintainer("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Whether or not to include private sponsorships in the result set" includePrivate: Boolean = false "Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer." orderBy: SponsorshipOrder): SponsorshipConnection!
  "This object's sponsorships as the sponsor."
  sponsorshipsAsSponsor("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer." orderBy: SponsorshipOrder): SponsorshipConnection!
}

"A GitHub Sponsors listing."
type SponsorsListing implements Node {
  "The full description of the listing."
  fullDescription: String!
  id: ID!
  "The short description of the listing."
  shortDescription: String!
  "The short name of the listing."
  slug: String!
}

"A sponsorship relationship between a sponsor and a maintainer"
type Sponsorship implements Node {
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "The entity that is being sponsored"
  maintainer: User!
  "The privacy level for this sponsorship."
  privacyLevel: SponsorshipPrivacy!
  "The entity that is sponsoring. Returns null if the sponsorship is private"
  sponsor: User
}

"The privacy of a sponsorship"
enum SponsorshipPrivacy {
  "Public"
  PUBLIC
  "Private"
  PRIVATE
}

"The connection type for Sponsorship."
type SponsorshipConnection {
  "A list of edges."
  edges: [SponsorshipEdge]
  "A list of nodes."
  nodes: [Sponsorship]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type SponsorshipEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Sponsorship
}

"Ordering options for sponsorship connections."
input SponsorshipOrder {
  "The ordering direction."
  direction: OrderDirection!
}

"A list of projects associated with the owner."
type ProjectConnection {
  "A list of edges."
  edges: [ProjectEdge]
  "A list of nodes."
  nodes: [Project]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ProjectEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Project
}

"Ways in which lists of projects can be ordered upon return."
input ProjectOrder {
  "The field in which to order projects by."
  field: ProjectOrderField!
  "The direction in which to order projects by the specified field."
  direction: OrderDirection!
}

"Properties by which project connections can be ordered."
enum ProjectOrderField {
  "Order projects by creation time"
  CREATED_AT
  "Order projects by update time"
  UPDATED_AT
  "Order projects by name"
  NAME
}

"The connection type for OrganizationAuditEntry."
type OrganizationAuditEntryConnection {
  "A list of edges."
  edges: [OrganizationAuditEntryEdge]
  "A list of nodes."
  nodes: [OrganizationAuditEntry]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type OrganizationAuditEntryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: OrganizationAuditEntry
}

"An audit entry in an organization audit log."
union OrganizationAuditEntry = MembersCanDeleteReposClearAuditEntry | MembersCanDeleteReposDisableAuditEntry | MembersCanDeleteReposEnableAuditEntry | OauthApplicationCreateAuditEntry | OrgAddBillingManagerAuditEntry | OrgAddMemberAuditEntry | OrgBlockUserAuditEntry | OrgConfigDisableCollaboratorsOnlyAuditEntry | OrgConfigEnableCollaboratorsOnlyAuditEntry | OrgCreateAuditEntry | OrgDisableOauthAppRestrictionsAuditEntry | OrgDisableSamlAuditEntry | OrgDisableTwoFactorRequirementAuditEntry | OrgEnableOauthAppRestrictionsAuditEntry | OrgEnableSamlAuditEntry | OrgEnableTwoFactorRequirementAuditEntry | OrgInviteMemberAuditEntry | OrgInviteToBusinessAuditEntry | OrgOauthAppAccessApprovedAuditEntry | OrgOauthAppAccessDeniedAuditEntry | OrgOauthAppAccessRequestedAuditEntry | OrgRemoveBillingManagerAuditEntry | OrgRemoveMemberAuditEntry | OrgRemoveOutsideCollaboratorAuditEntry | OrgRestoreMemberAuditEntry | OrgUnblockUserAuditEntry | OrgUpdateDefaultRepositoryPermissionAuditEntry | OrgUpdateMemberAuditEntry | OrgUpdateMemberRepositoryCreationPermissionAuditEntry | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry | PrivateRepositoryForkingDisableAuditEntry | PrivateRepositoryForkingEnableAuditEntry | RepoAccessAuditEntry | RepoAddMemberAuditEntry | RepoAddTopicAuditEntry | RepoArchivedAuditEntry | RepoChangeMergeSettingAuditEntry | RepoConfigDisableAnonymousGitAccessAuditEntry | RepoConfigDisableCollaboratorsOnlyAuditEntry | RepoConfigDisableContributorsOnlyAuditEntry | RepoConfigDisableSockpuppetDisallowedAuditEntry | RepoConfigEnableAnonymousGitAccessAuditEntry | RepoConfigEnableCollaboratorsOnlyAuditEntry | RepoConfigEnableContributorsOnlyAuditEntry | RepoConfigEnableSockpuppetDisallowedAuditEntry | RepoConfigLockAnonymousGitAccessAuditEntry | RepoConfigUnlockAnonymousGitAccessAuditEntry | RepoCreateAuditEntry | RepoDestroyAuditEntry | RepoRemoveMemberAuditEntry | RepoRemoveTopicAuditEntry | RepositoryVisibilityChangeDisableAuditEntry | RepositoryVisibilityChangeEnableAuditEntry | TeamAddMemberAuditEntry | TeamAddRepositoryAuditEntry | TeamChangeParentTeamAuditEntry | TeamRemoveMemberAuditEntry | TeamRemoveRepositoryAuditEntry

"An entry in the audit log."
interface AuditEntry {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"The corresponding operation type for the action"
enum OperationType {
  "An existing resource was accessed"
  ACCESS
  "A resource performed an authentication event"
  AUTHENTICATION
  "A new resource was created"
  CREATE
  "An existing resource was modified"
  MODIFY
  "An existing resource was removed"
  REMOVE
  "An existing resource was restored"
  RESTORE
  "An existing resource was transferred between multiple resources"
  TRANSFER
}

"Types that can initiate an audit log event."
union AuditEntryActor = Bot | Organization | User

"Location information for an actor"
type ActorLocation {
  "City"
  city: String
  "Country name"
  country: String
  "Country code"
  countryCode: String
  "Region name"
  region: String
  "Region or state code"
  regionCode: String
}

"An ISO-8601 encoded UTC date string with millisecond precison."
scalar PreciseDateTime

"Metadata for an audit entry with action org.*"
interface OrganizationAuditEntryData {
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
}

"Represents a comment on an Issue."
type IssueComment implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {
  "The actor who authored the comment."
  author: Actor
  "Author's association with the subject of the comment."
  authorAssociation: CommentAuthorAssociation!
  "The body as Markdown."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "The body rendered to text."
  bodyText: String!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "Returns whether or not a comment has been minimized."
  isMinimized: Boolean!
  "Identifies the issue associated with the comment."
  issue: Issue!
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "Returns why the comment was minimized."
  minimizedReason: String
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "Returns the pull request associated with the comment, if this comment was made on a\npull request.\n"
  pullRequest: PullRequest
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Allows filtering Reactions by emoji." content: ReactionContent "Allows specifying the order in which reactions are returned." orderBy: ReactionOrder): ReactionConnection!
  "The repository associated with this node."
  repository: Repository!
  "The HTTP path for this issue comment"
  resourcePath: URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this issue comment"
  url: URI!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Check if the current viewer can minimize this object."
  viewerCanMinimize: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"The possible PubSub channels for an issue."
enum IssuePubSubTopic {
  "The channel ID for observing issue updates."
  UPDATED
  "The channel ID for marking an issue as read."
  MARKASREAD
  "The channel ID for updating items on the issue timeline."
  TIMELINE
  "The channel ID for observing issue state updates."
  STATE
}

"Audit log entry for a members_can_delete_repos.clear event."
type MembersCanDeleteReposClearAuditEntry implements Node & AuditEntry & EnterpriseAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The HTTP path for this enterprise."
  enterpriseResourcePath: URI
  "The slug of the enterprise."
  enterpriseSlug: String
  "The HTTP URL for this enterprise."
  enterpriseUrl: URI
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Metadata for an audit entry containing enterprise account information."
interface EnterpriseAuditEntryData {
  "The HTTP path for this enterprise."
  enterpriseResourcePath: URI
  "The slug of the enterprise."
  enterpriseSlug: String
  "The HTTP URL for this enterprise."
  enterpriseUrl: URI
}

"The connection type for Organization."
type OrganizationConnection {
  "A list of edges."
  edges: [OrganizationEdge]
  "A list of nodes."
  nodes: [Organization]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type OrganizationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Organization
}

"An Invitation for a user to an organization."
type OrganizationInvitation implements Node {
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The email address of the user invited to the organization."
  email: String
  id: ID!
  "The type of invitation that was sent (e.g. email, user)."
  invitationType: OrganizationInvitationType!
  "The user who was invited to the organization."
  invitee: User
  "The user who created the invitation."
  inviter: User!
  "The organization the invite is for"
  organization: Organization!
  "The user's pending role in the organization (e.g. member, owner)."
  role: OrganizationInvitationRole!
}

"The possible organization invitation types."
enum OrganizationInvitationType {
  "The invitation was to an existing user."
  USER
  "The invitation was to an email address."
  EMAIL
}

"The possible organization invitation roles."
enum OrganizationInvitationRole {
  "The user is invited to be a direct member of the organization."
  DIRECT_MEMBER
  "The user is invited to be an admin of the organization."
  ADMIN
  "The user is invited to be a billing manager of the organization."
  BILLING_MANAGER
  "The user's previous role will be reinstated."
  REINSTATE
}

"The connection type for Team."
type TeamConnection {
  "A list of edges."
  edges: [TeamEdge]
  "A list of nodes."
  nodes: [Team]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type TeamEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Team
}

"A team of users in an organization."
type Team implements Node & Subscribable & MemberStatusable {
  "A list of teams that are ancestors of this team."
  ancestors("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): TeamConnection!
  "A URL pointing to the team's avatar."
  avatarUrl("The size in pixels of the resulting square image." size: Int = 400): URI
  "List of child teams belonging to this team"
  childTeams("Order for connection" orderBy: TeamOrder "User logins to filter by" userLogins: [String!] "Whether to list immediate child teams or all descendant child teams." immediateOnly: Boolean = true "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): TeamConnection!
  "The slug corresponding to the organization and team."
  combinedSlug: String!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The description of the team."
  description: String
  "Find a team discussion by its number."
  discussion("The sequence number of the discussion to find." number: Int!): TeamDiscussion
  "A list of team discussions."
  discussions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "If provided, filters discussions according to whether or not they are pinned." isPinned: Boolean "Order for connection" orderBy: TeamDiscussionOrder): TeamDiscussionConnection!
  "The HTTP path for team discussions"
  discussionsResourcePath: URI!
  "The HTTP URL for team discussions"
  discussionsUrl: URI!
  "The HTTP path for editing this team"
  editTeamResourcePath: URI!
  "The HTTP URL for editing this team"
  editTeamUrl: URI!
  id: ID!
  "A list of pending invitations for users to this team"
  invitations("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): OrganizationInvitationConnection
  "Get the status messages members of this entity have set that are either public or visible only to the organization."
  memberStatuses("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for user statuses returned from the connection." orderBy: UserStatusOrder = { field: UPDATED_AT, direction: DESC }): UserStatusConnection!
  "A list of users who are members of this team."
  members("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "The search string to look for." query: String "Filter by membership type" membership: TeamMembershipType = ALL "Filter by team member role" role: TeamMemberRole "Order for the connection." orderBy: TeamMemberOrder): TeamMemberConnection!
  "The HTTP path for the team' members"
  membersResourcePath: URI!
  "The HTTP URL for the team' members"
  membersUrl: URI!
  "The name of the team."
  name: String!
  "The HTTP path creating a new team"
  newTeamResourcePath: URI!
  "The HTTP URL creating a new team"
  newTeamUrl: URI!
  "The organization that owns this team."
  organization: Organization!
  "The parent team of the team."
  parentTeam: Team
  "The level of privacy the team has."
  privacy: TeamPrivacy!
  "A list of repositories this team has access to."
  repositories("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "The search string to look for." query: String "Order for the connection." orderBy: TeamRepositoryOrder): TeamRepositoryConnection!
  "The HTTP path for this team's repositories"
  repositoriesResourcePath: URI!
  "The HTTP URL for this team's repositories"
  repositoriesUrl: URI!
  "The HTTP path for this team"
  resourcePath: URI!
  "The slug corresponding to the team."
  slug: String!
  "The HTTP path for this team's teams"
  teamsResourcePath: URI!
  "The HTTP URL for this team's teams"
  teamsUrl: URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this team"
  url: URI!
  "Team is adminable by the viewer."
  viewerCanAdminister: Boolean!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: SubscriptionState
}

"The possible team privacy values."
enum TeamPrivacy {
  "A secret team can only be seen by its members."
  SECRET
  "A visible team can be seen and @mentioned by every member of the organization."
  VISIBLE
}

"The connection type for User."
type TeamMemberConnection {
  "A list of edges."
  edges: [TeamMemberEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user who is a member of a team."
type TeamMemberEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The HTTP path to the organization's member access page."
  memberAccessResourcePath: URI!
  "The HTTP URL to the organization's member access page."
  memberAccessUrl: URI!
  node: User!
  "The role the member has on the team."
  role: TeamMemberRole!
}

"The possible team member roles; either 'maintainer' or 'member'."
enum TeamMemberRole {
  "A team maintainer has permission to add and remove team members."
  MAINTAINER
  "A team member has no administrative permissions on the team."
  MEMBER
}

"Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL."
enum TeamMembershipType {
  "Includes only immediate members of the team."
  IMMEDIATE
  "Includes only child team members for the team."
  CHILD_TEAM
  "Includes immediate and child team members for the team."
  ALL
}

"Ordering options for team member connections"
input TeamMemberOrder {
  "The field to order team members by."
  field: TeamMemberOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which team member connections can be ordered."
enum TeamMemberOrderField {
  "Order team members by login"
  LOGIN
  "Order team members by creation time"
  CREATED_AT
}

"The connection type for Repository."
type TeamRepositoryConnection {
  "A list of edges."
  edges: [TeamRepositoryEdge]
  "A list of nodes."
  nodes: [Repository]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a team repository."
type TeamRepositoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: Repository!
  "The permission level the team has on the repository"
  permission: RepositoryPermission!
}

"The access level to a repository"
enum RepositoryPermission {
  "Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators"
  ADMIN
  "Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings"
  MAINTAIN
  "Can read, clone, and push to this repository. Can also manage issues and pull requests"
  WRITE
  "Can read and clone this repository. Can also manage issues and pull requests"
  TRIAGE
  "Can read and clone this repository. Can also open and comment on issues and pull requests"
  READ
}

"Ordering options for team repository connections"
input TeamRepositoryOrder {
  "The field to order repositories by."
  field: TeamRepositoryOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which team repository connections can be ordered."
enum TeamRepositoryOrderField {
  "Order repositories by creation time"
  CREATED_AT
  "Order repositories by update time"
  UPDATED_AT
  "Order repositories by push time"
  PUSHED_AT
  "Order repositories by name"
  NAME
  "Order repositories by permission"
  PERMISSION
  "Order repositories by number of stargazers"
  STARGAZERS
}

"The connection type for OrganizationInvitation."
type OrganizationInvitationConnection {
  "A list of edges."
  edges: [OrganizationInvitationEdge]
  "A list of nodes."
  nodes: [OrganizationInvitation]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type OrganizationInvitationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: OrganizationInvitation
}

"Ways in which team connections can be ordered."
input TeamOrder {
  "The field in which to order nodes by."
  field: TeamOrderField!
  "The direction in which to order nodes."
  direction: OrderDirection!
}

"Properties by which team connections can be ordered."
enum TeamOrderField {
  "Allows ordering a list of teams by name."
  NAME
}

"The connection type for TeamDiscussion."
type TeamDiscussionConnection {
  "A list of edges."
  edges: [TeamDiscussionEdge]
  "A list of nodes."
  nodes: [TeamDiscussion]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type TeamDiscussionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TeamDiscussion
}

"A team discussion."
type TeamDiscussion implements Node & Comment & Deletable & Reactable & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  "The actor who authored the comment."
  author: Actor
  "Author's association with the discussion's team."
  authorAssociation: CommentAuthorAssociation!
  "The body as Markdown."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "The body rendered to text."
  bodyText: String!
  "Identifies the discussion body hash."
  bodyVersion: String!
  "A list of comments on this discussion."
  comments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Order for connection" orderBy: TeamDiscussionCommentOrder "When provided, filters the connection such that results begin with the comment with this number." fromComment: Int): TeamDiscussionCommentConnection!
  "The HTTP path for discussion comments"
  commentsResourcePath: URI!
  "The HTTP URL for discussion comments"
  commentsUrl: URI!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "Whether or not the discussion is pinned."
  isPinned: Boolean!
  "Whether or not the discussion is only visible to team members and org admins."
  isPrivate: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "Identifies the discussion within its team."
  number: Int!
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Allows filtering Reactions by emoji." content: ReactionContent "Allows specifying the order in which reactions are returned." orderBy: ReactionOrder): ReactionConnection!
  "The HTTP path for this discussion"
  resourcePath: URI!
  "The team that defines the context of this discussion."
  team: Team!
  "The title of the discussion"
  title: String!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this discussion"
  url: URI!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Whether or not the current viewer can pin this discussion."
  viewerCanPin: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: SubscriptionState
}

"The connection type for TeamDiscussionComment."
type TeamDiscussionCommentConnection {
  "A list of edges."
  edges: [TeamDiscussionCommentEdge]
  "A list of nodes."
  nodes: [TeamDiscussionComment]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type TeamDiscussionCommentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TeamDiscussionComment
}

"A comment on a team discussion."
type TeamDiscussionComment implements Node & Comment & Deletable & Reactable & UniformResourceLocatable & Updatable & UpdatableComment {
  "The actor who authored the comment."
  author: Actor
  "Author's association with the comment's team."
  authorAssociation: CommentAuthorAssociation!
  "The body as Markdown."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "The body rendered to text."
  bodyText: String!
  "The current version of the body content."
  bodyVersion: String!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The discussion this comment is about."
  discussion: TeamDiscussion!
  "The actor who edited the comment."
  editor: Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "Identifies the comment number."
  number: Int!
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Allows filtering Reactions by emoji." content: ReactionContent "Allows specifying the order in which reactions are returned." orderBy: ReactionOrder): ReactionConnection!
  "The HTTP path for this comment"
  resourcePath: URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this comment"
  url: URI!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"Ways in which team discussion comment connections can be ordered."
input TeamDiscussionCommentOrder {
  "The field by which to order nodes."
  field: TeamDiscussionCommentOrderField!
  "The direction in which to order nodes."
  direction: OrderDirection!
}

"Properties by which team discussion comment connections can be ordered."
enum TeamDiscussionCommentOrderField {
  "Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering)."
  NUMBER
}

"Ways in which team discussion connections can be ordered."
input TeamDiscussionOrder {
  "The field by which to order nodes."
  field: TeamDiscussionOrderField!
  "The direction in which to order nodes."
  direction: OrderDirection!
}

"Properties by which team discussion connections can be ordered."
enum TeamDiscussionOrderField {
  "Allows chronological ordering of team discussions."
  CREATED_AT
}

"The possible default permissions for repositories."
enum DefaultRepositoryPermissionField {
  "No access"
  NONE
  "Can read repos by default"
  READ
  "Can read and write repos by default"
  WRITE
  "Can read, write, and administrate repos by default"
  ADMIN
}

"The connection type for ExternalIdentity."
type ExternalIdentityConnection {
  "A list of edges."
  edges: [ExternalIdentityEdge]
  "A list of nodes."
  nodes: [ExternalIdentity]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ExternalIdentityEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ExternalIdentity
}

"An external identity provisioned by SAML SSO or SCIM."
type ExternalIdentity implements Node {
  "The GUID for this identity"
  guid: String!
  id: ID!
  "Organization invitation for this SCIM-provisioned external identity"
  organizationInvitation: OrganizationInvitation
  "SAML Identity attributes"
  samlIdentity: ExternalIdentitySamlAttributes
  "SCIM Identity attributes"
  scimIdentity: ExternalIdentityScimAttributes
  "User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member."
  user: User
}

"SAML attributes for the External Identity"
type ExternalIdentitySamlAttributes {
  "The NameID of the SAML identity"
  nameId: String
}

"SCIM attributes for the External Identity"
type ExternalIdentityScimAttributes {
  "The userName of the SCIM identity"
  username: String
}

"A user's public key."
type PublicKey implements Node {
  "The last time this authorization was used to perform an action. Values will be null for keys not owned by the user."
  accessedAt: DateTime
  "Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user."
  createdAt: DateTime
  "The fingerprint for this PublicKey."
  fingerprint: String!
  id: ID!
  "Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user."
  isReadOnly: Boolean
  "The public key string."
  key: String!
  "Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user."
  updatedAt: DateTime
}

"A valid x509 certificate string"
scalar X509Certificate

"The possible states in which authentication can be configured with an identity provider."
enum IdentityProviderConfigurationState {
  "Authentication with an identity provider is configured and enforced."
  ENFORCED
  "Authentication with an identity provider is configured but not enforced."
  CONFIGURED
  "Authentication with an identity provider is not configured."
  UNCONFIGURED
}

"Audit log entry for a members_can_delete_repos.disable event."
type MembersCanDeleteReposDisableAuditEntry implements Node & AuditEntry & EnterpriseAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The HTTP path for this enterprise."
  enterpriseResourcePath: URI
  "The slug of the enterprise."
  enterpriseSlug: String
  "The HTTP URL for this enterprise."
  enterpriseUrl: URI
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a members_can_delete_repos.enable event."
type MembersCanDeleteReposEnableAuditEntry implements Node & AuditEntry & EnterpriseAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The HTTP path for this enterprise."
  enterpriseResourcePath: URI
  "The slug of the enterprise."
  enterpriseSlug: String
  "The HTTP URL for this enterprise."
  enterpriseUrl: URI
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a oauth_application.create event."
type OauthApplicationCreateAuditEntry implements Node & AuditEntry & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The application URL of the OAuth Application."
  applicationUrl: URI
  "The callback URL of the OAuth Application."
  callbackUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The name of the OAuth Application."
  oauthApplicationName: String
  "The HTTP path for the OAuth Application"
  oauthApplicationResourcePath: URI
  "The HTTP URL for the OAuth Application"
  oauthApplicationUrl: URI
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The rate limit of the OAuth Application."
  rateLimit: Int
  "The state of the OAuth Application."
  state: OauthApplicationCreateAuditEntryState
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Metadata for an audit entry with action oauth_application.*"
interface OauthApplicationAuditEntryData {
  "The name of the OAuth Application."
  oauthApplicationName: String
  "The HTTP path for the OAuth Application"
  oauthApplicationResourcePath: URI
  "The HTTP URL for the OAuth Application"
  oauthApplicationUrl: URI
}

"The state of an OAuth Application when it was created."
enum OauthApplicationCreateAuditEntryState {
  "The OAuth Application was active and allowed to have OAuth Accesses."
  ACTIVE
  "The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns."
  SUSPENDED
  "The OAuth Application was in the process of being deleted."
  PENDING_DELETION
}

"The state of an OAuth Application when its tokens were revoked."
enum OauthApplicationRevokeTokensAuditEntryState {
  "The OAuth Application was active and allowed to have OAuth Accesses."
  ACTIVE
  "The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns."
  SUSPENDED
  "The OAuth Application was in the process of being deleted."
  PENDING_DELETION
}

"Audit log entry for a org.add_billing_manager"
type OrgAddBillingManagerAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The email address used to invite a billing manager for the organization."
  invitationEmail: String
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.add_member"
type OrgAddMemberAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The permission level of the member added to the organization."
  permission: OrgAddMemberAuditEntryPermission
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"The permissions available to members on an Organization."
enum OrgAddMemberAuditEntryPermission {
  "Can read and clone repositories."
  READ
  "Can read, clone, push, and add collaborators to repositories."
  ADMIN
}

"Audit log entry for a org.block_user"
type OrgBlockUserAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The blocked user."
  blockedUser: User
  "The username of the blocked user."
  blockedUserName: String
  "The HTTP path for the blocked user."
  blockedUserResourcePath: URI
  "The HTTP URL for the blocked user."
  blockedUserUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.config.disable_collaborators_only event."
type OrgConfigDisableCollaboratorsOnlyAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.config.enable_collaborators_only event."
type OrgConfigEnableCollaboratorsOnlyAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.create event."
type OrgCreateAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The billing plan for the Organization."
  billingPlan: OrgCreateAuditEntryBillingPlan
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"The billing plans available for organizations."
enum OrgCreateAuditEntryBillingPlan {
  "Free Plan"
  FREE
  "Team Plan"
  BUSINESS
  "Enterprise Cloud Plan"
  BUSINESS_PLUS
  "Legacy Unlimited Plan"
  UNLIMITED
  "Tiered Per Seat Plan"
  TIERED_PER_SEAT
}

"Audit log entry for a org.disable_oauth_app_restrictions event."
type OrgDisableOauthAppRestrictionsAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.disable_saml event."
type OrgDisableSamlAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The SAML provider's digest algorithm URL."
  digestMethodUrl: URI
  id: ID!
  "The SAML provider's issuer URL."
  issuerUrl: URI
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The SAML provider's signature algorithm URL."
  signatureMethodUrl: URI
  "The SAML provider's single sign-on URL."
  singleSignOnUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.disable_two_factor_requirement event."
type OrgDisableTwoFactorRequirementAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.enable_oauth_app_restrictions event."
type OrgEnableOauthAppRestrictionsAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.enable_saml event."
type OrgEnableSamlAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The SAML provider's digest algorithm URL."
  digestMethodUrl: URI
  id: ID!
  "The SAML provider's issuer URL."
  issuerUrl: URI
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The SAML provider's signature algorithm URL."
  signatureMethodUrl: URI
  "The SAML provider's single sign-on URL."
  singleSignOnUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.enable_two_factor_requirement event."
type OrgEnableTwoFactorRequirementAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.invite_member event."
type OrgInviteMemberAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The email address of the organization invitation."
  email: String
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The organization invitation."
  organizationInvitation: OrganizationInvitation
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.invite_to_business event."
type OrgInviteToBusinessAuditEntry implements Node & AuditEntry & EnterpriseAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The HTTP path for this enterprise."
  enterpriseResourcePath: URI
  "The slug of the enterprise."
  enterpriseSlug: String
  "The HTTP URL for this enterprise."
  enterpriseUrl: URI
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.oauth_app_access_approved event."
type OrgOauthAppAccessApprovedAuditEntry implements Node & AuditEntry & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The name of the OAuth Application."
  oauthApplicationName: String
  "The HTTP path for the OAuth Application"
  oauthApplicationResourcePath: URI
  "The HTTP URL for the OAuth Application"
  oauthApplicationUrl: URI
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.oauth_app_access_denied event."
type OrgOauthAppAccessDeniedAuditEntry implements Node & AuditEntry & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The name of the OAuth Application."
  oauthApplicationName: String
  "The HTTP path for the OAuth Application"
  oauthApplicationResourcePath: URI
  "The HTTP URL for the OAuth Application"
  oauthApplicationUrl: URI
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.oauth_app_access_requested event."
type OrgOauthAppAccessRequestedAuditEntry implements Node & AuditEntry & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The name of the OAuth Application."
  oauthApplicationName: String
  "The HTTP path for the OAuth Application"
  oauthApplicationResourcePath: URI
  "The HTTP URL for the OAuth Application"
  oauthApplicationUrl: URI
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.remove_billing_manager event."
type OrgRemoveBillingManagerAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The reason for the billing manager being removed."
  reason: OrgRemoveBillingManagerAuditEntryReason
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"The reason a billing manager was removed from an Organization."
enum OrgRemoveBillingManagerAuditEntryReason {
  "The organization required 2FA of its billing managers and this user did not have 2FA enabled."
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
  "SAML external identity missing"
  SAML_EXTERNAL_IDENTITY_MISSING
  "SAML SSO enforcement requires an external identity"
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
}

"Audit log entry for a org.remove_member event."
type OrgRemoveMemberAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The types of membership the member has with the organization."
  membershipTypes: [OrgRemoveMemberAuditEntryMembershipType!]
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The reason for the member being removed."
  reason: OrgRemoveMemberAuditEntryReason
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"The reason a member was removed from an Organization."
enum OrgRemoveMemberAuditEntryReason {
  "The organization required 2FA of its billing managers and this user did not have 2FA enabled."
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
  "SAML external identity missing"
  SAML_EXTERNAL_IDENTITY_MISSING
  "SAML SSO enforcement requires an external identity"
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
}

"The type of membership a user has with an Organization."
enum OrgRemoveMemberAuditEntryMembershipType {
  "A direct member is a user that is a member of the Organization."
  DIRECT_MEMBER
  "Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories."
  ADMIN
  "A billing manager is a user who manages the billing settings for the Organization, such as updating payment information."
  BILLING_MANAGER
  "An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization."
  UNAFFILIATED
  "An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization."
  OUTSIDE_COLLABORATOR
}

"Audit log entry for a org.remove_outside_collaborator event."
type OrgRemoveOutsideCollaboratorAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The types of membership the outside collaborator has with the organization."
  membershipTypes: [OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The reason for the outside collaborator being removed from the Organization."
  reason: OrgRemoveOutsideCollaboratorAuditEntryReason
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"The reason an outside collaborator was removed from an Organization."
enum OrgRemoveOutsideCollaboratorAuditEntryReason {
  "The organization required 2FA of its billing managers and this user did not have 2FA enabled."
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
  "SAML external identity missing"
  SAML_EXTERNAL_IDENTITY_MISSING
}

"The type of membership a user has with an Organization."
enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  "An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization."
  OUTSIDE_COLLABORATOR
  "An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization."
  UNAFFILIATED
  "A billing manager is a user who manages the billing settings for the Organization, such as updating payment information."
  BILLING_MANAGER
}

"Audit log entry for a org.restore_member event."
type OrgRestoreMemberAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The number of custom email routings for the restored member."
  restoredCustomEmailRoutingsCount: Int
  "The number of issue assignemnts for the restored member."
  restoredIssueAssignmentsCount: Int
  "Restored organization membership objects."
  restoredMemberships: [OrgRestoreMemberAuditEntryMembership!]
  "The number of restored memberships."
  restoredMembershipsCount: Int
  "The number of repositories of the restored member."
  restoredRepositoriesCount: Int
  "The number of starred repositories for the restored member."
  restoredRepositoryStarsCount: Int
  "The number of watched repositories for the restored member."
  restoredRepositoryWatchesCount: Int
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Types of memberships that can be restored for an Organization member."
union OrgRestoreMemberAuditEntryMembership = OrgRestoreMemberMembershipOrganizationAuditEntryData | OrgRestoreMemberMembershipRepositoryAuditEntryData | OrgRestoreMemberMembershipTeamAuditEntryData

"Metadata for an organization membership for org.restore_member actions"
type OrgRestoreMemberMembershipOrganizationAuditEntryData implements OrganizationAuditEntryData {
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
}

"Metadata for a repository membership for org.restore_member actions"
type OrgRestoreMemberMembershipRepositoryAuditEntryData implements RepositoryAuditEntryData {
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
}

"Metadata for an audit entry with action repo.*"
interface RepositoryAuditEntryData {
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
}

"Metadata for a team membership for org.restore_member actions"
type OrgRestoreMemberMembershipTeamAuditEntryData implements TeamAuditEntryData {
  "The team associated with the action"
  team: Team
  "The name of the team"
  teamName: String
  "The HTTP path for this team"
  teamResourcePath: URI
  "The HTTP URL for this team"
  teamUrl: URI
}

"Metadata for an audit entry with action team.*"
interface TeamAuditEntryData {
  "The team associated with the action"
  team: Team
  "The name of the team"
  teamName: String
  "The HTTP path for this team"
  teamResourcePath: URI
  "The HTTP URL for this team"
  teamUrl: URI
}

"Audit log entry for a org.unblock_user"
type OrgUnblockUserAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The user being unblocked by the organization."
  blockedUser: User
  "The username of the blocked user."
  blockedUserName: String
  "The HTTP path for the blocked user."
  blockedUserResourcePath: URI
  "The HTTP URL for the blocked user."
  blockedUserUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a org.update_default_repository_permission"
type OrgUpdateDefaultRepositoryPermissionAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The new default repository permission level for the organization."
  permission: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  "The former default repository permission level for the organization."
  permissionWas: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"The default permission a repository can have in an Organization."
enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  "Can read and clone repositories."
  READ
  "Can read, clone and push to repositories."
  WRITE
  "Can read, clone, push, and add collaborators to repositories."
  ADMIN
  "No default permission value."
  NONE
}

"Audit log entry for a org.update_member event."
type OrgUpdateMemberAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The new member permission level for the organization."
  permission: OrgUpdateMemberAuditEntryPermission
  "The former member permission level for the organization."
  permissionWas: OrgUpdateMemberAuditEntryPermission
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"The permissions available to members on an Organization."
enum OrgUpdateMemberAuditEntryPermission {
  "Can read and clone repositories."
  READ
  "Can read, clone, push, and add collaborators to repositories."
  ADMIN
}

"Audit log entry for a org.update_member_repository_creation_permission event."
type OrgUpdateMemberRepositoryCreationPermissionAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "Can members create repositories in the organization."
  canCreateRepositories: Boolean
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
  "The permission for visibility level of repositories for this organization."
  visibility: OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
}

"The permissions available for repository creation on an Organization."
enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  "All organization members are restricted from creating any repositories."
  ALL
  "All organization members are restricted from creating public repositories."
  PUBLIC
}

"Audit log entry for a org.update_member_repository_invitation_permission event."
type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "Can outside collaborators be invited to repositories in the organization."
  canInviteOutsideCollaboratorsToRepositories: Boolean
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a private_repository_forking.disable event."
type PrivateRepositoryForkingDisableAuditEntry implements Node & AuditEntry & EnterpriseAuditEntryData & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The HTTP path for this enterprise."
  enterpriseResourcePath: URI
  "The slug of the enterprise."
  enterpriseSlug: String
  "The HTTP URL for this enterprise."
  enterpriseUrl: URI
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a private_repository_forking.enable event."
type PrivateRepositoryForkingEnableAuditEntry implements Node & AuditEntry & EnterpriseAuditEntryData & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The HTTP path for this enterprise."
  enterpriseResourcePath: URI
  "The slug of the enterprise."
  enterpriseSlug: String
  "The HTTP URL for this enterprise."
  enterpriseUrl: URI
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.access event."
type RepoAccessAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
  "The visibility of the repository"
  visibility: RepoAccessAuditEntryVisibility
}

"The privacy of a repository"
enum RepoAccessAuditEntryVisibility {
  "The repository is visible only to users in the same business."
  INTERNAL
  "The repository is visible only to those with explicit access."
  PRIVATE
  "The repository is visible to everyone."
  PUBLIC
}

"Audit log entry for a repo.add_member event."
type RepoAddMemberAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
  "The visibility of the repository"
  visibility: RepoAddMemberAuditEntryVisibility
}

"The privacy of a repository"
enum RepoAddMemberAuditEntryVisibility {
  "The repository is visible only to users in the same business."
  INTERNAL
  "The repository is visible only to those with explicit access."
  PRIVATE
  "The repository is visible to everyone."
  PUBLIC
}

"Audit log entry for a repo.add_topic event."
type RepoAddTopicAuditEntry implements Node & AuditEntry & RepositoryAuditEntryData & OrganizationAuditEntryData & TopicAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The name of the topic added to the repository"
  topic: Topic
  "The name of the topic added to the repository"
  topicName: String
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Metadata for an audit entry with a topic."
interface TopicAuditEntryData {
  "The name of the topic added to the repository"
  topic: Topic
  "The name of the topic added to the repository"
  topicName: String
}

"Audit log entry for a repo.archived event."
type RepoArchivedAuditEntry implements Node & AuditEntry & RepositoryAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
  "The visibility of the repository"
  visibility: RepoArchivedAuditEntryVisibility
}

"The privacy of a repository"
enum RepoArchivedAuditEntryVisibility {
  "The repository is visible only to users in the same business."
  INTERNAL
  "The repository is visible only to those with explicit access."
  PRIVATE
  "The repository is visible to everyone."
  PUBLIC
}

"Audit log entry for a repo.change_merge_setting event."
type RepoChangeMergeSettingAuditEntry implements Node & AuditEntry & RepositoryAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "Whether the change was to enable (true) or disable (false) the merge type"
  isEnabled: Boolean
  "The merge method affected by the change"
  mergeType: RepoChangeMergeSettingAuditEntryMergeType
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"The merge options available for pull requests to this repository."
enum RepoChangeMergeSettingAuditEntryMergeType {
  "The pull request is added to the base branch in a merge commit."
  MERGE
  "Commits from the pull request are added onto the base branch individually without a merge commit."
  REBASE
  "The pull request's commits are squashed into a single commit before they are merged to the base branch."
  SQUASH
}

"Audit log entry for a repo.config.disable_anonymous_git_access event."
type RepoConfigDisableAnonymousGitAccessAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.config.disable_collaborators_only event."
type RepoConfigDisableCollaboratorsOnlyAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.config.disable_contributors_only event."
type RepoConfigDisableContributorsOnlyAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.config.disable_sockpuppet_disallowed event."
type RepoConfigDisableSockpuppetDisallowedAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.config.enable_anonymous_git_access event."
type RepoConfigEnableAnonymousGitAccessAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.config.enable_collaborators_only event."
type RepoConfigEnableCollaboratorsOnlyAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.config.enable_contributors_only event."
type RepoConfigEnableContributorsOnlyAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.config.enable_sockpuppet_disallowed event."
type RepoConfigEnableSockpuppetDisallowedAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.config.lock_anonymous_git_access event."
type RepoConfigLockAnonymousGitAccessAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.config.unlock_anonymous_git_access event."
type RepoConfigUnlockAnonymousGitAccessAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repo.create event."
type RepoCreateAuditEntry implements Node & AuditEntry & RepositoryAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The name of the parent repository for this forked repository."
  forkParentName: String
  "The name of the root repository for this netork."
  forkSourceName: String
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
  "The visibility of the repository"
  visibility: RepoCreateAuditEntryVisibility
}

"The privacy of a repository"
enum RepoCreateAuditEntryVisibility {
  "The repository is visible only to users in the same business."
  INTERNAL
  "The repository is visible only to those with explicit access."
  PRIVATE
  "The repository is visible to everyone."
  PUBLIC
}

"Audit log entry for a repo.destroy event."
type RepoDestroyAuditEntry implements Node & AuditEntry & RepositoryAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
  "The visibility of the repository"
  visibility: RepoDestroyAuditEntryVisibility
}

"The privacy of a repository"
enum RepoDestroyAuditEntryVisibility {
  "The repository is visible only to users in the same business."
  INTERNAL
  "The repository is visible only to those with explicit access."
  PRIVATE
  "The repository is visible to everyone."
  PUBLIC
}

"Audit log entry for a repo.remove_member event."
type RepoRemoveMemberAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
  "The visibility of the repository"
  visibility: RepoRemoveMemberAuditEntryVisibility
}

"The privacy of a repository"
enum RepoRemoveMemberAuditEntryVisibility {
  "The repository is visible only to users in the same business."
  INTERNAL
  "The repository is visible only to those with explicit access."
  PRIVATE
  "The repository is visible to everyone."
  PUBLIC
}

"Audit log entry for a repo.remove_topic event."
type RepoRemoveTopicAuditEntry implements Node & AuditEntry & RepositoryAuditEntryData & OrganizationAuditEntryData & TopicAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The name of the topic added to the repository"
  topic: Topic
  "The name of the topic added to the repository"
  topicName: String
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repository_visibility_change.disable event."
type RepositoryVisibilityChangeDisableAuditEntry implements Node & AuditEntry & EnterpriseAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The HTTP path for this enterprise."
  enterpriseResourcePath: URI
  "The slug of the enterprise."
  enterpriseSlug: String
  "The HTTP URL for this enterprise."
  enterpriseUrl: URI
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a repository_visibility_change.enable event."
type RepositoryVisibilityChangeEnableAuditEntry implements Node & AuditEntry & EnterpriseAuditEntryData & OrganizationAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  "The HTTP path for this enterprise."
  enterpriseResourcePath: URI
  "The slug of the enterprise."
  enterpriseSlug: String
  "The HTTP URL for this enterprise."
  enterpriseUrl: URI
  id: ID!
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a team.add_member event."
type TeamAddMemberAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & TeamAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "Whether the team was mapped to an LDAP Group."
  isLdapMapped: Boolean
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The team associated with the action"
  team: Team
  "The name of the team"
  teamName: String
  "The HTTP path for this team"
  teamResourcePath: URI
  "The HTTP URL for this team"
  teamUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a team.add_repository event."
type TeamAddRepositoryAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "Whether the team was mapped to an LDAP Group."
  isLdapMapped: Boolean
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The team associated with the action"
  team: Team
  "The name of the team"
  teamName: String
  "The HTTP path for this team"
  teamResourcePath: URI
  "The HTTP URL for this team"
  teamUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a team.change_parent_team event."
type TeamChangeParentTeamAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & TeamAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "Whether the team was mapped to an LDAP Group."
  isLdapMapped: Boolean
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The new parent team."
  parentTeam: Team
  "The name of the new parent team"
  parentTeamName: String
  "The name of the former parent team"
  parentTeamNameWas: String
  "The HTTP path for the parent team"
  parentTeamResourcePath: URI
  "The HTTP URL for the parent team"
  parentTeamUrl: URI
  "The former parent team."
  parentTeamWas: Team
  "The HTTP path for the previous parent team"
  parentTeamWasResourcePath: URI
  "The HTTP URL for the previous parent team"
  parentTeamWasUrl: URI
  "The team associated with the action"
  team: Team
  "The name of the team"
  teamName: String
  "The HTTP path for this team"
  teamResourcePath: URI
  "The HTTP URL for this team"
  teamUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a team.remove_member event."
type TeamRemoveMemberAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & TeamAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "Whether the team was mapped to an LDAP Group."
  isLdapMapped: Boolean
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The team associated with the action"
  team: Team
  "The name of the team"
  teamName: String
  "The HTTP path for this team"
  teamResourcePath: URI
  "The HTTP URL for this team"
  teamUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Audit log entry for a team.remove_repository event."
type TeamRemoveRepositoryAuditEntry implements Node & AuditEntry & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData {
  "The action name"
  action: String!
  "The user who initiated the action"
  actor: AuditEntryActor
  "The IP address of the actor"
  actorIp: String
  "A readable representation of the actor's location"
  actorLocation: ActorLocation
  "The username of the user who initiated the action"
  actorLogin: String
  "The HTTP path for the actor."
  actorResourcePath: URI
  "The HTTP URL for the actor."
  actorUrl: URI
  "The time the action was initiated"
  createdAt: PreciseDateTime!
  id: ID!
  "Whether the team was mapped to an LDAP Group."
  isLdapMapped: Boolean
  "The corresponding operation type for the action"
  operationType: OperationType
  "The Organization associated with the Audit Entry."
  organization: Organization
  "The name of the Organization."
  organizationName: String
  "The HTTP path for the organization"
  organizationResourcePath: URI
  "The HTTP URL for the organization"
  organizationUrl: URI
  "The repository associated with the action"
  repository: Repository
  "The name of the repository"
  repositoryName: String
  "The HTTP path for the repository"
  repositoryResourcePath: URI
  "The HTTP URL for the repository"
  repositoryUrl: URI
  "The team associated with the action"
  team: Team
  "The name of the team"
  teamName: String
  "The HTTP path for this team"
  teamResourcePath: URI
  "The HTTP URL for this team"
  teamUrl: URI
  "The user affected by the action"
  user: User
  "For actions involving two users, the actor is the initiator and the user is the affected user."
  userLogin: String
  "The HTTP path for the user."
  userResourcePath: URI
  "The HTTP URL for the user."
  userUrl: URI
}

"Ordering options for Audit Log connections."
input AuditLogOrder {
  "The field to order Audit Logs by."
  field: AuditLogOrderField
  "The ordering direction."
  direction: OrderDirection
}

"Properties by which Audit Log connections can be ordered."
enum AuditLogOrderField {
  "Order audit log entries by timestamp"
  CREATED_AT
}

"An Identity Provider configured to provision SAML and SCIM identities for Organizations"
type OrganizationIdentityProvider implements Node {
  "The digest algorithm used to sign SAML requests for the Identity Provider."
  digestMethod: URI
  "External Identities provisioned by this Identity Provider"
  externalIdentities("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): ExternalIdentityConnection!
  id: ID!
  "The x509 certificate used by the Identity Provder to sign assertions and responses."
  idpCertificate: X509Certificate
  "The Issuer Entity ID for the SAML Identity Provider"
  issuer: String
  "Organization this Identity Provider belongs to"
  organization: Organization
  "The signature algorithm used to sign SAML requests for the Identity Provider."
  signatureMethod: URI
  "The URL endpoint for the Identity Provider's SAML SSO."
  ssoUrl: URI
}

"A placeholder user for attribution of imported data on GitHub."
type Mannequin implements Node & Actor & UniformResourceLocatable {
  "A URL pointing to the GitHub App's public avatar."
  avatarUrl("The size of the resulting square image." size: Int): URI!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "The mannequin's email on the source instance."
  email: String
  id: ID!
  "The username of the actor."
  login: String!
  "The HTML path to this resource."
  resourcePath: URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The URL to this resource."
  url: URI!
}

"The connection type for User."
type OrganizationMemberConnection {
  "A list of edges."
  edges: [OrganizationMemberEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user within an organization."
type OrganizationMemberEdge {
  "A cursor for use in pagination."
  cursor: String!
  "Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer."
  hasTwoFactorEnabled: Boolean
  "The item at the end of the edge."
  node: User
  "The role this user has in the organization."
  role: OrganizationMemberRole
}

"The possible roles within an organization for its members."
enum OrganizationMemberRole {
  "The user is a member of the organization."
  MEMBER
  "The user is an administrator of the organization."
  ADMIN
}

"The role of a user on a team."
enum TeamRole {
  "User has admin rights on the team."
  ADMIN
  "User is a member of the team."
  MEMBER
}

"The privacy of a Gist"
enum GistPrivacy {
  "Public"
  PUBLIC
  "Secret"
  SECRET
  "Gists that are public and secret"
  ALL
}

"An edge in a connection."
type RepositoryInvitationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RepositoryInvitation
}

"An invitation for a user to be added to a repository."
type RepositoryInvitation implements Node {
  id: ID!
  "The user who received the invitation."
  invitee: User!
  "The user who created the invitation."
  inviter: User!
  "The permission granted on this repository by this invitation."
  permission: RepositoryPermission!
  "The Repository the user is invited to."
  repository: RepositoryInfo
}

"A list of languages associated with the parent."
type LanguageConnection {
  "A list of edges."
  edges: [LanguageEdge]
  "A list of nodes."
  nodes: [Language]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
  "The total size in bytes of files written in that language."
  totalSize: Int!
}

"Represents the language of a repository."
type LanguageEdge {
  cursor: String!
  node: Language!
  "The number of bytes of code written in the language."
  size: Int!
}

"Represents a Milestone object on a given repository."
type Milestone implements Node & Closable & UniformResourceLocatable {
  "`true` if the object is closed (definition of closed may depend on type)"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: DateTime
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the actor who created the milestone."
  creator: Actor
  "Identifies the description of the milestone."
  description: String
  "Identifies the due date of the milestone."
  dueOn: DateTime
  id: ID!
  "Just for debugging on review-lab"
  issuePrioritiesDebug: String!
  "A list of issues associated with the milestone."
  issues("Ordering options for issues returned from the connection." orderBy: IssueOrder "A list of label names to filter the pull requests by." labels: [String!] "A list of states to filter the issues by." states: [IssueState!] "Filtering options for issues returned from the connection." filterBy: IssueFilters "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): IssueConnection!
  "Identifies the number of the milestone."
  number: Int!
  "A list of pull requests associated with the milestone."
  pullRequests("A list of states to filter the pull requests by." states: [PullRequestState!] "A list of label names to filter the pull requests by." labels: [String!] "The head ref name to filter the pull requests by." headRefName: String "The base ref name to filter the pull requests by." baseRefName: String "Ordering options for pull requests returned from the connection." orderBy: IssueOrder "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestConnection!
  "The repository associated with this milestone."
  repository: Repository!
  "The HTTP path for this milestone"
  resourcePath: URI!
  "Identifies the state of the milestone."
  state: MilestoneState!
  "Identifies the title of the milestone."
  title: String!
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL for this milestone"
  url: URI!
}

"The possible states of a milestone."
enum MilestoneState {
  "A milestone that is still open."
  OPEN
  "A milestone that has been closed."
  CLOSED
}

"The connection type for PullRequestChangedFile."
type PullRequestChangedFileConnection {
  "A list of edges."
  edges: [PullRequestChangedFileEdge]
  "A list of nodes."
  nodes: [PullRequestChangedFile]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PullRequestChangedFileEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PullRequestChangedFile
}

"A file changed in a pull request."
type PullRequestChangedFile {
  "The number of additions to the file."
  additions: Int!
  "The number of deletions to the file."
  deletions: Int!
  "The path of the file."
  path: String!
}

"Whether or not a PullRequest can be merged."
enum MergeableState {
  "The pull request can be merged."
  MERGEABLE
  "The pull request cannot be merged due to merge conflicts."
  CONFLICTING
  "The mergeability of the pull request is still being calculated."
  UNKNOWN
}

"A review comment associated with a given repository pull request."
type PullRequestReviewComment implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {
  "The actor who authored the comment."
  author: Actor
  "Author's association with the subject of the comment."
  authorAssociation: CommentAuthorAssociation!
  "The comment body of this review comment."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "The comment body of this review comment rendered as plain text."
  bodyText: String!
  "Identifies the commit associated with the comment."
  commit: Commit!
  "Identifies when the comment was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The diff hunk to which the comment applies."
  diffHunk: String!
  "Identifies when the comment was created in a draft state."
  draftedAt: DateTime!
  "The actor who edited the comment."
  editor: Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "Returns whether or not a comment has been minimized."
  isMinimized: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "Returns why the comment was minimized."
  minimizedReason: String
  "Identifies the original commit associated with the comment."
  originalCommit: Commit
  "The original line index in the diff to which the comment applies."
  originalPosition: Int!
  "Identifies when the comment body is outdated"
  outdated: Boolean!
  "The path to which the comment applies."
  path: String!
  "The line index in the diff to which the comment applies."
  position: Int
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "The pull request associated with this review comment."
  pullRequest: PullRequest!
  "The pull request review associated with this review comment."
  pullRequestReview: PullRequestReview
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Allows filtering Reactions by emoji." content: ReactionContent "Allows specifying the order in which reactions are returned." orderBy: ReactionOrder): ReactionConnection!
  "The comment this is a reply to."
  replyTo: PullRequestReviewComment
  "The repository associated with this node."
  repository: Repository!
  "The HTTP path permalink for this review comment."
  resourcePath: URI!
  "Identifies the state of the comment."
  state: PullRequestReviewCommentState!
  "Identifies when the comment was last updated."
  updatedAt: DateTime!
  "The HTTP URL permalink for this review comment."
  url: URI!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Check if the current viewer can minimize this object."
  viewerCanMinimize: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"A review object for a given pull request."
type PullRequestReview implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {
  "The actor who authored the comment."
  author: Actor
  "Author's association with the subject of the comment."
  authorAssociation: CommentAuthorAssociation!
  "Identifies the pull request review body."
  body: String!
  "The body rendered to HTML."
  bodyHTML: HTML!
  "The body of this review rendered as plain text."
  bodyText: String!
  "A list of review comments for the current pull request review."
  comments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PullRequestReviewCommentConnection!
  "Identifies the commit associated with this pull request review."
  commit: Commit
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: DateTime
  "A list of teams that this review was made on behalf of."
  onBehalfOf("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): TeamConnection!
  "Identifies when the comment was published at."
  publishedAt: DateTime
  "Identifies the pull request associated with this pull request review."
  pullRequest: PullRequest!
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Allows filtering Reactions by emoji." content: ReactionContent "Allows specifying the order in which reactions are returned." orderBy: ReactionOrder): ReactionConnection!
  "The repository associated with this node."
  repository: Repository!
  "The HTTP path permalink for this PullRequestReview."
  resourcePath: URI!
  "Identifies the current state of the pull request review."
  state: PullRequestReviewState!
  "Identifies when the Pull Request Review was submitted"
  submittedAt: DateTime
  "Identifies the date and time when the object was last updated."
  updatedAt: DateTime!
  "The HTTP URL permalink for this PullRequestReview."
  url: URI!
  "A list of edits to this content."
  userContentEdits("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"The possible states of a pull request review."
enum PullRequestReviewState {
  "A review that has not yet been submitted."
  PENDING
  "An informational review."
  COMMENTED
  "A review allowing the pull request to merge."
  APPROVED
  "A review blocking the pull request from merging."
  CHANGES_REQUESTED
  "A review that has been dismissed."
  DISMISSED
}

"The connection type for PullRequestReviewComment."
type PullRequestReviewCommentConnection {
  "A list of edges."
  edges: [PullRequestReviewCommentEdge]
  "A list of nodes."
  nodes: [PullRequestReviewComment]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PullRequestReviewCommentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PullRequestReviewComment
}

"A threaded list of comments for a given pull request."
type PullRequestReviewThread implements Node {
  "A list of pull request comments associated with the thread."
  comments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Skips the first _n_ elements in the list." skip: Int): PullRequestReviewCommentConnection!
  id: ID!
  "Whether this thread has been resolved"
  isResolved: Boolean!
  "Identifies the pull request associated with this thread."
  pullRequest: PullRequest!
  "Identifies the repository associated with this thread."
  repository: Repository!
  "The user who resolved this thread"
  resolvedBy: User
  "Whether or not the viewer can resolve this thread"
  viewerCanResolve: Boolean!
  "Whether or not the viewer can unresolve this thread"
  viewerCanUnresolve: Boolean!
}

"Represents a Git commit part of a pull request."
type PullRequestCommit implements Node & UniformResourceLocatable {
  "The Git commit object"
  commit: Commit!
  id: ID!
  "The pull request this commit belongs to"
  pullRequest: PullRequest!
  "The HTTP path for this pull request commit"
  resourcePath: URI!
  "The HTTP URL for this pull request commit"
  url: URI!
}

"Review comment threads for a pull request review."
type PullRequestReviewThreadConnection {
  "A list of edges."
  edges: [PullRequestReviewThreadEdge]
  "A list of nodes."
  nodes: [PullRequestReviewThread]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PullRequestReviewThreadEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PullRequestReviewThread
}

"The possible states of a pull request review comment."
enum PullRequestReviewCommentState {
  "A comment that is part of a pending review"
  PENDING
  "A comment that is part of a submitted review"
  SUBMITTED
}

"The possible PubSub channels for a pull request."
enum PullRequestPubSubTopic {
  "The channel ID for observing pull request updates."
  UPDATED
  "The channel ID for marking an pull request as read."
  MARKASREAD
  "The channel ID for observing head ref updates."
  HEAD_REF
  "The channel ID for updating items on the pull request timeline."
  TIMELINE
  "The channel ID for observing pull request state updates."
  STATE
}

"The connection type for IssueComment."
type IssueCommentConnection {
  "A list of edges."
  edges: [IssueCommentEdge]
  "A list of nodes."
  nodes: [IssueComment]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type IssueCommentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: IssueComment
}

"The connection type for PullRequestReview."
type PullRequestReviewConnection {
  "A list of edges."
  edges: [PullRequestReviewEdge]
  "A list of nodes."
  nodes: [PullRequestReview]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PullRequestReviewEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PullRequestReview
}

"The connection type for PullRequestCommit."
type PullRequestCommitConnection {
  "A list of edges."
  edges: [PullRequestCommitEdge]
  "A list of nodes."
  nodes: [PullRequestCommit]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PullRequestCommitEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PullRequestCommit
}

"The connection type for ReviewRequest."
type ReviewRequestConnection {
  "A list of edges."
  edges: [ReviewRequestEdge]
  "A list of nodes."
  nodes: [ReviewRequest]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ReviewRequestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ReviewRequest
}

"A request for a user to review a pull request."
type ReviewRequest implements Node {
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "Identifies the pull request associated with this review request."
  pullRequest: PullRequest!
  "The reviewer that is requested."
  requestedReviewer: RequestedReviewer
}

"Types that can be requested reviewers."
union RequestedReviewer = User | Team | Mannequin

"The connection type for PullRequestTimelineItem."
type PullRequestTimelineConnection {
  "A list of edges."
  edges: [PullRequestTimelineItemEdge]
  "A list of nodes."
  nodes: [PullRequestTimelineItem]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PullRequestTimelineItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PullRequestTimelineItem
}

"An item in an pull request timeline"
union PullRequestTimelineItem = Commit | CommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestReviewComment | IssueComment | ClosedEvent | ReopenedEvent | SubscribedEvent | UnsubscribedEvent | MergedEvent | ReferencedEvent | CrossReferencedEvent | AssignedEvent | UnassignedEvent | LabeledEvent | UnlabeledEvent | MilestonedEvent | DemilestonedEvent | RenamedTitleEvent | LockedEvent | UnlockedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | HeadRefDeletedEvent | HeadRefRestoredEvent | HeadRefForcePushedEvent | BaseRefForcePushedEvent | ReviewRequestedEvent | ReviewRequestRemovedEvent | ReviewDismissedEvent | UserBlockedEvent

"A thread of comments on a commit."
type CommitCommentThread implements Node & RepositoryNode {
  "The comments that exist in this thread."
  comments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): CommitCommentConnection!
  "The commit the comments were made on."
  commit: Commit!
  id: ID!
  "The file the comments were made on."
  path: String
  "The position in the diff for the commit that the comment was made on."
  position: Int
  "The repository associated with this node."
  repository: Repository!
}

"Used for return value of Repository.issueOrPullRequest."
union IssueOrPullRequest = Issue | PullRequest

"Represents a 'closed' event on any `Closable`."
type ClosedEvent implements Node & UniformResourceLocatable {
  "Identifies the actor who performed the event."
  actor: Actor
  "Object that was closed."
  closable: Closable!
  "Object which triggered the creation of this event."
  closer: Closer
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "The HTTP path for this closed event."
  resourcePath: URI!
  "The HTTP URL for this closed event."
  url: URI!
}

"The object which triggered a `ClosedEvent`."
union Closer = Commit | PullRequest

"Represents a 'reopened' event on any `Closable`."
type ReopenedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Object that was reopened."
  closable: Closable!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
}

"Represents a 'subscribed' event on a given `Subscribable`."
type SubscribedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Object referenced by event."
  subscribable: Subscribable!
}

"Represents an 'unsubscribed' event on a given `Subscribable`."
type UnsubscribedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Object referenced by event."
  subscribable: Subscribable!
}

"Represents a 'merged' event on a given pull request."
type MergedEvent implements Node & UniformResourceLocatable {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the commit associated with the `merge` event."
  commit: Commit
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Identifies the Ref associated with the `merge` event."
  mergeRef: Ref
  "Identifies the name of the Ref associated with the `merge` event."
  mergeRefName: String!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
  "The HTTP path for this merged event."
  resourcePath: URI!
  "The HTTP URL for this merged event."
  url: URI!
}

"Represents a 'referenced' event on a given `ReferencedSubject`."
type ReferencedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the commit associated with the 'referenced' event."
  commit: Commit
  "Identifies the repository associated with the 'referenced' event."
  commitRepository: Repository!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Reference originated in a different repository."
  isCrossRepository: Boolean!
  "Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference."
  isDirectReference: Boolean!
  "Object referenced by event."
  subject: ReferencedSubject!
}

"Any referencable object"
union ReferencedSubject = Issue | PullRequest

"Represents a mention made by one issue or pull request to another."
type CrossReferencedEvent implements Node & UniformResourceLocatable {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Reference originated in a different repository."
  isCrossRepository: Boolean!
  "Identifies when the reference was made."
  referencedAt: DateTime!
  "The HTTP path for this pull request."
  resourcePath: URI!
  "Issue or pull request that made the reference."
  source: ReferencedSubject!
  "Issue or pull request to which the reference was made."
  target: ReferencedSubject!
  "The HTTP URL for this pull request."
  url: URI!
  "Checks if the target will be closed when the source is merged."
  willCloseTarget: Boolean!
}

"Represents an 'assigned' event on any assignable object."
type AssignedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the assignable associated with the event."
  assignable: Assignable!
  "Identifies the user or mannequin that was assigned."
  assignee: Assignee
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Identifies the user who was assigned."
  user: User
}

"Types that can be assigned to issues."
union Assignee = Bot | Mannequin | Organization | User

"Represents an 'unassigned' event on any assignable object."
type UnassignedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the assignable associated with the event."
  assignable: Assignable!
  "Identifies the user or mannequin that was unassigned."
  assignee: Assignee
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Identifies the subject (user) who was unassigned."
  user: User
}

"Represents a 'labeled' event on a given issue or pull request."
type LabeledEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Identifies the label associated with the 'labeled' event."
  label: Label!
  "Identifies the `Labelable` associated with the event."
  labelable: Labelable!
}

"Represents an 'unlabeled' event on a given issue or pull request."
type UnlabeledEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Identifies the label associated with the 'unlabeled' event."
  label: Label!
  "Identifies the `Labelable` associated with the event."
  labelable: Labelable!
}

"Represents a 'milestoned' event on a given issue or pull request."
type MilestonedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Identifies the milestone title associated with the 'milestoned' event."
  milestoneTitle: String!
  "Object referenced by event."
  subject: MilestoneItem!
}

"Types that can be inside a Milestone."
union MilestoneItem = Issue | PullRequest

"Represents a 'demilestoned' event on a given issue or pull request."
type DemilestonedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Identifies the milestone title associated with the 'demilestoned' event."
  milestoneTitle: String!
  "Object referenced by event."
  subject: MilestoneItem!
}

"Represents a 'renamed' event on a given issue or pull request"
type RenamedTitleEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the current title of the issue or pull request."
  currentTitle: String!
  id: ID!
  "Identifies the previous title of the issue or pull request."
  previousTitle: String!
  "Subject that was renamed."
  subject: RenamedTitleSubject!
}

"An object which has a renamable title"
union RenamedTitleSubject = Issue | PullRequest

"Represents a 'locked' event on a given issue or pull request."
type LockedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Reason that the conversation was locked (optional)."
  lockReason: LockReason
  "Object that was locked."
  lockable: Lockable!
}

"Represents an 'unlocked' event on a given issue or pull request."
type UnlockedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Object that was unlocked."
  lockable: Lockable!
}

"Represents a 'deployed' event on a given pull request."
type DeployedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "The deployment associated with the 'deployed' event."
  deployment: Deployment!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
  "The ref associated with the 'deployed' event."
  ref: Ref
}

"Represents a 'deployment_environment_changed' event on a given pull request."
type DeploymentEnvironmentChangedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The deployment status that updated the deployment environment."
  deploymentStatus: DeploymentStatus!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
}

"Represents a 'head_ref_deleted' event on a given pull request."
type HeadRefDeletedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the Ref associated with the `head_ref_deleted` event."
  headRef: Ref
  "Identifies the name of the Ref associated with the `head_ref_deleted` event."
  headRefName: String!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
}

"Represents a 'head_ref_restored' event on a given pull request."
type HeadRefRestoredEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
}

"Represents a 'head_ref_force_pushed' event on a given pull request."
type HeadRefForcePushedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the after commit SHA for the 'head_ref_force_pushed' event."
  afterCommit: Commit
  "Identifies the before commit SHA for the 'head_ref_force_pushed' event."
  beforeCommit: Commit
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
  "Identifies the fully qualified ref name for the 'head_ref_force_pushed' event."
  ref: Ref
}

"Represents a 'base_ref_force_pushed' event on a given pull request."
type BaseRefForcePushedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the after commit SHA for the 'base_ref_force_pushed' event."
  afterCommit: Commit
  "Identifies the before commit SHA for the 'base_ref_force_pushed' event."
  beforeCommit: Commit
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
  "Identifies the fully qualified ref name for the 'base_ref_force_pushed' event."
  ref: Ref
}

"Represents an 'review_requested' event on a given pull request."
type ReviewRequestedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
  "Identifies the reviewer whose review was requested."
  requestedReviewer: RequestedReviewer
}

"Represents an 'review_request_removed' event on a given pull request."
type ReviewRequestRemovedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
  "Identifies the reviewer whose review request was removed."
  requestedReviewer: RequestedReviewer
}

"Represents a 'review_dismissed' event on a given issue or pull request."
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "Identifies the optional message associated with the 'review_dismissed' event."
  dismissalMessage: String
  "Identifies the optional message associated with the event, rendered to HTML."
  dismissalMessageHTML: String
  id: ID!
  "Identifies the previous state of the review with the 'review_dismissed' event."
  previousReviewState: PullRequestReviewState!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
  "Identifies the commit which caused the review to become stale."
  pullRequestCommit: PullRequestCommit
  "The HTTP path for this review dismissed event."
  resourcePath: URI!
  "Identifies the review associated with the 'review_dismissed' event."
  review: PullRequestReview
  "The HTTP URL for this review dismissed event."
  url: URI!
}

"Represents a 'user_blocked' event on a given user."
type UserBlockedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Number of days that the user was blocked for."
  blockDuration: UserBlockDuration!
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "The user who was blocked."
  subject: User
}

"The possible durations that a user can be blocked for."
enum UserBlockDuration {
  "The user was blocked for 1 day"
  ONE_DAY
  "The user was blocked for 3 days"
  THREE_DAYS
  "The user was blocked for 7 days"
  ONE_WEEK
  "The user was blocked for 30 days"
  ONE_MONTH
  "The user was blocked permanently"
  PERMANENT
}

"The connection type for PullRequestTimelineItems."
type PullRequestTimelineItemsConnection {
  "A list of edges."
  edges: [PullRequestTimelineItemsEdge]
  "Identifies the count of items after applying `before` and `after` filters."
  filteredCount: Int!
  "A list of nodes."
  nodes: [PullRequestTimelineItems]
  "Identifies the count of items after applying `before`\/`after` filters and `first`\/`last`\/`skip` slicing."
  pageCount: Int!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
  "Identifies the date and time when the timeline was last updated."
  updatedAt: DateTime!
}

"An edge in a connection."
type PullRequestTimelineItemsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PullRequestTimelineItems
}

"An item in a pull request timeline"
union PullRequestTimelineItems = PullRequestCommit | PullRequestCommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestRevisionMarker | BaseRefChangedEvent | BaseRefForcePushedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | MergedEvent | ReviewDismissedEvent | ReviewRequestedEvent | ReviewRequestRemovedEvent | ReadyForReviewEvent | IssueComment | CrossReferencedEvent | AddedToProjectEvent | AssignedEvent | ClosedEvent | CommentDeletedEvent | ConvertedNoteToIssueEvent | DemilestonedEvent | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | ReferencedEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UserBlockedEvent | UnpinnedEvent | UnsubscribedEvent

"Represents a commit comment thread part of a pull request."
type PullRequestCommitCommentThread implements Node & RepositoryNode {
  "The comments that exist in this thread."
  comments("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): CommitCommentConnection!
  "The commit the comments were made on."
  commit: Commit!
  id: ID!
  "The file the comments were made on."
  path: String
  "The position in the diff for the commit that the comment was made on."
  position: Int
  "The pull request this commit comment thread belongs to"
  pullRequest: PullRequest!
  "The repository associated with this node."
  repository: Repository!
}

"Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits."
type PullRequestRevisionMarker {
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The last commit the viewer has seen."
  lastSeenCommit: Commit!
  "The pull request to which the marker belongs."
  pullRequest: PullRequest!
}

"Represents a 'base_ref_changed' event on a given issue or pull request."
type BaseRefChangedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'ready_for_review' event on a given pull request."
type ReadyForReviewEvent implements Node & UniformResourceLocatable {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: PullRequest!
  "The HTTP path for this ready for review event."
  resourcePath: URI!
  "The HTTP URL for this ready for review event."
  url: URI!
}

"Represents a 'added_to_project' event on a given issue or pull request."
type AddedToProjectEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'comment_deleted' event on a given issue or pull request."
type CommentDeletedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'converted_note_to_issue' event on a given issue or pull request."
type ConvertedNoteToIssueEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'marked_as_duplicate' event on a given issue or pull request."
type MarkedAsDuplicateEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
}

"Represents a 'mentioned' event on a given issue or pull request."
type MentionedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'moved_columns_in_project' event on a given issue or pull request."
type MovedColumnsInProjectEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'pinned' event on a given issue or pull request."
type PinnedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Identifies the issue associated with the event."
  issue: Issue!
}

"Represents a 'removed_from_project' event on a given issue or pull request."
type RemovedFromProjectEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'transferred' event on a given issue or pull request."
type TransferredEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  "The repository this came from"
  fromRepository: Repository
  id: ID!
  "Identifies the issue associated with the event."
  issue: Issue!
}

"Represents an 'unpinned' event on a given issue or pull request."
type UnpinnedEvent implements Node {
  "Identifies the actor who performed the event."
  actor: Actor
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "Identifies the issue associated with the event."
  issue: Issue!
}

"The possible item types found in a timeline."
enum PullRequestTimelineItemsItemType {
  "Represents a Git commit part of a pull request."
  PULL_REQUEST_COMMIT
  "Represents a commit comment thread part of a pull request."
  PULL_REQUEST_COMMIT_COMMENT_THREAD
  "A review object for a given pull request."
  PULL_REQUEST_REVIEW
  "A threaded list of comments for a given pull request."
  PULL_REQUEST_REVIEW_THREAD
  "Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits."
  PULL_REQUEST_REVISION_MARKER
  "Represents a 'base_ref_changed' event on a given issue or pull request."
  BASE_REF_CHANGED_EVENT
  "Represents a 'base_ref_force_pushed' event on a given pull request."
  BASE_REF_FORCE_PUSHED_EVENT
  "Represents a 'deployed' event on a given pull request."
  DEPLOYED_EVENT
  "Represents a 'deployment_environment_changed' event on a given pull request."
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
  "Represents a 'head_ref_deleted' event on a given pull request."
  HEAD_REF_DELETED_EVENT
  "Represents a 'head_ref_force_pushed' event on a given pull request."
  HEAD_REF_FORCE_PUSHED_EVENT
  "Represents a 'head_ref_restored' event on a given pull request."
  HEAD_REF_RESTORED_EVENT
  "Represents a 'merged' event on a given pull request."
  MERGED_EVENT
  "Represents a 'review_dismissed' event on a given issue or pull request."
  REVIEW_DISMISSED_EVENT
  "Represents an 'review_requested' event on a given pull request."
  REVIEW_REQUESTED_EVENT
  "Represents an 'review_request_removed' event on a given pull request."
  REVIEW_REQUEST_REMOVED_EVENT
  "Represents a 'ready_for_review' event on a given pull request."
  READY_FOR_REVIEW_EVENT
  "Represents a comment on an Issue."
  ISSUE_COMMENT
  "Represents a mention made by one issue or pull request to another."
  CROSS_REFERENCED_EVENT
  "Represents a 'added_to_project' event on a given issue or pull request."
  ADDED_TO_PROJECT_EVENT
  "Represents an 'assigned' event on any assignable object."
  ASSIGNED_EVENT
  "Represents a 'closed' event on any `Closable`."
  CLOSED_EVENT
  "Represents a 'comment_deleted' event on a given issue or pull request."
  COMMENT_DELETED_EVENT
  "Represents a 'converted_note_to_issue' event on a given issue or pull request."
  CONVERTED_NOTE_TO_ISSUE_EVENT
  "Represents a 'demilestoned' event on a given issue or pull request."
  DEMILESTONED_EVENT
  "Represents a 'labeled' event on a given issue or pull request."
  LABELED_EVENT
  "Represents a 'locked' event on a given issue or pull request."
  LOCKED_EVENT
  "Represents a 'marked_as_duplicate' event on a given issue or pull request."
  MARKED_AS_DUPLICATE_EVENT
  "Represents a 'mentioned' event on a given issue or pull request."
  MENTIONED_EVENT
  "Represents a 'milestoned' event on a given issue or pull request."
  MILESTONED_EVENT
  "Represents a 'moved_columns_in_project' event on a given issue or pull request."
  MOVED_COLUMNS_IN_PROJECT_EVENT
  "Represents a 'pinned' event on a given issue or pull request."
  PINNED_EVENT
  "Represents a 'referenced' event on a given `ReferencedSubject`."
  REFERENCED_EVENT
  "Represents a 'removed_from_project' event on a given issue or pull request."
  REMOVED_FROM_PROJECT_EVENT
  "Represents a 'renamed' event on a given issue or pull request"
  RENAMED_TITLE_EVENT
  "Represents a 'reopened' event on any `Closable`."
  REOPENED_EVENT
  "Represents a 'subscribed' event on a given `Subscribable`."
  SUBSCRIBED_EVENT
  "Represents a 'transferred' event on a given issue or pull request."
  TRANSFERRED_EVENT
  "Represents an 'unassigned' event on any assignable object."
  UNASSIGNED_EVENT
  "Represents an 'unlabeled' event on a given issue or pull request."
  UNLABELED_EVENT
  "Represents an 'unlocked' event on a given issue or pull request."
  UNLOCKED_EVENT
  "Represents a 'user_blocked' event on a given user."
  USER_BLOCKED_EVENT
  "Represents an 'unpinned' event on a given issue or pull request."
  UNPINNED_EVENT
  "Represents an 'unsubscribed' event on a given `Subscribable`."
  UNSUBSCRIBED_EVENT
}

"A suggestion to review a pull request based on a user's commit history and review comments."
type SuggestedReviewer {
  "Is this suggestion based on past commits?"
  isAuthor: Boolean!
  "Is this suggestion based on past review comments?"
  isCommenter: Boolean!
  "Identifies the user suggested to review the pull request."
  reviewer: User!
}

"The possible archived states of a project card."
enum ProjectCardArchivedState {
  "A project card that is archived"
  ARCHIVED
  "A project card that is not archived"
  NOT_ARCHIVED
}

"Detail needed to display a hovercard for a user"
type Hovercard {
  "Each of the contexts for this hovercard"
  contexts: [HovercardContext!]!
}

"An individual line of a hovercard"
interface HovercardContext {
  "A string describing this context"
  message: String!
  "An octicon to accompany this context"
  octicon: String!
}

"The connection type for IssueTimelineItem."
type IssueTimelineConnection {
  "A list of edges."
  edges: [IssueTimelineItemEdge]
  "A list of nodes."
  nodes: [IssueTimelineItem]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type IssueTimelineItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: IssueTimelineItem
}

"An item in an issue timeline"
union IssueTimelineItem = Commit | IssueComment | CrossReferencedEvent | ClosedEvent | ReopenedEvent | SubscribedEvent | UnsubscribedEvent | ReferencedEvent | AssignedEvent | UnassignedEvent | LabeledEvent | UnlabeledEvent | UserBlockedEvent | MilestonedEvent | DemilestonedEvent | RenamedTitleEvent | LockedEvent | UnlockedEvent | TransferredEvent

"The connection type for IssueTimelineItems."
type IssueTimelineItemsConnection {
  "A list of edges."
  edges: [IssueTimelineItemsEdge]
  "Identifies the count of items after applying `before` and `after` filters."
  filteredCount: Int!
  "A list of nodes."
  nodes: [IssueTimelineItems]
  "Identifies the count of items after applying `before`\/`after` filters and `first`\/`last`\/`skip` slicing."
  pageCount: Int!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
  "Identifies the date and time when the timeline was last updated."
  updatedAt: DateTime!
}

"An edge in a connection."
type IssueTimelineItemsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: IssueTimelineItems
}

"An item in an issue timeline"
union IssueTimelineItems = IssueComment | CrossReferencedEvent | AddedToProjectEvent | AssignedEvent | ClosedEvent | CommentDeletedEvent | ConvertedNoteToIssueEvent | DemilestonedEvent | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | ReferencedEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UserBlockedEvent | UnpinnedEvent | UnsubscribedEvent

"The possible item types found in a timeline."
enum IssueTimelineItemsItemType {
  "Represents a comment on an Issue."
  ISSUE_COMMENT
  "Represents a mention made by one issue or pull request to another."
  CROSS_REFERENCED_EVENT
  "Represents a 'added_to_project' event on a given issue or pull request."
  ADDED_TO_PROJECT_EVENT
  "Represents an 'assigned' event on any assignable object."
  ASSIGNED_EVENT
  "Represents a 'closed' event on any `Closable`."
  CLOSED_EVENT
  "Represents a 'comment_deleted' event on a given issue or pull request."
  COMMENT_DELETED_EVENT
  "Represents a 'converted_note_to_issue' event on a given issue or pull request."
  CONVERTED_NOTE_TO_ISSUE_EVENT
  "Represents a 'demilestoned' event on a given issue or pull request."
  DEMILESTONED_EVENT
  "Represents a 'labeled' event on a given issue or pull request."
  LABELED_EVENT
  "Represents a 'locked' event on a given issue or pull request."
  LOCKED_EVENT
  "Represents a 'marked_as_duplicate' event on a given issue or pull request."
  MARKED_AS_DUPLICATE_EVENT
  "Represents a 'mentioned' event on a given issue or pull request."
  MENTIONED_EVENT
  "Represents a 'milestoned' event on a given issue or pull request."
  MILESTONED_EVENT
  "Represents a 'moved_columns_in_project' event on a given issue or pull request."
  MOVED_COLUMNS_IN_PROJECT_EVENT
  "Represents a 'pinned' event on a given issue or pull request."
  PINNED_EVENT
  "Represents a 'referenced' event on a given `ReferencedSubject`."
  REFERENCED_EVENT
  "Represents a 'removed_from_project' event on a given issue or pull request."
  REMOVED_FROM_PROJECT_EVENT
  "Represents a 'renamed' event on a given issue or pull request"
  RENAMED_TITLE_EVENT
  "Represents a 'reopened' event on any `Closable`."
  REOPENED_EVENT
  "Represents a 'subscribed' event on a given `Subscribable`."
  SUBSCRIBED_EVENT
  "Represents a 'transferred' event on a given issue or pull request."
  TRANSFERRED_EVENT
  "Represents an 'unassigned' event on any assignable object."
  UNASSIGNED_EVENT
  "Represents an 'unlabeled' event on a given issue or pull request."
  UNLABELED_EVENT
  "Represents an 'unlocked' event on a given issue or pull request."
  UNLOCKED_EVENT
  "Represents a 'user_blocked' event on a given user."
  USER_BLOCKED_EVENT
  "Represents an 'unpinned' event on a given issue or pull request."
  UNPINNED_EVENT
  "Represents an 'unsubscribed' event on a given `Subscribable`."
  UNSUBSCRIBED_EVENT
}

"Collaborators affiliation level with a subject."
enum CollaboratorAffiliation {
  "All outside collaborators of an organization-owned subject."
  OUTSIDE
  "All collaborators with permissions to an organization-owned subject, regardless of organization membership status."
  DIRECT
  "All collaborators the authenticated user can see."
  ALL
}

"The connection type for DeployKey."
type DeployKeyConnection {
  "A list of edges."
  edges: [DeployKeyEdge]
  "A list of nodes."
  nodes: [DeployKey]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type DeployKeyEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DeployKey
}

"A repository deploy key."
type DeployKey implements Node {
  "Identifies the date and time when the object was created."
  createdAt: DateTime!
  id: ID!
  "The deploy key."
  key: String!
  "Whether or not the deploy key is read only."
  readOnly: Boolean!
  "The deploy key title."
  title: String!
  "Whether or not the deploy key has been verified."
  verified: Boolean!
}

"The affiliation type between collaborator and repository."
enum RepositoryCollaboratorAffiliation {
  "All collaborators of the repository."
  ALL
  "All outside collaborators of an organization-owned repository."
  OUTSIDE
}

"The connection type for BranchProtectionRule."
type BranchProtectionRuleConnection {
  "A list of edges."
  edges: [BranchProtectionRuleEdge]
  "A list of nodes."
  nodes: [BranchProtectionRule]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type BranchProtectionRuleEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BranchProtectionRule
}

"A branch protection rule."
type BranchProtectionRule implements Node {
  "A list of conflicts matching branches protection rule and other branch protection rules"
  branchProtectionRuleConflicts("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): BranchProtectionRuleConflictConnection!
  "The actor who created this branch protection rule."
  creator: Actor
  "Identifies the primary key from the database."
  databaseId: Int
  "Will new commits pushed to matching branches dismiss pull request review approvals."
  dismissesStaleReviews: Boolean!
  id: ID!
  "Can admins overwrite branch protection."
  isAdminEnforced: Boolean!
  "Repository refs that are protected by this rule"
  matchingRefs("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): RefConnection!
  "Identifies the protection rule pattern."
  pattern: String!
  "A list push allowances for this branch protection rule."
  pushAllowances("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): PushAllowanceConnection!
  "The repository associated with this branch protection rule."
  repository: Repository
  "Number of approving reviews required to update matching branches."
  requiredApprovingReviewCount: Int
  "List of required status check contexts that must pass for commits to be accepted to matching branches."
  requiredStatusCheckContexts: [String]
  "Are approving reviews required to update matching branches."
  requiresApprovingReviews: Boolean!
  "Are reviews from code owners required to update matching branches."
  requiresCodeOwnerReviews: Boolean!
  "Are commits required to be signed."
  requiresCommitSignatures: Boolean!
  "Are status checks required to update matching branches."
  requiresStatusChecks: Boolean!
  "Are branches required to be up to date before merging."
  requiresStrictStatusChecks: Boolean!
  "Is pushing to matching branches restricted."
  restrictsPushes: Boolean!
  "Is dismissal of pull request reviews restricted."
  restrictsReviewDismissals: Boolean!
  "A list review dismissal allowances for this branch protection rule."
  reviewDismissalAllowances("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): ReviewDismissalAllowanceConnection!
}

"The connection type for ReviewDismissalAllowance."
type ReviewDismissalAllowanceConnection {
  "A list of edges."
  edges: [ReviewDismissalAllowanceEdge]
  "A list of nodes."
  nodes: [ReviewDismissalAllowance]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ReviewDismissalAllowanceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ReviewDismissalAllowance
}

"A team or user who has the ability to dismiss a review on a protected branch."
type ReviewDismissalAllowance implements Node {
  "The actor that can dismiss."
  actor: ReviewDismissalAllowanceActor
  "Identifies the branch protection rule associated with the allowed user or team."
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

"Types that can be an actor."
union ReviewDismissalAllowanceActor = User | Team

"The connection type for PushAllowance."
type PushAllowanceConnection {
  "A list of edges."
  edges: [PushAllowanceEdge]
  "A list of nodes."
  nodes: [PushAllowance]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PushAllowanceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PushAllowance
}

"A team, user or app who has the ability to push to a protected branch."
type PushAllowance implements Node {
  "The actor that can push."
  actor: PushAllowanceActor
  "Identifies the branch protection rule associated with the allowed user or team."
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

"Types that can be an actor."
union PushAllowanceActor = User | Team | App

"The connection type for Ref."
type RefConnection {
  "A list of edges."
  edges: [RefEdge]
  "A list of nodes."
  nodes: [Ref]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type RefEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Ref
}

"The connection type for BranchProtectionRuleConflict."
type BranchProtectionRuleConflictConnection {
  "A list of edges."
  edges: [BranchProtectionRuleConflictEdge]
  "A list of nodes."
  nodes: [BranchProtectionRuleConflict]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type BranchProtectionRuleConflictEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BranchProtectionRuleConflict
}

"A conflict between two branch protection rules."
type BranchProtectionRuleConflict {
  "Identifies the branch protection rule."
  branchProtectionRule: BranchProtectionRule
  "Identifies the conflicting branch protection rule."
  conflictingBranchProtectionRule: BranchProtectionRule
  "Identifies the branch ref that has conflicting rules"
  ref: Ref
}

"The connection type for Milestone."
type MilestoneConnection {
  "A list of edges."
  edges: [MilestoneEdge]
  "A list of nodes."
  nodes: [Milestone]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type MilestoneEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Milestone
}

"Ordering options for milestone connections."
input MilestoneOrder {
  "The field to order milestones by."
  field: MilestoneOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which milestone connections can be ordered."
enum MilestoneOrderField {
  "Order milestones by when they are due."
  DUE_DATE
  "Order milestones by when they were created."
  CREATED_AT
  "Order milestones by when they were last updated."
  UPDATED_AT
  "Order milestones by their number."
  NUMBER
}

"The Code of Conduct for a repository"
type CodeOfConduct implements Node {
  "The body of the Code of Conduct"
  body: String
  id: ID!
  "The key for the Code of Conduct"
  key: String!
  "The formal name of the Code of Conduct"
  name: String!
  "The HTTP path for this Code of Conduct"
  resourcePath: URI
  "The HTTP URL for this Code of Conduct"
  url: URI
}

"The connection type for User."
type RepositoryCollaboratorConnection {
  "A list of edges."
  edges: [RepositoryCollaboratorEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user who is a collaborator of a repository."
type RepositoryCollaboratorEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: User!
  "The permission the user has on the repository."
  permission: RepositoryPermission!
  "A list of sources for the user's access to the repository."
  permissionSources: [PermissionSource!]
}

"A level of permission and source for a user's access to a repository."
type PermissionSource {
  "The organization the repository belongs to."
  organization: Organization!
  "The level of access this source has granted to the user."
  permission: DefaultRepositoryPermissionField!
  "The source of this permission."
  source: PermissionGranter!
}

"Types that can grant permissions on a repository to a user"
union PermissionGranter = Organization | Repository | Team

"Ordering options for language connections."
input LanguageOrder {
  "The field to order languages by."
  field: LanguageOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which language connections can be ordered."
enum LanguageOrderField {
  "Order languages by the size of all files containing the language"
  SIZE
}

"Ways in which lists of git refs can be ordered upon return."
input RefOrder {
  "The field in which to order refs by."
  field: RefOrderField!
  "The direction in which to order refs by the specified field."
  direction: OrderDirection!
}

"Properties by which ref connections can be ordered."
enum RefOrderField {
  "Order refs by underlying commit date if the ref prefix is refs\/tags\/"
  TAG_COMMIT_DATE
  "Order refs by their alphanumeric name"
  ALPHABETICAL
}

"A GitHub Security Advisory"
type SecurityAdvisory implements Node {
  "Identifies the primary key from the database."
  databaseId: Int
  "This is a long plaintext description of the advisory"
  description: String!
  "The GitHub Security Advisory ID"
  ghsaId: String!
  id: ID!
  "A list of identifiers for this advisory"
  identifiers: [SecurityAdvisoryIdentifier!]!
  "The organization that originated the advisory"
  origin: String!
  "When the advisory was published"
  publishedAt: DateTime!
  "A list of references for this advisory"
  references: [SecurityAdvisoryReference!]!
  "The severity of the advisory"
  severity: SecurityAdvisorySeverity!
  "A short plaintext summary of the advisory"
  summary: String!
  "When the advisory was last updated"
  updatedAt: DateTime!
  "Vulnerabilities associated with this Advisory"
  vulnerabilities("Ordering options for the returned topics." orderBy: SecurityVulnerabilityOrder = { field: UPDATED_AT, direction: DESC } "An ecosystem to filter vulnerabilities by." ecosystem: SecurityAdvisoryEcosystem "A package name to filter vulnerabilities by." package: String "A list of severities to filter vulnerabilities by." severities: [SecurityAdvisorySeverity!] "Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): SecurityVulnerabilityConnection!
  "When the advisory was withdrawn, if it has been withdrawn"
  withdrawnAt: DateTime
}

"Severity of the vulnerability."
enum SecurityAdvisorySeverity {
  "Low."
  LOW
  "Moderate."
  MODERATE
  "High."
  HIGH
  "Critical."
  CRITICAL
}

"A GitHub Security Advisory Identifier"
type SecurityAdvisoryIdentifier {
  "The identifier type, e.g. GHSA, CVE"
  type: String!
  "The identifier"
  value: String!
}

"A GitHub Security Advisory Reference"
type SecurityAdvisoryReference {
  "A publicly accessible reference"
  url: URI!
}

"The connection type for SecurityVulnerability."
type SecurityVulnerabilityConnection {
  "A list of edges."
  edges: [SecurityVulnerabilityEdge]
  "A list of nodes."
  nodes: [SecurityVulnerability]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type SecurityVulnerabilityEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SecurityVulnerability
}

"An individual vulnerability within an Advisory"
type SecurityVulnerability {
  "The Advisory associated with this Vulnerability"
  advisory: SecurityAdvisory!
  "The first version containing a fix for the vulnerability"
  firstPatchedVersion: SecurityAdvisoryPackageVersion
  "A description of the vulnerable package"
  package: SecurityAdvisoryPackage!
  "The severity of the vulnerability within this package"
  severity: SecurityAdvisorySeverity!
  "When the vulnerability was last updated"
  updatedAt: DateTime!
  "A string that describes the vulnerable package versions.\nThis string follows a basic syntax with a few forms.\n+ `= 0.2.0` denotes a single vulnerable version.\n+ `<= 1.0.8` denotes a version range up to and including the specified version\n+ `< 0.1.11` denotes a version range up to, but excluding, the specified version\n+ `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.\n+ `>= 0.0.1` denotes a version range with a known minimum, but no known maximum\n"
  vulnerableVersionRange: String!
}

"An individual package"
type SecurityAdvisoryPackage {
  "The ecosystem the package belongs to, e.g. RUBYGEMS, NPM"
  ecosystem: SecurityAdvisoryEcosystem!
  "The package name"
  name: String!
}

"The possible ecosystems of a security vulnerability's package."
enum SecurityAdvisoryEcosystem {
  "Ruby gems hosted at RubyGems.org"
  RUBYGEMS
  "JavaScript packages hosted at npmjs.com"
  NPM
  "Python packages hosted at PyPI.org"
  PIP
  "Java artifacts hosted at the Maven central repository"
  MAVEN
  ".NET packages hosted at the NuGet Gallery"
  NUGET
  "PHP packages hosted at packagist.org"
  COMPOSER
}

"An individual package version"
type SecurityAdvisoryPackageVersion {
  "The package name or version"
  identifier: String!
}

"Ordering options for security vulnerability connections"
input SecurityVulnerabilityOrder {
  "The field to order security vulnerabilities by."
  field: SecurityVulnerabilityOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which security vulnerability connections can be ordered."
enum SecurityVulnerabilityOrderField {
  "Order vulnerability by update time"
  UPDATED_AT
}

"Git SSH string"
scalar GitSSHRemote

"Represents a single registry metadatum"
input RegistryPackageMetadatum {
  "Name of the metadatum."
  name: String!
  "Value of the metadatum."
  value: String!
  "True, if the metadatum can be updated if it already exists"
  update: Boolean
}

"Represents a object that contains package activity statistics such as downloads."
type RegistryPackageStatistics {
  "Number of times the package was downloaded this month."
  downloadsThisMonth: Int!
  "Number of times the package was downloaded this week."
  downloadsThisWeek: Int!
  "Number of times the package was downloaded this year."
  downloadsThisYear: Int!
  "Number of times the package was downloaded today."
  downloadsToday: Int!
  "Number of times the package was downloaded since it was created."
  downloadsTotalCount: Int!
}

"The connection type for Topic."
type TopicConnection {
  "A list of edges."
  edges: [TopicEdge]
  "A list of nodes."
  nodes: [Topic]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type TopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Topic
}

"The connection type for RegistryPackageTag."
type RegistryPackageTagConnection {
  "A list of edges."
  edges: [RegistryPackageTagEdge]
  "A list of nodes."
  nodes: [RegistryPackageTag]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type RegistryPackageTagEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RegistryPackageTag
}

"A version tag contains the mapping between a tag name and a version."
type RegistryPackageTag implements Node {
  id: ID!
  "Identifies the tag name of the version."
  name: String!
  "version that the tag is associated with"
  version: RegistryPackageVersion
}

"A contributions collection aggregates contributions such as opened issues and commits created by a user."
type ContributionsCollection {
  "Commit contributions made by the user, grouped by repository."
  commitContributionsByRepository("How many repositories should be included." maxRepositories: Int = 25): [CommitContributionsByRepository!]!
  "A calendar of this user's contributions on GitHub."
  contributionCalendar: ContributionCalendar!
  "The years the user has been making contributions with the most recent year first."
  contributionYears: [Int!]!
  "Determine if this collection's time span ends in the current month.\n"
  doesEndInCurrentMonth: Boolean!
  "The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts."
  earliestRestrictedContributionDate: Date
  "The ending date and time of this collection."
  endedAt: DateTime!
  "The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned."
  firstIssueContribution: CreatedIssueOrRestrictedContribution
  "The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned."
  firstPullRequestContribution: CreatedPullRequestOrRestrictedContribution
  "The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned."
  firstRepositoryContribution: CreatedRepositoryOrRestrictedContribution
  "Does the user have any more activity in the timeline that occurred prior to the collection's time range?"
  hasActivityInThePast: Boolean!
  "Determine if there are any contributions in this collection."
  hasAnyContributions: Boolean!
  "Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts."
  hasAnyRestrictedContributions: Boolean!
  "Whether or not the collector's time span is all within the same day."
  isSingleDay: Boolean!
  "A list of issues the user opened."
  issueContributions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Should the user's first issue ever be excluded from the result." excludeFirst: Boolean = false "Should the user's most commented issue be excluded from the result." excludePopular: Boolean = false "Ordering options for contributions returned from the connection." orderBy: ContributionOrder = { field: OCCURRED_AT, direction: DESC }): CreatedIssueContributionConnection!
  "Issue contributions made by the user, grouped by repository."
  issueContributionsByRepository("How many repositories should be included." maxRepositories: Int = 25 "Should the user's first issue ever be excluded from the result." excludeFirst: Boolean = false "Should the user's most commented issue be excluded from the result." excludePopular: Boolean = false): [IssueContributionsByRepository!]!
  "When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false."
  joinedGitHubContribution: JoinedGitHubContribution
  "The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts."
  latestRestrictedContributionDate: Date
  "When this collection's time range does not include any activity from the user, use this\nto get a different collection from an earlier time range that does have activity.\n"
  mostRecentCollectionWithActivity: ContributionsCollection
  "Returns a different contributions collection from an earlier time range than this one\nthat does not have any contributions.\n"
  mostRecentCollectionWithoutActivity: ContributionsCollection
  "The issue the user opened on GitHub that received the most comments in the specified\ntime frame.\n"
  popularIssueContribution: CreatedIssueContribution
  "The pull request the user opened on GitHub that received the most comments in the\nspecified time frame.\n"
  popularPullRequestContribution: CreatedPullRequestContribution
  "Pull request contributions made by the user."
  pullRequestContributions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Should the user's first pull request ever be excluded from the result." excludeFirst: Boolean = false "Should the user's most commented pull request be excluded from the result." excludePopular: Boolean = false "Ordering options for contributions returned from the connection." orderBy: ContributionOrder = { field: OCCURRED_AT, direction: DESC }): CreatedPullRequestContributionConnection!
  "Pull request contributions made by the user, grouped by repository."
  pullRequestContributionsByRepository("How many repositories should be included." maxRepositories: Int = 25 "Should the user's first pull request ever be excluded from the result." excludeFirst: Boolean = false "Should the user's most commented pull request be excluded from the result." excludePopular: Boolean = false): [PullRequestContributionsByRepository!]!
  "Pull request review contributions made by the user."
  pullRequestReviewContributions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for contributions returned from the connection." orderBy: ContributionOrder = { field: OCCURRED_AT, direction: DESC }): CreatedPullRequestReviewContributionConnection!
  "Pull request review contributions made by the user, grouped by repository."
  pullRequestReviewContributionsByRepository("How many repositories should be included." maxRepositories: Int = 25): [PullRequestReviewContributionsByRepository!]!
  "A list of repositories owned by the user that the user created in this time range."
  repositoryContributions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Should the user's first repository ever be excluded from the result." excludeFirst: Boolean = false "Ordering options for contributions returned from the connection." orderBy: ContributionOrder = { field: OCCURRED_AT, direction: DESC }): CreatedRepositoryContributionConnection!
  "A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts."
  restrictedContributionsCount: Int!
  "The beginning date and time of this collection."
  startedAt: DateTime!
  "How many commits were made by the user in this time span."
  totalCommitContributions: Int!
  "How many issues the user opened."
  totalIssueContributions("Should the user's first issue ever be excluded from this count." excludeFirst: Boolean = false "Should the user's most commented issue be excluded from this count." excludePopular: Boolean = false): Int!
  "How many pull requests the user opened."
  totalPullRequestContributions("Should the user's first pull request ever be excluded from this count." excludeFirst: Boolean = false "Should the user's most commented pull request be excluded from this count." excludePopular: Boolean = false): Int!
  "How many pull request reviews the user left."
  totalPullRequestReviewContributions: Int!
  "How many different repositories the user committed to."
  totalRepositoriesWithContributedCommits: Int!
  "How many different repositories the user opened issues in."
  totalRepositoriesWithContributedIssues("Should the user's first issue ever be excluded from this count." excludeFirst: Boolean = false "Should the user's most commented issue be excluded from this count." excludePopular: Boolean = false): Int!
  "How many different repositories the user left pull request reviews in."
  totalRepositoriesWithContributedPullRequestReviews: Int!
  "How many different repositories the user opened pull requests in."
  totalRepositoriesWithContributedPullRequests("Should the user's first pull request ever be excluded from this count." excludeFirst: Boolean = false "Should the user's most commented pull request be excluded from this count." excludePopular: Boolean = false): Int!
  "How many repositories the user created."
  totalRepositoryContributions("Should the user's first repository ever be excluded from this count." excludeFirst: Boolean = false): Int!
  "The user who made the contributions in this collection."
  user: User!
}

"Represents a contribution a user made on GitHub, such as opening an issue."
interface Contribution {
  "Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.\n"
  isRestricted: Boolean!
  "When this contribution was made."
  occurredAt: DateTime!
  "The HTTP path for this contribution."
  resourcePath: URI!
  "The HTTP URL for this contribution."
  url: URI!
  "The user who made this contribution.\n"
  user: User!
}

"The connection type for CreatedIssueContribution."
type CreatedIssueContributionConnection {
  "A list of edges."
  edges: [CreatedIssueContributionEdge]
  "A list of nodes."
  nodes: [CreatedIssueContribution]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type CreatedIssueContributionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CreatedIssueContribution
}

"Represents the contribution a user made on GitHub by opening an issue."
type CreatedIssueContribution implements Contribution {
  "Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.\n"
  isRestricted: Boolean!
  "The issue that was opened."
  issue: Issue!
  "When this contribution was made."
  occurredAt: DateTime!
  "The HTTP path for this contribution."
  resourcePath: URI!
  "The HTTP URL for this contribution."
  url: URI!
  "The user who made this contribution.\n"
  user: User!
}

"Ordering options for contribution connections."
input ContributionOrder {
  "The field by which to order contributions.\n\n**Upcoming Change on 2019-10-01 UTC**\n**Description:** `field` will be removed. Only one order field is supported.\n**Reason:** `field` will be removed.\n"
  field: ContributionOrderField
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which contribution connections can be ordered."
enum ContributionOrderField {
  "Order contributions by when they were made."
  OCCURRED_AT
}

"The connection type for CreatedRepositoryContribution."
type CreatedRepositoryContributionConnection {
  "A list of edges."
  edges: [CreatedRepositoryContributionEdge]
  "A list of nodes."
  nodes: [CreatedRepositoryContribution]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type CreatedRepositoryContributionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CreatedRepositoryContribution
}

"Represents the contribution a user made on GitHub by creating a repository."
type CreatedRepositoryContribution implements Contribution {
  "Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.\n"
  isRestricted: Boolean!
  "When this contribution was made."
  occurredAt: DateTime!
  "The repository that was created."
  repository: Repository!
  "The HTTP path for this contribution."
  resourcePath: URI!
  "The HTTP URL for this contribution."
  url: URI!
  "The user who made this contribution.\n"
  user: User!
}

"Represents a user signing up for a GitHub account."
type JoinedGitHubContribution implements Contribution {
  "Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.\n"
  isRestricted: Boolean!
  "When this contribution was made."
  occurredAt: DateTime!
  "The HTTP path for this contribution."
  resourcePath: URI!
  "The HTTP URL for this contribution."
  url: URI!
  "The user who made this contribution.\n"
  user: User!
}

"Represents either a repository the viewer can access or a restricted contribution."
union CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution

"Represents a private contribution a user made on GitHub."
type RestrictedContribution implements Contribution {
  "Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.\n"
  isRestricted: Boolean!
  "When this contribution was made."
  occurredAt: DateTime!
  "The HTTP path for this contribution."
  resourcePath: URI!
  "The HTTP URL for this contribution."
  url: URI!
  "The user who made this contribution.\n"
  user: User!
}

"Represents either a issue the viewer can access or a restricted contribution."
union CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution

"Represents either a pull request the viewer can access or a restricted contribution."
union CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution

"Represents the contribution a user made on GitHub by opening a pull request."
type CreatedPullRequestContribution implements Contribution {
  "Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.\n"
  isRestricted: Boolean!
  "When this contribution was made."
  occurredAt: DateTime!
  "The pull request that was opened."
  pullRequest: PullRequest!
  "The HTTP path for this contribution."
  resourcePath: URI!
  "The HTTP URL for this contribution."
  url: URI!
  "The user who made this contribution.\n"
  user: User!
}

"A calendar of contributions made on GitHub by a user."
type ContributionCalendar {
  "A list of hex color codes used in this calendar. The darker the color, the more contributions it represents."
  colors: [String!]!
  "Determine if the color set was chosen because it's currently Halloween."
  isHalloween: Boolean!
  "A list of the months of contributions in this calendar."
  months: [ContributionCalendarMonth!]!
  "The count of total contributions in the calendar."
  totalContributions: Int!
  "A list of the weeks of contributions in this calendar."
  weeks: [ContributionCalendarWeek!]!
}

"A week of contributions in a user's contribution graph."
type ContributionCalendarWeek {
  "The days of contributions in this week."
  contributionDays: [ContributionCalendarDay!]!
  "The date of the earliest square in this week."
  firstDay: Date!
}

"Represents a single day of contributions on GitHub by a user."
type ContributionCalendarDay {
  "The hex color code that represents how many contributions were made on this day compared to others in the calendar."
  color: String!
  "How many contributions were made by the user on this day."
  contributionCount: Int!
  "The day this square represents."
  date: Date!
  "A number representing which day of the week this square represents, e.g., 1 is Monday."
  weekday: Int!
}

"A month of contributions in a user's contribution graph."
type ContributionCalendarMonth {
  "The date of the first day of this month."
  firstDay: Date!
  "The name of the month."
  name: String!
  "How many weeks started in this month."
  totalWeeks: Int!
  "The year the month occurred in."
  year: Int!
}

"The connection type for CreatedPullRequestReviewContribution."
type CreatedPullRequestReviewContributionConnection {
  "A list of edges."
  edges: [CreatedPullRequestReviewContributionEdge]
  "A list of nodes."
  nodes: [CreatedPullRequestReviewContribution]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type CreatedPullRequestReviewContributionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CreatedPullRequestReviewContribution
}

"Represents the contribution a user made by leaving a review on a pull request."
type CreatedPullRequestReviewContribution implements Contribution {
  "Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.\n"
  isRestricted: Boolean!
  "When this contribution was made."
  occurredAt: DateTime!
  "The pull request the user reviewed."
  pullRequest: PullRequest!
  "The review the user left on the pull request."
  pullRequestReview: PullRequestReview!
  "The repository containing the pull request that the user reviewed."
  repository: Repository!
  "The HTTP path for this contribution."
  resourcePath: URI!
  "The HTTP URL for this contribution."
  url: URI!
  "The user who made this contribution.\n"
  user: User!
}

"This aggregates pull request reviews made by a user within one repository."
type PullRequestReviewContributionsByRepository {
  "The pull request review contributions."
  contributions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for contributions returned from the connection." orderBy: ContributionOrder = { field: OCCURRED_AT, direction: DESC }): CreatedPullRequestReviewContributionConnection!
  "The repository in which the pull request reviews were made."
  repository: Repository!
}

"This aggregates commits made by a user within one repository."
type CommitContributionsByRepository {
  "The commit contributions, each representing a day."
  contributions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for commit contributions returned from the connection." orderBy: CommitContributionOrder = { field: OCCURRED_AT, direction: DESC }): CreatedCommitContributionConnection!
  "The repository in which the commits were made."
  repository: Repository!
  "The HTTP path for the user's commits to the repository in this time range."
  resourcePath: URI!
  "The HTTP URL for the user's commits to the repository in this time range."
  url: URI!
}

"The connection type for CreatedCommitContribution."
type CreatedCommitContributionConnection {
  "A list of edges."
  edges: [CreatedCommitContributionEdge]
  "A list of nodes."
  nodes: [CreatedCommitContribution]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of commits across days and repositories in the connection.\n"
  totalCount: Int!
}

"An edge in a connection."
type CreatedCommitContributionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CreatedCommitContribution
}

"Represents the contribution a user made by committing to a repository."
type CreatedCommitContribution implements Contribution {
  "How many commits were made on this day to this repository by the user."
  commitCount: Int!
  "Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.\n"
  isRestricted: Boolean!
  "When this contribution was made."
  occurredAt: DateTime!
  "The repository the user made a commit in."
  repository: Repository!
  "The HTTP path for this contribution."
  resourcePath: URI!
  "The HTTP URL for this contribution."
  url: URI!
  "The user who made this contribution.\n"
  user: User!
}

"Ordering options for commit contribution connections."
input CommitContributionOrder {
  "The field by which to order commit contributions."
  field: CommitContributionOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which commit contribution connections can be ordered."
enum CommitContributionOrderField {
  "Order commit contributions by when they were made."
  OCCURRED_AT
  "Order commit contributions by how many commits they represent."
  COMMIT_COUNT
}

"The connection type for CreatedPullRequestContribution."
type CreatedPullRequestContributionConnection {
  "A list of edges."
  edges: [CreatedPullRequestContributionEdge]
  "A list of nodes."
  nodes: [CreatedPullRequestContribution]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type CreatedPullRequestContributionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CreatedPullRequestContribution
}

"This aggregates pull requests opened by a user within one repository."
type PullRequestContributionsByRepository {
  "The pull request contributions."
  contributions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for contributions returned from the connection." orderBy: ContributionOrder = { field: OCCURRED_AT, direction: DESC }): CreatedPullRequestContributionConnection!
  "The repository in which the pull requests were opened."
  repository: Repository!
}

"This aggregates issues opened by a user within one repository."
type IssueContributionsByRepository {
  "The issue contributions."
  contributions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Ordering options for contributions returned from the connection." orderBy: ContributionOrder = { field: OCCURRED_AT, direction: DESC }): CreatedIssueContributionConnection!
  "The repository in which the issues were opened."
  repository: Repository!
}

"The connection type for SavedReply."
type SavedReplyConnection {
  "A list of edges."
  edges: [SavedReplyEdge]
  "A list of nodes."
  nodes: [SavedReply]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type SavedReplyEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SavedReply
}

"A Saved Reply is text a user can use to reply quickly."
type SavedReply implements Node {
  "The body of the saved reply."
  body: String!
  "The saved reply body rendered to HTML."
  bodyHTML: HTML!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The title of the saved reply."
  title: String!
  "The user that saved this reply."
  user: Actor
}

"Ordering options for saved reply connections."
input SavedReplyOrder {
  "The field to order saved replies by."
  field: SavedReplyOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which saved reply connections can be ordered."
enum SavedReplyOrderField {
  "Order saved reply by when they were updated."
  UPDATED_AT
}

"The reason a repository is listed as 'contributed'."
enum RepositoryContributionType {
  "Created a commit"
  COMMIT
  "Created an issue"
  ISSUE
  "Created a pull request"
  PULL_REQUEST
  "Created the repository"
  REPOSITORY
  "Reviewed a pull request"
  PULL_REQUEST_REVIEW
}

"An edge in a connection."
type IssueOrPullRequestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: IssueOrPullRequest
}

"The connection type for PublicKey."
type PublicKeyConnection {
  "A list of edges."
  edges: [PublicKeyEdge]
  "A list of nodes."
  nodes: [PublicKey]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PublicKeyEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PublicKey
}

"The connection type for User."
type FollowingConnection {
  "A list of edges."
  edges: [UserEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"The connection type for User."
type FollowerConnection {
  "A list of edges."
  edges: [UserEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"The connection type for Repository."
type StarredRepositoryConnection {
  "A list of edges."
  edges: [StarredRepositoryEdge]
  "A list of nodes."
  nodes: [Repository]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a starred repository."
type StarredRepositoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: Repository!
  "Identifies when the item was starred."
  starredAt: DateTime!
}

"An edge in a connection."
type AppEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: App
}

"Represents the client's rate limit."
type RateLimit {
  "The point cost for the current query counting against the rate limit."
  cost: Int!
  "The maximum number of points the client is permitted to consume in a 60 minute window."
  limit: Int!
  "The maximum number of nodes this query may return"
  nodeCount: Int!
  "The number of points remaining in the current rate limit window."
  remaining: Int!
  "The time at which the current rate limit window resets in UTC epoch seconds."
  resetAt: DateTime!
}

"A list of results that matched against a search query."
type SearchResultItemConnection {
  "The number of pieces of code that matched the search query."
  codeCount: Int!
  "A list of edges."
  edges: [SearchResultItemEdge]
  "The number of issues that matched the search query."
  issueCount: Int!
  "A list of nodes."
  nodes: [SearchResultItem]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The number of repositories that matched the search query."
  repositoryCount: Int!
  "The number of users that matched the search query."
  userCount: Int!
  "The number of wiki pages that matched the search query."
  wikiCount: Int!
}

"An edge in a connection."
type SearchResultItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SearchResultItem
  "Text matches on the result found."
  textMatches: [TextMatch]
}

"The results of a search."
union SearchResultItem = Issue | PullRequest | Repository | User | Organization | MarketplaceListing | App

"A text match within a search result."
type TextMatch {
  "The specific text fragment within the property matched on."
  fragment: String!
  "Highlights within the matched fragment."
  highlights: [TextMatchHighlight!]!
  "The property matched on."
  property: String!
}

"Represents a single highlight in a search result match."
type TextMatchHighlight {
  "The indice in the fragment where the matched text begins."
  beginIndice: Int!
  "The indice in the fragment where the matched text ends."
  endIndice: Int!
  "The text matched."
  text: String!
}

"Represents the individual results of a search."
enum SearchType {
  "Returns results matching issues in repositories."
  ISSUE
  "Returns results matching repositories."
  REPOSITORY
  "Returns results matching users and organizations on GitHub."
  USER
}

"Types that can be inside Collection Items."
union CollectionItemContent = Repository | Organization | User

"Represents information about the GitHub instance."
type GitHubMetadata {
  "Returns a String that's a SHA of `github-services`"
  gitHubServicesSha: GitObjectID!
  "IP addresses that users connect to for git operations"
  gitIpAddresses: [String!]
  "IP addresses that service hooks are sent from"
  hookIpAddresses: [String!]
  "IP addresses that the importer connects from"
  importerIpAddresses: [String!]
  "Whether or not users are verified"
  isPasswordAuthenticationVerifiable: Boolean!
  "IP addresses for GitHub Pages' A records"
  pagesIpAddresses: [String!]
}

"The connection type for SecurityAdvisory."
type SecurityAdvisoryConnection {
  "A list of edges."
  edges: [SecurityAdvisoryEdge]
  "A list of nodes."
  nodes: [SecurityAdvisory]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type SecurityAdvisoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SecurityAdvisory
}

"Ordering options for security advisory connections"
input SecurityAdvisoryOrder {
  "The field to order security advisories by."
  field: SecurityAdvisoryOrderField!
  "The ordering direction."
  direction: OrderDirection!
}

"Properties by which security advisory connections can be ordered."
enum SecurityAdvisoryOrderField {
  "Order advisories by publication time"
  PUBLISHED_AT
  "Order advisories by update time"
  UPDATED_AT
}

"An advisory identifier to filter results on."
input SecurityAdvisoryIdentifierFilter {
  "The identifier type."
  type: SecurityAdvisoryIdentifierType!
  "The identifier string. Supports exact or partial matching."
  value: String!
}

"Identifier formats available for advisories."
enum SecurityAdvisoryIdentifierType {
  "Common Vulnerabilities and Exposures Identifier."
  CVE
  "GitHub Security Advisory ID."
  GHSA
}

"The root query for implementing GraphQL mutations."
type Mutation {
  "Applies a suggested topic to the repository."
  acceptTopicSuggestion(input: AcceptTopicSuggestionInput!): AcceptTopicSuggestionPayload
  "Adds assignees to an assignable object."
  addAssigneesToAssignable(input: AddAssigneesToAssignableInput!): AddAssigneesToAssignablePayload
  "Adds a comment to an Issue or Pull Request."
  addComment(input: AddCommentInput!): AddCommentPayload
  "Adds labels to a labelable object."
  addLabelsToLabelable(input: AddLabelsToLabelableInput!): AddLabelsToLabelablePayload
  "Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both."
  addProjectCard(input: AddProjectCardInput!): AddProjectCardPayload
  "Adds a column to a Project."
  addProjectColumn(input: AddProjectColumnInput!): AddProjectColumnPayload
  "Adds a review to a Pull Request."
  addPullRequestReview(input: AddPullRequestReviewInput!): AddPullRequestReviewPayload
  "Adds a comment to a review."
  addPullRequestReviewComment(input: AddPullRequestReviewCommentInput!): AddPullRequestReviewCommentPayload
  "Adds a reaction to a subject."
  addReaction(input: AddReactionInput!): AddReactionPayload
  "Adds a star to a Starrable."
  addStar(input: AddStarInput!): AddStarPayload
  "Update your status on GitHub."
  changeUserStatus(input: ChangeUserStatusInput!): ChangeUserStatusPayload
  "Clears all labels from a labelable object."
  clearLabelsFromLabelable(input: ClearLabelsFromLabelableInput!): ClearLabelsFromLabelablePayload
  "Creates a new project by cloning configuration from an existing project."
  cloneProject(input: CloneProjectInput!): CloneProjectPayload
  "Create a new repository with the same files and directory structure as a template repository."
  cloneTemplateRepository(input: CloneTemplateRepositoryInput!): CloneTemplateRepositoryPayload
  "Close an issue."
  closeIssue(input: CloseIssueInput!): CloseIssuePayload
  "Close a pull request."
  closePullRequest(input: ClosePullRequestInput!): ClosePullRequestPayload
  "Convert a project note card to one associated with a newly created issue."
  convertProjectCardNoteToIssue(input: ConvertProjectCardNoteToIssueInput!): ConvertProjectCardNoteToIssuePayload
  "Create a new branch protection rule"
  createBranchProtectionRule(input: CreateBranchProtectionRuleInput!): CreateBranchProtectionRulePayload
  "Creates a new issue."
  createIssue(input: CreateIssueInput!): CreateIssuePayload
  "Creates a new project."
  createProject(input: CreateProjectInput!): CreateProjectPayload
  "Create a new pull request"
  createPullRequest(input: CreatePullRequestInput!): CreatePullRequestPayload
  "Create a new Git Ref."
  createRef(input: CreateRefInput!): CreateRefPayload
  "Create a new repository."
  createRepository(input: CreateRepositoryInput!): CreateRepositoryPayload
  "Creates a new team discussion."
  createTeamDiscussion(input: CreateTeamDiscussionInput!): CreateTeamDiscussionPayload
  "Creates a new team discussion comment."
  createTeamDiscussionComment(input: CreateTeamDiscussionCommentInput!): CreateTeamDiscussionCommentPayload
  "Rejects a suggested topic for the repository."
  declineTopicSuggestion(input: DeclineTopicSuggestionInput!): DeclineTopicSuggestionPayload
  "Delete a branch protection rule"
  deleteBranchProtectionRule(input: DeleteBranchProtectionRuleInput!): DeleteBranchProtectionRulePayload
  "Deletes an Issue object."
  deleteIssue(input: DeleteIssueInput!): DeleteIssuePayload
  "Deletes an IssueComment object."
  deleteIssueComment(input: DeleteIssueCommentInput!): DeleteIssueCommentPayload
  "Deletes a project."
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  "Deletes a project card."
  deleteProjectCard(input: DeleteProjectCardInput!): DeleteProjectCardPayload
  "Deletes a project column."
  deleteProjectColumn(input: DeleteProjectColumnInput!): DeleteProjectColumnPayload
  "Deletes a pull request review."
  deletePullRequestReview(input: DeletePullRequestReviewInput!): DeletePullRequestReviewPayload
  "Deletes a pull request review comment."
  deletePullRequestReviewComment(input: DeletePullRequestReviewCommentInput!): DeletePullRequestReviewCommentPayload
  "Delete a Git Ref."
  deleteRef(input: DeleteRefInput!): DeleteRefPayload
  "Deletes a team discussion."
  deleteTeamDiscussion(input: DeleteTeamDiscussionInput!): DeleteTeamDiscussionPayload
  "Deletes a team discussion comment."
  deleteTeamDiscussionComment(input: DeleteTeamDiscussionCommentInput!): DeleteTeamDiscussionCommentPayload
  "Dismisses an approved or rejected pull request review."
  dismissPullRequestReview(input: DismissPullRequestReviewInput!): DismissPullRequestReviewPayload
  "Follow a user."
  followUser(input: FollowUserInput!): FollowUserPayload
  "Creates a repository link for a project."
  linkRepositoryToProject(input: LinkRepositoryToProjectInput!): LinkRepositoryToProjectPayload
  "Lock a lockable object"
  lockLockable(input: LockLockableInput!): LockLockablePayload
  "Merge a head into a branch."
  mergeBranch(input: MergeBranchInput!): MergeBranchPayload
  "Merge a pull request."
  mergePullRequest(input: MergePullRequestInput!): MergePullRequestPayload
  "Moves a project card to another place."
  moveProjectCard(input: MoveProjectCardInput!): MoveProjectCardPayload
  "Moves a project column to another place."
  moveProjectColumn(input: MoveProjectColumnInput!): MoveProjectColumnPayload
  "Removes assignees from an assignable object."
  removeAssigneesFromAssignable(input: RemoveAssigneesFromAssignableInput!): RemoveAssigneesFromAssignablePayload
  "Removes labels from a Labelable object."
  removeLabelsFromLabelable(input: RemoveLabelsFromLabelableInput!): RemoveLabelsFromLabelablePayload
  "Removes outside collaborator from all repositories in an organization."
  removeOutsideCollaborator(input: RemoveOutsideCollaboratorInput!): RemoveOutsideCollaboratorPayload
  "Removes a reaction from a subject."
  removeReaction(input: RemoveReactionInput!): RemoveReactionPayload
  "Removes a star from a Starrable."
  removeStar(input: RemoveStarInput!): RemoveStarPayload
  "Reopen a issue."
  reopenIssue(input: ReopenIssueInput!): ReopenIssuePayload
  "Reopen a pull request."
  reopenPullRequest(input: ReopenPullRequestInput!): ReopenPullRequestPayload
  "Set review requests on a pull request."
  requestReviews(input: RequestReviewsInput!): RequestReviewsPayload
  "Marks a review thread as resolved."
  resolveReviewThread(input: ResolveReviewThreadInput!): ResolveReviewThreadPayload
  "Submits a pending pull request review."
  submitPullRequestReview(input: SubmitPullRequestReviewInput!): SubmitPullRequestReviewPayload
  "Transfer an issue to a different repository"
  transferIssue(input: TransferIssueInput!): TransferIssuePayload
  "Unfollow a user."
  unfollowUser(input: UnfollowUserInput!): UnfollowUserPayload
  "Deletes a repository link from a project."
  unlinkRepositoryFromProject(input: UnlinkRepositoryFromProjectInput!): UnlinkRepositoryFromProjectPayload
  "Unlock a lockable object"
  unlockLockable(input: UnlockLockableInput!): UnlockLockablePayload
  "Unmark an issue as a duplicate of another issue."
  unmarkIssueAsDuplicate(input: UnmarkIssueAsDuplicateInput!): UnmarkIssueAsDuplicatePayload
  "Marks a review thread as unresolved."
  unresolveReviewThread(input: UnresolveReviewThreadInput!): UnresolveReviewThreadPayload
  "Create a new branch protection rule"
  updateBranchProtectionRule(input: UpdateBranchProtectionRuleInput!): UpdateBranchProtectionRulePayload
  "Updates an Issue."
  updateIssue(input: UpdateIssueInput!): UpdateIssuePayload
  "Updates an IssueComment object."
  updateIssueComment(input: UpdateIssueCommentInput!): UpdateIssueCommentPayload
  "Updates an existing project."
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  "Updates an existing project card."
  updateProjectCard(input: UpdateProjectCardInput!): UpdateProjectCardPayload
  "Updates an existing project column."
  updateProjectColumn(input: UpdateProjectColumnInput!): UpdateProjectColumnPayload
  "Update a pull request"
  updatePullRequest(input: UpdatePullRequestInput!): UpdatePullRequestPayload
  "Updates the body of a pull request review."
  updatePullRequestReview(input: UpdatePullRequestReviewInput!): UpdatePullRequestReviewPayload
  "Updates a pull request review comment."
  updatePullRequestReviewComment(input: UpdatePullRequestReviewCommentInput!): UpdatePullRequestReviewCommentPayload
  "Update a Git Ref."
  updateRef(input: UpdateRefInput!): UpdateRefPayload
  "Update information about a repository."
  updateRepository(input: UpdateRepositoryInput!): UpdateRepositoryPayload
  "Updates the state for subscribable subjects."
  updateSubscription(input: UpdateSubscriptionInput!): UpdateSubscriptionPayload
  "Updates a team discussion."
  updateTeamDiscussion(input: UpdateTeamDiscussionInput!): UpdateTeamDiscussionPayload
  "Updates a discussion comment."
  updateTeamDiscussionComment(input: UpdateTeamDiscussionCommentInput!): UpdateTeamDiscussionCommentPayload
  "Replaces the repository's topics with the given topics."
  updateTopics(input: UpdateTopicsInput!): UpdateTopicsPayload
}

"Autogenerated return type of AddReaction"
type AddReactionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The reaction object."
  reaction: Reaction
  "The reactable subject."
  subject: Reactable
}

"Autogenerated input type of AddReaction"
input AddReactionInput {
  "The Node ID of the subject to modify."
  subjectId: ID!
  "The name of the emoji to react with."
  content: ReactionContent!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of RemoveReaction"
type RemoveReactionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The reaction object."
  reaction: Reaction
  "The reactable subject."
  subject: Reactable
}

"Autogenerated input type of RemoveReaction"
input RemoveReactionInput {
  "The Node ID of the subject to modify."
  subjectId: ID!
  "The name of the emoji reaction to remove."
  content: ReactionContent!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateSubscription"
type UpdateSubscriptionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The input subscribable entity."
  subscribable: Subscribable
}

"Autogenerated input type of UpdateSubscription"
input UpdateSubscriptionInput {
  "The Node ID of the subscribable object to modify."
  subscribableId: ID!
  "The new state of the subscription."
  state: SubscriptionState!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of AddComment"
type AddCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The edge from the subject's comment connection."
  commentEdge: IssueCommentEdge
  "The subject"
  subject: Node
  "The edge from the subject's timeline connection."
  timelineEdge: IssueTimelineItemEdge
}

"Autogenerated input type of AddComment"
input AddCommentInput {
  "The Node ID of the subject to modify."
  subjectId: ID!
  "The contents of the comment."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of MinimizeComment"
input MinimizeCommentInput {
  "The Node ID of the subject to modify."
  subjectId: ID!
  "The classification of comment"
  classifier: ReportedContentClassifiers!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"The reasons a piece of content can be reported or minimized."
enum ReportedContentClassifiers {
  "A spammy piece of content"
  SPAM
  "An abusive or harassing piece of content"
  ABUSE
  "An irrelevant piece of content"
  OFF_TOPIC
  "An outdated piece of content"
  OUTDATED
  "The content has been resolved"
  RESOLVED
}

"Autogenerated input type of UnminimizeComment"
input UnminimizeCommentInput {
  "The Node ID of the subject to modify."
  subjectId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateIssueComment"
type UpdateIssueCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated comment."
  issueComment: IssueComment
}

"Autogenerated input type of UpdateIssueComment"
input UpdateIssueCommentInput {
  "The ID of the IssueComment to modify."
  id: ID!
  "The updated text of the comment."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CreateProject"
type CreateProjectPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new project."
  project: Project
}

"Autogenerated input type of CreateProject"
input CreateProjectInput {
  "The owner ID to create the project under."
  ownerId: ID!
  "The name of project."
  name: String!
  "The description of project."
  body: String
  "The name of the GitHub-provided template."
  template: ProjectTemplate
  "A list of repository IDs to create as linked repositories for the project"
  repositoryIds: [ID!]
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"GitHub-provided templates for Projects"
enum ProjectTemplate {
  "Create a board with columns for To do, In progress and Done."
  BASIC_KANBAN
  "Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns."
  AUTOMATED_KANBAN_V2
  "Create a board with triggers to automatically move cards across columns with review automation."
  AUTOMATED_REVIEWS_KANBAN
  "Create a board to triage and prioritize bugs with To do, priority, and Done columns."
  BUG_TRIAGE
}

"Autogenerated return type of UpdateProject"
type UpdateProjectPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated project."
  project: Project
}

"Autogenerated input type of UpdateProject"
input UpdateProjectInput {
  "The Project ID to update."
  projectId: ID!
  "The name of project."
  name: String
  "The description of project."
  body: String
  "Whether the project is open or closed."
  state: ProjectState
  "Whether the project is public or not."
  public: Boolean
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeleteProject"
type DeleteProjectPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The repository or organization the project was removed from."
  owner: ProjectOwner
}

"Autogenerated input type of DeleteProject"
input DeleteProjectInput {
  "The Project ID to update."
  projectId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CloneProject"
type CloneProjectPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The id of the JobStatus for populating cloned fields."
  jobStatusId: String
  "The new cloned project."
  project: Project
}

"Autogenerated input type of CloneProject"
input CloneProjectInput {
  "The owner ID to create the project under."
  targetOwnerId: ID!
  "The source project to clone."
  sourceId: ID!
  "Whether or not to clone the source project's workflows."
  includeWorkflows: Boolean!
  "The name of the project."
  name: String!
  "The description of the project."
  body: String
  "The visibility of the project, defaults to false (private)."
  public: Boolean
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of ImportProject"
input ImportProjectInput {
  "The name of the Organization or User to create the Project under."
  ownerName: String!
  "The name of Project."
  name: String!
  "The description of Project."
  body: String
  "Whether the Project is public or not."
  public: Boolean = false
  "A list of columns containing issues and pull requests."
  columnImports: [ProjectColumnImport!]!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"A project column and a list of its issues and PRs."
input ProjectColumnImport {
  "The name of the column."
  columnName: String!
  "The position of the column, starting from 0."
  position: Int!
  "A list of issues and pull requests in the column."
  issues: [ProjectCardImport!]
}

"An issue or PR and its owning repository to be used in a project card."
input ProjectCardImport {
  "Repository name with owner (owner\/repository)."
  repository: String!
  "The issue or pull request number."
  number: Int!
}

"Autogenerated return type of AddProjectColumn"
type AddProjectColumnPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The edge from the project's column connection."
  columnEdge: ProjectColumnEdge
  "The project"
  project: Project
}

"Autogenerated input type of AddProjectColumn"
input AddProjectColumnInput {
  "The Node ID of the project."
  projectId: ID!
  "The name of the column."
  name: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of MoveProjectColumn"
type MoveProjectColumnPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new edge of the moved column."
  columnEdge: ProjectColumnEdge
}

"Autogenerated input type of MoveProjectColumn"
input MoveProjectColumnInput {
  "The id of the column to move."
  columnId: ID!
  "Place the new column after the column with this id. Pass null to place it at the front."
  afterColumnId: ID
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateProjectColumn"
type UpdateProjectColumnPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated project column."
  projectColumn: ProjectColumn
}

"Autogenerated input type of UpdateProjectColumn"
input UpdateProjectColumnInput {
  "The ProjectColumn ID to update."
  projectColumnId: ID!
  "The name of project column."
  name: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeleteProjectColumn"
type DeleteProjectColumnPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The deleted column ID."
  deletedColumnId: ID
  "The project the deleted column was in."
  project: Project
}

"Autogenerated input type of DeleteProjectColumn"
input DeleteProjectColumnInput {
  "The id of the column to delete."
  columnId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of AddProjectCard"
type AddProjectCardPayload {
  "The edge from the ProjectColumn's card connection."
  cardEdge: ProjectCardEdge
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The ProjectColumn"
  projectColumn: ProjectColumn
}

"Autogenerated input type of AddProjectCard"
input AddProjectCardInput {
  "The Node ID of the ProjectColumn."
  projectColumnId: ID!
  "The content of the card. Must be a member of the ProjectCardItem union"
  contentId: ID
  "The note on the card."
  note: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateProjectCard"
type UpdateProjectCardPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated ProjectCard."
  projectCard: ProjectCard
}

"Autogenerated input type of UpdateProjectCard"
input UpdateProjectCardInput {
  "The ProjectCard ID to update."
  projectCardId: ID!
  "Whether or not the ProjectCard should be archived"
  isArchived: Boolean
  "The note of ProjectCard."
  note: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of MoveProjectCard"
type MoveProjectCardPayload {
  "The new edge of the moved card."
  cardEdge: ProjectCardEdge
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of MoveProjectCard"
input MoveProjectCardInput {
  "The id of the card to move."
  cardId: ID!
  "The id of the column to move it into."
  columnId: ID!
  "Place the new card after the card with this id. Pass null to place it at the top."
  afterCardId: ID
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeleteProjectCard"
type DeleteProjectCardPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The column the deleted card was in."
  column: ProjectColumn
  "The deleted card ID."
  deletedCardId: ID
}

"Autogenerated input type of DeleteProjectCard"
input DeleteProjectCardInput {
  "The id of the card to delete."
  cardId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of LinkRepositoryToProject"
type LinkRepositoryToProjectPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The linked Project."
  project: Project
  "The linked Repository."
  repository: Repository
}

"Autogenerated input type of LinkRepositoryToProject"
input LinkRepositoryToProjectInput {
  "The ID of the Project to link to a Repository"
  projectId: ID!
  "The ID of the Repository to link to a Project."
  repositoryId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UnlinkRepositoryFromProject"
type UnlinkRepositoryFromProjectPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The linked Project."
  project: Project
  "The linked Repository."
  repository: Repository
}

"Autogenerated input type of UnlinkRepositoryFromProject"
input UnlinkRepositoryFromProjectInput {
  "The ID of the Project linked to the Repository."
  projectId: ID!
  "The ID of the Repository linked to the Project."
  repositoryId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of ConvertProjectCardNoteToIssue"
type ConvertProjectCardNoteToIssuePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated ProjectCard."
  projectCard: ProjectCard
}

"Autogenerated input type of ConvertProjectCardNoteToIssue"
input ConvertProjectCardNoteToIssueInput {
  "The ProjectCard ID to convert."
  projectCardId: ID!
  "The ID of the repository to create the issue in."
  repositoryId: ID!
  "The title of the newly created issue. Defaults to the card's note text."
  title: String
  "The body of the newly created issue."
  body: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UnmarkIssueAsDuplicate"
type UnmarkIssueAsDuplicatePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The issue or pull request that was marked as a duplicate."
  duplicate: IssueOrPullRequest
}

"Autogenerated input type of UnmarkIssueAsDuplicate"
input UnmarkIssueAsDuplicateInput {
  "ID of the issue or pull request currently marked as a duplicate."
  duplicateId: ID!
  "ID of the issue or pull request currently considered canonical\/authoritative\/original."
  canonicalId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of LockLockable"
type LockLockablePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The item that was locked."
  lockedRecord: Lockable
}

"Autogenerated input type of LockLockable"
input LockLockableInput {
  "ID of the issue or pull request to be locked."
  lockableId: ID!
  "A reason for why the issue or pull request will be locked."
  lockReason: LockReason
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UnlockLockable"
type UnlockLockablePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The item that was unlocked."
  unlockedRecord: Lockable
}

"Autogenerated input type of UnlockLockable"
input UnlockLockableInput {
  "ID of the issue or pull request to be unlocked."
  lockableId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of AddAssigneesToAssignable"
type AddAssigneesToAssignablePayload {
  "The item that was assigned."
  assignable: Assignable
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of AddAssigneesToAssignable"
input AddAssigneesToAssignableInput {
  "The id of the assignable object to add assignees to."
  assignableId: ID!
  "The id of users to add as assignees."
  assigneeIds: [ID!]!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of RemoveAssigneesFromAssignable"
type RemoveAssigneesFromAssignablePayload {
  "The item that was unassigned."
  assignable: Assignable
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of RemoveAssigneesFromAssignable"
input RemoveAssigneesFromAssignableInput {
  "The id of the assignable object to remove assignees from."
  assignableId: ID!
  "The id of users to remove as assignees."
  assigneeIds: [ID!]!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of AddLabelsToLabelable"
type AddLabelsToLabelablePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The item that was labeled."
  labelable: Labelable
}

"Autogenerated input type of AddLabelsToLabelable"
input AddLabelsToLabelableInput {
  "The id of the labelable object to add labels to."
  labelableId: ID!
  "The ids of the labels to add."
  labelIds: [ID!]!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CreateIssue"
type CreateIssuePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new issue."
  issue: Issue
}

"Autogenerated input type of CreateIssue"
input CreateIssueInput {
  "The Node ID of the repository."
  repositoryId: ID!
  "The title for the issue."
  title: String!
  "The body for the issue description."
  body: String
  "The Node ID for the user assignee for this issue."
  assigneeIds: [ID!]
  "The Node ID of the milestone for this issue."
  milestoneId: ID
  "An array of Node IDs of labels for this issue."
  labelIds: [ID!]
  "An array of Node IDs for projects associated with this issue."
  projectIds: [ID!]
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of ClearLabelsFromLabelable"
type ClearLabelsFromLabelablePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The item that was unlabeled."
  labelable: Labelable
}

"Autogenerated input type of ClearLabelsFromLabelable"
input ClearLabelsFromLabelableInput {
  "The id of the labelable object to clear the labels from."
  labelableId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of RemoveLabelsFromLabelable"
type RemoveLabelsFromLabelablePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Labelable the labels were removed from."
  labelable: Labelable
}

"Autogenerated input type of RemoveLabelsFromLabelable"
input RemoveLabelsFromLabelableInput {
  "The id of the Labelable to remove labels from."
  labelableId: ID!
  "The ids of labels to remove."
  labelIds: [ID!]!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CloseIssue"
type CloseIssuePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The issue that was closed."
  issue: Issue
}

"Autogenerated input type of CloseIssue"
input CloseIssueInput {
  "ID of the issue to be closed."
  issueId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of ReopenIssue"
type ReopenIssuePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The issue that was opened."
  issue: Issue
}

"Autogenerated input type of ReopenIssue"
input ReopenIssueInput {
  "ID of the issue to be opened."
  issueId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of TransferIssue"
type TransferIssuePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The issue that was transferred"
  issue: Issue
}

"Autogenerated input type of TransferIssue"
input TransferIssueInput {
  "The Node ID of the issue to be transferred"
  issueId: ID!
  "The Node ID of the repository the issue should be transferred to"
  repositoryId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeleteIssueComment"
type DeleteIssueCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of DeleteIssueComment"
input DeleteIssueCommentInput {
  "The ID of the comment to delete."
  id: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateIssue"
type UpdateIssuePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The issue."
  issue: Issue
}

"Autogenerated input type of UpdateIssue"
input UpdateIssueInput {
  "The ID of the Issue to modify."
  id: ID!
  "The title for the issue."
  title: String
  "The body for the issue description."
  body: String
  "An array of Node IDs of users for this issue."
  assigneeIds: [ID!]
  "The Node ID of the milestone for this issue."
  milestoneId: ID
  "An array of Node IDs of labels for this issue."
  labelIds: [ID!]
  "The desired issue state."
  state: IssueState
  "An array of Node IDs for projects associated with this issue."
  projectIds: [ID!]
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeleteIssue"
type DeleteIssuePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The repository the issue belonged to"
  repository: Repository
}

"Autogenerated input type of DeleteIssue"
input DeleteIssueInput {
  "The ID of the issue to delete."
  issueId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of PinIssue"
input PinIssueInput {
  "The ID of the issue to be pinned"
  issueId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UnpinIssue"
input UnpinIssueInput {
  "The ID of the issue to be unpinned"
  issueId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CreatePullRequest"
type CreatePullRequestPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new pull request."
  pullRequest: PullRequest
}

"Autogenerated input type of CreatePullRequest"
input CreatePullRequestInput {
  "The Node ID of the repository."
  repositoryId: ID!
  "The name of the branch you want your changes pulled into. This should be an existing branch\non the current repository. You cannot update the base branch on a pull request to point\nto another repository.\n"
  baseRefName: String!
  "The name of the branch where your changes are implemented. For cross-repository pull requests\nin the same network, namespace `head_ref_name` with a user like this: `username:branch`.\n"
  headRefName: String!
  "The title of the pull request."
  title: String!
  "The contents of the pull request."
  body: String
  "Indicates whether maintainers can modify the pull request."
  maintainerCanModify: Boolean = true
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdatePullRequest"
type UpdatePullRequestPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated pull request."
  pullRequest: PullRequest
}

"Autogenerated input type of UpdatePullRequest"
input UpdatePullRequestInput {
  "The Node ID of the pull request."
  pullRequestId: ID!
  "The name of the branch you want your changes pulled into. This should be an existing branch\non the current repository.\n"
  baseRefName: String
  "The title of the pull request."
  title: String
  "The contents of the pull request."
  body: String
  "Indicates whether maintainers can modify the pull request."
  maintainerCanModify: Boolean
  "An array of Node IDs of users for this pull request."
  assigneeIds: [ID!]
  "The Node ID of the milestone for this pull request."
  milestoneId: ID
  "An array of Node IDs of labels for this pull request."
  labelIds: [ID!]
  "An array of Node IDs for projects associated with this pull request."
  projectIds: [ID!]
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of ClosePullRequest"
type ClosePullRequestPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The pull request that was closed."
  pullRequest: PullRequest
}

"Autogenerated input type of ClosePullRequest"
input ClosePullRequestInput {
  "ID of the pull request to be closed."
  pullRequestId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of ReopenPullRequest"
type ReopenPullRequestPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The pull request that was reopened."
  pullRequest: PullRequest
}

"Autogenerated input type of ReopenPullRequest"
input ReopenPullRequestInput {
  "ID of the pull request to be reopened."
  pullRequestId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of MergePullRequest"
type MergePullRequestPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The pull request that was merged."
  pullRequest: PullRequest
}

"Autogenerated input type of MergePullRequest"
input MergePullRequestInput {
  "ID of the pull request to be merged."
  pullRequestId: ID!
  "Commit headline to use for the merge commit; if omitted, a default message will be used."
  commitHeadline: String
  "Commit body to use for the merge commit; if omitted, a default message will be used"
  commitBody: String
  "OID that the pull request head ref must match to allow merge; if omitted, no check is performed."
  expectedHeadOid: GitObjectID
  "The merge method to use. If omitted, defaults to 'MERGE'"
  mergeMethod: PullRequestMergeMethod = MERGE
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Represents available types of methods to use when merging a pull request."
enum PullRequestMergeMethod {
  "Add all commits from the head branch to the base branch with a merge commit."
  MERGE
  "Combine all commits from the head branch into a single commit in the base branch."
  SQUASH
  "Add all commits from the head branch onto the base branch individually."
  REBASE
}

"Autogenerated return type of DeletePullRequestReviewComment"
type DeletePullRequestReviewCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The pull request review the deleted comment belonged to."
  pullRequestReview: PullRequestReview
}

"Autogenerated input type of DeletePullRequestReviewComment"
input DeletePullRequestReviewCommentInput {
  "The ID of the comment to delete."
  id: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of AddPullRequestReview"
type AddPullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The newly created pull request review."
  pullRequestReview: PullRequestReview
  "The edge from the pull request's review connection."
  reviewEdge: PullRequestReviewEdge
}

"Autogenerated input type of AddPullRequestReview"
input AddPullRequestReviewInput {
  "The Node ID of the pull request to modify."
  pullRequestId: ID!
  "The commit OID the review pertains to."
  commitOID: GitObjectID
  "The contents of the review body comment."
  body: String
  "The event to perform on the pull request review."
  event: PullRequestReviewEvent
  "The review line comments."
  comments: [DraftPullRequestReviewComment]
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"The possible events to perform on a pull request review."
enum PullRequestReviewEvent {
  "Submit general feedback without explicit approval."
  COMMENT
  "Submit feedback and approve merging these changes."
  APPROVE
  "Submit feedback that must be addressed before merging."
  REQUEST_CHANGES
  "Dismiss review so it now longer effects merging."
  DISMISS
}

"Specifies a review comment to be left with a Pull Request Review."
input DraftPullRequestReviewComment {
  "Path to the file being commented on."
  path: String!
  "Position in the file to leave a comment on."
  position: Int!
  "Body of the comment to leave."
  body: String!
}

"Autogenerated return type of SubmitPullRequestReview"
type SubmitPullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The submitted pull request review."
  pullRequestReview: PullRequestReview
}

"Autogenerated input type of SubmitPullRequestReview"
input SubmitPullRequestReviewInput {
  "The Pull Request Review ID to submit."
  pullRequestReviewId: ID!
  "The event to send to the Pull Request Review."
  event: PullRequestReviewEvent!
  "The text field to set on the Pull Request Review."
  body: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdatePullRequestReview"
type UpdatePullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated pull request review."
  pullRequestReview: PullRequestReview
}

"Autogenerated input type of UpdatePullRequestReview"
input UpdatePullRequestReviewInput {
  "The Node ID of the pull request review to modify."
  pullRequestReviewId: ID!
  "The contents of the pull request review body."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DismissPullRequestReview"
type DismissPullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The dismissed pull request review."
  pullRequestReview: PullRequestReview
}

"Autogenerated input type of DismissPullRequestReview"
input DismissPullRequestReviewInput {
  "The Node ID of the pull request review to modify."
  pullRequestReviewId: ID!
  "The contents of the pull request review dismissal message."
  message: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeletePullRequestReview"
type DeletePullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The deleted pull request review."
  pullRequestReview: PullRequestReview
}

"Autogenerated input type of DeletePullRequestReview"
input DeletePullRequestReviewInput {
  "The Node ID of the pull request review to delete."
  pullRequestReviewId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of ResolveReviewThread"
type ResolveReviewThreadPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The thread to resolve."
  thread: PullRequestReviewThread
}

"Autogenerated input type of ResolveReviewThread"
input ResolveReviewThreadInput {
  "The ID of the thread to resolve"
  threadId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UnresolveReviewThread"
type UnresolveReviewThreadPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The thread to resolve."
  thread: PullRequestReviewThread
}

"Autogenerated input type of UnresolveReviewThread"
input UnresolveReviewThreadInput {
  "The ID of the thread to unresolve"
  threadId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of AddPullRequestReviewComment"
type AddPullRequestReviewCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The newly created comment."
  comment: PullRequestReviewComment
  "The edge from the review's comment connection."
  commentEdge: PullRequestReviewCommentEdge
}

"Autogenerated input type of AddPullRequestReviewComment"
input AddPullRequestReviewCommentInput {
  "The Node ID of the review to modify."
  pullRequestReviewId: ID!
  "The SHA of the commit to comment on."
  commitOID: GitObjectID
  "The text of the comment."
  body: String!
  "The relative path of the file to comment on."
  path: String
  "The line index in the diff to comment on."
  position: Int
  "The comment id to reply to."
  inReplyTo: ID
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdatePullRequestReviewComment"
type UpdatePullRequestReviewCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated comment."
  pullRequestReviewComment: PullRequestReviewComment
}

"Autogenerated input type of UpdatePullRequestReviewComment"
input UpdatePullRequestReviewCommentInput {
  "The Node ID of the comment to modify."
  pullRequestReviewCommentId: ID!
  "The text of the comment."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseProfile"
input UpdateEnterpriseProfileInput {
  "The Enterprise ID to update."
  enterpriseId: ID!
  "The name of the enterprise."
  name: String
  "The description of the enterprise."
  description: String
  "The URL of the enterprise's website."
  websiteUrl: String
  "The location of the enterprise."
  location: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of InviteEnterpriseAdmin"
input InviteEnterpriseAdminInput {
  "The ID of the enterprise to which you want to invite an administrator."
  enterpriseId: ID!
  "The login of a user to invite as an administrator."
  invitee: String
  "The email of the person to invite as an administrator."
  email: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of AcceptEnterpriseAdministratorInvitation"
input AcceptEnterpriseAdministratorInvitationInput {
  "The id of the invitation being accepted"
  invitationId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of CancelEnterpriseAdminInvitation"
input CancelEnterpriseAdminInvitationInput {
  "The Node ID of the pending enterprise administrator invitation."
  invitationId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of RemoveEnterpriseAdmin"
input RemoveEnterpriseAdminInput {
  "The Enterprise ID from which to remove the administrator."
  enterpriseId: ID!
  "The login of the user to remove as an administrator."
  login: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of RemoveEnterpriseOrganization"
input RemoveEnterpriseOrganizationInput {
  "The ID of the enterprise from which the organization should be removed."
  enterpriseId: ID!
  "The ID of the organization to remove from the enterprise."
  organizationId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of CreateEnterpriseOrganization"
input CreateEnterpriseOrganizationInput {
  "The ID of the enterprise owning the new organization."
  enterpriseId: ID!
  "The login of the new organization."
  login: String!
  "The profile name of the new organization."
  profileName: String!
  "The email used for sending billing receipts."
  billingEmail: String!
  "The logins for the administrators of the new organization."
  adminLogins: [String!]!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes"
input RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  "The ID of the enterprise on which to set an identity provider."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting"
input UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  "The ID of the enterprise on which to set the members can create repositories setting."
  enterpriseId: ID!
  "When false, allow member organizations to set their own repository creation member privileges."
  membersCanCreateRepositoriesPolicyEnabled: Boolean
  "Allow members to create public repositories. Defaults to current value."
  membersCanCreatePublicRepositories: Boolean
  "Allow members to create private repositories. Defaults to current value."
  membersCanCreatePrivateRepositories: Boolean
  "Allow members to create internal repositories. Defaults to current value."
  membersCanCreateInternalRepositories: Boolean
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting"
input UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  "The ID of the enterprise on which to set the allow private repository forking setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting"
input UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  "The ID of the enterprise on which to set the default repository permission setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting"
input UpdateEnterpriseTeamDiscussionsSettingInput {
  "The ID of the enterprise on which to set the team discussions setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting"
input UpdateEnterpriseOrganizationProjectsSettingInput {
  "The ID of the enterprise on which to set the organization projects setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting"
input UpdateEnterpriseRepositoryProjectsSettingInput {
  "The ID of the enterprise on which to set the repository projects setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting"
input UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  "The ID of the enterprise on which to set the members can change repository visibility setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting"
input UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  "The ID of the enterprise on which to set the members can invite collaborators setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting"
input UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  "The ID of the enterprise on which to set the members can delete repositories setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting"
input UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  "The ID of the enterprise on which to set the members can make purchases setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting"
input UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  "The ID of the enterprise on which to set the two factor authentication required setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting"
input UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  "The ID of the enterprise on which to set the members can update protected branches setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting"
input UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  "The ID of the enterprise on which to set the members can delete issues setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting"
input UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  "The ID of the enterprise on which to set the members can view dependency insights setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseActionExecutionCapabilitySetting"
input UpdateEnterpriseActionExecutionCapabilitySettingInput {
  "The ID of the enterprise on which to set the members can create repositories setting."
  enterpriseId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateEnterpriseAdministratorRole"
input UpdateEnterpriseAdministratorRoleInput {
  "The ID of the Enterprise which the admin belongs to."
  enterpriseId: ID!
  "The login of a administrator whose role is being changed."
  login: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of RemoveOutsideCollaborator"
type RemoveOutsideCollaboratorPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The user that was removed as an outside collaborator."
  removedUser: User
}

"Autogenerated input type of RemoveOutsideCollaborator"
input RemoveOutsideCollaboratorInput {
  "The ID of the outside collaborator to remove."
  userId: ID!
  "The ID of the organization to remove the outside collaborator from."
  organizationId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of RequestReviews"
type RequestReviewsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The pull request that is getting requests."
  pullRequest: PullRequest
  "The edge from the pull request to the requested reviewers."
  requestedReviewersEdge: UserEdge
}

"Autogenerated input type of RequestReviews"
input RequestReviewsInput {
  "The Node ID of the pull request to modify."
  pullRequestId: ID!
  "The Node IDs of the user to request."
  userIds: [ID!]
  "The Node IDs of the team to request."
  teamIds: [ID!]
  "Add users to the set rather than replace."
  union: Boolean
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"The possible states of a registry package file."
enum RegistryPackageFileState {
  "Package file doesn't have a blob backing it."
  NEW
  "All Package file contents have been uploaded."
  UPLOADED
}

"Autogenerated return type of CloneTemplateRepository"
type CloneTemplateRepositoryPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new repository."
  repository: Repository
}

"Autogenerated input type of CloneTemplateRepository"
input CloneTemplateRepositoryInput {
  "The Node ID of the template repository."
  repositoryId: ID!
  "The name of the new repository."
  name: String!
  "The ID of the owner for the new repository."
  ownerId: ID!
  "A short description of the new repository."
  description: String
  "Indicates the repository's visibility level."
  visibility: RepositoryVisibility!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CreateRepository"
type CreateRepositoryPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new repository."
  repository: Repository
}

"Autogenerated input type of CreateRepository"
input CreateRepositoryInput {
  "The name of the new repository."
  name: String!
  "The ID of the owner for the new repository."
  ownerId: ID
  "A short description of the new repository."
  description: String
  "Indicates the repository's visibility level."
  visibility: RepositoryVisibility!
  "Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure."
  template: Boolean = false
  "The URL for a web page about this repository."
  homepageUrl: URI
  "Indicates if the repository should have the wiki feature enabled."
  hasWikiEnabled: Boolean = false
  "Indicates if the repository should have the issues feature enabled."
  hasIssuesEnabled: Boolean = true
  "When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository."
  teamId: ID
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateRepository"
type UpdateRepositoryPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated repository."
  repository: Repository
}

"Autogenerated input type of UpdateRepository"
input UpdateRepositoryInput {
  "The ID of the repository to update."
  repositoryId: ID!
  "The new name of the repository."
  name: String
  "A new description for the repository. Pass an empty string to erase the existing description."
  description: String
  "Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure."
  template: Boolean
  "The URL for a web page about this repository. Pass an empty string to erase the existing URL."
  homepageUrl: URI
  "Indicates if the repository should have the wiki feature enabled."
  hasWikiEnabled: Boolean
  "Indicates if the repository should have the issues feature enabled."
  hasIssuesEnabled: Boolean
  "Indicates if the repository should have the project boards feature enabled."
  hasProjectsEnabled: Boolean
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CreateRef"
type CreateRefPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The newly created ref."
  ref: Ref
}

"Autogenerated input type of CreateRef"
input CreateRefInput {
  "The Node ID of the Repository to create the Ref in."
  repositoryId: ID!
  "The fully qualified name of the new Ref (ie: `refs\/heads\/my_new_branch`)."
  name: String!
  "The GitObjectID that the new Ref shall target. Must point to a commit."
  oid: GitObjectID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateRef"
type UpdateRefPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated Ref."
  ref: Ref
}

"Autogenerated input type of UpdateRef"
input UpdateRefInput {
  "The Node ID of the Ref to be updated."
  refId: ID!
  "The GitObjectID that the Ref shall be updated to target."
  oid: GitObjectID!
  "Permit updates of branch Refs that are not fast-forwards?"
  force: Boolean = false
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeleteRef"
type DeleteRefPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of DeleteRef"
input DeleteRefInput {
  "The Node ID of the Ref to be deleted."
  refId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of MergeBranch"
type MergeBranchPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The resulting merge Commit."
  mergeCommit: Commit
}

"Autogenerated input type of MergeBranch"
input MergeBranchInput {
  "The Node ID of the Repository containing the base branch that will be modified."
  repositoryId: ID!
  "The name of the base branch that the provided head will be merged into."
  base: String!
  "The head to merge into the base branch. This can be a branch name or a commit GitObjectID."
  head: String!
  "Message to use for the merge commit. If omitted, a default will be used."
  commitMessage: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of AddStar"
type AddStarPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The starrable."
  starrable: Starrable
}

"Autogenerated input type of AddStar"
input AddStarInput {
  "The Starrable ID to star."
  starrableId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of RemoveStar"
type RemoveStarPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The starrable."
  starrable: Starrable
}

"Autogenerated input type of RemoveStar"
input RemoveStarInput {
  "The Starrable ID to unstar."
  starrableId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of AcceptTopicSuggestion"
type AcceptTopicSuggestionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The accepted topic."
  topic: Topic
}

"Autogenerated input type of AcceptTopicSuggestion"
input AcceptTopicSuggestionInput {
  "The Node ID of the repository."
  repositoryId: ID!
  "The name of the suggested topic."
  name: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeclineTopicSuggestion"
type DeclineTopicSuggestionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The declined topic."
  topic: Topic
}

"Autogenerated input type of DeclineTopicSuggestion"
input DeclineTopicSuggestionInput {
  "The Node ID of the repository."
  repositoryId: ID!
  "The name of the suggested topic."
  name: String!
  "The reason why the suggested topic is declined."
  reason: TopicSuggestionDeclineReason!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Reason that the suggested topic is declined."
enum TopicSuggestionDeclineReason {
  "The suggested topic is not relevant to the repository."
  NOT_RELEVANT
  "The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1)."
  TOO_SPECIFIC
  "The viewer does not like the suggested topic."
  PERSONAL_PREFERENCE
  "The suggested topic is too general for the repository."
  TOO_GENERAL
}

"Autogenerated return type of UpdateTopics"
type UpdateTopicsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "Names of the provided topics that are not valid."
  invalidTopicNames: [String!]
  "The updated repository."
  repository: Repository
}

"Autogenerated input type of UpdateTopics"
input UpdateTopicsInput {
  "The Node ID of the repository."
  repositoryId: ID!
  "An array of topic names."
  topicNames: [String!]!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CreateTeamDiscussion"
type CreateTeamDiscussionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new discussion."
  teamDiscussion: TeamDiscussion
}

"Autogenerated input type of CreateTeamDiscussion"
input CreateTeamDiscussionInput {
  "The ID of the team to which the discussion belongs."
  teamId: ID!
  "The title of the discussion."
  title: String!
  "The content of the discussion."
  body: String!
  "If true, restricts the visiblity of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion."
  private: Boolean
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateTeamDiscussion"
type UpdateTeamDiscussionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated discussion."
  teamDiscussion: TeamDiscussion
}

"Autogenerated input type of UpdateTeamDiscussion"
input UpdateTeamDiscussionInput {
  "The Node ID of the discussion to modify."
  id: ID!
  "The updated title of the discussion."
  title: String
  "The updated text of the discussion."
  body: String
  "The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server."
  bodyVersion: String
  "If provided, sets the pinned state of the updated discussion."
  pinned: Boolean
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeleteTeamDiscussion"
type DeleteTeamDiscussionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of DeleteTeamDiscussion"
input DeleteTeamDiscussionInput {
  "The discussion ID to delete."
  id: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CreateTeamDiscussionComment"
type CreateTeamDiscussionCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new comment."
  teamDiscussionComment: TeamDiscussionComment
}

"Autogenerated input type of CreateTeamDiscussionComment"
input CreateTeamDiscussionCommentInput {
  "The ID of the discussion to which the comment belongs."
  discussionId: ID!
  "The content of the comment."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateTeamDiscussionComment"
type UpdateTeamDiscussionCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated comment."
  teamDiscussionComment: TeamDiscussionComment
}

"Autogenerated input type of UpdateTeamDiscussionComment"
input UpdateTeamDiscussionCommentInput {
  "The ID of the comment to modify."
  id: ID!
  "The updated text of the comment."
  body: String!
  "The current version of the body content."
  bodyVersion: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeleteTeamDiscussionComment"
type DeleteTeamDiscussionCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of DeleteTeamDiscussionComment"
input DeleteTeamDiscussionCommentInput {
  "The ID of the comment to delete."
  id: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of CreateBranchProtectionRule"
type CreateBranchProtectionRulePayload {
  "The newly created BranchProtectionRule."
  branchProtectionRule: BranchProtectionRule
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of CreateBranchProtectionRule"
input CreateBranchProtectionRuleInput {
  "The global relay id of the repository in which a new branch protection rule should be created in."
  repositoryId: ID!
  "The glob-like pattern used to determine matching branches."
  pattern: String!
  "Are approving reviews required to update matching branches."
  requiresApprovingReviews: Boolean
  "Number of approving reviews required to update matching branches."
  requiredApprovingReviewCount: Int
  "Are commits required to be signed."
  requiresCommitSignatures: Boolean
  "Can admins overwrite branch protection."
  isAdminEnforced: Boolean
  "Are status checks required to update matching branches."
  requiresStatusChecks: Boolean
  "Are branches required to be up to date before merging."
  requiresStrictStatusChecks: Boolean
  "Are reviews from code owners required to update matching branches."
  requiresCodeOwnerReviews: Boolean
  "Will new commits pushed to matching branches dismiss pull request review approvals."
  dismissesStaleReviews: Boolean
  "Is dismissal of pull request reviews restricted."
  restrictsReviewDismissals: Boolean
  "A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches."
  reviewDismissalActorIds: [ID!]
  "Is pushing to matching branches restricted."
  restrictsPushes: Boolean
  "A list of User, Team or App IDs allowed to push to matching branches."
  pushActorIds: [ID!]
  "List of required status check contexts that must pass for commits to be accepted to matching branches."
  requiredStatusCheckContexts: [String!]
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UpdateBranchProtectionRule"
type UpdateBranchProtectionRulePayload {
  "The newly created BranchProtectionRule."
  branchProtectionRule: BranchProtectionRule
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of UpdateBranchProtectionRule"
input UpdateBranchProtectionRuleInput {
  "The global relay id of the branch protection rule to be updated."
  branchProtectionRuleId: ID!
  "The glob-like pattern used to determine matching branches."
  pattern: String
  "Are approving reviews required to update matching branches."
  requiresApprovingReviews: Boolean
  "Number of approving reviews required to update matching branches."
  requiredApprovingReviewCount: Int
  "Are commits required to be signed."
  requiresCommitSignatures: Boolean
  "Can admins overwrite branch protection."
  isAdminEnforced: Boolean
  "Are status checks required to update matching branches."
  requiresStatusChecks: Boolean
  "Are branches required to be up to date before merging."
  requiresStrictStatusChecks: Boolean
  "Are reviews from code owners required to update matching branches."
  requiresCodeOwnerReviews: Boolean
  "Will new commits pushed to matching branches dismiss pull request review approvals."
  dismissesStaleReviews: Boolean
  "Is dismissal of pull request reviews restricted."
  restrictsReviewDismissals: Boolean
  "A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches."
  reviewDismissalActorIds: [ID!]
  "Is pushing to matching branches restricted."
  restrictsPushes: Boolean
  "A list of User, Team or App IDs allowed to push to matching branches."
  pushActorIds: [ID!]
  "List of required status check contexts that must pass for commits to be accepted to matching branches."
  requiredStatusCheckContexts: [String!]
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of DeleteBranchProtectionRule"
type DeleteBranchProtectionRulePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of DeleteBranchProtectionRule"
input DeleteBranchProtectionRuleInput {
  "The global relay id of the branch protection rule to be deleted."
  branchProtectionRuleId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of ChangeUserStatus"
type ChangeUserStatusPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "Your updated status."
  status: UserStatus
}

"Autogenerated input type of ChangeUserStatus"
input ChangeUserStatusInput {
  "The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:."
  emoji: String
  "A short description of your current status."
  message: String
  "The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible."
  organizationId: ID
  "Whether this status should indicate you are not fully available on GitHub, e.g., you are away."
  limitedAvailability: Boolean = false
  "If set, the user status will not be shown after this date."
  expiresAt: DateTime
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of FollowUser"
type FollowUserPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The user that was followed."
  user: User
}

"Autogenerated input type of FollowUser"
input FollowUserInput {
  "ID of the user to follow."
  userId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of UnfollowUser"
type UnfollowUserPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The user that was unfollowed."
  user: User
}

"Autogenerated input type of UnfollowUser"
input UnfollowUserInput {
  "ID of the user to unfollow."
  userId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"A content attachment"
type ContentAttachment {
  "The body text of the content attachment. This parameter supports markdown."
  body: String!
  "The content reference that the content attachment is attached to."
  contentReference: ContentReference!
  "Identifies the primary key from the database."
  databaseId: Int!
  id: ID!
  "The title of the content attachment."
  title: String!
}

"A content reference"
type ContentReference {
  "Identifies the primary key from the database."
  databaseId: Int!
  id: ID!
  "The reference of the content reference."
  reference: String!
}

"Autogenerated input type of CreateContentAttachment"
input CreateContentAttachmentInput {
  "The node ID of the content_reference."
  contentReferenceId: ID!
  "The title of the content attachment."
  title: String!
  "The body of the content attachment, which may contain markdown."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Represents a GPG signature on a Commit or Tag."
type GpgSignature implements GitSignature {
  "Email used to sign this object."
  email: String!
  "True if the signature is valid and verified by GitHub."
  isValid: Boolean!
  "Hex-encoded ID of the key that signed this object."
  keyId: String
  "Payload for GPG signing object. Raw ODB object without the signature header."
  payload: String!
  "ASCII-armored signature header from object."
  signature: String!
  "GitHub user corresponding to the email signing this commit."
  signer: User
  "The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid."
  state: GitSignatureState!
  "True if the signature was made with GitHub's signing key."
  wasSignedByGitHub: Boolean!
}

"Represents an S\/MIME signature on a Commit or Tag."
type SmimeSignature implements GitSignature {
  "Email used to sign this object."
  email: String!
  "True if the signature is valid and verified by GitHub."
  isValid: Boolean!
  "Payload for GPG signing object. Raw ODB object without the signature header."
  payload: String!
  "ASCII-armored signature header from object."
  signature: String!
  "GitHub user corresponding to the email signing this commit."
  signer: User
  "The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid."
  state: GitSignatureState!
  "True if the signature was made with GitHub's signing key."
  wasSignedByGitHub: Boolean!
}

"Represents a Git tag."
type Tag implements Node & GitObject {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "The HTTP path for this Git object"
  commitResourcePath: URI!
  "The HTTP URL for this Git object"
  commitUrl: URI!
  id: ID!
  "The Git tag message."
  message: String
  "The Git tag name."
  name: String!
  "The Git object ID"
  oid: GitObjectID!
  "The Repository the Git object belongs to"
  repository: Repository!
  "Details about the tag author."
  tagger: GitActor
  "The Git object the tag points to."
  target: GitObject!
}

"Represents an unknown signature on a Commit or Tag."
type UnknownSignature implements GitSignature {
  "Email used to sign this object."
  email: String!
  "True if the signature is valid and verified by GitHub."
  isValid: Boolean!
  "Payload for GPG signing object. Raw ODB object without the signature header."
  payload: String!
  "ASCII-armored signature header from object."
  signature: String!
  "GitHub user corresponding to the email signing this commit."
  signer: User
  "The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid."
  state: GitSignatureState!
  "True if the signature was made with GitHub's signing key."
  wasSignedByGitHub: Boolean!
}

"A generic hovercard context with a message and icon"
type GenericHovercardContext implements HovercardContext {
  "A string describing this context"
  message: String!
  "An octicon to accompany this context"
  octicon: String!
}

"An organization list hovercard context"
type OrganizationsHovercardContext implements HovercardContext {
  "A string describing this context"
  message: String!
  "An octicon to accompany this context"
  octicon: String!
  "Organizations this user is a member of that are relevant"
  relevantOrganizations("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): OrganizationConnection!
  "The total number of organizations this user is in"
  totalOrganizationCount: Int!
}

"An organization teams hovercard context"
type OrganizationTeamsHovercardContext implements HovercardContext {
  "A string describing this context"
  message: String!
  "An octicon to accompany this context"
  octicon: String!
  "Teams in this organization the user is a member of that are relevant"
  relevantTeams("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): TeamConnection!
  "The path for the full team list for this user"
  teamsResourcePath: URI!
  "The URL for the full team list for this user"
  teamsUrl: URI!
  "The total number of teams the user is on in the organization"
  totalTeamCount: Int!
}

"A hovercard context with a message describing how the viewer is related."
type ViewerHovercardContext implements HovercardContext {
  "A string describing this context"
  message: String!
  "An octicon to accompany this context"
  octicon: String!
  "Identifies the user who is related to this context."
  viewer: User!
}

"A hovercard context with a message describing the current code review state of the pull\nrequest.\n"
type ReviewStatusHovercardContext implements HovercardContext {
  "A string describing this context"
  message: String!
  "An octicon to accompany this context"
  octicon: String!
}