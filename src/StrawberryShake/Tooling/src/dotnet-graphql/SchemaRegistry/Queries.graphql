mutation publishSchema(
  $externalId: String!
  $schemaName: String!
  $environmentName: String!
  $sourceText: String
  $tags: [TagInput!]
) {
  publishSchema(
    input: {
      externalId: $externalId
      schemaName: $schemaName
      environmentName: $environmentName
      sourceText: $sourceText
      tags: $tags
    }
  ) {
    sessionId
  }
}

mutation markSchemaPublished(
  $externalId: String!
  $schemaName: String!
  $environmentName: String!
) {
  markSchemaPublished(
    input: {
      externalId: $externalId
      schemaName: $schemaName
      environmentName: $environmentName
    }
  ) {
    environment {
      ... EnvironmentName
    }
  }
}

mutation publishClient(
  $externalId: String!
  $schemaName: String!
  $environmentName: String!
  $clientName: String!
  $format: QueryFileFormat!
  $files: [QueryFileInput!]!
  $tags: [TagInput!]
) {
  publishClient(
    input: {
      externalId: $externalId
      schemaName: $schemaName
      environmentName: $environmentName
      clientName: $clientName
      format: $format
      files: $files
      tags: $tags
    }
  ) {
    sessionId
  }
}

mutation markClientPublished(
  $externalId: String!
  $schemaName: String!
  $environmentName: String!
) {
  markClientPublished(
    input: {
      externalId: $externalId
      schemaName: $schemaName
      environmentName: $environmentName
    }
  ) {
    environment {
      ... EnvironmentName
    }
  }
}

subscription onPublishDocument($sessionId: String!) {
  onPublishDocument: onPublishSchema(sessionId: $sessionId) {
    isCompleted
    issue {
     ... Issue
    }
  }
}

fragment Issue on Issue {
  type
  code
  message
  file
  location {
    column
    line
    start
    end
  }
  resolution
}

fragment EnvironmentName on Environment {
  name
}
