@typeparam TResult
@implements IDisposable

@if (_isLoading && Loading is not null)
{
    @Loading
}

@if (_isErrorResult && Error is not null)
{
    @Error(_errors!)
}

@if (_isSuccessResult)
{
    @Content(_result!)
}

@code {
    [Parameter]
    public IObservable<IOperationResult<TResult>> Items { get; set; } = default!;

    [Parameter]
    public RenderFragment<TResult> Content { get; set; } = default!;

    [Parameter]
    public RenderFragment<IReadOnlyList<IClientError>>? Error { get; set; }

    [Parameter]
    public RenderFragment? Loading { get; set; }
}


@code {
    private IDisposable? _subscription;
    private bool _isLoading = true;
    private bool _isErrorResult;
    private bool _isSuccessResult;
    private TResult? _result;
    private IReadOnlyList<IClientError>? _errors;
    private bool _disposed;

    protected override void OnInitialized()
    {
        _subscription = Items.Subscribe(operationResult =>
        {
            _result = operationResult.Data;
            _errors = operationResult.Errors;
            _isErrorResult = operationResult.IsErrorResult();
            _isSuccessResult = operationResult.IsSuccessResult();
            _isLoading = false;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
      if (!_disposed)
      {
          _subscription?.Dispose();
          _disposed = true;
      }
    }
}
