#nullable enable
GreenDonut.DataLoaderBase<TKey, TValue>
GreenDonut.DataLoaderBase<TKey, TValue>.Clear() -> void
GreenDonut.DataLoaderBase<TKey, TValue>.Dispose() -> void
GreenDonut.DataLoaderBase<TKey, TValue>.Remove(TKey key) -> void
GreenDonut.DataLoaderBase<TKey, TValue>.Set(TKey key, System.Threading.Tasks.Task<TValue>! value) -> void
GreenDonut.DataLoaderExtensions
GreenDonut.FetchDataDelegate<TKey, TValue>
GreenDonut.IBatchScheduler
GreenDonut.IBatchScheduler.Schedule(System.Func<System.Threading.Tasks.ValueTask>! dispatch) -> void
GreenDonut.IDataLoader
GreenDonut.IDataLoader.Clear() -> void
GreenDonut.IDataLoader.Remove(object! key) -> void
GreenDonut.IDataLoader.Set(object! key, System.Threading.Tasks.Task<object?>! value) -> void
GreenDonut.IDataLoader<TKey, TValue>
GreenDonut.IDataLoader<TKey, TValue>.Remove(TKey key) -> void
GreenDonut.IDataLoader<TKey, TValue>.Set(TKey key, System.Threading.Tasks.Task<TValue>! value) -> void
GreenDonut.ITaskCache
GreenDonut.ITaskCache.Clear() -> void
GreenDonut.ITaskCache.Size.get -> int
GreenDonut.ITaskCache.Usage.get -> int
GreenDonut.Result<TValue>
GreenDonut.Result<TValue>.Equals(GreenDonut.Result<TValue> other) -> bool
GreenDonut.Result<TValue>.Error.get -> System.Exception?
GreenDonut.Result<TValue>.Result() -> void
GreenDonut.Result<TValue>.Value.get -> TValue
override GreenDonut.Result<TValue>.Equals(object? obj) -> bool
override GreenDonut.Result<TValue>.GetHashCode() -> int
static GreenDonut.DataLoaderExtensions.LoadAsync(this GreenDonut.IDataLoader! dataLoader, object! key) -> System.Threading.Tasks.Task<object?>!
static GreenDonut.DataLoaderExtensions.LoadAsync(this GreenDonut.IDataLoader! dataLoader, params object![]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
static GreenDonut.DataLoaderExtensions.LoadAsync<TKey, TValue>(this GreenDonut.IDataLoader<TKey, TValue>! dataLoader, params TKey[]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
static GreenDonut.DataLoaderExtensions.Set(this GreenDonut.IDataLoader! dataLoader, object! key, object? value) -> void
static GreenDonut.DataLoaderExtensions.Set<TKey, TValue>(this GreenDonut.IDataLoader<TKey, TValue>! dataLoader, TKey key, TValue value) -> void
static GreenDonut.Result<TValue>.implicit operator GreenDonut.Result<TValue>(System.Exception? error) -> GreenDonut.Result<TValue>
static GreenDonut.Result<TValue>.implicit operator GreenDonut.Result<TValue>(TValue value) -> GreenDonut.Result<TValue>
static GreenDonut.Result<TValue>.implicit operator System.Exception?(GreenDonut.Result<TValue> result) -> System.Exception?
static GreenDonut.Result<TValue>.implicit operator TValue(GreenDonut.Result<TValue> result) -> TValue
static GreenDonut.Result<TValue>.Reject(System.Exception! error) -> GreenDonut.Result<TValue>
static GreenDonut.Result<TValue>.Resolve(TValue value) -> GreenDonut.Result<TValue>
virtual GreenDonut.DataLoaderBase<TKey, TValue>.Dispose(bool disposing) -> void
