#nullable enable
abstract GreenDonut.DataLoaderBase<TKey, TValue>.FetchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<GreenDonut.Result<TValue>>!>
GreenDonut.Batch<TKey, TValue>
GreenDonut.Batch<TKey, TValue>.Batch() -> void
GreenDonut.Batch<TKey, TValue>.Get(TKey key) -> System.Threading.Tasks.TaskCompletionSource<TValue>!
GreenDonut.Batch<TKey, TValue>.Keys.get -> System.Collections.Generic.IReadOnlyList<TKey>!
GreenDonut.Batch<TKey, TValue>.Size.get -> int
GreenDonut.Batch<TKey, TValue>.StartDispatchingAsync(System.Func<System.Threading.Tasks.ValueTask>! dispatch) -> System.Threading.Tasks.ValueTask
GreenDonut.Batch<TKey, TValue>.TryGetOrCreate(TKey key, out System.Threading.Tasks.TaskCompletionSource<TValue>? promise) -> bool
GreenDonut.CacheKeyResolverDelegate<TKey>
GreenDonut.DataLoaderBase<TKey, TValue>
GreenDonut.DataLoaderBase<TKey, TValue>.Clear() -> void
GreenDonut.DataLoaderBase<TKey, TValue>.DataLoaderBase(GreenDonut.IBatchScheduler! batchScheduler, GreenDonut.DataLoaderOptions<TKey>? options) -> void
GreenDonut.DataLoaderBase<TKey, TValue>.DataLoaderBase(GreenDonut.IBatchScheduler! batchScheduler) -> void
GreenDonut.DataLoaderBase<TKey, TValue>.Dispose() -> void
GreenDonut.DataLoaderBase<TKey, TValue>.LoadAsync(System.Collections.Generic.IReadOnlyCollection<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
GreenDonut.DataLoaderBase<TKey, TValue>.LoadAsync(System.Threading.CancellationToken cancellationToken, params TKey[]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
GreenDonut.DataLoaderBase<TKey, TValue>.LoadAsync(TKey key, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TValue>!
GreenDonut.DataLoaderBase<TKey, TValue>.Remove(TKey key) -> void
GreenDonut.DataLoaderBase<TKey, TValue>.Set(TKey key, System.Threading.Tasks.Task<TValue>! value) -> void
GreenDonut.DataLoaderExtensions
GreenDonut.DataLoaderOptions<TKey>
GreenDonut.DataLoaderOptions<TKey>.Batch.get -> bool
GreenDonut.DataLoaderOptions<TKey>.Batch.set -> void
GreenDonut.DataLoaderOptions<TKey>.Cache.get -> GreenDonut.ITaskCache?
GreenDonut.DataLoaderOptions<TKey>.Cache.set -> void
GreenDonut.DataLoaderOptions<TKey>.CacheKeyResolver.get -> GreenDonut.CacheKeyResolverDelegate<TKey>?
GreenDonut.DataLoaderOptions<TKey>.CacheKeyResolver.set -> void
GreenDonut.DataLoaderOptions<TKey>.CacheSize.get -> int
GreenDonut.DataLoaderOptions<TKey>.CacheSize.set -> void
GreenDonut.DataLoaderOptions<TKey>.Caching.get -> bool
GreenDonut.DataLoaderOptions<TKey>.Caching.set -> void
GreenDonut.DataLoaderOptions<TKey>.DataLoaderOptions() -> void
GreenDonut.DataLoaderOptions<TKey>.MaxBatchSize.get -> int
GreenDonut.DataLoaderOptions<TKey>.MaxBatchSize.set -> void
GreenDonut.DataLoaderOptionsExtensions
GreenDonut.FetchDataDelegate<TKey, TValue>
GreenDonut.IBatchScheduler
GreenDonut.IBatchScheduler.Schedule(System.Func<System.Threading.Tasks.ValueTask>! dispatch) -> void
GreenDonut.IDataLoader
GreenDonut.IDataLoader.Clear() -> void
GreenDonut.IDataLoader.LoadAsync(object! key, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<object?>!
GreenDonut.IDataLoader.LoadAsync(System.Collections.Generic.IReadOnlyCollection<object!>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
GreenDonut.IDataLoader.LoadAsync(System.Threading.CancellationToken cancellationToken, params object![]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
GreenDonut.IDataLoader.Remove(object! key) -> void
GreenDonut.IDataLoader.Set(object! key, System.Threading.Tasks.Task<object?>! value) -> void
GreenDonut.IDataLoader<TKey, TValue>
GreenDonut.IDataLoader<TKey, TValue>.LoadAsync(System.Collections.Generic.IReadOnlyCollection<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
GreenDonut.IDataLoader<TKey, TValue>.LoadAsync(System.Threading.CancellationToken cancellationToken, params TKey[]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
GreenDonut.IDataLoader<TKey, TValue>.LoadAsync(TKey key, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TValue>!
GreenDonut.IDataLoader<TKey, TValue>.Remove(TKey key) -> void
GreenDonut.IDataLoader<TKey, TValue>.Set(TKey key, System.Threading.Tasks.Task<TValue>! value) -> void
GreenDonut.ITaskCache
GreenDonut.ITaskCache.Clear() -> void
GreenDonut.ITaskCache.Remove(object! key) -> void
GreenDonut.ITaskCache.Size.get -> int
GreenDonut.ITaskCache.TryAdd(object! key, object! value) -> bool
GreenDonut.ITaskCache.TryGetValue(object! key, out object? value) -> bool
GreenDonut.ITaskCache.Usage.get -> int
GreenDonut.RequestBufferedEventHandler
GreenDonut.Result<TValue>
GreenDonut.Result<TValue>.Equals(GreenDonut.Result<TValue> other) -> bool
GreenDonut.Result<TValue>.Error.get -> System.Exception?
GreenDonut.Result<TValue>.IsError.get -> bool
GreenDonut.Result<TValue>.Result() -> void
GreenDonut.Result<TValue>.Value.get -> TValue
override GreenDonut.Result<TValue>.Equals(object? obj) -> bool
override GreenDonut.Result<TValue>.GetHashCode() -> int
static GreenDonut.DataLoaderExtensions.LoadAsync(this GreenDonut.IDataLoader! dataLoader, object! key) -> System.Threading.Tasks.Task<object?>!
static GreenDonut.DataLoaderExtensions.LoadAsync(this GreenDonut.IDataLoader! dataLoader, params object![]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
static GreenDonut.DataLoaderExtensions.LoadAsync(this GreenDonut.IDataLoader! dataLoader, System.Collections.Generic.IReadOnlyCollection<object!>! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
static GreenDonut.DataLoaderExtensions.LoadAsync<TKey, TValue>(this GreenDonut.IDataLoader<TKey, TValue>! dataLoader, params TKey[]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
static GreenDonut.DataLoaderExtensions.LoadAsync<TKey, TValue>(this GreenDonut.IDataLoader<TKey, TValue>! dataLoader, System.Collections.Generic.IReadOnlyCollection<TKey>! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
static GreenDonut.DataLoaderExtensions.LoadAsync<TKey, TValue>(this GreenDonut.IDataLoader<TKey, TValue>! dataLoader, TKey key) -> System.Threading.Tasks.Task<TValue>!
static GreenDonut.DataLoaderExtensions.Set(this GreenDonut.IDataLoader! dataLoader, object! key, object? value) -> void
static GreenDonut.DataLoaderExtensions.Set<TKey, TValue>(this GreenDonut.IDataLoader<TKey, TValue>! dataLoader, TKey key, TValue value) -> void
static GreenDonut.DataLoaderOptionsExtensions.GetBatchSize<TKey>(this GreenDonut.DataLoaderOptions<TKey>! options) -> int
static GreenDonut.Result<TValue>.implicit operator GreenDonut.Result<TValue>(System.Exception? error) -> GreenDonut.Result<TValue>
static GreenDonut.Result<TValue>.implicit operator GreenDonut.Result<TValue>(TValue value) -> GreenDonut.Result<TValue>
static GreenDonut.Result<TValue>.implicit operator System.Exception?(GreenDonut.Result<TValue> result) -> System.Exception?
static GreenDonut.Result<TValue>.implicit operator TValue(GreenDonut.Result<TValue> result) -> TValue
static GreenDonut.Result<TValue>.Reject(System.Exception! error) -> GreenDonut.Result<TValue>
static GreenDonut.Result<TValue>.Resolve(TValue value) -> GreenDonut.Result<TValue>
virtual GreenDonut.DataLoaderBase<TKey, TValue>.Dispose(bool disposing) -> void
