abstract GreenDonut.BatchDataLoader<TKey, TValue>.LoadBatchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>!>!
abstract GreenDonut.CacheDataLoader<TKey, TValue>.LoadSingleAsync(TKey key, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TValue>!
abstract GreenDonut.DataLoaderBase<TKey, TValue>.FetchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Memory<GreenDonut.Result<TValue>> results, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
abstract GreenDonut.GroupedDataLoader<TKey, TValue>.LoadGroupedBatchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TValue>!>!
GreenDonut.AutoBatchScheduler
GreenDonut.AutoBatchScheduler.AutoBatchScheduler() -> void
GreenDonut.AutoBatchScheduler.Schedule(System.Func<System.Threading.Tasks.ValueTask>! dispatch) -> void
GreenDonut.BatchDataLoader<TKey, TValue>
GreenDonut.BatchDataLoader<TKey, TValue>.BatchDataLoader(GreenDonut.IBatchScheduler! batchScheduler, GreenDonut.DataLoaderOptions? options = null) -> void
GreenDonut.CacheDataLoader<TKey, TValue>
GreenDonut.CacheDataLoader<TKey, TValue>.CacheDataLoader(GreenDonut.DataLoaderOptions? options = null) -> void
GreenDonut.DataLoaderBase<TKey, TValue>.Cache.get -> GreenDonut.ITaskCache?
GreenDonut.DataLoaderBase<TKey, TValue>.CacheKeyType.get -> string!
GreenDonut.DataLoaderBase<TKey, TValue>.DataLoaderBase(GreenDonut.IBatchScheduler! batchScheduler, GreenDonut.DataLoaderOptions? options = null) -> void
GreenDonut.DataLoaderBase<TKey, TValue>.LoadAsync(System.Collections.Generic.IReadOnlyCollection<TKey>! keys, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
GreenDonut.DataLoaderBase<TKey, TValue>.LoadAsync(TKey key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TValue>!
GreenDonut.DataLoaderBase<TKey, TValue>.TryAddToCache<TItem, TK, TV>(string! cacheKeyType, System.Collections.Generic.IEnumerable<TItem>! items, System.Func<TItem, TK>! key, System.Func<TItem, TV>! value) -> void
GreenDonut.DataLoaderBase<TKey, TValue>.TryAddToCache<TK, TV>(string! cacheKeyType, TK key, TV value) -> void
GreenDonut.DataLoaderDiagnosticEventListener
GreenDonut.DataLoaderDiagnosticEventListener.DataLoaderDiagnosticEventListener() -> void
GreenDonut.DataLoaderOptions
GreenDonut.DataLoaderOptions.Cache.get -> GreenDonut.ITaskCache?
GreenDonut.DataLoaderOptions.Cache.set -> void
GreenDonut.DataLoaderOptions.Caching.get -> bool
GreenDonut.DataLoaderOptions.Caching.set -> void
GreenDonut.DataLoaderOptions.Copy() -> GreenDonut.DataLoaderOptions!
GreenDonut.DataLoaderOptions.DataLoaderOptions() -> void
GreenDonut.DataLoaderOptions.DiagnosticEvents.get -> GreenDonut.IDataLoaderDiagnosticEvents?
GreenDonut.DataLoaderOptions.DiagnosticEvents.set -> void
GreenDonut.DataLoaderOptions.MaxBatchSize.get -> int
GreenDonut.DataLoaderOptions.MaxBatchSize.set -> void
GreenDonut.GroupedDataLoader<TKey, TValue>
GreenDonut.GroupedDataLoader<TKey, TValue>.GroupedDataLoader(GreenDonut.IBatchScheduler! batchScheduler, GreenDonut.DataLoaderOptions? options = null) -> void
GreenDonut.IDataLoader.LoadAsync(object! key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object?>!
GreenDonut.IDataLoader.LoadAsync(System.Collections.Generic.IReadOnlyCollection<object!>! keys, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
GreenDonut.IDataLoader<TKey, TValue>.LoadAsync(System.Collections.Generic.IReadOnlyCollection<TKey>! keys, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
GreenDonut.IDataLoader<TKey, TValue>.LoadAsync(TKey key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TValue>!
GreenDonut.IDataLoaderDiagnosticEventListener
GreenDonut.IDataLoaderDiagnosticEvents
GreenDonut.IDataLoaderDiagnosticEvents.BatchError<TKey>(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Exception! error) -> void
GreenDonut.IDataLoaderDiagnosticEvents.BatchItemError<TKey>(TKey key, System.Exception! error) -> void
GreenDonut.IDataLoaderDiagnosticEvents.BatchResults<TKey, TValue>(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.ReadOnlySpan<GreenDonut.Result<TValue>> values) -> void
GreenDonut.IDataLoaderDiagnosticEvents.ExecuteBatch<TKey>(GreenDonut.IDataLoader! dataLoader, System.Collections.Generic.IReadOnlyList<TKey>! keys) -> System.IDisposable!
GreenDonut.IDataLoaderDiagnosticEvents.ResolvedTaskFromCache(GreenDonut.IDataLoader! dataLoader, GreenDonut.TaskCacheKey cacheKey, System.Threading.Tasks.Task! task) -> void
GreenDonut.ITaskCache.GetOrAddTask<T>(GreenDonut.TaskCacheKey key, System.Func<T!>! createTask) -> T!
GreenDonut.ITaskCache.TryAdd<T>(GreenDonut.TaskCacheKey key, System.Func<T!>! createTask) -> bool
GreenDonut.ITaskCache.TryAdd<T>(GreenDonut.TaskCacheKey key, T! value) -> bool
GreenDonut.ITaskCache.TryRemove(GreenDonut.TaskCacheKey key) -> bool
GreenDonut.Result<TValue>.Kind.get -> GreenDonut.ResultKind
GreenDonut.Result<TValue>.Result(System.Exception! error) -> void
GreenDonut.Result<TValue>.Result(TValue value) -> void
GreenDonut.ResultKind
GreenDonut.ResultKind.Error = 2 -> GreenDonut.ResultKind
GreenDonut.ResultKind.Undefined = 0 -> GreenDonut.ResultKind
GreenDonut.ResultKind.Value = 1 -> GreenDonut.ResultKind
GreenDonut.TaskCache
GreenDonut.TaskCache.Clear() -> void
GreenDonut.TaskCache.GetOrAddTask<T>(GreenDonut.TaskCacheKey key, System.Func<T!>! createTask) -> T!
GreenDonut.TaskCache.Size.get -> int
GreenDonut.TaskCache.TaskCache(int size) -> void
GreenDonut.TaskCache.TryAdd<T>(GreenDonut.TaskCacheKey key, System.Func<T!>! createTask) -> bool
GreenDonut.TaskCache.TryAdd<T>(GreenDonut.TaskCacheKey key, T! value) -> bool
GreenDonut.TaskCache.TryRemove(GreenDonut.TaskCacheKey key) -> bool
GreenDonut.TaskCache.Usage.get -> int
GreenDonut.TaskCacheKey
GreenDonut.TaskCacheKey.Equals(GreenDonut.TaskCacheKey other) -> bool
GreenDonut.TaskCacheKey.Key.get -> object!
GreenDonut.TaskCacheKey.TaskCacheKey() -> void
GreenDonut.TaskCacheKey.TaskCacheKey(string! type, object! key) -> void
GreenDonut.TaskCacheKey.Type.get -> string!
GreenDonut.TaskCacheOwner
GreenDonut.TaskCacheOwner.Cache.get -> GreenDonut.ITaskCache!
GreenDonut.TaskCacheOwner.Dispose() -> void
GreenDonut.TaskCacheOwner.TaskCacheOwner() -> void
GreenDonut.TaskCacheOwner.TaskCacheOwner(Microsoft.Extensions.ObjectPool.ObjectPool<GreenDonut.TaskCache!>! pool) -> void
GreenDonut.TaskCachePool
override GreenDonut.TaskCacheKey.Equals(object? obj) -> bool
override GreenDonut.TaskCacheKey.GetHashCode() -> int
override sealed GreenDonut.BatchDataLoader<TKey, TValue>.FetchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Memory<GreenDonut.Result<TValue>> results, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
override sealed GreenDonut.CacheDataLoader<TKey, TValue>.FetchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Memory<GreenDonut.Result<TValue>> results, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
override sealed GreenDonut.GroupedDataLoader<TKey, TValue>.FetchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Memory<GreenDonut.Result<TValue[]!>> results, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
static GreenDonut.AutoBatchScheduler.Default.get -> GreenDonut.AutoBatchScheduler!
static GreenDonut.DataLoaderBase<TKey, TValue>.GetCacheKeyType(System.Type! type) -> string!
static GreenDonut.DataLoaderBase<TKey, TValue>.GetCacheKeyType<TDataLoader>() -> string!
static GreenDonut.DataLoaderDiagnosticEventListener.EmptyScope.get -> System.IDisposable!
static GreenDonut.DataLoaderExtensions.LoadAsync(this GreenDonut.IDataLoader! dataLoader, System.Threading.CancellationToken cancellationToken, params object![]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
static GreenDonut.DataLoaderExtensions.LoadAsync<TKey, TValue>(this GreenDonut.IDataLoader<TKey, TValue>! dataLoader, System.Threading.CancellationToken cancellationToken, params TKey[]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
static GreenDonut.TaskCachePool.Create(int cacheSize = 256, int? maximumRetained = null) -> Microsoft.Extensions.ObjectPool.ObjectPool<GreenDonut.TaskCache!>!
static GreenDonut.TaskCachePool.Create(Microsoft.Extensions.ObjectPool.ObjectPoolProvider! provider, int cacheSize = 256) -> Microsoft.Extensions.ObjectPool.ObjectPool<GreenDonut.TaskCache!>!
static GreenDonut.TaskCachePool.Shared.get -> Microsoft.Extensions.ObjectPool.ObjectPool<GreenDonut.TaskCache!>!
virtual GreenDonut.DataLoaderDiagnosticEventListener.BatchError<TKey>(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Exception! error) -> void
virtual GreenDonut.DataLoaderDiagnosticEventListener.BatchItemError<TKey>(TKey key, System.Exception! error) -> void
virtual GreenDonut.DataLoaderDiagnosticEventListener.BatchResults<TKey, TValue>(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.ReadOnlySpan<GreenDonut.Result<TValue>> values) -> void
virtual GreenDonut.DataLoaderDiagnosticEventListener.ExecuteBatch<TKey>(GreenDonut.IDataLoader! dataLoader, System.Collections.Generic.IReadOnlyList<TKey>! keys) -> System.IDisposable!
virtual GreenDonut.DataLoaderDiagnosticEventListener.ResolvedTaskFromCache(GreenDonut.IDataLoader! dataLoader, GreenDonut.TaskCacheKey cacheKey, System.Threading.Tasks.Task! task) -> void
*REMOVED*abstract GreenDonut.DataLoaderBase<TKey, TValue>.FetchAsync(System.Collections.Generic.IReadOnlyList<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<GreenDonut.Result<TValue>>!>
*REMOVED*GreenDonut.Batch<TKey, TValue>
*REMOVED*GreenDonut.Batch<TKey, TValue>.Batch() -> void
*REMOVED*GreenDonut.Batch<TKey, TValue>.Get(TKey key) -> System.Threading.Tasks.TaskCompletionSource<TValue>!
*REMOVED*GreenDonut.Batch<TKey, TValue>.Keys.get -> System.Collections.Generic.IReadOnlyList<TKey>!
*REMOVED*GreenDonut.Batch<TKey, TValue>.Size.get -> int
*REMOVED*GreenDonut.Batch<TKey, TValue>.StartDispatchingAsync(System.Func<System.Threading.Tasks.ValueTask>! dispatch) -> System.Threading.Tasks.ValueTask
*REMOVED*GreenDonut.Batch<TKey, TValue>.TryGetOrCreate(TKey key, out System.Threading.Tasks.TaskCompletionSource<TValue>? promise) -> bool
*REMOVED*GreenDonut.CacheKeyResolverDelegate<TKey>
*REMOVED*GreenDonut.DataLoaderBase<TKey, TValue>.DataLoaderBase(GreenDonut.IBatchScheduler! batchScheduler, GreenDonut.DataLoaderOptions<TKey>? options) -> void
*REMOVED*GreenDonut.DataLoaderBase<TKey, TValue>.DataLoaderBase(GreenDonut.IBatchScheduler! batchScheduler) -> void
*REMOVED*GreenDonut.DataLoaderBase<TKey, TValue>.LoadAsync(System.Collections.Generic.IReadOnlyCollection<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
*REMOVED*GreenDonut.DataLoaderBase<TKey, TValue>.LoadAsync(System.Threading.CancellationToken cancellationToken, params TKey[]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
*REMOVED*GreenDonut.DataLoaderBase<TKey, TValue>.LoadAsync(TKey key, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TValue>!
*REMOVED*GreenDonut.DataLoaderOptions<TKey>
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.Batch.get -> bool
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.Batch.set -> void
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.Cache.get -> GreenDonut.ITaskCache?
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.Cache.set -> void
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.CacheKeyResolver.get -> GreenDonut.CacheKeyResolverDelegate<TKey>?
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.CacheKeyResolver.set -> void
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.CacheSize.get -> int
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.CacheSize.set -> void
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.Caching.get -> bool
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.Caching.set -> void
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.DataLoaderOptions() -> void
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.MaxBatchSize.get -> int
*REMOVED*GreenDonut.DataLoaderOptions<TKey>.MaxBatchSize.set -> void
*REMOVED*GreenDonut.DataLoaderOptionsExtensions
*REMOVED*GreenDonut.IDataLoader.LoadAsync(object! key, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<object?>!
*REMOVED*GreenDonut.IDataLoader.LoadAsync(System.Collections.Generic.IReadOnlyCollection<object!>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
*REMOVED*GreenDonut.IDataLoader.LoadAsync(System.Threading.CancellationToken cancellationToken, params object![]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
*REMOVED*GreenDonut.IDataLoader<TKey, TValue>.LoadAsync(System.Collections.Generic.IReadOnlyCollection<TKey>! keys, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
*REMOVED*GreenDonut.IDataLoader<TKey, TValue>.LoadAsync(System.Threading.CancellationToken cancellationToken, params TKey[]! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
*REMOVED*GreenDonut.IDataLoader<TKey, TValue>.LoadAsync(TKey key, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TValue>!
*REMOVED*GreenDonut.ITaskCache.Remove(object! key) -> void
*REMOVED*GreenDonut.ITaskCache.TryAdd(object! key, object! value) -> bool
*REMOVED*GreenDonut.ITaskCache.TryGetValue(object! key, out object? value) -> bool
*REMOVED*GreenDonut.RequestBufferedEventHandler
*REMOVED*GreenDonut.Result<TValue>.IsError.get -> bool
*REMOVED*static GreenDonut.DataLoaderExtensions.LoadAsync(this GreenDonut.IDataLoader! dataLoader, System.Collections.Generic.IReadOnlyCollection<object!>! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object?>!>!
*REMOVED*static GreenDonut.DataLoaderExtensions.LoadAsync<TKey, TValue>(this GreenDonut.IDataLoader<TKey, TValue>! dataLoader, System.Collections.Generic.IReadOnlyCollection<TKey>! keys) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TValue>!>!
*REMOVED*static GreenDonut.DataLoaderExtensions.LoadAsync<TKey, TValue>(this GreenDonut.IDataLoader<TKey, TValue>! dataLoader, TKey key) -> System.Threading.Tasks.Task<TValue>!
*REMOVED*static GreenDonut.DataLoaderOptionsExtensions.GetBatchSize<TKey>(this GreenDonut.DataLoaderOptions<TKey>! options) -> int
