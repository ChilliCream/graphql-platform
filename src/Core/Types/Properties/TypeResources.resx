<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BooleanType_Description" xml:space="preserve">
    <value>The `Boolean` scalar type represents `true` or `false`.</value>
  </data>
  <data name="ByteType_Description" xml:space="preserve">
    <value>The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255.</value>
  </data>
  <data name="DataLoaderRegistry_KeyNullOrEmpty" xml:space="preserve">
    <value>The DataLoader key cannot be null or empty.</value>
  </data>
  <data name="DataLoaderResolverContextExtensions_RegistryIsNull" xml:space="preserve">
    <value>No DataLoader registry was registerd with your dependency injection.</value>
  </data>
  <data name="DataLoaderResolverContextExtensions_UnableToRegister" xml:space="preserve">
    <value>Unable to register a DataLoader with your DataLoader registry.</value>
  </data>
  <data name="DateTimeType_Description" xml:space="preserve">
    <value>The `DateTime` scalar represents an ISO-8601 compliant date time type.</value>
  </data>
  <data name="DateType_Description" xml:space="preserve">
    <value>The `Date` scalar represents an ISO-8601 compliant date type.</value>
  </data>
  <data name="DecimalType_Description" xml:space="preserve">
    <value>The built-in `Decimal` scalar type.</value>
  </data>
  <data name="DirectiveType_UnableToConvert" xml:space="preserve">
    <value>Unable to convert the argument value to the specified type.</value>
  </data>
  <data name="Edge_CursorIsNull" xml:space="preserve">
    <value>The cursor cannot be null or empty.</value>
  </data>
  <data name="EnumType_NoValues" xml:space="preserve">
    <value>The enum type `{0}` has no values.</value>
  </data>
  <data name="FloatType_Description" xml:space="preserve">
    <value>The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).</value>
  </data>
  <data name="IdType_Description" xml:space="preserve">
    <value>The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.</value>
  </data>
  <data name="InputObjectType_CannotParseLiteral" xml:space="preserve">
    <value>The input object type can only parse object value literals.</value>
  </data>
  <data name="InputObjectType_NoFields" xml:space="preserve">
    <value>The input object `{0}` does not have any fields.</value>
  </data>
  <data name="IntType_Description" xml:space="preserve">
    <value>The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.</value>
  </data>
  <data name="LongType_Description" xml:space="preserve">
    <value>The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.</value>
  </data>
  <data name="MultiplierPathType_Description" xml:space="preserve">
    <value>The multiplier path scalar represents a valid GraphQL multiplier path string.</value>
  </data>
  <data name="NameType_Description" xml:space="preserve">
    <value>The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types.</value>
  </data>
  <data name="Name_Cannot_BeEmpty" xml:space="preserve">
    <value>The multiplier path scalar represents a valid GraphQL multiplier path string.</value>
  </data>
  <data name="Reflection_MemberMust_BeMethodOrProperty" xml:space="preserve">
    <value>The member expression must specify a property or method that is public and that belongs to the type {0}</value>
  </data>
  <data name="Scalar_Cannot_Deserialize" xml:space="preserve">
    <value>{0} cannot deserialize the given value.</value>
  </data>
  <data name="Scalar_Cannot_ParseLiteral" xml:space="preserve">
    <value>{0} cannot parse the given literal of type `{1}`.</value>
  </data>
  <data name="Scalar_Cannot_ParseValue" xml:space="preserve">
    <value>{0} cannot parse the given value of type `{1}`.</value>
  </data>
  <data name="Scalar_Cannot_Serialize" xml:space="preserve">
    <value>{0} cannot serialize the given value.</value>
  </data>
  <data name="ShortType_Description" xml:space="preserve">
    <value>The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1.</value>
  </data>
  <data name="StringType_Description" xml:space="preserve">
    <value>The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.</value>
  </data>
  <data name="String_Argument_NullOrEmpty" xml:space="preserve">
    <value>The `{0}` cannot be null or empty.</value>
  </data>
  <data name="TypeExtensions_InvalidStructure" xml:space="preserve">
    <value>The type structure is invalid.</value>
  </data>
  <data name="TypeExtensions_KindIsNotSupported" xml:space="preserve">
    <value>The specified type kind is not supported.</value>
  </data>
  <data name="TypeExtensions_NoListType" xml:space="preserve">
    <value>The specified type is not a valid list type.</value>
  </data>
  <data name="TypeExtensions_TypeIsNotOfT" xml:space="preserve">
    <value>The given type is not a {0}.</value>
  </data>
  <data name="TypeResourceHelper_TypeNameEmptyOrNull" xml:space="preserve">
    <value>The typeName mustn't be null or empty.</value>
  </data>
</root>