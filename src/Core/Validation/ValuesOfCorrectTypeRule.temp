using System.Collections.Immutable;
using System.Linq;
using HotChocolate.Language;
using HotChocolate.Types;

namespace HotChocolate.Validation
{
    internal sealed class ValuesOfCorrectTypeVisitor
        : QueryVisitorErrorBase
    {
        public ValuesOfCorrectTypeVisitor(ISchema schema)
            : base(schema)
        {
        }

        protected override void VisitOperationDefinition(
            OperationDefinitionNode operation,
            ImmutableStack<ISyntaxNode> path)
        {

        }

        protected override void VisitField(
            FieldNode field,
            IType type,
            ImmutableStack<Language.ISyntaxNode> path)
        {
            IOutputField f;
            f.Arguments
        }

        protected override void VisitDirective(
            DirectiveNode directive,
            ImmutableStack<ISyntaxNode> path)
        {

        }

        private void VisitArgument(
            ISyntaxNode node,
            IFieldCollection<IInputField> arguments,
            string argumentName,
            IValueNode argumentValue,
            ImmutableStack<ISyntaxNode> path)
        {
            if (arguments.TryGetField(argumentName, out IInputField argument))
            {
                if (argumentValue is VariableNode)
                {

                }
                else if (!argument.Type.IsInstanceOfType(argumentValue))
                {
                    Errors.Add(new ValidationError("", node));
                }
            }
        }

        private IType GetVariableType(string variableName, ImmutableStack<ISyntaxNode> path)
        {
            ImmutableStack<ISyntaxNode> current = path;

            while (current.Any())
            {
                current = current.Pop(out ISyntaxNode node);
                if (node is OperationDefinitionNode operation)
                {
                    VariableDefinitionNode variable = operation
                        .VariableDefinitions.FirstOrDefault(
                            t => t.Variable.Name.Value == variableName);
                    if (variable != null)
                    {
                        string typeName = variable.Type.NamedType().Name.Value;
                        return Schema.GetType<INamedType>(typeName);
                    }
                }
            }

            return null;
        }
    }
}
