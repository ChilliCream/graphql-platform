schema {
  query: Query
}

type Foo {
  bool: Boolean!
  comparable: Short!
  comparableEnumerable: [Short!]
  object: FooBar
}

type FooBar {
  nested: String
}

type Query {
  foo: String
}

type Test {
  foo(test: FooFilterTest): [Foo!]!
}

input FooBarFilterTest {
  AND: [FooBarFilterTest!]
  nested: String
  nested_contains: String
  nested_ends_with: String
  nested_in: [String]
  nested_not: String
  nested_not_contains: String
  nested_not_ends_with: String
  nested_not_in: [String]
  nested_not_starts_with: String
  nested_starts_with: String
  OR: [FooBarFilterTest!]
}

input FooFilterTest {
  AND: [FooFilterTest!]
  bool: Boolean
  bool_not: Boolean
  comparable: Short
  comparableEnumerable_all: ISingleFilterOfInt16FilterTest
  comparableEnumerable_any: Boolean
  comparableEnumerable_none: ISingleFilterOfInt16FilterTest
  comparableEnumerable_some: ISingleFilterOfInt16FilterTest
  comparable_gt: Short
  comparable_gte: Short
  comparable_in: [Short!]
  comparable_lt: Short
  comparable_lte: Short
  comparable_not: Short
  comparable_not_gt: Short
  comparable_not_gte: Short
  comparable_not_in: [Short!]
  comparable_not_lt: Short
  comparable_not_lte: Short
  object: FooBarFilterTest
  OR: [FooFilterTest!]
}

input ISingleFilterOfInt16FilterTest {
  AND: [ISingleFilterOfInt16FilterTest!]
  OR: [ISingleFilterOfInt16FilterTest!]
  TESTelement: Short
  TESTelement_gt: Short
  TESTelement_gte: Short
  TESTelement_in: [Short!]
  TESTelement_lt: Short
  TESTelement_lte: Short
  TESTelement_not: Short
  TESTelement_not_gt: Short
  TESTelement_not_gte: Short
  TESTelement_not_in: [Short!]
  TESTelement_not_lt: Short
  TESTelement_not_lte: Short
}

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
