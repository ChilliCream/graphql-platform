schema {
  query: Query
}

type Query {
  foo: String
}

input FooInput {
  AND: [FooInput!]
  barDecimal: Decimal!
  barDecimal_gt: Decimal!
  barDecimal_gte: Decimal!
  barDecimal_in: [Decimal!]
  barDecimal_lt: Decimal!
  barDecimal_lte: Decimal!
  barDouble: Float!
  barDouble_gt: Float!
  barDouble_gte: Float!
  barDouble_in: [Float!]
  barDouble_lt: Float!
  barDouble_lte: Float!
  barFloat: Float!
  barFloat_gt: Float!
  barFloat_gte: Float!
  barFloat_in: [Float!]
  barFloat_lt: Float!
  barFloat_lte: Float!
  barInt: Int!
  barInt_gt: Int!
  barInt_gte: Int!
  barInt_in: [Int!]
  barInt_lt: Int!
  barInt_lte: Int!
  barLong: Long!
  barLong_gt: Long!
  barLong_gte: Long!
  barLong_in: [Long!]
  barLong_lt: Long!
  barLong_lte: Long!
  OR: [FooInput!]
}

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http:\/\/en.wikipedia.org\/wiki\/IEEE_floating_point)."
scalar Float

"The built-in `Decimal` scalar type."
scalar Decimal
