schema {
  query: Query
}

type FooPayload {
  guidId: Uuid!
  intId: Int!
  longId: Long!
  stringId: String
}

type Query {
  foo(input: FooInput): FooPayload
  guidId(id: ID!): Uuid!
  intId(id: ID!): Int!
  longId(id: ID!): Long!
  stringId(id: ID): String
}

input FooInput {
  guidId: ID!
  intId: ID!
  longId: ID!
  stringId: ID
}

"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
scalar ID

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

scalar Uuid
