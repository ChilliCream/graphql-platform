<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompleteCompositeType_UnknownSchemaType" xml:space="preserve">
    <value>Could not resolve the actual object type from `{0}` for the abstract type `{1}`.</value>
  </data>
  <data name="CompleteLeadType_UndefinedError" xml:space="preserve">
    <value>Undefined scalar field serialization error.</value>
  </data>
  <data name="CompleteLeafType_CannotConvertValue" xml:space="preserve">
    <value>The internal resolver value could not be converted to a valid value of `{0}`.</value>
  </data>
  <data name="CompleteList_ListTypeInvalid" xml:space="preserve">
    <value>A list values must implement `{0}` in order to be completed.</value>
  </data>
  <data name="GetOperation_InvalidOperationName" xml:space="preserve">
    <value>The specified operation `{0}` does not exist.</value>
  </data>
  <data name="GetOperation_MultipleOperations" xml:space="preserve">
    <value>Only queries that contain one operation can be executed without specifying the opartion name.</value>
  </data>
  <data name="HandleNonNullViolation_Message" xml:space="preserve">
    <value>Cannot return null for non-nullable field.</value>
  </data>
  <data name="QueryExecutor_NoResult" xml:space="preserve">
    <value>The execution pipeline yielded no query result.</value>
  </data>
  <data name="ResolveObjectType_TypeNotSupported" xml:space="preserve">
    <value>The specified type is not supported.</value>
  </data>
  <data name="ResolverContext_ArgumentConversion" xml:space="preserve">
    <value>Could not convert argument `{0}` from `{1}` to `{2}`.</value>
  </data>
  <data name="ResolverContext_CustomPropertyNotExists" xml:space="preserve">
    <value>The specified property does not exist.</value>
  </data>
  <data name="ResolveRootType_DoesNotExist" xml:space="preserve">
    <value>The specified root type `{0}` does not exist.</value>
  </data>
  <data name="ResolverTask_ErrorMessageIsNull" xml:space="preserve">
    <value>The error message cannot be null or empty.</value>
  </data>
  <data name="ValidateQueryMiddleware_NoDocument" xml:space="preserve">
    <value>The validation middleware expects the query document to be parsed.</value>
  </data>
  <data name="VariableCollection_VariableNotDeclared" xml:space="preserve">
    <value>The specified variable was not declared.</value>
  </data>
  <data name="QueryExecutorExtensions_QueryIsNullOrEmpty" xml:space="preserve">
    <value>The query mustn't be null or empty.</value>
  </data>
  <data name="SubscriptionExecutionStrategy_NoEventRegistry" xml:space="preserve">
    <value>Register a event registry as service in order to use subsciptions.</value>
  </data>
  <data name="ExecuteOperationMiddleware_InComplete" xml:space="preserve">
    <value>The execute operation middleware expects the query document to be parsed and the operation to be resolved.</value>
  </data>
  <data name="ParseQueryMiddleware_InComplete" xml:space="preserve">
    <value>The parse query middleware expects a valid query request.</value>
  </data>
  <data name="Subscriptions_SingleRootField" xml:space="preserve">
    <value>Subscriptions must have one and only one root field.</value>
  </data>
  <data name="ErrorHandler_ErrorIsNull" xml:space="preserve">
    <value>Unexpected Execution Error</value>
  </data>
  <data name="ErrorHandler_UnexpectedError" xml:space="preserve">
    <value>Unexpected Execution Error</value>
  </data>
  <data name="FieldCollector_FieldNotFound" xml:space="preserve">
    <value>Could not resolve the specified field.</value>
  </data>
  <data name="DirectiveCollectionExtensions_IfNotBoolean" xml:space="preserve">
    <value>The {0} if-argument value has to be a 'Boolean'.</value>
  </data>
  <data name="DirectiveCollectionExtensions_NotValid" xml:space="preserve">
    <value>The {0}-directive is missing the if-argument.</value>
  </data>
  <data name="ExecutionStrategyResolver_NotSupported" xml:space="preserve">
    <value>Operation not supported.</value>
  </data>
  <data name="MaxComplexityMiddleware_NotAllowed" xml:space="preserve">
    <value>The operation that shall be executed has a complexity of {0}.
The maximum allowed query complexity is {1}.</value>
  </data>
  <data name="MaxComplexityMiddleware_Prerequisite" xml:space="preserve">
    <value>The max complexity middleware expects the query document to be parsed and the operation to be resolved.</value>
  </data>
  <data name="QueryError_ArgumentIsNull" xml:space="preserve">
    <value>The argument name mustn't be null or empty.</value>
  </data>
  <data name="QueryError_MessageIsNull" xml:space="preserve">
    <value>The error message mustn't be null or empty.</value>
  </data>
  <data name="QueryError_VariableIsNull" xml:space="preserve">
    <value>The variable name mustn't be null or empty.</value>
  </data>
  <data name="RequestTimeoutMiddleware_Timeout" xml:space="preserve">
    <value>Execution timeout has been exceeded.</value>
  </data>
  <data name="BatchColVars_NoCompatibleType" xml:space="preserve">
    <value>Unable to find a compatible input type for the exported object type.</value>
  </data>
  <data name="BatchQueryExec_CannotSerialize" xml:space="preserve">
    <value>Could not serialize the specified variable.</value>
  </data>
  <data name="CachedQuery_Key_Is_Null" xml:space="preserve">
    <value>The query key mustn't be null or empty.</value>
  </data>
  <data name="ParseQuery_Middleware_QueryTypeNotSupported" xml:space="preserve">
    <value>The specified query type is not supported.</value>
  </data>
  <data name="Read_PQ_Middleware_Incomplete" xml:space="preserve">
    <value>The read persisted query middleware expects a valid query request.</value>
  </data>
  <data name="Read_PQ_Middleware_QueryNotFound" xml:space="preserve">
    <value>PersistedQueryNotFound</value>
  </data>
  <data name="Read_PQ_Middleware_QueryTypeNotSupported" xml:space="preserve">
    <value>The specified query type is not supported.</value>
  </data>
  <data name="ResolverContext_Parent_InvalidCast" xml:space="preserve">
    <value>Could not cast the source object to `{0}`.</value>
  </data>
  <data name="ToJson_OnlyQueryResultsSupported" xml:space="preserve">
    <value>Only query results are supported.</value>
  </data>
  <data name="VarRewriter_CannotConvert" xml:space="preserve">
    <value>Unable to convert the specified variable value.</value>
  </data>
  <data name="VarRewriter_UnknownField" xml:space="preserve">
    <value>Unknown field.</value>
  </data>
  <data name="Write_PQ_Middleware_Incomplete" xml:space="preserve">
    <value>The write persisted query middleware expects a valid query request.</value>
  </data>
</root>