 public interface IDataLoaderSession
    {
        object LoadAsync<TKey, TValue>(string key, FetchData<TKey, TValue> fetchData);

        ILookup<string, object> s





        IDataLoader = ctx.DataLoader<int, ICharacter>("foo", ctx.Service().GetCharacters));

IDataLoader = ctx.DataLoader<int, ICharacter>(ctx.Service().GetCharacters));

public User Resolver([DataLoader("key")]IDataLoader loader)

// schema data loader
        public User Resolver([DataLoader("key")]Func<int, Task> loadCharacter)

public Task Resolver(IResolverContext context, IRepository repository, int userId)
        {
            // adhoc
            IDataLoader loader = context.DataLoader<int, ICharacter>("foo", repository.GetCharacters));
            return loader.LoadAsync(userId);
        }
    }
