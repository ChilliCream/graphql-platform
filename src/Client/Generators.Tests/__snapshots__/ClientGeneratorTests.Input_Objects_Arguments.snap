﻿using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public class GetFoo
        : IGetFoo
    {
        public GetFoo(
            string? foo)
        {
            Foo = foo;
        }

        public string? Foo { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public class FooInput
    {
        public BarInput? Bar { get; set; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public class FooInputSerializer
        : IValueSerializer
    {
        private readonly IValueSerializer _barInputSerializer;

        public FooInputSerializer(IEnumerable<IValueSerializer> serializers)
        {
            IReadOnlyDictionary<string, IValueSerializer> map = serializers.ToDictionary();

            if (!map.TryGetValue("BarInput", out IValueSerializer serializer))
            {
                throw new ArgumentException(
                    "There is no serializer specified for `BarInput`.",
                    nameof(serializers));
            }
            _barInputSerializer = serializer;
        }

        public string Name { get; } = "FooInput";

        public ValueKind Kind { get; } = ValueKind.InputObject;

        public Type ClrType => typeof(FooInput);

        public Type SerializationType => typeof(IReadOnlyDictionary<string, object>);

        public object Serialize(object value)
        {
            if(value is null)
            {
                return null;
            }

            var input = (FooInput)value;

            var map = new Dictionary<string, object>();
            map["bar"] = Serialize(input.Bar, _barInputSerializer);
            return map;
        }

        public object Serialize(object value, IValueSerializer serializer)
        {
            if (value is IList list)
            {
                var serializedList = new List<object>();

                foreach (object element in list)
                {
                    serializedList.Add(Serialize(value, serializer));
                }

                return serializedList;
            }

            return serializer.Serialize(value);
        }

        public object Deserialize(object value)
        {
            throw new NotSupportedException(
                "Deserializing input values is not supported.");
        }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public interface IGetFoo
    {
        string? Foo { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Text.Json;
using StrawberryShake;
using StrawberryShake.Http;

namespace StrawberryShake.Client
{
    public class GetFooResultParser
        : JsonResultParserBase<IGetFoo>
    {
        private readonly IValueSerializer _stringSerializer;

        public GetFooResultParser(IEnumerable<IValueSerializer> serializers)
        {
            IReadOnlyDictionary<string, IValueSerializer> map = serializers.ToDictionary();

            if (!map.TryGetValue("String", out IValueSerializer? serializer))
            {
                throw new ArgumentException(
                    "There is no serializer specified for `String`.",
                    nameof(serializers));
            }
            _stringSerializer = serializer;
        }

        protected override IGetFoo ParserData(JsonElement data)
        {
            return new GetFoo
            (
                DeserializeNullableString(data, "foo")
            );

        }

        private string? DeserializeNullableString(JsonElement obj, string fieldName)
        {
            if (!obj.TryGetProperty(fieldName, out JsonElement value))
            {
                return null;
            }

            if (value.ValueKind == JsonValueKind.Null)
            {
                return null;
            }

            return (string?)_stringSerializer.Deserialize(value.GetString())!;
        }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public class GetFooOperation
        : IOperation<IGetFoo>
    {
        private bool _modified_input;

        private FooInput _value_input;

        public string Name => "getFoo";

        public IDocument Document => Queries.Default;

        public Type ResultType => typeof(IGetFoo);

        public FooInput Input
        {
            get => _value_input;
            set
            {
                _value_input = value;
                _modified_input = true;
            }
        }

        public IReadOnlyList<VariableValue> GetVariableValues()
        {
            var variables = new List<VariableValue>();

            if(_modified_input)
            {
                variables.Add(new VariableValue("input", "FooInput", Input));
            }

            return variables;
        }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public interface ISchemaClient
    {
        Task<IOperationResult<IGetFoo>> GetFooAsync(
            FooInput input);

        Task<IOperationResult<IGetFoo>> GetFooAsync(
            FooInput input,
            CancellationToken cancellationToken);
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public class SchemaClient
        : ISchemaClient
    {
        private readonly IOperationExecutor _executor;

        public SchemaClient(IOperationExecutor executor)
        {
            _executor = executor ?? throw new ArgumentNullException(nameof(executor));
        }

        public Task<IOperationResult<IGetFoo>> GetFooAsync(
            FooInput input) =>
            GetFooAsync(input, CancellationToken.None);

        public Task<IOperationResult<IGetFoo>> GetFooAsync(
            FooInput input,
            CancellationToken cancellationToken)
        {
            if (input is null)
            {
                throw new ArgumentNullException(nameof(input));
            }

            return _executor.ExecuteAsync(
                new GetFooOperation {Input = input },
                cancellationToken);
        }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using StrawberryShake;
using StrawberryShake.Http;
using StrawberryShake.Http.Pipelines;
using StrawberryShake.Serializers;

namespace StrawberryShake.Client
{
    public static class SchemaClientServiceCollectionExtensions
    {
        public static IServiceCollection AddDefaultScalarSerializers(
            this IServiceCollection serviceCollection)
        {
            if (serviceCollection is null)
            {
                throw new ArgumentNullException(nameof(serviceCollection));
            }

            foreach (IValueSerializer serializer in ValueSerializers.All)
            {
                serviceCollection.AddSingleton(serializer);
            }

            return serviceCollection;
        }

        public static IServiceCollection AddSchemaClient(
            this IServiceCollection serviceCollection)
        {
            if (serviceCollection is null)
            {
                throw new ArgumentNullException(nameof(serviceCollection));
            }

            serviceCollection.AddSingleton<ISchemaClient, SchemaClient>();
            serviceCollection.AddSingleton(sp =>
                HttpOperationExecutorBuilder.New()
                    .AddServices(sp)
                    .SetClient(ClientFactory)
                    .SetPipeline(PipelineFactory)
                    .Build());

            serviceCollection.AddEnumSerializers();
            serviceCollection.AddResultParsers();
            serviceCollection.TryAddDefaultOperationSerializer();
            serviceCollection.TryAddDefaultHttpPipeline();

            return serviceCollection;
        }

        private static IServiceCollection AddEnumSerializers(
            this IServiceCollection serviceCollection)
        {
            return serviceCollection;
        }

        private static IServiceCollection AddResultParsers(
            this IServiceCollection serviceCollection)
        {
            serviceCollection.AddSingleton<IResultParser, GetFooResultParser>();
            return serviceCollection;
        }

        private static IServiceCollection TryAddDefaultOperationSerializer(
            this IServiceCollection serviceCollection)
        {
            serviceCollection.TryAddSingleton<IOperationSerializer, JsonOperationSerializer>();
            return serviceCollection;
        }

        private static IServiceCollection TryAddDefaultHttpPipeline(
            this IServiceCollection serviceCollection)
        {
            serviceCollection.TryAddSingleton<OperationDelegate>(
                sp => HttpPipelineBuilder.New()
                    .Use<CreateStandardRequestMiddleware>()
                    .Use<SendHttpRequestMiddleware>()
                    .Use<ParseSingleResultMiddleware>()
                    .Build(sp));
            return serviceCollection;
        }

        private static Func<HttpClient> ClientFactory(IServiceProvider services)
        {
            var clientFactory = services.GetRequiredService<IHttpClientFactory>();
            return () => clientFactory.CreateClient("SchemaClient");
        }

        private static OperationDelegate PipelineFactory(IServiceProvider services)
        {
            return services.GetRequiredService<OperationDelegate>();
        }
    }
}


