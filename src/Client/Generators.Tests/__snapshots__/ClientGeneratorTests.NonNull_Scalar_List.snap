﻿using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public class GetBars
        : IGetBars
    {
        public GetBars(
            IFoo foo)
        {
            Foo = foo;
        }

        public IFoo Foo { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public class Foo
        : IFoo
    {
        public Foo(
            IReadOnlyList<string> bars)
        {
            Bars = bars;
        }

        public IReadOnlyList<string> Bars { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public interface IGetBars
    {
        IFoo Foo { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public interface IFoo
    {
        IReadOnlyList<string> Bars { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Text.Json;
using StrawberryShake;
using StrawberryShake.Http;

namespace StrawberryShake.Client
{
    public class GetBarsResultParser
        : JsonResultParserBase<IGetBars>
    {

        public GetBarsResultParser(IEnumerable<IValueSerializer> serializers)
        {
            IReadOnlyDictionary<string, IValueSerializer> map = serializers.ToDictionary();
        }

        protected override IGetBars ParserData(JsonElement data)
        {
            return new GetBars
            (
                ParseGetBarsFoo(data, "foo")
            );

        }

        private IFoo ParseGetBarsFoo(
            JsonElement parent,
            string field)
        {
            JsonElement obj = parent.GetProperty(field);

            return new Foo
            (
                DeserializeListOfString(obj, "bars")
            );
        }

        private IReadOnlyList<string> DeserializeListOfString(JsonElement obj, string fieldName)
        {
            JsonElement list = obj.GetProperty(fieldName);
            int listLength = list.GetArrayLength();
            var listList = new string[listLength];

            for (int i = 0; i < listLength; i++)
            {
                JsonElement element = list[i];
                    list[i] = (string)_stringSerializer.Serialize(element.GetString())!;
            }
        }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public class GetBarsOperation
        : IOperation<IGetBars>
    {
        public string Name => "getBars";

        public IDocument Document => Queries.Default;

        public Type ResultType => typeof(IGetBars);

        public IReadOnlyList<VariableValue> GetVariableValues()
        {
            return Array.Empty<VariableValue>();
        }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public interface ISchemaClient
    {
        Task<IOperationResult<IGetBars>> GetBarsAsync();

        Task<IOperationResult<IGetBars>> GetBarsAsync(
            CancellationToken cancellationToken);
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using StrawberryShake;

namespace StrawberryShake.Client
{
    public class SchemaClient
        : ISchemaClient
    {
        private readonly IOperationExecutor _executor;

        public SchemaClient(IOperationExecutor executor)
        {
            _executor = executor ?? throw new ArgumentNullException(nameof(executor));
        }

        public Task<IOperationResult<IGetBars>> GetBarsAsync() =>
            GetBarsAsync(CancellationToken.None);

        public Task<IOperationResult<IGetBars>> GetBarsAsync(
            CancellationToken cancellationToken)
        {

            return _executor.ExecuteAsync(
                new GetBarsOperation(),
                cancellationToken);
        }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using StrawberryShake;
using StrawberryShake.Http;
using StrawberryShake.Http.Pipelines;
using StrawberryShake.Serializers;

namespace StrawberryShake.Client
{
    public static class SchemaClientServiceCollectionExtensions
    {
        public static IServiceCollection AddDefaultScalarSerializers(
            this IServiceCollection serviceCollection)
        {
            if (serviceCollection is null)
            {
                throw new ArgumentNullException(nameof(serviceCollection));
            }

            foreach (IValueSerializer serializer in ValueSerializers.All)
            {
                serviceCollection.AddSingleton(serializer);
            }

            return serviceCollection;
        }

        public static IServiceCollection AddSchemaClient(
            this IServiceCollection serviceCollection)
        {
            if (serviceCollection is null)
            {
                throw new ArgumentNullException(nameof(serviceCollection));
            }

            serviceCollection.AddSingleton<ISchemaClient, SchemaClient>();
            serviceCollection.AddSingleton(sp =>
                HttpOperationExecutorBuilder.New()
                    .AddServices(sp)
                    .SetClient(ClientFactory)
                    .SetPipeline(PipelineFactory)
                    .Build());

            serviceCollection.AddEnumSerializers();
            serviceCollection.AddResultParsers();
            serviceCollection.TryAddDefaultOperationSerializer();
            serviceCollection.TryAddDefaultHttpPipeline();

            return serviceCollection;
        }

        private static IServiceCollection AddEnumSerializers(
            this IServiceCollection serviceCollection)
        {
            return serviceCollection;
        }

        private static IServiceCollection AddResultParsers(
            this IServiceCollection serviceCollection)
        {
            serviceCollection.AddSingleton<IResultParser, GetBarsResultParser>();
            return serviceCollection;
        }

        private static IServiceCollection TryAddDefaultOperationSerializer(
            this IServiceCollection serviceCollection)
        {
            serviceCollection.TryAddSingleton<IOperationSerializer, JsonOperationSerializer>();
            return serviceCollection;
        }

        private static IServiceCollection TryAddDefaultHttpPipeline(
            this IServiceCollection serviceCollection)
        {
            serviceCollection.TryAddSingleton<OperationDelegate>(
                sp => HttpPipelineBuilder.New()
                    .Use<CreateStandardRequestMiddleware>()
                    .Use<SendHttpRequestMiddleware>()
                    .Use<ParseSingleResultMiddleware>()
                    .Build(sp));
            return serviceCollection;
        }

        private static Func<HttpClient> ClientFactory(IServiceProvider services)
        {
            var clientFactory = services.GetRequiredService<IHttpClientFactory>();
            return () => clientFactory.CreateClient("SchemaClient");
        }

        private static OperationDelegate PipelineFactory(IServiceProvider services)
        {
            return services.GetRequiredService<OperationDelegate>();
        }
    }
}


