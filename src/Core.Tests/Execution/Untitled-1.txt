
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using HotChocolate;
using HotChocolate.Resolvers;
using HotChocolate.Types;
namespace HotChocolate.Resolvers.CodeGeneration
{
    public static class ___CompiledResolvers__d0e59e6e5cbc4aea851a27631a2be906
    {
        /* @AppendOnInvokeGenSyncWithResult */
        public static OnInvokeResolverAsync _0 = (ctx, dir, exec, ct) =>
        {
            var resolver = ctx.Resolver<HotChocolate.Execution.QueryDirectiveTests.AppendDirectiveMiddleware>();
            Func<Task<object>> f = async () =>
            {
                var v0_result = await exec() as System.String;
                var v1_s = dir.GetArgument<System.String>("s");
                try
                {
                    return resolver.OnInvokeResolverWithResult(v0_result, v1_s);
                }
                catch (HotChocolate.Execution.QueryException ex)
                {
                    return ex.Errors;
                }
            };
            return f();
        };
        /* @AppendOnInvokeGenSync */
        public static OnInvokeResolverAsync _1 = (ctx, dir, exec, ct) =>
        {
            var resolver = ctx.Resolver<HotChocolate.Execution.QueryDirectiveTests.AppendDirectiveMiddleware>();
            var v0_s = dir.GetArgument<System.String>("s");
            try
            {
                return System.Threading.Tasks.Task.FromResult<object>(resolver.OnInvokeResolver(v0_s));
            }
            catch (HotChocolate.Execution.QueryException ex)
            {
                return System.Threading.Tasks.Task.FromResult<object>(ex.Errors);
            }

        };
        /* @AppendOnInvokeGenAsyncWithResolver */
        public static OnInvokeResolverAsync _2 = (ctx, dir, exec, ct) =>
        {
            var v0_resolver = new System.Func<System.Threading.Tasks.Task<System.String>>(async () => await exec());
            var v1_s = dir.GetArgument<System.String>("s");
            var resolver = ctx.Resolver<HotChocolate.Execution.QueryDirectiveTests.AppendDirectiveMiddleware>();
            Func<Task<object>> f = async () =>
            {
                try
                {
                    return await resolver.OnInvokeResolverAsync(v0_resolver, v1_s);
                }
                catch (HotChocolate.Execution.QueryException ex)
                {
                    return ex.Errors;
                }
            };
            return f();
        };
    }
}
